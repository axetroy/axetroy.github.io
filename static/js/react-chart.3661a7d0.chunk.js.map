{"version":3,"sources":["webpack:///static/js/react-chart.3661a7d0.chunk.js","webpack:///./~/chart.js/src/chart.js","webpack:///./~/@axetroy/react-chart.js/index.js","webpack:///./~/@axetroy/react-chart.js/lib/react-chart.js","webpack:///./~/chart.js/src/charts/Chart.Bar.js","webpack:///./~/chart.js/src/charts/Chart.Bubble.js","webpack:///./~/chart.js/src/charts/Chart.Doughnut.js","webpack:///./~/chart.js/src/charts/Chart.Line.js","webpack:///./~/chart.js/src/charts/Chart.PolarArea.js","webpack:///./~/chart.js/src/charts/Chart.Radar.js","webpack:///./~/chart.js/src/charts/Chart.Scatter.js","webpack:///./~/chart.js/src/controllers/controller.bar.js","webpack:///./~/chart.js/src/controllers/controller.bubble.js","webpack:///./~/chart.js/src/controllers/controller.doughnut.js","webpack:///./~/chart.js/src/controllers/controller.line.js","webpack:///./~/chart.js/src/controllers/controller.polarArea.js","webpack:///./~/chart.js/src/controllers/controller.radar.js","webpack:///./~/chart.js/src/core/core.animation.js","webpack:///./~/chart.js/src/core/core.canvasHelpers.js","webpack:///./~/chart.js/src/core/core.controller.js","webpack:///./~/chart.js/src/core/core.datasetController.js","webpack:///./~/chart.js/src/core/core.element.js","webpack:///./~/chart.js/src/core/core.helpers.js","webpack:///./~/chart.js/src/core/core.interaction.js","webpack:///./~/chart.js/src/core/core.js","webpack:///./~/chart.js/src/core/core.layoutService.js","webpack:///./~/chart.js/src/core/core.legend.js","webpack:///./~/chart.js/src/core/core.plugin.js","webpack:///./~/chart.js/src/core/core.scale.js","webpack:///./~/chart.js/src/core/core.scaleService.js","webpack:///./~/chart.js/src/core/core.ticks.js","webpack:///./~/chart.js/src/core/core.title.js","webpack:///./~/chart.js/src/core/core.tooltip.js","webpack:///./~/chart.js/src/elements/element.arc.js","webpack:///./~/chart.js/src/elements/element.line.js","webpack:///./~/chart.js/src/elements/element.point.js","webpack:///./~/chart.js/src/elements/element.rectangle.js","webpack:///./~/chart.js/src/platforms/platform.dom.js","webpack:///./~/chart.js/src/platforms/platform.js","webpack:///./~/chart.js/src/scales/scale.category.js","webpack:///./~/chart.js/src/scales/scale.linear.js","webpack:///./~/chart.js/src/scales/scale.linearbase.js","webpack:///./~/chart.js/src/scales/scale.logarithmic.js","webpack:///./~/chart.js/src/scales/scale.radialLinear.js","webpack:///./~/chart.js/src/scales/scale.time.js","webpack:///./~/chartjs-color-string/color-string.js","webpack:///./~/chartjs-color/index.js","webpack:///./~/color-convert/conversions.js","webpack:///./~/color-convert/index.js","webpack:///./~/color-name/index.js","webpack:///./~/lodash.isequal/index.js"],"names":["webpackJsonp","127","module","exports","__webpack_require__","Chart","window","182","442","root","factory","this","__WEBPACK_EXTERNAL_MODULE_0__","__WEBPACK_EXTERNAL_MODULE_1__","__WEBPACK_EXTERNAL_MODULE_2__","__WEBPACK_EXTERNAL_MODULE_3__","modules","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_interopRequireDefault","obj","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","writable","setPrototypeOf","__proto__","_extends","assign","target","arguments","length","source","key","_createClass","defineProperties","props","descriptor","protoProps","staticProps","_react","_react2","_lodash","_lodash2","_lodash3","_lodash4","_Component","getPrototypeOf","apply","__chart__","destroy","nextProps","ctx","_this2","config","type","data","options","Promise","resolve","then","require","ChartJs","bind","catch","oe","_this3","createElement","className","width","height","style","ref","draw","Component","576","Bar","context","577","Bubble","578","Doughnut","579","Line","580","PolarArea","581","Radar","582","defaultConfig","hover","mode","scales","xAxes","position","id","yAxes","tooltips","callbacks","title","label","tooltipItem","xLabel","yLabel","defaults","scatter","controllers","line","Scatter","583","helpers","bar","categoryPercentage","barPercentage","gridLines","offsetGridLines","DatasetController","extend","dataElementType","elements","Rectangle","initialize","chart","datasetIndex","me","meta","getMeta","dataset","getDataset","stack","getStackCount","yScale","getScaleForId","yAxisID","stacks","each","datasets","dsMeta","getDatasetMeta","isDatasetVisible","stacked","indexOf","undefined","push","update","reset","rectangle","index","updateElement","xScale","xAxisID","scaleBase","getBasePixel","rectangleElementOptions","custom","_xScale","_yScale","_datasetIndex","_index","ruler","getRuler","_model","x","calculateBarX","y","calculateBarY","labels","datasetLabel","horizontal","base","calculateBarBase","calculateBarWidth","backgroundColor","getValueAtIndexOrDefault","borderSkipped","borderColor","borderWidth","pivot","getBaseValue","original","Number","currentDs","currentDsMeta","currentVal","Math","min","max","getPixelForValue","stackCount","tickWidth","ticks","categoryWidth","categorySpacing","fullBarWidth","barWidth","barSpacing","barThickness","getStackIndex","j","stackIndex","leftTick","isCombo","sumPos","sumNeg","ds","stackedVal","ease","len","easingDecimal","metaData","canvasHelpers","clipArea","chartArea","isNaN","transition","unclipArea","setHoverStyle","model","hoverBackgroundColor","getHoverColor","hoverBorderColor","hoverBorderWidth","removeHoverStyle","horizontalBar","tooltipItems","calculateBarHeight","originalBase","tickHeight","categoryHeight","fullBarHeight","barHeight","topTick","584","bubble","dataPoint","r","Point","points","point","pointElementOptions","dsIndex","getPixelForDecimal","NaN","radius","getRadius","hitRadius","skip","hoverRadius","dataVal","585","doughnut","animation","animateRotate","animateScale","aspectRatio","legendCallback","text","join","legend","generateLabels","map","arc","arcOpts","fill","stroke","bw","fillStyle","strokeStyle","lineWidth","hidden","onClick","e","legendItem","ilen","cutoutPercentage","rotation","PI","circumference","dataLabel","isArray","slice","pie","clone","Arc","linkScales","noop","getRingIndex","ringIndex","opts","availableWidth","right","left","availableHeight","bottom","top","minSize","offset","startAngle","endAngle","start","cos","sin","end","contains0","contains90","contains180","contains270","cutout","size","getMaxBorderWidth","outerRadius","innerRadius","radiusLength","getVisibleDatasetCount","offsetX","offsetY","total","calculateTotal","animationOpts","centerX","centerY","calculateCircumference","valueAtIndexOrDefault","element","abs","hoverWidth","_chart","586","lineEnabled","getValueOrDefault","showLine","showLines","spanGaps","datasetElementType","lineElementOptions","scale","tension","lineTension","_scale","_children","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","steppedLine","stepped","cubicInterpolationMode","scaleTop","scaleBottom","scaleZero","updateBezierControlPoints","getPointBackgroundColor","pointBackgroundColor","getPointBorderColor","pointBorderColor","getPointBorderWidth","pointBorderWidth","pointOptions","includeOffset","pointRadius","pointHitRadius","calculatePointY","pointStyle","stackedRightValue","getRightValue","rightValue","capControlPoint","pt","controlPoints","area","filter","splineCurveMonotone","splineCurve","previousItem","nextItem","controlPointPreviousX","previous","controlPointPreviousY","controlPointNextX","next","controlPointNextY","capBezierPoints","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","587","polarArea","lineArc","beginAtZero","count","countVisibleElements","xCenter","yCenter","visibleCount","datasetStartAngle","distance","getDistanceFromCenterForValue","resetRadius","588","radar","_loop","getBasePosition","pointPosition","getPointPositionForValue","589","global","duration","easing","onProgress","onComplete","Animation","Element","currentStep","numSteps","render","onAnimationProgress","onAnimationComplete","animationService","frameDuration","animations","dropFrames","request","addAnimation","chartInstance","animationObject","lazy","animating","requestAnimationFrame","cancelAnimation","findIndex","animationWrapper","splice","requestAnimFrame","startDigest","startTime","Date","now","framesToDrop","floor","endTime","590","drawPoint","edgeLength","xOffset","yOffset","toString","drawImage","beginPath","closePath","sqrt","moveTo","lineTo","SQRT2","fillRect","strokeRect","leftX","topY","sideSize","drawRoundedRectangle","save","rect","clip","restore","591","initConfig","configMerge","updateConfig","newOptions","concat","forEach","scaleOptions","tooltip","_options","plugins","platform","types","instances","Controller","item","acquireContext","canvas","uid","_bufferedRender","console","error","notify","retinaScale","bindEvents","responsive","resize","ensureScalesHaveIDs","buildScales","initToolTip","clear","stop","silent","maintainAspectRatio","newWidth","getMaximumWidth","newHeight","getMaximumHeight","newSize","onResize","responsiveAnimationDuration","scalesOptions","xAxisOptions","yAxisOptions","items","dtype","isDefault","scaleType","scaleClass","scaleService","getScaleConstructor","addScalesToLayout","buildOrUpdateControllers","newControllers","controller","updateIndex","resetElements","animationDuration","_data","buildOrUpdateElements","updateLayout","updateDatasets","_bufferedRequest","layoutService","animationOptions","callback","easingFunction","easingEffects","stepDecimal","easeDecimal","easingValue","boxes","box","drawDatasets","getElementAtEvent","Interaction","modes","single","getElementsAtEvent","intersect","getElementsAtXAxis","getElementsAtEventForMode","method","getDatasetAtEvent","_meta","generateLegend","unbindEvents","releaseContext","toBase64Image","toDataURL","Tooltip","_chartInstance","listeners","_listeners","listener","eventHandler","events","addEventListener","removeEventListener","updateHoverStyle","enabled","changed","handleEvent","bufferedRequest","hoverOptions","lastActive","active","onHover","native","arrayEquals","592","listenArrayEvents","array","_chartjs","arrayEvents","charAt","toUpperCase","args","Array","res","unlistenArrayEvents","stub","addElements","scaleID","createMetaDataset","createMetaData","addElementAndReset","resyncElements","elementOpts","valueOrDefault","numMeta","numData","insertElements","onDataPush","onDataPop","pop","onDataShift","shift","onDataSplice","onDataUnshift","inherits","593","configuration","_view","_start","color","mix","rgbString","err","startVal","tooltipPosition","hasValue","isNumber","594","parseMaxStyle","styleValue","node","parentProperty","valueInPixels","parseInt","parentNode","isConstrainedValue","getConstraintDimension","domNode","maxStyle","percentageProperty","view","document","defaultView","constrainedNode","getComputedStyle","constrainedContainer","hasCNode","hasCContainer","infinity","POSITIVE_INFINITY","loopable","reverse","keys","objClone","setFn","_base","extension","baseHasProperty","baseVal","scaleMerge","getScaleDefaults","valueObj","axisType","axisDefaults","defaultValue","where","collection","filterCallback","filtered","scope","findNextWhere","arrayToSearch","startIndex","currentItem","findPreviousWhere","extensions","ChartElement","Surrogate","__super__","parseFloat","isFinite","almostEquals","epsilon","almostWhole","rounded","round","reduce","NEGATIVE_INFINITY","sign","log10","log","LN10","toRadians","degrees","toDegrees","radians","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","angle","atan2","distanceBetweenPoints","pt1","pt2","pow","aliasPixel","pixelWidth","firstPoint","middlePoint","afterPoint","t","current","d01","d12","s01","s12","fa","fb","EPSILON","pointBefore","pointCurrent","pointAfter","pointsWithTangents","deltaK","mK","pointsLen","slopeDeltaX","alphaK","betaK","tauK","squaredMagnitude","deltaX","loop","niceNum","range","niceFraction","exponent","fraction","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","a","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","getRelativePosition","evt","mouseX","mouseY","originalEvent","currentTarget","srcElement","boundingRect","getBoundingClientRect","touches","clientX","clientY","paddingLeft","getStyle","paddingTop","paddingRight","paddingBottom","currentDevicePixelRatio","addEvent","eventType","attachEvent","removeEvent","handler","detachEvent","getConstraintWidth","getConstraintHeight","container","w","clientWidth","cw","h","clientHeight","ch","el","currentStyle","getPropertyValue","pixelRatio","devicePixelRatio","clearRect","fontString","pixelSize","fontStyle","fontFamily","longestText","font","arrayOfThings","cache","gc","garbageCollect","longest","thing","measureText","nestedThing","gcLen","string","textWidth","numberOfLabelLines","numberOfLines","quadraticCurveTo","CanvasGradient","defaultColor","a0","a1","v0","v1","callCallback","fn","_tArg","colorValue","CanvasPattern","saturate","darken","595","parseVisibleItems","jlen","getIntersectItems","inRange","getNearestItems","distanceMetric","minDistance","nearestItems","center","getCenterPoint","indexMode","x-axis","nearest","sort","b","sizeA","getArea","sizeB","ret","intersectsItem","inXRange","inYRange","596","defaultFontColor","defaultFontFamily","defaultFontSize","defaultFontStyle","597","addBox","removeBox","getMinimumBoxSize","isHorizontal","fullWidth","chartWidth","maxChartAreaWidth","horizontalBoxHeight","maxChartAreaHeight","verticalBoxWidth","chartAreaHeight","minBoxSizes","fitBox","minBoxSize","minBox","scaleMargin","totalLeftBoxesWidth","maxHorizontalLeftPadding","totalRightBoxesWidth","maxHorizontalRightPadding","chartHeight","finalFitVerticalBox","totalTopBoxesHeight","totalBottomBoxesHeight","placeBox","leftPadding","rightPadding","layoutOptions","layout","padding","topPadding","bottomPadding","leftBoxes","rightBoxes","topBoxes","bottomBoxes","chartAreaBoxes","chartAreaWidth","maxVerticalTopPadding","maxVerticalBottomPadding","horizontalBox","getPadding","boxPadding","verticalBox","leftPaddingAddition","topPaddingAddition","newMaxChartAreaHeight","newMaxChartAreaWidth","598","getBoxWidth","labelOpts","fontSize","usePointStyle","boxWidth","createNewLegendAndAttach","legendOpts","Legend","display","ci","lineCap","lineDash","lineDashOffset","lineJoin","legendHitBoxes","doughnutMode","beforeUpdate","maxWidth","maxHeight","margins","beforeSetDimensions","setDimensions","afterSetDimensions","beforeBuildLabels","buildLabels","afterBuildLabels","beforeFit","fit","afterFit","afterUpdate","legendItems","globalDefault","itemOrDefault","labelFont","hitboxes","lineWidths","totalHeight","textAlign","textBaseline","vPadding","columnWidths","totalWidth","currentColWidth","currentColHeight","itemHeight","itemWidth","lineDefault","legendWidth","cursor","fontColor","drawLegendBox","isLineWidthZero","setLineDash","offSet","fillText","lh","hitBox","register","beforeInit","afterEvent","599","_plugins","_cacheId","plugin","unregister","idx","getAll","hook","params","descriptors","pluginService","PluginBase","600","computeTextSize","tick","parseFontOptions","globalDefaults","family","drawBorder","drawOnChartArea","drawTicks","tickMarkLength","zeroLineWidth","zeroLineColor","scaleLabel","labelString","minRotation","maxRotation","mirror","autoSkip","autoSkipPadding","labelOffset","Ticks","formatters","values","Scale","longestTextCache","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","beforeTickToLabelConversion","convertTicksToLabels","afterTickToLabelConversion","beforeCalculateTickRotation","calculateTickRotation","afterCalculateTickRotation","tickOpts","userCallback","tickFont","labelRotation","cosRotation","sinRotation","originalLabelWidth","labelWidth","getPixelForTick","angleRadians","scaleLabelOpts","gridLineOpts","scaleLabelFontSize","isFullWidth","largestTextWidth","tallestLabelHeightInLines","lineSpace","longestLabelWidth","labelHeight","firstTick","firstLabelWidth","lastTick","lastLabelWidth","handleMargins","rawValue","getLabelForIndex","getValueForPixel","innerWidth","pixel","finalVal","innerHeight","decimal","valueOffset","skipRatio","maxTicks","optionTicks","isRotated","useAutoskipper","maxTicksLimit","tickFontColor","tl","scaleLabelFontColor","scaleLabelFont","labelRotationRadians","longestRotatedLabel","itemsToDraw","xTickStart","xTickEnd","yTickStart","yTickEnd","isLastTick","shouldSkip","lineColor","zeroLineIndex","tx1","ty1","tx2","ty2","x1","y1","x2","y2","labelX","labelY","xLineValue","labelXOffset","isLeft","tickPadding","yLineValue","glWidth","glColor","glBorderDash","glBorderDashOffset","itemToDraw","translate","rotate","scaleLabelX","scaleLabelY","601","constructors","registerScaleType","scaleConstructor","updateScaleDefaults","additions","602","generators","generationOptions","dataRange","spacing","stepSize","niceRange","niceMin","niceMax","ceil","numSpaces","logarithmic","exp","significand","tickVal","endExp","endSignificand","minNotZero","tickValue","delta","logDelta","tickString","numDecimal","toFixed","remain","toExponential","603","createNewTitleBlockAndAttach","titleOpts","Title","titleBlock","pos","titleX","titleY","titleFont","604","mergeOpacity","colorString","opacity","alpha","rgbaString","pushOrConcat","toPush","createTooltipItem","getBaseModel","tooltipOpts","xPadding","yPadding","xAlign","yAlign","bodyFontColor","_bodyFontFamily","bodyFontFamily","_bodyFontStyle","bodyFontStyle","_bodyAlign","bodyAlign","bodyFontSize","bodySpacing","titleFontColor","_titleFontFamily","titleFontFamily","_titleFontStyle","titleFontStyle","titleFontSize","_titleAlign","titleAlign","titleSpacing","titleMarginBottom","footerFontColor","_footerFontFamily","footerFontFamily","_footerFontStyle","footerFontStyle","footerFontSize","_footerAlign","footerAlign","footerSpacing","footerMarginTop","caretSize","cornerRadius","legendColorBackground","multiKeyBackground","displayColors","getTooltipSize","body","combinedBodyLength","bodyItem","before","lines","after","beforeBody","afterBody","titleLineCount","footerLineCount","footer","widthPadding","maxLineWidth","determineAlignment","lf","rf","olf","orf","yf","midX","midY","getBackgroundPoint","vm","alignment","caretPadding","paddingAndSize","radiusAndPadding","beforeTitle","labelCount","afterTitle","beforeLabel","labelColor","activeElement","afterLabel","beforeFooter","afterFooter","getTitle","getBeforeBody","getBody","bodyItems","getAfterBody","getFooter","existingModel","_active","backgroundPoint","tooltipSize","caretX","caretY","labelColors","positioners","_eventPosition","itemSort","dataPoints","drawCaret","tooltipPoint","x3","y3","ptX","ptY","drawTitle","drawBody","textColor","xLinePadding","fillLineOfText","drawColorBoxes","drawFooter","drawBackground","_lastActive","average","eventPosition","nearestElement","tp","605","globalOpts","inLabelRange","chartX","chartY","pointRelativePosition","betweenAngles","withinRadius","halfAngle","halfRadius","centreAngle","rangeFromCentre","sA","eA","606","lineToPoint","previousPoint","pointVM","bezierCurveTo","fillPoint","lastDrawnIndex","currentVM","globalOptionLineElements","607","xRange","yRange","errMargin","ratio","608","isVertical","getBarBounds","halfWidth","halfHeight","cornerAt","corners","startCorner","signX","signY","barSize","halfStroke","borderLeft","borderRight","borderTop","borderBottom","borders","corner","bounds","609","readUsedSize","matches","match","initCanvas","renderHeight","getAttribute","renderWidth","initial","displayWidth","displayHeight","createEvent","fromNativeEvent","event","eventTypeMap","createResizer","iframe","cssText","tabIndex","contentWindow","addResizeListener","ticking","resizer","insertBefore","firstChild","removeResizeListener","removeChild","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","getElementById","HTMLCanvasElement","getContext","CanvasRenderingContext2D","prop","removeAttribute","setAttribute","proxies","proxy","610","implementation","611","DatasetScale","getLabels","xLabels","yLabels","minIndex","maxIndex","offsetAmt","valueWidth","widthOffset","valueHeight","heightOffset","horz","valueDimension","612","LinearScale","LinearScaleBase","IDMatches","hasStacks","valuesPerStack","positiveValues","negativeValues","relativePoints","valuesForType","minVal","maxVal","handleTickRangeOptions","getTickLimit","tickFontSize","handleDirectionalChanges","innerDimension","ticksAsNumbers","613","minSign","maxSign","suggestedMin","suggestedMax","numericGeneratorOptions","fixedStepSize","614","LogarithmicScale","tickValues","newVal","615","getValueCount","getPointLabelFontOptions","pointLabelOptions","pointLabels","measureLabelSize","determineLimits","fitWithPointLabels","textSize","plFont","largestPossibleRadius","furthestLimits","furthestAngles","_pointLabelSizes","valueCount","getPointPosition","getIndexAngle","hLimits","vLimits","setReductions","drawingArea","setCenterPoint","getTextAlignForAngle","adjustPointPositionForLabelHeight","drawPointLabels","angleLineOpts","angleLines","pointLabelOpts","outerDistance","outerPosition","pointLabelPosition","pointLabelFontColor","drawRadiusLine","numberOrZero","param","animate","showLabelBackdrop","backdropColor","backdropPaddingY","backdropPaddingX","LinearRadialScale","radiusReductionLeft","radiusReductionRight","radiusReductionTop","radiusReductionBottom","leftMovement","rightMovement","topMovement","bottomMovement","maxRight","maxLeft","maxTop","maxBottom","angleMultiplier","startAngleRadians","scalingFactor","distanceFromCenter","thisAngle","tickFontStyle","tickFontFamily","tickLabelFont","yCenterOffset","yHeight","616","moment","time","units","steps","maxStep","parser","format","unit","displayFormat","isoWeekday","minUnit","displayFormats","millisecond","second","minute","hour","day","week","month","quarter","year","TimeScale","Error","getLabelMoment","labelMoments","getLabelDiff","labelDiffs","buildLabelDiffs","getMomentStartOf","startOf","tickUnit","scaleLabelMoments","labelMoment","parseTime","isValid","momentsForDataset","datasetVisible","scaleLabelDiffs","diff","diffsForDataset","unitScale","scaleSizeInUnits","unitStepSize","tempFirstLabel","tickFormatFunction","tickLabelWidth","labelCapacity","unitDefinitionIndex","unitDefinition","leadingUnitBuffer","trailingUnitBuffer","add","roundedStart","roundedEnd","newTick","tooltipFormat","formattedTick","tickMoments","asSeconds","getMonth","warn","617","getRgba","abbr","hex","rgba","per","keyword","rgb","colorNames","getHsla","hsl","getHwb","hwb","getRgb","getHsl","hsla","getAlpha","vals","hexString","hexDouble","percentString","percentaString","g","hslString","hslaString","hwbString","reverseNames","num","str","618","convert","Color","valid","hsv","cmyk","setValues","red","lightness","v","whiteness","cyan","setSpace","rgbArray","hslArray","hsvArray","hwbArray","cmykArray","rgbaArray","hslaArray","val","setChannel","green","blue","hue","saturation","saturationv","blackness","magenta","yellow","black","rgbNumber","luminosity","lum","chan","contrast","color2","lum1","lum2","level","contrastRatio","dark","yiq","light","negate","lighten","desaturate","whiten","blacken","greyscale","clearer","opaquer","mixinColor","weight","color1","w1","w2","toJSON","result","spaces","maxes","getValues","space","chans","capped","sname","svalues","621","rgb2hsl","rgb2hsv","rgb2hwb","rgb2cmyk","k","rgb2keyword","reverseKeywords","JSON","stringify","rgb2xyz","z","rgb2lab","xyz","rgb2lch","lab2lch","hsl2rgb","t1","t2","t3","hsl2hsv","sv","hsl2hwb","hsl2cmyk","hsl2keyword","hsv2rgb","hi","f","q","hsv2hsl","sl","hsv2hwb","hsv2cmyk","hsv2keyword","hwb2rgb","wh","bl","hwb2hsl","hwb2hsv","hwb2cmyk","hwb2keyword","cmyk2rgb","cmyk2hsl","cmyk2hsv","cmyk2hwb","cmyk2keyword","xyz2rgb","xyz2lab","xyz2lch","lab2xyz","lab","hr","lab2rgb","lch2lab","lch","lch2xyz","lch2rgb","keyword2rgb","cssKeywords","keyword2hsl","keyword2hsv","keyword2hwb","keyword2cmyk","keyword2lab","keyword2xyz","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellowgreen","622","conversions","Converter","func","arg","pair","exec","from","to","convs","routeSpace","fspace","623","736","arrayFilter","predicate","resIndex","arrayPush","arraySome","baseTimes","iteratee","baseUnary","cacheHas","has","getValue","mapToArray","overArg","transform","setToArray","set","Hash","entries","entry","hashClear","__data__","nativeCreate","hashDelete","hashGet","HASH_UNDEFINED","hashHas","hashSet","ListCache","listCacheClear","listCacheDelete","assocIndexOf","lastIndex","listCacheGet","listCacheHas","listCacheSet","MapCache","mapCacheClear","hash","Map","mapCacheDelete","getMapData","mapCacheGet","mapCacheHas","mapCacheSet","SetCache","setCacheAdd","setCacheHas","Stack","stackClear","stackDelete","stackGet","stackHas","stackSet","pairs","LARGE_ARRAY_SIZE","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isBuffer","isType","isTypedArray","skipIndexes","String","isIndex","eq","baseGetAllKeys","keysFunc","symbolsFunc","baseGetTag","undefinedTag","nullTag","symToStringTag","getRawTag","objectToString","baseIsArguments","isObjectLike","argsTag","baseIsEqual","other","bitmask","customizer","baseIsEqualDeep","equalFunc","objIsArr","othIsArr","objTag","arrayTag","getTag","othTag","objectTag","objIsObj","othIsObj","isSameTag","equalArrays","equalByTag","COMPARE_PARTIAL_FLAG","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","equalObjects","baseIsNative","isObject","isMasked","pattern","isFunction","reIsNative","reIsHostCtor","test","toSource","baseIsTypedArray","isLength","typedArrayTags","baseKeys","isPrototype","nativeKeys","isPartial","arrLength","othLength","seen","COMPARE_UNORDERED_FLAG","arrValue","othValue","compared","othIndex","tag","dataViewTag","byteLength","byteOffset","buffer","arrayBufferTag","Uint8Array","boolTag","dateTag","numberTag","errorTag","message","regexpTag","stringTag","mapTag","setTag","symbolTag","symbolValueOf","objProps","getAllKeys","objLength","othProps","skipCtor","objValue","objCtor","othCtor","getSymbols","isKeyable","getNative","isOwn","unmasked","nativeObjectToString","MAX_SAFE_INTEGER","reIsUint","maskSrcKey","Ctor","proto","objectProto","funcToString","isArrayLike","isEqual","funcTag","genTag","asyncTag","proxyTag","stubArray","stubFalse","promiseTag","weakMapTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reRegExpChar","freeGlobal","freeSelf","Function","freeExports","nodeType","freeModule","moduleExports","freeProcess","process","nodeUtil","binding","nodeIsTypedArray","arrayProto","funcProto","coreJsData","IE_PROTO","RegExp","replace","Buffer","Symbol","propertyIsEnumerable","toStringTag","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","DataView","Set","WeakMap","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","valueOf","symbol","ArrayBuffer","ctorString"],"mappings":"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","file":"static/js/react-chart.3661a7d0.chunk.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 127:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @namespace Chart\n\t */\n\tvar Chart = __webpack_require__(596)();\n\t\n\t__webpack_require__(594)(Chart);\n\t__webpack_require__(610)(Chart);\n\t__webpack_require__(590)(Chart);\n\t__webpack_require__(599)(Chart);\n\t__webpack_require__(593)(Chart);\n\t__webpack_require__(589)(Chart);\n\t__webpack_require__(591)(Chart);\n\t__webpack_require__(592)(Chart);\n\t__webpack_require__(597)(Chart);\n\t__webpack_require__(601)(Chart);\n\t__webpack_require__(602)(Chart);\n\t__webpack_require__(600)(Chart);\n\t__webpack_require__(603)(Chart);\n\t__webpack_require__(598)(Chart);\n\t__webpack_require__(595)(Chart);\n\t__webpack_require__(604)(Chart);\n\t\n\t__webpack_require__(605)(Chart);\n\t__webpack_require__(606)(Chart);\n\t__webpack_require__(607)(Chart);\n\t__webpack_require__(608)(Chart);\n\t\n\t__webpack_require__(613)(Chart);\n\t__webpack_require__(611)(Chart);\n\t__webpack_require__(612)(Chart);\n\t__webpack_require__(614)(Chart);\n\t__webpack_require__(615)(Chart);\n\t__webpack_require__(616)(Chart);\n\t\n\t// Controllers must be loaded after elements\n\t// See Chart.core.datasetController.dataElementType\n\t__webpack_require__(583)(Chart);\n\t__webpack_require__(584)(Chart);\n\t__webpack_require__(585)(Chart);\n\t__webpack_require__(586)(Chart);\n\t__webpack_require__(587)(Chart);\n\t__webpack_require__(588)(Chart);\n\t\n\t__webpack_require__(576)(Chart);\n\t__webpack_require__(577)(Chart);\n\t__webpack_require__(578)(Chart);\n\t__webpack_require__(579)(Chart);\n\t__webpack_require__(580)(Chart);\n\t__webpack_require__(581)(Chart);\n\t__webpack_require__(582)(Chart);\n\t\n\twindow.Chart = module.exports = Chart;\n\n\n/***/ },\n\n/***/ 182:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(442);\n\n/***/ },\n\n/***/ 442:\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t\tif(true)\n\t\t\tmodule.exports = factory(__webpack_require__(127), __webpack_require__(247), __webpack_require__(736), __webpack_require__(1));\n\t\telse if(typeof define === 'function' && define.amd)\n\t\t\tdefine([\"chart.js\", \"lodash.debounce\", \"lodash.isequal\", \"react\"], factory);\n\t\telse {\n\t\t\tvar a = typeof exports === 'object' ? factory(require(\"chart.js\"), require(\"lodash.debounce\"), require(\"lodash.isequal\"), require(\"react\")) : factory(root[\"chart.js\"], root[\"lodash.debounce\"], root[\"lodash.isequal\"], root[\"react\"]);\n\t\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t\t}\n\t})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {\n\treturn /******/ (function(modules) { // webpackBootstrap\n\t/******/ \t// The module cache\n\t/******/ \tvar installedModules = {};\n\t/******/\n\t/******/ \t// The require function\n\t/******/ \tfunction __webpack_require__(moduleId) {\n\t/******/\n\t/******/ \t\t// Check if module is in cache\n\t/******/ \t\tif(installedModules[moduleId]) {\n\t/******/ \t\t\treturn installedModules[moduleId].exports;\n\t/******/ \t\t}\n\t/******/ \t\t// Create a new module (and put it into the cache)\n\t/******/ \t\tvar module = installedModules[moduleId] = {\n\t/******/ \t\t\ti: moduleId,\n\t/******/ \t\t\tl: false,\n\t/******/ \t\t\texports: {}\n\t/******/ \t\t};\n\t/******/\n\t/******/ \t\t// Execute the module function\n\t/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t/******/\n\t/******/ \t\t// Flag the module as loaded\n\t/******/ \t\tmodule.l = true;\n\t/******/\n\t/******/ \t\t// Return the exports of the module\n\t/******/ \t\treturn module.exports;\n\t/******/ \t}\n\t/******/\n\t/******/\n\t/******/ \t// expose the modules object (__webpack_modules__)\n\t/******/ \t__webpack_require__.m = modules;\n\t/******/\n\t/******/ \t// expose the module cache\n\t/******/ \t__webpack_require__.c = installedModules;\n\t/******/\n\t/******/ \t// identity function for calling harmony imports with the correct context\n\t/******/ \t__webpack_require__.i = function(value) { return value; };\n\t/******/\n\t/******/ \t// define getter function for harmony exports\n\t/******/ \t__webpack_require__.d = function(exports, name, getter) {\n\t/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n\t/******/ \t\t\tObject.defineProperty(exports, name, {\n\t/******/ \t\t\t\tconfigurable: false,\n\t/******/ \t\t\t\tenumerable: true,\n\t/******/ \t\t\t\tget: getter\n\t/******/ \t\t\t});\n\t/******/ \t\t}\n\t/******/ \t};\n\t/******/\n\t/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n\t/******/ \t__webpack_require__.n = function(module) {\n\t/******/ \t\tvar getter = module && module.__esModule ?\n\t/******/ \t\t\tfunction getDefault() { return module['default']; } :\n\t/******/ \t\t\tfunction getModuleExports() { return module; };\n\t/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n\t/******/ \t\treturn getter;\n\t/******/ \t};\n\t/******/\n\t/******/ \t// Object.prototype.hasOwnProperty.call\n\t/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\t/******/\n\t/******/ \t// __webpack_public_path__\n\t/******/ \t__webpack_require__.p = \"\";\n\t/******/\n\t/******/ \t// Load entry module and return exports\n\t/******/ \treturn __webpack_require__(__webpack_require__.s = 4);\n\t/******/ })\n\t/************************************************************************/\n\t/******/ ([\n\t/* 0 */\n\t/***/ (function(module, exports) {\n\t\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\t\n\t/***/ }),\n\t/* 1 */\n\t/***/ (function(module, exports) {\n\t\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\t\n\t/***/ }),\n\t/* 2 */\n\t/***/ (function(module, exports) {\n\t\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\t\n\t/***/ }),\n\t/* 3 */\n\t/***/ (function(module, exports) {\n\t\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\t\n\t/***/ }),\n\t/* 4 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\"use strict\";\n\t\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _react = __webpack_require__(3);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _lodash = __webpack_require__(1);\n\t\n\tvar _lodash2 = _interopRequireDefault(_lodash);\n\t\n\tvar _lodash3 = __webpack_require__(2);\n\t\n\tvar _lodash4 = _interopRequireDefault(_lodash3);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Chart = function (_Component) {\n\t  _inherits(Chart, _Component);\n\t\n\t  function Chart() {\n\t    _classCallCheck(this, Chart);\n\t\n\t    return _possibleConstructorReturn(this, (Chart.__proto__ || Object.getPrototypeOf(Chart)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Chart, [{\n\t    key: 'componentWillUnmounted',\n\t    value: function componentWillUnmounted() {\n\t      this.__chart__ && this.__chart__.destroy && this.__chart__.destroy();\n\t    }\n\t  }, {\n\t    key: 'shouldComponentUpdate',\n\t    value: function shouldComponentUpdate(nextProps) {\n\t      return !(0, _lodash4.default)(this.props, nextProps);\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(ctx) {\n\t      var _this2 = this;\n\t\n\t      if (!ctx) return;\n\t\n\t      var config = {\n\t        type: this.props.type,\n\t        data: _extends({}, this.props.data),\n\t        options: _extends({}, this.props.options)\n\t      };\n\t\n\t      Promise.resolve().then((function (require) {\n\t        var ChartJs = __webpack_require__(0);\n\t        _this2.__chart__ = new ChartJs(ctx, config);\n\t      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this3 = this;\n\t\n\t      return _react2.default.createElement('canvas', _extends({\n\t        className: 'react-chart.js' + (this.props.className ? ' ' + this.props.className : ''),\n\t        width: this.props.width,\n\t        height: this.props.height\n\t      }, this.props.style, {\n\t        ref: (0, _lodash2.default)(function (ctx) {\n\t          return _this3.draw(ctx);\n\t        }, 500)\n\t      }));\n\t    }\n\t  }]);\n\t\n\t  return Chart;\n\t}(_react.Component);\n\t\n\texports.default = Chart;\n\t\n\t/***/ })\n\t/******/ ]);\n\t});\n\n/***/ },\n\n/***/ 576:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tChart.Bar = function(context, config) {\n\t\t\tconfig.type = 'bar';\n\t\n\t\t\treturn new Chart(context, config);\n\t\t};\n\t\n\t};\n\n\n/***/ },\n\n/***/ 577:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tChart.Bubble = function(context, config) {\n\t\t\tconfig.type = 'bubble';\n\t\t\treturn new Chart(context, config);\n\t\t};\n\t\n\t};\n\n\n/***/ },\n\n/***/ 578:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tChart.Doughnut = function(context, config) {\n\t\t\tconfig.type = 'doughnut';\n\t\n\t\t\treturn new Chart(context, config);\n\t\t};\n\t\n\t};\n\n\n/***/ },\n\n/***/ 579:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tChart.Line = function(context, config) {\n\t\t\tconfig.type = 'line';\n\t\n\t\t\treturn new Chart(context, config);\n\t\t};\n\t\n\t};\n\n\n/***/ },\n\n/***/ 580:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tChart.PolarArea = function(context, config) {\n\t\t\tconfig.type = 'polarArea';\n\t\n\t\t\treturn new Chart(context, config);\n\t\t};\n\t\n\t};\n\n\n/***/ },\n\n/***/ 581:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tChart.Radar = function(context, config) {\n\t\t\tconfig.type = 'radar';\n\t\n\t\t\treturn new Chart(context, config);\n\t\t};\n\t\n\t};\n\n\n/***/ },\n\n/***/ 582:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar defaultConfig = {\n\t\t\thover: {\n\t\t\t\tmode: 'single'\n\t\t\t},\n\t\n\t\t\tscales: {\n\t\t\t\txAxes: [{\n\t\t\t\t\ttype: 'linear', // scatter should not use a category axis\n\t\t\t\t\tposition: 'bottom',\n\t\t\t\t\tid: 'x-axis-1' // need an ID so datasets can reference the scale\n\t\t\t\t}],\n\t\t\t\tyAxes: [{\n\t\t\t\t\ttype: 'linear',\n\t\t\t\t\tposition: 'left',\n\t\t\t\t\tid: 'y-axis-1'\n\t\t\t\t}]\n\t\t\t},\n\t\n\t\t\ttooltips: {\n\t\t\t\tcallbacks: {\n\t\t\t\t\ttitle: function() {\n\t\t\t\t\t\t// Title doesn't make sense for scatter since we format the data as a point\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t},\n\t\t\t\t\tlabel: function(tooltipItem) {\n\t\t\t\t\t\treturn '(' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ')';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t// Register the default config for this type\n\t\tChart.defaults.scatter = defaultConfig;\n\t\n\t\t// Scatter charts use line controllers\n\t\tChart.controllers.scatter = Chart.controllers.line;\n\t\n\t\tChart.Scatter = function(context, config) {\n\t\t\tconfig.type = 'scatter';\n\t\t\treturn new Chart(context, config);\n\t\t};\n\t\n\t};\n\n\n/***/ },\n\n/***/ 583:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tChart.defaults.bar = {\n\t\t\thover: {\n\t\t\t\tmode: 'label'\n\t\t\t},\n\t\n\t\t\tscales: {\n\t\t\t\txAxes: [{\n\t\t\t\t\ttype: 'category',\n\t\n\t\t\t\t\t// Specific to Bar Controller\n\t\t\t\t\tcategoryPercentage: 0.8,\n\t\t\t\t\tbarPercentage: 0.9,\n\t\n\t\t\t\t\t// grid line settings\n\t\t\t\t\tgridLines: {\n\t\t\t\t\t\toffsetGridLines: true\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\tyAxes: [{\n\t\t\t\t\ttype: 'linear'\n\t\t\t\t}]\n\t\t\t}\n\t\t};\n\t\n\t\tChart.controllers.bar = Chart.DatasetController.extend({\n\t\n\t\t\tdataElementType: Chart.elements.Rectangle,\n\t\n\t\t\tinitialize: function(chart, datasetIndex) {\n\t\t\t\tChart.DatasetController.prototype.initialize.call(this, chart, datasetIndex);\n\t\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar dataset = me.getDataset();\n\t\n\t\t\t\tmeta.stack = dataset.stack;\n\t\t\t\t// Use this to indicate that this is a bar dataset.\n\t\t\t\tmeta.bar = true;\n\t\t\t},\n\t\n\t\t\t// Correctly calculate the bar width accounting for stacks and the fact that not all bars are visible\n\t\t\tgetStackCount: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\n\t\t\t\tvar stacks = [];\n\t\t\t\thelpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tvar dsMeta = me.chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\tif (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) &&\n\t\t\t\t\t\t(yScale.options.stacked === false ||\n\t\t\t\t\t\t(yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||\n\t\t\t\t\t\t(yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {\n\t\t\t\t\t\tstacks.push(dsMeta.stack);\n\t\t\t\t\t}\n\t\t\t\t}, me);\n\t\n\t\t\t\treturn stacks.length;\n\t\t\t},\n\t\n\t\t\tupdate: function(reset) {\n\t\t\t\tvar me = this;\n\t\t\t\thelpers.each(me.getMeta().data, function(rectangle, index) {\n\t\t\t\t\tme.updateElement(rectangle, index, reset);\n\t\t\t\t}, me);\n\t\t\t},\n\t\n\t\t\tupdateElement: function(rectangle, index, reset) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\t\tvar scaleBase = yScale.getBasePixel();\n\t\t\t\tvar rectangleElementOptions = me.chart.options.elements.rectangle;\n\t\t\t\tvar custom = rectangle.custom || {};\n\t\t\t\tvar dataset = me.getDataset();\n\t\n\t\t\t\trectangle._xScale = xScale;\n\t\t\t\trectangle._yScale = yScale;\n\t\t\t\trectangle._datasetIndex = me.index;\n\t\t\t\trectangle._index = index;\n\t\n\t\t\t\tvar ruler = me.getRuler(index); // The index argument for compatible\n\t\t\t\trectangle._model = {\n\t\t\t\t\tx: me.calculateBarX(index, me.index, ruler),\n\t\t\t\t\ty: reset ? scaleBase : me.calculateBarY(index, me.index),\n\t\n\t\t\t\t\t// Tooltip\n\t\t\t\t\tlabel: me.chart.data.labels[index],\n\t\t\t\t\tdatasetLabel: dataset.label,\n\t\n\t\t\t\t\t// Appearance\n\t\t\t\t\thorizontal: false,\n\t\t\t\t\tbase: reset ? scaleBase : me.calculateBarBase(me.index, index),\n\t\t\t\t\twidth: me.calculateBarWidth(ruler),\n\t\t\t\t\tbackgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),\n\t\t\t\t\tborderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,\n\t\t\t\t\tborderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),\n\t\t\t\t\tborderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)\n\t\t\t\t};\n\t\n\t\t\t\trectangle.pivot();\n\t\t\t},\n\t\n\t\t\tcalculateBarBase: function(datasetIndex, index) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\t\tvar base = yScale.getBaseValue();\n\t\t\t\tvar original = base;\n\t\n\t\t\t\tif ((yScale.options.stacked === true) ||\n\t\t\t\t\t(yScale.options.stacked === undefined && meta.stack !== undefined)) {\n\t\t\t\t\tvar chart = me.chart;\n\t\t\t\t\tvar datasets = chart.data.datasets;\n\t\t\t\t\tvar value = Number(datasets[datasetIndex].data[index]);\n\t\n\t\t\t\t\tfor (var i = 0; i < datasetIndex; i++) {\n\t\t\t\t\t\tvar currentDs = datasets[i];\n\t\t\t\t\t\tvar currentDsMeta = chart.getDatasetMeta(i);\n\t\t\t\t\t\tif (currentDsMeta.bar && currentDsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i) &&\n\t\t\t\t\t\t\tmeta.stack === currentDsMeta.stack) {\n\t\t\t\t\t\t\tvar currentVal = Number(currentDs.data[index]);\n\t\t\t\t\t\t\tbase += value < 0 ? Math.min(currentVal, original) : Math.max(currentVal, original);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn yScale.getPixelForValue(base);\n\t\t\t\t}\n\t\n\t\t\t\treturn yScale.getBasePixel();\n\t\t\t},\n\t\n\t\t\tgetRuler: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\t\tvar stackCount = me.getStackCount();\n\t\n\t\t\t\tvar tickWidth = xScale.width / xScale.ticks.length;\r\n\t\t\t\tvar categoryWidth = tickWidth * xScale.options.categoryPercentage;\n\t\t\t\tvar categorySpacing = (tickWidth - (tickWidth * xScale.options.categoryPercentage)) / 2;\n\t\t\t\tvar fullBarWidth = categoryWidth / stackCount;\n\t\n\t\t\t\tvar barWidth = fullBarWidth * xScale.options.barPercentage;\n\t\t\t\tvar barSpacing = fullBarWidth - (fullBarWidth * xScale.options.barPercentage);\n\t\n\t\t\t\treturn {\n\t\t\t\t\tstackCount: stackCount,\n\t\t\t\t\ttickWidth: tickWidth,\n\t\t\t\t\tcategoryWidth: categoryWidth,\n\t\t\t\t\tcategorySpacing: categorySpacing,\n\t\t\t\t\tfullBarWidth: fullBarWidth,\n\t\t\t\t\tbarWidth: barWidth,\n\t\t\t\t\tbarSpacing: barSpacing\n\t\t\t\t};\n\t\t\t},\n\t\n\t\t\tcalculateBarWidth: function(ruler) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\t\tif (xScale.options.barThickness) {\n\t\t\t\t\treturn xScale.options.barThickness;\n\t\t\t\t}\n\t\t\t\treturn ruler.barWidth;\r\n\t\t\t},\n\t\n\t\t\t// Get stack index from the given dataset index accounting for stacks and the fact that not all bars are visible\n\t\t\tgetStackIndex: function(datasetIndex) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.chart.getDatasetMeta(datasetIndex);\n\t\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\t\tvar dsMeta, j;\n\t\t\t\tvar stacks = [meta.stack];\n\t\n\t\t\t\tfor (j = 0; j < datasetIndex; ++j) {\n\t\t\t\t\tdsMeta = this.chart.getDatasetMeta(j);\n\t\t\t\t\tif (dsMeta.bar && this.chart.isDatasetVisible(j) &&\n\t\t\t\t\t\t(yScale.options.stacked === false ||\n\t\t\t\t\t\t(yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||\n\t\t\t\t\t\t(yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {\n\t\t\t\t\t\tstacks.push(dsMeta.stack);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn stacks.length - 1;\n\t\t\t},\n\t\n\t\t\tcalculateBarX: function(index, datasetIndex, ruler) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\t\tvar stackIndex = me.getStackIndex(datasetIndex);\n\t\t\t\tvar leftTick = xScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);\n\t\t\t\tleftTick -= me.chart.isCombo ? (ruler.tickWidth / 2) : 0;\n\t\n\t\t\t\treturn leftTick +\n\t\t\t\t\t(ruler.barWidth / 2) +\n\t\t\t\t\truler.categorySpacing +\n\t\t\t\t\t(ruler.barWidth * stackIndex) +\n\t\t\t\t\t(ruler.barSpacing / 2) +\n\t\t\t\t\t(ruler.barSpacing * stackIndex);\n\t\t\t},\n\t\n\t\t\tcalculateBarY: function(index, datasetIndex) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\t\tvar value = Number(me.getDataset().data[index]);\n\t\n\t\t\t\tif (yScale.options.stacked ||\n\t\t\t\t\t(yScale.options.stacked === undefined && meta.stack !== undefined)) {\n\t\t\t\t\tvar base = yScale.getBaseValue();\n\t\t\t\t\tvar sumPos = base,\n\t\t\t\t\t\tsumNeg = base;\r\n\t\n\t\t\t\t\tfor (var i = 0; i < datasetIndex; i++) {\n\t\t\t\t\t\tvar ds = me.chart.data.datasets[i];\n\t\t\t\t\t\tvar dsMeta = me.chart.getDatasetMeta(i);\n\t\t\t\t\t\tif (dsMeta.bar && dsMeta.yAxisID === yScale.id && me.chart.isDatasetVisible(i) &&\n\t\t\t\t\t\t\tmeta.stack === dsMeta.stack) {\n\t\t\t\t\t\t\tvar stackedVal = Number(ds.data[index]);\n\t\t\t\t\t\t\tif (stackedVal < 0) {\n\t\t\t\t\t\t\t\tsumNeg += stackedVal || 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsumPos += stackedVal || 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (value < 0) {\n\t\t\t\t\t\treturn yScale.getPixelForValue(sumNeg + value);\n\t\t\t\t\t}\n\t\t\t\t\treturn yScale.getPixelForValue(sumPos + value);\n\t\t\t\t}\n\t\n\t\t\t\treturn yScale.getPixelForValue(value);\n\t\t\t},\n\t\n\t\t\tdraw: function(ease) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar easingDecimal = ease || 1;\n\t\t\t\tvar metaData = me.getMeta().data;\n\t\t\t\tvar dataset = me.getDataset();\n\t\t\t\tvar i, len;\n\t\n\t\t\t\tChart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);\n\t\t\t\tfor (i = 0, len = metaData.length; i < len; ++i) {\n\t\t\t\t\tvar d = dataset.data[i];\n\t\t\t\t\tif (d !== null && d !== undefined && !isNaN(d)) {\n\t\t\t\t\t\tmetaData[i].transition(easingDecimal).draw();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tChart.canvasHelpers.unclipArea(me.chart.chart.ctx);\n\t\t\t},\n\t\n\t\t\tsetHoverStyle: function(rectangle) {\n\t\t\t\tvar dataset = this.chart.data.datasets[rectangle._datasetIndex];\n\t\t\t\tvar index = rectangle._index;\n\t\n\t\t\t\tvar custom = rectangle.custom || {};\n\t\t\t\tvar model = rectangle._model;\n\t\t\t\tmodel.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));\n\t\t\t\tmodel.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));\n\t\t\t\tmodel.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);\n\t\t\t},\n\t\n\t\t\tremoveHoverStyle: function(rectangle) {\n\t\t\t\tvar dataset = this.chart.data.datasets[rectangle._datasetIndex];\n\t\t\t\tvar index = rectangle._index;\n\t\t\t\tvar custom = rectangle.custom || {};\n\t\t\t\tvar model = rectangle._model;\n\t\t\t\tvar rectangleElementOptions = this.chart.options.elements.rectangle;\n\t\n\t\t\t\tmodel.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);\n\t\t\t\tmodel.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);\n\t\t\t\tmodel.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);\n\t\t\t}\n\t\n\t\t});\n\t\n\t\n\t\t// including horizontalBar in the bar file, instead of a file of its own\n\t\t// it extends bar (like pie extends doughnut)\n\t\tChart.defaults.horizontalBar = {\n\t\t\thover: {\n\t\t\t\tmode: 'label'\n\t\t\t},\n\t\n\t\t\tscales: {\n\t\t\t\txAxes: [{\n\t\t\t\t\ttype: 'linear',\n\t\t\t\t\tposition: 'bottom'\n\t\t\t\t}],\n\t\t\t\tyAxes: [{\n\t\t\t\t\tposition: 'left',\n\t\t\t\t\ttype: 'category',\n\t\n\t\t\t\t\t// Specific to Horizontal Bar Controller\n\t\t\t\t\tcategoryPercentage: 0.8,\n\t\t\t\t\tbarPercentage: 0.9,\n\t\n\t\t\t\t\t// grid line settings\n\t\t\t\t\tgridLines: {\n\t\t\t\t\t\toffsetGridLines: true\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t},\n\t\t\telements: {\n\t\t\t\trectangle: {\n\t\t\t\t\tborderSkipped: 'left'\n\t\t\t\t}\n\t\t\t},\n\t\t\ttooltips: {\n\t\t\t\tcallbacks: {\n\t\t\t\t\ttitle: function(tooltipItems, data) {\n\t\t\t\t\t\t// Pick first xLabel for now\n\t\t\t\t\t\tvar title = '';\n\t\n\t\t\t\t\t\tif (tooltipItems.length > 0) {\n\t\t\t\t\t\t\tif (tooltipItems[0].yLabel) {\n\t\t\t\t\t\t\t\ttitle = tooltipItems[0].yLabel;\n\t\t\t\t\t\t\t} else if (data.labels.length > 0 && tooltipItems[0].index < data.labels.length) {\n\t\t\t\t\t\t\t\ttitle = data.labels[tooltipItems[0].index];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\treturn title;\n\t\t\t\t\t},\n\t\t\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\t\t\tvar datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';\n\t\t\t\t\t\treturn datasetLabel + ': ' + tooltipItem.xLabel;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\tChart.controllers.horizontalBar = Chart.controllers.bar.extend({\n\t\n\t\t\t// Correctly calculate the bar width accounting for stacks and the fact that not all bars are visible\n\t\t\tgetStackCount: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\n\t\t\t\tvar stacks = [];\n\t\t\t\thelpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tvar dsMeta = me.chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\tif (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) &&\n\t\t\t\t\t\t(xScale.options.stacked === false ||\n\t\t\t\t\t\t(xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||\n\t\t\t\t\t\t(xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {\n\t\t\t\t\t\tstacks.push(dsMeta.stack);\n\t\t\t\t\t}\n\t\t\t\t}, me);\n\t\n\t\t\t\treturn stacks.length;\n\t\t\t},\n\t\n\t\t\tupdateElement: function(rectangle, index, reset) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\t\tvar scaleBase = xScale.getBasePixel();\n\t\t\t\tvar custom = rectangle.custom || {};\n\t\t\t\tvar dataset = me.getDataset();\n\t\t\t\tvar rectangleElementOptions = me.chart.options.elements.rectangle;\n\t\n\t\t\t\trectangle._xScale = xScale;\n\t\t\t\trectangle._yScale = yScale;\n\t\t\t\trectangle._datasetIndex = me.index;\n\t\t\t\trectangle._index = index;\n\t\n\t\t\t\tvar ruler = me.getRuler(index); // The index argument for compatible\n\t\t\t\trectangle._model = {\n\t\t\t\t\tx: reset ? scaleBase : me.calculateBarX(index, me.index),\n\t\t\t\t\ty: me.calculateBarY(index, me.index, ruler),\n\t\n\t\t\t\t\t// Tooltip\n\t\t\t\t\tlabel: me.chart.data.labels[index],\n\t\t\t\t\tdatasetLabel: dataset.label,\n\t\n\t\t\t\t\t// Appearance\n\t\t\t\t\thorizontal: true,\n\t\t\t\t\tbase: reset ? scaleBase : me.calculateBarBase(me.index, index),\n\t\t\t\t\theight: me.calculateBarHeight(ruler),\n\t\t\t\t\tbackgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),\n\t\t\t\t\tborderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,\n\t\t\t\t\tborderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),\n\t\t\t\t\tborderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)\n\t\t\t\t};\n\t\n\t\t\t\trectangle.pivot();\n\t\t\t},\n\t\n\t\t\tcalculateBarBase: function(datasetIndex, index) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\t\tvar base = xScale.getBaseValue();\n\t\t\t\tvar originalBase = base;\n\t\n\t\t\t\tif (xScale.options.stacked ||\n\t\t\t\t\t(xScale.options.stacked === undefined && meta.stack !== undefined)) {\n\t\t\t\t\tvar chart = me.chart;\n\t\t\t\t\tvar datasets = chart.data.datasets;\n\t\t\t\t\tvar value = Number(datasets[datasetIndex].data[index]);\n\t\n\t\t\t\t\tfor (var i = 0; i < datasetIndex; i++) {\n\t\t\t\t\t\tvar currentDs = datasets[i];\n\t\t\t\t\t\tvar currentDsMeta = chart.getDatasetMeta(i);\n\t\t\t\t\t\tif (currentDsMeta.bar && currentDsMeta.xAxisID === xScale.id && chart.isDatasetVisible(i) &&\n\t\t\t\t\t\t\tmeta.stack === currentDsMeta.stack) {\n\t\t\t\t\t\t\tvar currentVal = Number(currentDs.data[index]);\n\t\t\t\t\t\t\tbase += value < 0 ? Math.min(currentVal, originalBase) : Math.max(currentVal, originalBase);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn xScale.getPixelForValue(base);\n\t\t\t\t}\n\t\n\t\t\t\treturn xScale.getBasePixel();\n\t\t\t},\n\t\n\t\t\tgetRuler: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\t\tvar stackCount = me.getStackCount();\n\t\n\t\t\t\tvar tickHeight = yScale.height / yScale.ticks.length;\n\t\t\t\tvar categoryHeight = tickHeight * yScale.options.categoryPercentage;\n\t\t\t\tvar categorySpacing = (tickHeight - (tickHeight * yScale.options.categoryPercentage)) / 2;\n\t\t\t\tvar fullBarHeight = categoryHeight / stackCount;\n\t\n\t\t\t\tvar barHeight = fullBarHeight * yScale.options.barPercentage;\n\t\t\t\tvar barSpacing = fullBarHeight - (fullBarHeight * yScale.options.barPercentage);\n\t\n\t\t\t\treturn {\n\t\t\t\t\tstackCount: stackCount,\n\t\t\t\t\ttickHeight: tickHeight,\n\t\t\t\t\tcategoryHeight: categoryHeight,\n\t\t\t\t\tcategorySpacing: categorySpacing,\n\t\t\t\t\tfullBarHeight: fullBarHeight,\n\t\t\t\t\tbarHeight: barHeight,\n\t\t\t\t\tbarSpacing: barSpacing\n\t\t\t\t};\n\t\t\t},\n\t\n\t\t\tcalculateBarHeight: function(ruler) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\t\tif (yScale.options.barThickness) {\n\t\t\t\t\treturn yScale.options.barThickness;\n\t\t\t\t}\n\t\t\t\treturn ruler.barHeight;\n\t\t\t},\n\t\n\t\t\t// Get stack index from the given dataset index accounting for stacks and the fact that not all bars are visible\n\t\t\tgetStackIndex: function(datasetIndex) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.chart.getDatasetMeta(datasetIndex);\n\t\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\t\tvar dsMeta, j;\n\t\t\t\tvar stacks = [meta.stack];\n\t\n\t\t\t\tfor (j = 0; j < datasetIndex; ++j) {\n\t\t\t\t\tdsMeta = this.chart.getDatasetMeta(j);\n\t\t\t\t\tif (dsMeta.bar && this.chart.isDatasetVisible(j) &&\n\t\t\t\t\t\t(xScale.options.stacked === false ||\n\t\t\t\t\t\t(xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||\n\t\t\t\t\t\t(xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {\n\t\t\t\t\t\tstacks.push(dsMeta.stack);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn stacks.length - 1;\r\n\t\t\t},\n\t\n\t\t\tcalculateBarX: function(index, datasetIndex) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\t\tvar value = Number(me.getDataset().data[index]);\n\t\n\t\t\t\tif (xScale.options.stacked ||\n\t\t\t\t\t(xScale.options.stacked === undefined && meta.stack !== undefined)) {\n\t\t\t\t\tvar base = xScale.getBaseValue();\n\t\t\t\t\tvar sumPos = base,\n\t\t\t\t\t\tsumNeg = base;\r\n\t\n\t\t\t\t\tfor (var i = 0; i < datasetIndex; i++) {\n\t\t\t\t\t\tvar ds = me.chart.data.datasets[i];\n\t\t\t\t\t\tvar dsMeta = me.chart.getDatasetMeta(i);\n\t\t\t\t\t\tif (dsMeta.bar && dsMeta.xAxisID === xScale.id && me.chart.isDatasetVisible(i) &&\n\t\t\t\t\t\t\tmeta.stack === dsMeta.stack) {\n\t\t\t\t\t\t\tvar stackedVal = Number(ds.data[index]);\n\t\t\t\t\t\t\tif (stackedVal < 0) {\n\t\t\t\t\t\t\t\tsumNeg += stackedVal || 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsumPos += stackedVal || 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (value < 0) {\n\t\t\t\t\t\treturn xScale.getPixelForValue(sumNeg + value);\n\t\t\t\t\t}\n\t\t\t\t\treturn xScale.getPixelForValue(sumPos + value);\n\t\t\t\t}\n\t\n\t\t\t\treturn xScale.getPixelForValue(value);\n\t\t\t},\n\t\n\t\t\tcalculateBarY: function(index, datasetIndex, ruler) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\t\tvar stackIndex = me.getStackIndex(datasetIndex);\n\t\t\t\tvar topTick = yScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);\n\t\t\t\ttopTick -= me.chart.isCombo ? (ruler.tickHeight / 2) : 0;\n\t\n\t\t\t\treturn topTick +\n\t\t\t\t\t(ruler.barHeight / 2) +\n\t\t\t\t\truler.categorySpacing +\n\t\t\t\t\t(ruler.barHeight * stackIndex) +\n\t\t\t\t\t(ruler.barSpacing / 2) +\n\t\t\t\t\t(ruler.barSpacing * stackIndex);\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 584:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tChart.defaults.bubble = {\n\t\t\thover: {\n\t\t\t\tmode: 'single'\n\t\t\t},\n\t\n\t\t\tscales: {\n\t\t\t\txAxes: [{\n\t\t\t\t\ttype: 'linear', // bubble should probably use a linear scale by default\n\t\t\t\t\tposition: 'bottom',\n\t\t\t\t\tid: 'x-axis-0' // need an ID so datasets can reference the scale\n\t\t\t\t}],\n\t\t\t\tyAxes: [{\n\t\t\t\t\ttype: 'linear',\n\t\t\t\t\tposition: 'left',\n\t\t\t\t\tid: 'y-axis-0'\n\t\t\t\t}]\n\t\t\t},\n\t\n\t\t\ttooltips: {\n\t\t\t\tcallbacks: {\n\t\t\t\t\ttitle: function() {\n\t\t\t\t\t\t// Title doesn't make sense for scatter since we format the data as a point\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t},\n\t\t\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\t\t\tvar datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';\n\t\t\t\t\t\tvar dataPoint = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\t\t\t\t\t\treturn datasetLabel + ': (' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ', ' + dataPoint.r + ')';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\tChart.controllers.bubble = Chart.DatasetController.extend({\n\t\n\t\t\tdataElementType: Chart.elements.Point,\n\t\n\t\t\tupdate: function(reset) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar points = meta.data;\n\t\n\t\t\t\t// Update Points\n\t\t\t\thelpers.each(points, function(point, index) {\n\t\t\t\t\tme.updateElement(point, index, reset);\n\t\t\t\t});\n\t\t\t},\n\t\n\t\t\tupdateElement: function(point, index, reset) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\n\t\t\t\tvar custom = point.custom || {};\n\t\t\t\tvar dataset = me.getDataset();\n\t\t\t\tvar data = dataset.data[index];\n\t\t\t\tvar pointElementOptions = me.chart.options.elements.point;\n\t\t\t\tvar dsIndex = me.index;\n\t\n\t\t\t\thelpers.extend(point, {\n\t\t\t\t\t// Utility\n\t\t\t\t\t_xScale: xScale,\n\t\t\t\t\t_yScale: yScale,\n\t\t\t\t\t_datasetIndex: dsIndex,\n\t\t\t\t\t_index: index,\n\t\n\t\t\t\t\t// Desired view properties\n\t\t\t\t\t_model: {\n\t\t\t\t\t\tx: reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex, me.chart.isCombo),\n\t\t\t\t\t\ty: reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex),\n\t\t\t\t\t\t// Appearance\n\t\t\t\t\t\tradius: reset ? 0 : custom.radius ? custom.radius : me.getRadius(data),\n\t\n\t\t\t\t\t\t// Tooltip\n\t\t\t\t\t\thitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\t// Trick to reset the styles of the point\n\t\t\t\tChart.DatasetController.prototype.removeHoverStyle.call(me, point, pointElementOptions);\n\t\n\t\t\t\tvar model = point._model;\n\t\t\t\tmodel.skip = custom.skip ? custom.skip : (isNaN(model.x) || isNaN(model.y));\n\t\n\t\t\t\tpoint.pivot();\n\t\t\t},\n\t\n\t\t\tgetRadius: function(value) {\n\t\t\t\treturn value.r || this.chart.options.elements.point.radius;\n\t\t\t},\n\t\n\t\t\tsetHoverStyle: function(point) {\n\t\t\t\tvar me = this;\n\t\t\t\tChart.DatasetController.prototype.setHoverStyle.call(me, point);\n\t\n\t\t\t\t// Radius\n\t\t\t\tvar dataset = me.chart.data.datasets[point._datasetIndex];\n\t\t\t\tvar index = point._index;\n\t\t\t\tvar custom = point.custom || {};\n\t\t\t\tvar model = point._model;\n\t\t\t\tmodel.radius = custom.hoverRadius ? custom.hoverRadius : (helpers.getValueAtIndexOrDefault(dataset.hoverRadius, index, me.chart.options.elements.point.hoverRadius)) + me.getRadius(dataset.data[index]);\n\t\t\t},\n\t\n\t\t\tremoveHoverStyle: function(point) {\n\t\t\t\tvar me = this;\n\t\t\t\tChart.DatasetController.prototype.removeHoverStyle.call(me, point, me.chart.options.elements.point);\n\t\n\t\t\t\tvar dataVal = me.chart.data.datasets[point._datasetIndex].data[point._index];\n\t\t\t\tvar custom = point.custom || {};\n\t\t\t\tvar model = point._model;\n\t\n\t\t\t\tmodel.radius = custom.radius ? custom.radius : me.getRadius(dataVal);\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 585:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers,\n\t\t\tdefaults = Chart.defaults;\n\t\n\t\tdefaults.doughnut = {\n\t\t\tanimation: {\n\t\t\t\t// Boolean - Whether we animate the rotation of the Doughnut\n\t\t\t\tanimateRotate: true,\n\t\t\t\t// Boolean - Whether we animate scaling the Doughnut from the centre\n\t\t\t\tanimateScale: false\n\t\t\t},\n\t\t\taspectRatio: 1,\n\t\t\thover: {\n\t\t\t\tmode: 'single'\n\t\t\t},\n\t\t\tlegendCallback: function(chart) {\n\t\t\t\tvar text = [];\n\t\t\t\ttext.push('<ul class=\"' + chart.id + '-legend\">');\n\t\n\t\t\t\tvar data = chart.data;\n\t\t\t\tvar datasets = data.datasets;\n\t\t\t\tvar labels = data.labels;\n\t\n\t\t\t\tif (datasets.length) {\n\t\t\t\t\tfor (var i = 0; i < datasets[0].data.length; ++i) {\n\t\t\t\t\t\ttext.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\t\t\t\t\t\tif (labels[i]) {\n\t\t\t\t\t\t\ttext.push(labels[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttext.push('</li>');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\ttext.push('</ul>');\n\t\t\t\treturn text.join('');\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\tlabels: {\n\t\t\t\t\tgenerateLabels: function(chart) {\n\t\t\t\t\t\tvar data = chart.data;\n\t\t\t\t\t\tif (data.labels.length && data.datasets.length) {\n\t\t\t\t\t\t\treturn data.labels.map(function(label, i) {\n\t\t\t\t\t\t\t\tvar meta = chart.getDatasetMeta(0);\n\t\t\t\t\t\t\t\tvar ds = data.datasets[0];\n\t\t\t\t\t\t\t\tvar arc = meta.data[i];\n\t\t\t\t\t\t\t\tvar custom = arc && arc.custom || {};\n\t\t\t\t\t\t\t\tvar getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;\n\t\t\t\t\t\t\t\tvar arcOpts = chart.options.elements.arc;\n\t\t\t\t\t\t\t\tvar fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);\n\t\t\t\t\t\t\t\tvar stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);\n\t\t\t\t\t\t\t\tvar bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);\n\t\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\t\t\tfillStyle: fill,\n\t\t\t\t\t\t\t\t\tstrokeStyle: stroke,\n\t\t\t\t\t\t\t\t\tlineWidth: bw,\n\t\t\t\t\t\t\t\t\thidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n\t\n\t\t\t\t\t\t\t\t\t// Extra data used for toggling the correct item\n\t\t\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\n\t\t\t\tonClick: function(e, legendItem) {\n\t\t\t\t\tvar index = legendItem.index;\n\t\t\t\t\tvar chart = this.chart;\n\t\t\t\t\tvar i, ilen, meta;\n\t\n\t\t\t\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\t\t\t// toggle visibility of index if exists\n\t\t\t\t\t\tif (meta.data[index]) {\n\t\t\t\t\t\t\tmeta.data[index].hidden = !meta.data[index].hidden;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tchart.update();\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t// The percentage of the chart that we cut out of the middle.\n\t\t\tcutoutPercentage: 50,\n\t\n\t\t\t// The rotation of the chart, where the first data arc begins.\n\t\t\trotation: Math.PI * -0.5,\n\t\n\t\t\t// The total circumference of the chart.\n\t\t\tcircumference: Math.PI * 2.0,\n\t\n\t\t\t// Need to override these to give a nice default\n\t\t\ttooltips: {\n\t\t\t\tcallbacks: {\n\t\t\t\t\ttitle: function() {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t},\n\t\t\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\t\t\tvar dataLabel = data.labels[tooltipItem.index];\n\t\t\t\t\t\tvar value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\t\n\t\t\t\t\t\tif (helpers.isArray(dataLabel)) {\n\t\t\t\t\t\t\t// show value on first line of multiline label\n\t\t\t\t\t\t\t// need to clone because we are changing the value\n\t\t\t\t\t\t\tdataLabel = dataLabel.slice();\n\t\t\t\t\t\t\tdataLabel[0] += value;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdataLabel += value;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\treturn dataLabel;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\tdefaults.pie = helpers.clone(defaults.doughnut);\n\t\thelpers.extend(defaults.pie, {\n\t\t\tcutoutPercentage: 0\n\t\t});\n\t\n\t\n\t\tChart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({\n\t\n\t\t\tdataElementType: Chart.elements.Arc,\n\t\n\t\t\tlinkScales: helpers.noop,\n\t\n\t\t\t// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\n\t\t\tgetRingIndex: function(datasetIndex) {\n\t\t\t\tvar ringIndex = 0;\n\t\n\t\t\t\tfor (var j = 0; j < datasetIndex; ++j) {\n\t\t\t\t\tif (this.chart.isDatasetVisible(j)) {\n\t\t\t\t\t\t++ringIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn ringIndex;\n\t\t\t},\n\t\n\t\t\tupdate: function(reset) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar chart = me.chart,\n\t\t\t\t\tchartArea = chart.chartArea,\n\t\t\t\t\topts = chart.options,\n\t\t\t\t\tarcOpts = opts.elements.arc,\n\t\t\t\t\tavailableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth,\n\t\t\t\t\tavailableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth,\n\t\t\t\t\tminSize = Math.min(availableWidth, availableHeight),\n\t\t\t\t\toffset = {\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: 0\n\t\t\t\t\t},\n\t\t\t\t\tmeta = me.getMeta(),\n\t\t\t\t\tcutoutPercentage = opts.cutoutPercentage,\n\t\t\t\t\tcircumference = opts.circumference;\n\t\n\t\t\t\t// If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc\n\t\t\t\tif (circumference < Math.PI * 2.0) {\n\t\t\t\t\tvar startAngle = opts.rotation % (Math.PI * 2.0);\n\t\t\t\t\tstartAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);\n\t\t\t\t\tvar endAngle = startAngle + circumference;\n\t\t\t\t\tvar start = {x: Math.cos(startAngle), y: Math.sin(startAngle)};\n\t\t\t\t\tvar end = {x: Math.cos(endAngle), y: Math.sin(endAngle)};\n\t\t\t\t\tvar contains0 = (startAngle <= 0 && 0 <= endAngle) || (startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle);\n\t\t\t\t\tvar contains90 = (startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle);\n\t\t\t\t\tvar contains180 = (startAngle <= -Math.PI && -Math.PI <= endAngle) || (startAngle <= Math.PI && Math.PI <= endAngle);\n\t\t\t\t\tvar contains270 = (startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle);\n\t\t\t\t\tvar cutout = cutoutPercentage / 100.0;\n\t\t\t\t\tvar min = {x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)), y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))};\n\t\t\t\t\tvar max = {x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)), y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))};\n\t\t\t\t\tvar size = {width: (max.x - min.x) * 0.5, height: (max.y - min.y) * 0.5};\n\t\t\t\t\tminSize = Math.min(availableWidth / size.width, availableHeight / size.height);\n\t\t\t\t\toffset = {x: (max.x + min.x) * -0.5, y: (max.y + min.y) * -0.5};\n\t\t\t\t}\n\t\n\t\t\t\tchart.borderWidth = me.getMaxBorderWidth(meta.data);\n\t\t\t\tchart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);\n\t\t\t\tchart.innerRadius = Math.max(cutoutPercentage ? (chart.outerRadius / 100) * (cutoutPercentage) : 0, 0);\n\t\t\t\tchart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n\t\t\t\tchart.offsetX = offset.x * chart.outerRadius;\n\t\t\t\tchart.offsetY = offset.y * chart.outerRadius;\n\t\n\t\t\t\tmeta.total = me.calculateTotal();\n\t\n\t\t\t\tme.outerRadius = chart.outerRadius - (chart.radiusLength * me.getRingIndex(me.index));\n\t\t\t\tme.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);\n\t\n\t\t\t\thelpers.each(meta.data, function(arc, index) {\n\t\t\t\t\tme.updateElement(arc, index, reset);\n\t\t\t\t});\n\t\t\t},\n\t\n\t\t\tupdateElement: function(arc, index, reset) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar chart = me.chart,\n\t\t\t\t\tchartArea = chart.chartArea,\n\t\t\t\t\topts = chart.options,\n\t\t\t\t\tanimationOpts = opts.animation,\n\t\t\t\t\tcenterX = (chartArea.left + chartArea.right) / 2,\n\t\t\t\t\tcenterY = (chartArea.top + chartArea.bottom) / 2,\n\t\t\t\t\tstartAngle = opts.rotation, // non reset case handled later\n\t\t\t\t\tendAngle = opts.rotation, // non reset case handled later\n\t\t\t\t\tdataset = me.getDataset(),\n\t\t\t\t\tcircumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI)),\n\t\t\t\t\tinnerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius,\n\t\t\t\t\touterRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius,\n\t\t\t\t\tvalueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;\n\t\n\t\t\t\thelpers.extend(arc, {\n\t\t\t\t\t// Utility\n\t\t\t\t\t_datasetIndex: me.index,\n\t\t\t\t\t_index: index,\n\t\n\t\t\t\t\t// Desired view properties\n\t\t\t\t\t_model: {\n\t\t\t\t\t\tx: centerX + chart.offsetX,\n\t\t\t\t\t\ty: centerY + chart.offsetY,\n\t\t\t\t\t\tstartAngle: startAngle,\n\t\t\t\t\t\tendAngle: endAngle,\n\t\t\t\t\t\tcircumference: circumference,\n\t\t\t\t\t\touterRadius: outerRadius,\n\t\t\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\t\t\tlabel: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\tvar model = arc._model;\n\t\t\t\t// Resets the visual styles\n\t\t\t\tthis.removeHoverStyle(arc);\n\t\n\t\t\t\t// Set correct angles if not resetting\n\t\t\t\tif (!reset || !animationOpts.animateRotate) {\n\t\t\t\t\tif (index === 0) {\n\t\t\t\t\t\tmodel.startAngle = opts.rotation;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmodel.startAngle = me.getMeta().data[index - 1]._model.endAngle;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tmodel.endAngle = model.startAngle + model.circumference;\n\t\t\t\t}\n\t\n\t\t\t\tarc.pivot();\n\t\t\t},\n\t\n\t\t\tremoveHoverStyle: function(arc) {\n\t\t\t\tChart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);\n\t\t\t},\n\t\n\t\t\tcalculateTotal: function() {\n\t\t\t\tvar dataset = this.getDataset();\n\t\t\t\tvar meta = this.getMeta();\n\t\t\t\tvar total = 0;\n\t\t\t\tvar value;\n\t\n\t\t\t\thelpers.each(meta.data, function(element, index) {\n\t\t\t\t\tvalue = dataset.data[index];\n\t\t\t\t\tif (!isNaN(value) && !element.hidden) {\n\t\t\t\t\t\ttotal += Math.abs(value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\t/* if (total === 0) {\n\t\t\t\t\ttotal = NaN;\n\t\t\t\t}*/\n\t\n\t\t\t\treturn total;\n\t\t\t},\n\t\n\t\t\tcalculateCircumference: function(value) {\n\t\t\t\tvar total = this.getMeta().total;\n\t\t\t\tif (total > 0 && !isNaN(value)) {\n\t\t\t\t\treturn (Math.PI * 2.0) * (value / total);\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t},\n\t\n\t\t\t// gets the max border or hover width to properly scale pie charts\n\t\t\tgetMaxBorderWidth: function(elements) {\n\t\t\t\tvar max = 0,\n\t\t\t\t\tindex = this.index,\n\t\t\t\t\tlength = elements.length,\n\t\t\t\t\tborderWidth,\n\t\t\t\t\thoverWidth;\n\t\n\t\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\t\tborderWidth = elements[i]._model ? elements[i]._model.borderWidth : 0;\n\t\t\t\t\thoverWidth = elements[i]._chart ? elements[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;\n\t\n\t\t\t\t\tmax = borderWidth > max ? borderWidth : max;\n\t\t\t\t\tmax = hoverWidth > max ? hoverWidth : max;\n\t\t\t\t}\n\t\t\t\treturn max;\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 586:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tChart.defaults.line = {\n\t\t\tshowLines: true,\n\t\t\tspanGaps: false,\n\t\n\t\t\thover: {\n\t\t\t\tmode: 'label'\n\t\t\t},\n\t\n\t\t\tscales: {\n\t\t\t\txAxes: [{\n\t\t\t\t\ttype: 'category',\n\t\t\t\t\tid: 'x-axis-0'\n\t\t\t\t}],\n\t\t\t\tyAxes: [{\n\t\t\t\t\ttype: 'linear',\n\t\t\t\t\tid: 'y-axis-0'\n\t\t\t\t}]\n\t\t\t}\n\t\t};\n\t\n\t\tfunction lineEnabled(dataset, options) {\n\t\t\treturn helpers.getValueOrDefault(dataset.showLine, options.showLines);\n\t\t}\n\t\n\t\tChart.controllers.line = Chart.DatasetController.extend({\n\t\n\t\t\tdatasetElementType: Chart.elements.Line,\n\t\n\t\t\tdataElementType: Chart.elements.Point,\n\t\n\t\t\tupdate: function(reset) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar line = meta.dataset;\n\t\t\t\tvar points = meta.data || [];\n\t\t\t\tvar options = me.chart.options;\n\t\t\t\tvar lineElementOptions = options.elements.line;\n\t\t\t\tvar scale = me.getScaleForId(meta.yAxisID);\n\t\t\t\tvar i, ilen, custom;\n\t\t\t\tvar dataset = me.getDataset();\n\t\t\t\tvar showLine = lineEnabled(dataset, options);\n\t\n\t\t\t\t// Update Line\n\t\t\t\tif (showLine) {\n\t\t\t\t\tcustom = line.custom || {};\n\t\n\t\t\t\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\t\t\t\tif ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {\n\t\t\t\t\t\tdataset.lineTension = dataset.tension;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Utility\n\t\t\t\t\tline._scale = scale;\n\t\t\t\t\tline._datasetIndex = me.index;\n\t\t\t\t\t// Data\n\t\t\t\t\tline._children = points;\n\t\t\t\t\t// Model\n\t\t\t\t\tline._model = {\n\t\t\t\t\t\t// Appearance\n\t\t\t\t\t\t// The default behavior of lines is to break at null values, according\n\t\t\t\t\t\t// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158\n\t\t\t\t\t\t// This option gives lines the ability to span gaps\n\t\t\t\t\t\tspanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,\n\t\t\t\t\t\ttension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),\n\t\t\t\t\t\tbackgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),\n\t\t\t\t\t\tborderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),\n\t\t\t\t\t\tborderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),\n\t\t\t\t\t\tborderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),\n\t\t\t\t\t\tborderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),\n\t\t\t\t\t\tborderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),\n\t\t\t\t\t\tborderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),\n\t\t\t\t\t\tfill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),\n\t\t\t\t\t\tsteppedLine: custom.steppedLine ? custom.steppedLine : helpers.getValueOrDefault(dataset.steppedLine, lineElementOptions.stepped),\n\t\t\t\t\t\tcubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.getValueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode),\n\t\t\t\t\t\t// Scale\n\t\t\t\t\t\tscaleTop: scale.top,\n\t\t\t\t\t\tscaleBottom: scale.bottom,\n\t\t\t\t\t\tscaleZero: scale.getBasePixel()\n\t\t\t\t\t};\n\t\n\t\t\t\t\tline.pivot();\n\t\t\t\t}\n\t\n\t\t\t\t// Update Points\n\t\t\t\tfor (i=0, ilen=points.length; i<ilen; ++i) {\n\t\t\t\t\tme.updateElement(points[i], i, reset);\n\t\t\t\t}\n\t\n\t\t\t\tif (showLine && line._model.tension !== 0) {\n\t\t\t\t\tme.updateBezierControlPoints();\n\t\t\t\t}\n\t\n\t\t\t\t// Now pivot the point for animation\n\t\t\t\tfor (i=0, ilen=points.length; i<ilen; ++i) {\n\t\t\t\t\tpoints[i].pivot();\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tgetPointBackgroundColor: function(point, index) {\n\t\t\t\tvar backgroundColor = this.chart.options.elements.point.backgroundColor;\n\t\t\t\tvar dataset = this.getDataset();\n\t\t\t\tvar custom = point.custom || {};\n\t\n\t\t\t\tif (custom.backgroundColor) {\n\t\t\t\t\tbackgroundColor = custom.backgroundColor;\n\t\t\t\t} else if (dataset.pointBackgroundColor) {\n\t\t\t\t\tbackgroundColor = helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);\n\t\t\t\t} else if (dataset.backgroundColor) {\n\t\t\t\t\tbackgroundColor = dataset.backgroundColor;\n\t\t\t\t}\n\t\n\t\t\t\treturn backgroundColor;\n\t\t\t},\n\t\n\t\t\tgetPointBorderColor: function(point, index) {\n\t\t\t\tvar borderColor = this.chart.options.elements.point.borderColor;\n\t\t\t\tvar dataset = this.getDataset();\n\t\t\t\tvar custom = point.custom || {};\n\t\n\t\t\t\tif (custom.borderColor) {\n\t\t\t\t\tborderColor = custom.borderColor;\n\t\t\t\t} else if (dataset.pointBorderColor) {\n\t\t\t\t\tborderColor = helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);\n\t\t\t\t} else if (dataset.borderColor) {\n\t\t\t\t\tborderColor = dataset.borderColor;\n\t\t\t\t}\n\t\n\t\t\t\treturn borderColor;\n\t\t\t},\n\t\n\t\t\tgetPointBorderWidth: function(point, index) {\n\t\t\t\tvar borderWidth = this.chart.options.elements.point.borderWidth;\n\t\t\t\tvar dataset = this.getDataset();\n\t\t\t\tvar custom = point.custom || {};\n\t\n\t\t\t\tif (!isNaN(custom.borderWidth)) {\n\t\t\t\t\tborderWidth = custom.borderWidth;\n\t\t\t\t} else if (!isNaN(dataset.pointBorderWidth)) {\n\t\t\t\t\tborderWidth = helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);\n\t\t\t\t} else if (!isNaN(dataset.borderWidth)) {\n\t\t\t\t\tborderWidth = dataset.borderWidth;\n\t\t\t\t}\n\t\n\t\t\t\treturn borderWidth;\n\t\t\t},\n\t\n\t\t\tupdateElement: function(point, index, reset) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar custom = point.custom || {};\n\t\t\t\tvar dataset = me.getDataset();\n\t\t\t\tvar datasetIndex = me.index;\n\t\t\t\tvar value = dataset.data[index];\n\t\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\t\tvar pointOptions = me.chart.options.elements.point;\n\t\t\t\tvar x, y;\n\t\t\t\tvar labels = me.chart.data.labels || [];\n\t\t\t\tvar includeOffset = (labels.length === 1 || dataset.data.length === 1) || me.chart.isCombo;\n\t\n\t\t\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\t\t\tif ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {\n\t\t\t\t\tdataset.pointRadius = dataset.radius;\n\t\t\t\t}\n\t\t\t\tif ((dataset.hitRadius !== undefined) && (dataset.pointHitRadius === undefined)) {\n\t\t\t\t\tdataset.pointHitRadius = dataset.hitRadius;\n\t\t\t\t}\n\t\n\t\t\t\tx = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex, includeOffset);\n\t\t\t\ty = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);\n\t\n\t\t\t\t// Utility\n\t\t\t\tpoint._xScale = xScale;\n\t\t\t\tpoint._yScale = yScale;\n\t\t\t\tpoint._datasetIndex = datasetIndex;\n\t\t\t\tpoint._index = index;\n\t\n\t\t\t\t// Desired view properties\n\t\t\t\tpoint._model = {\n\t\t\t\t\tx: x,\n\t\t\t\t\ty: y,\n\t\t\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\t\t\t// Appearance\n\t\t\t\t\tradius: custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),\n\t\t\t\t\tpointStyle: custom.pointStyle || helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),\n\t\t\t\t\tbackgroundColor: me.getPointBackgroundColor(point, index),\n\t\t\t\t\tborderColor: me.getPointBorderColor(point, index),\n\t\t\t\t\tborderWidth: me.getPointBorderWidth(point, index),\n\t\t\t\t\ttension: meta.dataset._model ? meta.dataset._model.tension : 0,\n\t\t\t\t\tsteppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,\n\t\t\t\t\t// Tooltip\n\t\t\t\t\thitRadius: custom.hitRadius || helpers.getValueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)\n\t\t\t\t};\n\t\t\t},\n\t\n\t\t\tcalculatePointY: function(value, index, datasetIndex) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar chart = me.chart;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\t\tvar sumPos = 0;\n\t\t\t\tvar sumNeg = 0;\n\t\t\t\tvar i, ds, dsMeta;\n\t\n\t\t\t\tif (yScale.options.stacked) {\n\t\t\t\t\tfor (i = 0; i < datasetIndex; i++) {\n\t\t\t\t\t\tds = chart.data.datasets[i];\n\t\t\t\t\t\tdsMeta = chart.getDatasetMeta(i);\n\t\t\t\t\t\tif (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {\n\t\t\t\t\t\t\tvar stackedRightValue = Number(yScale.getRightValue(ds.data[index]));\n\t\t\t\t\t\t\tif (stackedRightValue < 0) {\n\t\t\t\t\t\t\t\tsumNeg += stackedRightValue || 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsumPos += stackedRightValue || 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar rightValue = Number(yScale.getRightValue(value));\n\t\t\t\t\tif (rightValue < 0) {\n\t\t\t\t\t\treturn yScale.getPixelForValue(sumNeg + rightValue);\n\t\t\t\t\t}\n\t\t\t\t\treturn yScale.getPixelForValue(sumPos + rightValue);\n\t\t\t\t}\n\t\n\t\t\t\treturn yScale.getPixelForValue(value);\n\t\t\t},\n\t\n\t\t\tupdateBezierControlPoints: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar area = me.chart.chartArea;\n\t\t\t\tvar points = (meta.data || []);\n\t\t\t\tvar i, ilen, point, model, controlPoints;\n\t\n\t\t\t\t// Only consider points that are drawn in case the spanGaps option is used\n\t\t\t\tif (meta.dataset._model.spanGaps) {\n\t\t\t\t\tpoints = points.filter(function(pt) {\n\t\t\t\t\t\treturn !pt._model.skip;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\tfunction capControlPoint(pt, min, max) {\n\t\t\t\t\treturn Math.max(Math.min(pt, max), min);\n\t\t\t\t}\n\t\n\t\t\t\tif (meta.dataset._model.cubicInterpolationMode === 'monotone') {\n\t\t\t\t\thelpers.splineCurveMonotone(points);\n\t\t\t\t} else {\n\t\t\t\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\t\t\t\tpoint = points[i];\n\t\t\t\t\t\tmodel = point._model;\n\t\t\t\t\t\tcontrolPoints = helpers.splineCurve(\n\t\t\t\t\t\t\thelpers.previousItem(points, i)._model,\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\thelpers.nextItem(points, i)._model,\n\t\t\t\t\t\t\tmeta.dataset._model.tension\n\t\t\t\t\t\t);\n\t\t\t\t\t\tmodel.controlPointPreviousX = controlPoints.previous.x;\n\t\t\t\t\t\tmodel.controlPointPreviousY = controlPoints.previous.y;\n\t\t\t\t\t\tmodel.controlPointNextX = controlPoints.next.x;\n\t\t\t\t\t\tmodel.controlPointNextY = controlPoints.next.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tif (me.chart.options.elements.line.capBezierPoints) {\n\t\t\t\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\t\t\t\tmodel = points[i]._model;\n\t\t\t\t\t\tmodel.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);\n\t\t\t\t\t\tmodel.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);\n\t\t\t\t\t\tmodel.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);\n\t\t\t\t\t\tmodel.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tdraw: function(ease) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar points = meta.data || [];\n\t\t\t\tvar easingDecimal = ease || 1;\n\t\t\t\tvar i, ilen;\n\t\n\t\t\t\t// Transition Point Locations\n\t\t\t\tfor (i=0, ilen=points.length; i<ilen; ++i) {\n\t\t\t\t\tpoints[i].transition(easingDecimal);\n\t\t\t\t}\n\t\n\t\t\t\tChart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);\n\t\t\t\t// Transition and Draw the line\n\t\t\t\tif (lineEnabled(me.getDataset(), me.chart.options)) {\n\t\t\t\t\tmeta.dataset.transition(easingDecimal).draw();\n\t\t\t\t}\n\t\t\t\tChart.canvasHelpers.unclipArea(me.chart.chart.ctx);\n\t\n\t\t\t\t// Draw the points\n\t\t\t\tfor (i=0, ilen=points.length; i<ilen; ++i) {\n\t\t\t\t\tpoints[i].draw(me.chart.chartArea);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tsetHoverStyle: function(point) {\n\t\t\t\t// Point\n\t\t\t\tvar dataset = this.chart.data.datasets[point._datasetIndex];\n\t\t\t\tvar index = point._index;\n\t\t\t\tvar custom = point.custom || {};\n\t\t\t\tvar model = point._model;\n\t\n\t\t\t\tmodel.radius = custom.hoverRadius || helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);\n\t\t\t\tmodel.backgroundColor = custom.hoverBackgroundColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));\n\t\t\t\tmodel.borderColor = custom.hoverBorderColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));\n\t\t\t\tmodel.borderWidth = custom.hoverBorderWidth || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);\n\t\t\t},\n\t\n\t\t\tremoveHoverStyle: function(point) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar dataset = me.chart.data.datasets[point._datasetIndex];\n\t\t\t\tvar index = point._index;\n\t\t\t\tvar custom = point.custom || {};\n\t\t\t\tvar model = point._model;\n\t\n\t\t\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\t\t\tif ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {\n\t\t\t\t\tdataset.pointRadius = dataset.radius;\n\t\t\t\t}\n\t\n\t\t\t\tmodel.radius = custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, me.chart.options.elements.point.radius);\n\t\t\t\tmodel.backgroundColor = me.getPointBackgroundColor(point, index);\n\t\t\t\tmodel.borderColor = me.getPointBorderColor(point, index);\n\t\t\t\tmodel.borderWidth = me.getPointBorderWidth(point, index);\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 587:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tChart.defaults.polarArea = {\n\t\n\t\t\tscale: {\n\t\t\t\ttype: 'radialLinear',\n\t\t\t\tlineArc: true, // so that lines are circular\n\t\t\t\tticks: {\n\t\t\t\t\tbeginAtZero: true\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t// Boolean - Whether to animate the rotation of the chart\n\t\t\tanimation: {\n\t\t\t\tanimateRotate: true,\n\t\t\t\tanimateScale: true\n\t\t\t},\n\t\n\t\t\tstartAngle: -0.5 * Math.PI,\n\t\t\taspectRatio: 1,\n\t\t\tlegendCallback: function(chart) {\n\t\t\t\tvar text = [];\n\t\t\t\ttext.push('<ul class=\"' + chart.id + '-legend\">');\n\t\n\t\t\t\tvar data = chart.data;\n\t\t\t\tvar datasets = data.datasets;\n\t\t\t\tvar labels = data.labels;\n\t\n\t\t\t\tif (datasets.length) {\n\t\t\t\t\tfor (var i = 0; i < datasets[0].data.length; ++i) {\n\t\t\t\t\t\ttext.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\t\t\t\t\t\tif (labels[i]) {\n\t\t\t\t\t\t\ttext.push(labels[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttext.push('</li>');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\ttext.push('</ul>');\n\t\t\t\treturn text.join('');\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\tlabels: {\n\t\t\t\t\tgenerateLabels: function(chart) {\n\t\t\t\t\t\tvar data = chart.data;\n\t\t\t\t\t\tif (data.labels.length && data.datasets.length) {\n\t\t\t\t\t\t\treturn data.labels.map(function(label, i) {\n\t\t\t\t\t\t\t\tvar meta = chart.getDatasetMeta(0);\n\t\t\t\t\t\t\t\tvar ds = data.datasets[0];\n\t\t\t\t\t\t\t\tvar arc = meta.data[i];\n\t\t\t\t\t\t\t\tvar custom = arc.custom || {};\n\t\t\t\t\t\t\t\tvar getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;\n\t\t\t\t\t\t\t\tvar arcOpts = chart.options.elements.arc;\n\t\t\t\t\t\t\t\tvar fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);\n\t\t\t\t\t\t\t\tvar stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);\n\t\t\t\t\t\t\t\tvar bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);\n\t\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\t\t\tfillStyle: fill,\n\t\t\t\t\t\t\t\t\tstrokeStyle: stroke,\n\t\t\t\t\t\t\t\t\tlineWidth: bw,\n\t\t\t\t\t\t\t\t\thidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n\t\n\t\t\t\t\t\t\t\t\t// Extra data used for toggling the correct item\n\t\t\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\n\t\t\t\tonClick: function(e, legendItem) {\n\t\t\t\t\tvar index = legendItem.index;\n\t\t\t\t\tvar chart = this.chart;\n\t\t\t\t\tvar i, ilen, meta;\n\t\n\t\t\t\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\t\t\tmeta.data[index].hidden = !meta.data[index].hidden;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tchart.update();\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t// Need to override these to give a nice default\n\t\t\ttooltips: {\n\t\t\t\tcallbacks: {\n\t\t\t\t\ttitle: function() {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t},\n\t\t\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\t\t\treturn data.labels[tooltipItem.index] + ': ' + tooltipItem.yLabel;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\tChart.controllers.polarArea = Chart.DatasetController.extend({\n\t\n\t\t\tdataElementType: Chart.elements.Arc,\n\t\n\t\t\tlinkScales: helpers.noop,\n\t\n\t\t\tupdate: function(reset) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar chart = me.chart;\n\t\t\t\tvar chartArea = chart.chartArea;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar opts = chart.options;\n\t\t\t\tvar arcOpts = opts.elements.arc;\n\t\t\t\tvar minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\t\t\t\tchart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);\n\t\t\t\tchart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n\t\t\t\tchart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n\t\n\t\t\t\tme.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);\n\t\t\t\tme.innerRadius = me.outerRadius - chart.radiusLength;\n\t\n\t\t\t\tmeta.count = me.countVisibleElements();\n\t\n\t\t\t\thelpers.each(meta.data, function(arc, index) {\n\t\t\t\t\tme.updateElement(arc, index, reset);\n\t\t\t\t});\n\t\t\t},\n\t\n\t\t\tupdateElement: function(arc, index, reset) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar chart = me.chart;\n\t\t\t\tvar dataset = me.getDataset();\n\t\t\t\tvar opts = chart.options;\n\t\t\t\tvar animationOpts = opts.animation;\n\t\t\t\tvar scale = chart.scale;\n\t\t\t\tvar getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;\n\t\t\t\tvar labels = chart.data.labels;\n\t\n\t\t\t\tvar circumference = me.calculateCircumference(dataset.data[index]);\n\t\t\t\tvar centerX = scale.xCenter;\n\t\t\t\tvar centerY = scale.yCenter;\n\t\n\t\t\t\t// If there is NaN data before us, we need to calculate the starting angle correctly.\n\t\t\t\t// We could be way more efficient here, but its unlikely that the polar area chart will have a lot of data\n\t\t\t\tvar visibleCount = 0;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tfor (var i = 0; i < index; ++i) {\n\t\t\t\t\tif (!isNaN(dataset.data[i]) && !meta.data[i].hidden) {\n\t\t\t\t\t\t++visibleCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// var negHalfPI = -0.5 * Math.PI;\n\t\t\t\tvar datasetStartAngle = opts.startAngle;\n\t\t\t\tvar distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n\t\t\t\tvar startAngle = datasetStartAngle + (circumference * visibleCount);\n\t\t\t\tvar endAngle = startAngle + (arc.hidden ? 0 : circumference);\n\t\n\t\t\t\tvar resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n\t\n\t\t\t\thelpers.extend(arc, {\n\t\t\t\t\t// Utility\n\t\t\t\t\t_datasetIndex: me.index,\n\t\t\t\t\t_index: index,\n\t\t\t\t\t_scale: scale,\n\t\n\t\t\t\t\t// Desired view properties\n\t\t\t\t\t_model: {\n\t\t\t\t\t\tx: centerX,\n\t\t\t\t\t\ty: centerY,\n\t\t\t\t\t\tinnerRadius: 0,\n\t\t\t\t\t\touterRadius: reset ? resetRadius : distance,\n\t\t\t\t\t\tstartAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,\n\t\t\t\t\t\tendAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,\n\t\t\t\t\t\tlabel: getValueAtIndexOrDefault(labels, index, labels[index])\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\t// Apply border and fill style\n\t\t\t\tme.removeHoverStyle(arc);\n\t\n\t\t\t\tarc.pivot();\n\t\t\t},\n\t\n\t\t\tremoveHoverStyle: function(arc) {\n\t\t\t\tChart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);\n\t\t\t},\n\t\n\t\t\tcountVisibleElements: function() {\n\t\t\t\tvar dataset = this.getDataset();\n\t\t\t\tvar meta = this.getMeta();\n\t\t\t\tvar count = 0;\n\t\n\t\t\t\thelpers.each(meta.data, function(element, index) {\n\t\t\t\t\tif (!isNaN(dataset.data[index]) && !element.hidden) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\treturn count;\n\t\t\t},\n\t\n\t\t\tcalculateCircumference: function(value) {\n\t\t\t\tvar count = this.getMeta().count;\n\t\t\t\tif (count > 0 && !isNaN(value)) {\n\t\t\t\t\treturn (2 * Math.PI) / count;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 588:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tChart.defaults.radar = {\n\t\t\taspectRatio: 1,\n\t\t\tscale: {\n\t\t\t\ttype: 'radialLinear'\n\t\t\t},\n\t\t\telements: {\n\t\t\t\tline: {\n\t\t\t\t\ttension: 0 // no bezier in radar\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\tChart.controllers.radar = Chart.DatasetController.extend({\n\t\n\t\t\tdatasetElementType: Chart.elements.Line,\n\t\n\t\t\tdataElementType: Chart.elements.Point,\n\t\n\t\t\tlinkScales: helpers.noop,\n\t\n\t\t\tupdate: function(reset) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar line = meta.dataset;\n\t\t\t\tvar points = meta.data;\n\t\t\t\tvar custom = line.custom || {};\n\t\t\t\tvar dataset = me.getDataset();\n\t\t\t\tvar lineElementOptions = me.chart.options.elements.line;\n\t\t\t\tvar scale = me.chart.scale;\n\t\n\t\t\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\t\t\tif ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {\n\t\t\t\t\tdataset.lineTension = dataset.tension;\n\t\t\t\t}\n\t\n\t\t\t\thelpers.extend(meta.dataset, {\n\t\t\t\t\t// Utility\n\t\t\t\t\t_datasetIndex: me.index,\n\t\t\t\t\t// Data\n\t\t\t\t\t_children: points,\n\t\t\t\t\t_loop: true,\n\t\t\t\t\t// Model\n\t\t\t\t\t_model: {\n\t\t\t\t\t\t// Appearance\n\t\t\t\t\t\ttension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),\n\t\t\t\t\t\tbackgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),\n\t\t\t\t\t\tborderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),\n\t\t\t\t\t\tborderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),\n\t\t\t\t\t\tfill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),\n\t\t\t\t\t\tborderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),\n\t\t\t\t\t\tborderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),\n\t\t\t\t\t\tborderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),\n\t\t\t\t\t\tborderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),\n\t\n\t\t\t\t\t\t// Scale\n\t\t\t\t\t\tscaleTop: scale.top,\n\t\t\t\t\t\tscaleBottom: scale.bottom,\n\t\t\t\t\t\tscaleZero: scale.getBasePosition()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\tmeta.dataset.pivot();\n\t\n\t\t\t\t// Update Points\n\t\t\t\thelpers.each(points, function(point, index) {\n\t\t\t\t\tme.updateElement(point, index, reset);\n\t\t\t\t}, me);\n\t\n\t\t\t\t// Update bezier control points\n\t\t\t\tme.updateBezierControlPoints();\n\t\t\t},\n\t\t\tupdateElement: function(point, index, reset) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar custom = point.custom || {};\n\t\t\t\tvar dataset = me.getDataset();\n\t\t\t\tvar scale = me.chart.scale;\n\t\t\t\tvar pointElementOptions = me.chart.options.elements.point;\n\t\t\t\tvar pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);\n\t\n\t\t\t\thelpers.extend(point, {\n\t\t\t\t\t// Utility\n\t\t\t\t\t_datasetIndex: me.index,\n\t\t\t\t\t_index: index,\n\t\t\t\t\t_scale: scale,\n\t\n\t\t\t\t\t// Desired view properties\n\t\t\t\t\t_model: {\n\t\t\t\t\t\tx: reset ? scale.xCenter : pointPosition.x, // value not used in dataset scale, but we want a consistent API between scales\n\t\t\t\t\t\ty: reset ? scale.yCenter : pointPosition.y,\n\t\n\t\t\t\t\t\t// Appearance\n\t\t\t\t\t\ttension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, me.chart.options.elements.line.tension),\n\t\t\t\t\t\tradius: custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),\n\t\t\t\t\t\tbackgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),\n\t\t\t\t\t\tborderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),\n\t\t\t\t\t\tborderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),\n\t\t\t\t\t\tpointStyle: custom.pointStyle ? custom.pointStyle : helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),\n\t\n\t\t\t\t\t\t// Tooltip\n\t\t\t\t\t\thitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\tpoint._model.skip = custom.skip ? custom.skip : (isNaN(point._model.x) || isNaN(point._model.y));\n\t\t\t},\n\t\t\tupdateBezierControlPoints: function() {\n\t\t\t\tvar chartArea = this.chart.chartArea;\n\t\t\t\tvar meta = this.getMeta();\n\t\n\t\t\t\thelpers.each(meta.data, function(point, index) {\n\t\t\t\t\tvar model = point._model;\n\t\t\t\t\tvar controlPoints = helpers.splineCurve(\n\t\t\t\t\t\thelpers.previousItem(meta.data, index, true)._model,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\thelpers.nextItem(meta.data, index, true)._model,\n\t\t\t\t\t\tmodel.tension\n\t\t\t\t\t);\n\t\n\t\t\t\t\t// Prevent the bezier going outside of the bounds of the graph\n\t\t\t\t\tmodel.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);\n\t\t\t\t\tmodel.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);\n\t\n\t\t\t\t\tmodel.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);\n\t\t\t\t\tmodel.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top);\n\t\n\t\t\t\t\t// Now pivot the point for animation\n\t\t\t\t\tpoint.pivot();\n\t\t\t\t});\n\t\t\t},\n\t\n\t\t\tdraw: function(ease) {\n\t\t\t\tvar meta = this.getMeta();\n\t\t\t\tvar easingDecimal = ease || 1;\n\t\n\t\t\t\t// Transition Point Locations\n\t\t\t\thelpers.each(meta.data, function(point) {\n\t\t\t\t\tpoint.transition(easingDecimal);\n\t\t\t\t});\n\t\n\t\t\t\t// Transition and Draw the line\n\t\t\t\tmeta.dataset.transition(easingDecimal).draw();\n\t\n\t\t\t\t// Draw the points\n\t\t\t\thelpers.each(meta.data, function(point) {\n\t\t\t\t\tpoint.draw();\n\t\t\t\t});\n\t\t\t},\n\t\n\t\t\tsetHoverStyle: function(point) {\n\t\t\t\t// Point\n\t\t\t\tvar dataset = this.chart.data.datasets[point._datasetIndex];\n\t\t\t\tvar custom = point.custom || {};\n\t\t\t\tvar index = point._index;\n\t\t\t\tvar model = point._model;\n\t\n\t\t\t\tmodel.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);\n\t\t\t\tmodel.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));\n\t\t\t\tmodel.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));\n\t\t\t\tmodel.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);\n\t\t\t},\n\t\n\t\t\tremoveHoverStyle: function(point) {\n\t\t\t\tvar dataset = this.chart.data.datasets[point._datasetIndex];\n\t\t\t\tvar custom = point.custom || {};\n\t\t\t\tvar index = point._index;\n\t\t\t\tvar model = point._model;\n\t\t\t\tvar pointElementOptions = this.chart.options.elements.point;\n\t\n\t\t\t\tmodel.radius = custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.radius, index, pointElementOptions.radius);\n\t\t\t\tmodel.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor);\n\t\t\t\tmodel.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor);\n\t\t\t\tmodel.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth);\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 589:\n/***/ function(module, exports) {\n\n\t/* global window: false */\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tChart.defaults.global.animation = {\n\t\t\tduration: 1000,\n\t\t\teasing: 'easeOutQuart',\n\t\t\tonProgress: helpers.noop,\n\t\t\tonComplete: helpers.noop\n\t\t};\n\t\n\t\tChart.Animation = Chart.Element.extend({\n\t\t\tcurrentStep: null, // the current animation step\n\t\t\tnumSteps: 60, // default number of steps\n\t\t\teasing: '', // the easing to use for this animation\n\t\t\trender: null, // render function used by the animation service\n\t\n\t\t\tonAnimationProgress: null, // user specified callback to fire on each step of the animation\n\t\t\tonAnimationComplete: null // user specified callback to fire when the animation finishes\n\t\t});\n\t\n\t\tChart.animationService = {\n\t\t\tframeDuration: 17,\n\t\t\tanimations: [],\n\t\t\tdropFrames: 0,\n\t\t\trequest: null,\n\t\n\t\t\t/**\n\t\t\t * @function Chart.animationService.addAnimation\n\t\t\t * @param chartInstance {ChartController} the chart to animate\n\t\t\t * @param animationObject {IAnimation} the animation that we will animate\n\t\t\t * @param duration {Number} length of animation in ms\n\t\t\t * @param lazy {Boolean} if true, the chart is not marked as animating to enable more responsive interactions\n\t\t\t */\n\t\t\taddAnimation: function(chartInstance, animationObject, duration, lazy) {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\tif (!lazy) {\n\t\t\t\t\tchartInstance.animating = true;\n\t\t\t\t}\n\t\n\t\t\t\tfor (var index = 0; index < me.animations.length; ++index) {\n\t\t\t\t\tif (me.animations[index].chartInstance === chartInstance) {\n\t\t\t\t\t\t// replacing an in progress animation\n\t\t\t\t\t\tme.animations[index].animationObject = animationObject;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tme.animations.push({\n\t\t\t\t\tchartInstance: chartInstance,\n\t\t\t\t\tanimationObject: animationObject\n\t\t\t\t});\n\t\n\t\t\t\t// If there are no animations queued, manually kickstart a digest, for lack of a better word\n\t\t\t\tif (me.animations.length === 1) {\n\t\t\t\t\tme.requestAnimationFrame();\n\t\t\t\t}\n\t\t\t},\n\t\t\t// Cancel the animation for a given chart instance\n\t\t\tcancelAnimation: function(chartInstance) {\n\t\t\t\tvar index = helpers.findIndex(this.animations, function(animationWrapper) {\n\t\t\t\t\treturn animationWrapper.chartInstance === chartInstance;\n\t\t\t\t});\n\t\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tthis.animations.splice(index, 1);\n\t\t\t\t\tchartInstance.animating = false;\n\t\t\t\t}\n\t\t\t},\n\t\t\trequestAnimationFrame: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tif (me.request === null) {\n\t\t\t\t\t// Skip animation frame requests until the active one is executed.\n\t\t\t\t\t// This can happen when processing mouse events, e.g. 'mousemove'\n\t\t\t\t\t// and 'mouseout' events will trigger multiple renders.\n\t\t\t\t\tme.request = helpers.requestAnimFrame.call(window, function() {\n\t\t\t\t\t\tme.request = null;\n\t\t\t\t\t\tme.startDigest();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tstartDigest: function() {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\tvar startTime = Date.now();\n\t\t\t\tvar framesToDrop = 0;\n\t\n\t\t\t\tif (me.dropFrames > 1) {\n\t\t\t\t\tframesToDrop = Math.floor(me.dropFrames);\n\t\t\t\t\tme.dropFrames = me.dropFrames % 1;\n\t\t\t\t}\n\t\n\t\t\t\tvar i = 0;\n\t\t\t\twhile (i < me.animations.length) {\n\t\t\t\t\tif (me.animations[i].animationObject.currentStep === null) {\n\t\t\t\t\t\tme.animations[i].animationObject.currentStep = 0;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tme.animations[i].animationObject.currentStep += 1 + framesToDrop;\n\t\n\t\t\t\t\tif (me.animations[i].animationObject.currentStep > me.animations[i].animationObject.numSteps) {\n\t\t\t\t\t\tme.animations[i].animationObject.currentStep = me.animations[i].animationObject.numSteps;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tme.animations[i].animationObject.render(me.animations[i].chartInstance, me.animations[i].animationObject);\n\t\t\t\t\tif (me.animations[i].animationObject.onAnimationProgress && me.animations[i].animationObject.onAnimationProgress.call) {\n\t\t\t\t\t\tme.animations[i].animationObject.onAnimationProgress.call(me.animations[i].chartInstance, me.animations[i]);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (me.animations[i].animationObject.currentStep === me.animations[i].animationObject.numSteps) {\n\t\t\t\t\t\tif (me.animations[i].animationObject.onAnimationComplete && me.animations[i].animationObject.onAnimationComplete.call) {\n\t\t\t\t\t\t\tme.animations[i].animationObject.onAnimationComplete.call(me.animations[i].chartInstance, me.animations[i]);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// executed the last frame. Remove the animation.\n\t\t\t\t\t\tme.animations[i].chartInstance.animating = false;\n\t\n\t\t\t\t\t\tme.animations.splice(i, 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t++i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tvar endTime = Date.now();\n\t\t\t\tvar dropFrames = (endTime - startTime) / me.frameDuration;\n\t\n\t\t\t\tme.dropFrames += dropFrames;\n\t\n\t\t\t\t// Do we have more stuff to animate?\n\t\t\t\tif (me.animations.length > 0) {\n\t\t\t\t\tme.requestAnimationFrame();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t};\n\n\n/***/ },\n\n/***/ 590:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\t// Global Chart canvas helpers object for drawing items to canvas\n\t\tvar helpers = Chart.canvasHelpers = {};\n\t\n\t\thelpers.drawPoint = function(ctx, pointStyle, radius, x, y) {\n\t\t\tvar type, edgeLength, xOffset, yOffset, height, size;\n\t\n\t\t\tif (typeof pointStyle === 'object') {\n\t\t\t\ttype = pointStyle.toString();\n\t\t\t\tif (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n\t\t\t\t\tctx.drawImage(pointStyle, x - pointStyle.width / 2, y - pointStyle.height / 2);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (isNaN(radius) || radius <= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tswitch (pointStyle) {\n\t\t\t// Default includes circle\n\t\t\tdefault:\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(x, y, radius, 0, Math.PI * 2);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.fill();\n\t\t\t\tbreak;\n\t\t\tcase 'triangle':\n\t\t\t\tctx.beginPath();\n\t\t\t\tedgeLength = 3 * radius / Math.sqrt(3);\n\t\t\t\theight = edgeLength * Math.sqrt(3) / 2;\n\t\t\t\tctx.moveTo(x - edgeLength / 2, y + height / 3);\n\t\t\t\tctx.lineTo(x + edgeLength / 2, y + height / 3);\n\t\t\t\tctx.lineTo(x, y - 2 * height / 3);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.fill();\n\t\t\t\tbreak;\n\t\t\tcase 'rect':\n\t\t\t\tsize = 1 / Math.SQRT2 * radius;\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.fillRect(x - size, y - size, 2 * size, 2 * size);\n\t\t\t\tctx.strokeRect(x - size, y - size, 2 * size, 2 * size);\n\t\t\t\tbreak;\n\t\t\tcase 'rectRounded':\n\t\t\t\tvar offset = radius / Math.SQRT2;\n\t\t\t\tvar leftX = x - offset;\n\t\t\t\tvar topY = y - offset;\n\t\t\t\tvar sideSize = Math.SQRT2 * radius;\n\t\t\t\tChart.helpers.drawRoundedRectangle(ctx, leftX, topY, sideSize, sideSize, radius / 2);\n\t\t\t\tctx.fill();\n\t\t\t\tbreak;\n\t\t\tcase 'rectRot':\n\t\t\t\tsize = 1 / Math.SQRT2 * radius;\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(x - size, y);\n\t\t\t\tctx.lineTo(x, y + size);\n\t\t\t\tctx.lineTo(x + size, y);\n\t\t\t\tctx.lineTo(x, y - size);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.fill();\n\t\t\t\tbreak;\n\t\t\tcase 'cross':\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(x, y + radius);\n\t\t\t\tctx.lineTo(x, y - radius);\n\t\t\t\tctx.moveTo(x - radius, y);\n\t\t\t\tctx.lineTo(x + radius, y);\n\t\t\t\tctx.closePath();\n\t\t\t\tbreak;\n\t\t\tcase 'crossRot':\n\t\t\t\tctx.beginPath();\n\t\t\t\txOffset = Math.cos(Math.PI / 4) * radius;\n\t\t\t\tyOffset = Math.sin(Math.PI / 4) * radius;\n\t\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\t\tctx.moveTo(x - xOffset, y + yOffset);\n\t\t\t\tctx.lineTo(x + xOffset, y - yOffset);\n\t\t\t\tctx.closePath();\n\t\t\t\tbreak;\n\t\t\tcase 'star':\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(x, y + radius);\n\t\t\t\tctx.lineTo(x, y - radius);\n\t\t\t\tctx.moveTo(x - radius, y);\n\t\t\t\tctx.lineTo(x + radius, y);\n\t\t\t\txOffset = Math.cos(Math.PI / 4) * radius;\n\t\t\t\tyOffset = Math.sin(Math.PI / 4) * radius;\n\t\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\t\tctx.moveTo(x - xOffset, y + yOffset);\n\t\t\t\tctx.lineTo(x + xOffset, y - yOffset);\n\t\t\t\tctx.closePath();\n\t\t\t\tbreak;\n\t\t\tcase 'line':\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(x - radius, y);\n\t\t\t\tctx.lineTo(x + radius, y);\n\t\t\t\tctx.closePath();\n\t\t\t\tbreak;\n\t\t\tcase 'dash':\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(x, y);\n\t\t\t\tctx.lineTo(x + radius, y);\n\t\t\t\tctx.closePath();\n\t\t\t\tbreak;\n\t\t\t}\n\t\n\t\t\tctx.stroke();\n\t\t};\n\t\n\t\thelpers.clipArea = function(ctx, clipArea) {\n\t\t\tctx.save();\n\t\t\tctx.beginPath();\n\t\t\tctx.rect(clipArea.left, clipArea.top, clipArea.right - clipArea.left, clipArea.bottom - clipArea.top);\n\t\t\tctx.clip();\n\t\t};\n\t\n\t\thelpers.unclipArea = function(ctx) {\n\t\t\tctx.restore();\n\t\t};\n\t\n\t};\n\n\n/***/ },\n\n/***/ 591:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\tvar plugins = Chart.plugins;\n\t\tvar platform = Chart.platform;\n\t\n\t\t// Create a dictionary of chart types, to allow for extension of existing types\n\t\tChart.types = {};\n\t\n\t\t// Store a reference to each instance - allowing us to globally resize chart instances on window resize.\n\t\t// Destroy method on the chart will remove the instance of the chart from this reference.\n\t\tChart.instances = {};\n\t\n\t\t// Controllers available for dataset visualization eg. bar, line, slice, etc.\n\t\tChart.controllers = {};\n\t\n\t\t/**\n\t\t * Initializes the given config with global and chart default values.\n\t\t */\n\t\tfunction initConfig(config) {\n\t\t\tconfig = config || {};\n\t\n\t\t\t// Do NOT use configMerge() for the data object because this method merges arrays\n\t\t\t// and so would change references to labels and datasets, preventing data updates.\n\t\t\tvar data = config.data = config.data || {};\n\t\t\tdata.datasets = data.datasets || [];\n\t\t\tdata.labels = data.labels || [];\n\t\n\t\t\tconfig.options = helpers.configMerge(\n\t\t\t\tChart.defaults.global,\n\t\t\t\tChart.defaults[config.type],\n\t\t\t\tconfig.options || {});\n\t\n\t\t\treturn config;\n\t\t}\n\t\n\t\t/**\n\t\t * Updates the config of the chart\n\t\t * @param chart {Chart.Controller} chart to update the options for\n\t\t */\n\t\tfunction updateConfig(chart) {\n\t\t\tvar newOptions = chart.options;\n\t\n\t\t\t// Update Scale(s) with options\n\t\t\tif (newOptions.scale) {\n\t\t\t\tchart.scale.options = newOptions.scale;\n\t\t\t} else if (newOptions.scales) {\n\t\t\t\tnewOptions.scales.xAxes.concat(newOptions.scales.yAxes).forEach(function(scaleOptions) {\n\t\t\t\t\tchart.scales[scaleOptions.id].options = scaleOptions;\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\t// Tooltip\n\t\t\tchart.tooltip._options = newOptions.tooltips;\n\t\t}\n\t\n\t\t/**\n\t\t * @class Chart.Controller\n\t\t * The main controller of a chart.\n\t\t */\n\t\tChart.Controller = function(item, config, instance) {\n\t\t\tvar me = this;\n\t\n\t\t\tconfig = initConfig(config);\n\t\n\t\t\tvar context = platform.acquireContext(item, config);\n\t\t\tvar canvas = context && context.canvas;\n\t\t\tvar height = canvas && canvas.height;\n\t\t\tvar width = canvas && canvas.width;\n\t\n\t\t\tinstance.ctx = context;\n\t\t\tinstance.canvas = canvas;\n\t\t\tinstance.config = config;\n\t\t\tinstance.width = width;\n\t\t\tinstance.height = height;\n\t\t\tinstance.aspectRatio = height? width / height : null;\n\t\n\t\t\tme.id = helpers.uid();\n\t\t\tme.chart = instance;\n\t\t\tme.config = config;\n\t\t\tme.options = config.options;\n\t\t\tme._bufferedRender = false;\n\t\n\t\t\t// Add the chart instance to the global namespace\n\t\t\tChart.instances[me.id] = me;\n\t\n\t\t\tObject.defineProperty(me, 'data', {\n\t\t\t\tget: function() {\n\t\t\t\t\treturn me.config.data;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tif (!context || !canvas) {\n\t\t\t\t// The given item is not a compatible context2d element, let's return before finalizing\n\t\t\t\t// the chart initialization but after setting basic chart / controller properties that\n\t\t\t\t// can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n\t\t\t\t// https://github.com/chartjs/Chart.js/issues/2807\n\t\t\t\tconsole.error(\"Failed to create chart: can't acquire context from the given item\");\n\t\t\t\treturn me;\n\t\t\t}\n\t\n\t\t\tme.initialize();\n\t\t\tme.update();\n\t\n\t\t\treturn me;\n\t\t};\n\t\n\t\thelpers.extend(Chart.Controller.prototype, /** @lends Chart.Controller.prototype */ {\n\t\t\tinitialize: function() {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\t// Before init plugin notification\n\t\t\t\tplugins.notify(me, 'beforeInit');\n\t\n\t\t\t\thelpers.retinaScale(me.chart);\n\t\n\t\t\t\tme.bindEvents();\n\t\n\t\t\t\tif (me.options.responsive) {\n\t\t\t\t\t// Initial resize before chart draws (must be silent to preserve initial animations).\n\t\t\t\t\tme.resize(true);\n\t\t\t\t}\n\t\n\t\t\t\t// Make sure scales have IDs and are built before we build any controllers.\n\t\t\t\tme.ensureScalesHaveIDs();\n\t\t\t\tme.buildScales();\n\t\t\t\tme.initToolTip();\n\t\n\t\t\t\t// After init plugin notification\n\t\t\t\tplugins.notify(me, 'afterInit');\n\t\n\t\t\t\treturn me;\n\t\t\t},\n\t\n\t\t\tclear: function() {\n\t\t\t\thelpers.clear(this.chart);\n\t\t\t\treturn this;\n\t\t\t},\n\t\n\t\t\tstop: function() {\n\t\t\t\t// Stops any current animation loop occurring\n\t\t\t\tChart.animationService.cancelAnimation(this);\n\t\t\t\treturn this;\n\t\t\t},\n\t\n\t\t\tresize: function(silent) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar chart = me.chart;\n\t\t\t\tvar options = me.options;\n\t\t\t\tvar canvas = chart.canvas;\n\t\t\t\tvar aspectRatio = (options.maintainAspectRatio && chart.aspectRatio) || null;\n\t\n\t\t\t\t// the canvas render width and height will be casted to integers so make sure that\n\t\t\t\t// the canvas display style uses the same integer values to avoid blurring effect.\n\t\t\t\tvar newWidth = Math.floor(helpers.getMaximumWidth(canvas));\n\t\t\t\tvar newHeight = Math.floor(aspectRatio? newWidth / aspectRatio : helpers.getMaximumHeight(canvas));\n\t\n\t\t\t\tif (chart.width === newWidth && chart.height === newHeight) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tcanvas.width = chart.width = newWidth;\n\t\t\t\tcanvas.height = chart.height = newHeight;\n\t\t\t\tcanvas.style.width = newWidth + 'px';\n\t\t\t\tcanvas.style.height = newHeight + 'px';\n\t\n\t\t\t\thelpers.retinaScale(chart);\n\t\n\t\t\t\tif (!silent) {\n\t\t\t\t\t// Notify any plugins about the resize\n\t\t\t\t\tvar newSize = {width: newWidth, height: newHeight};\n\t\t\t\t\tplugins.notify(me, 'resize', [newSize]);\n\t\n\t\t\t\t\t// Notify of resize\n\t\t\t\t\tif (me.options.onResize) {\n\t\t\t\t\t\tme.options.onResize(me, newSize);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tme.stop();\n\t\t\t\t\tme.update(me.options.responsiveAnimationDuration);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tensureScalesHaveIDs: function() {\n\t\t\t\tvar options = this.options;\n\t\t\t\tvar scalesOptions = options.scales || {};\n\t\t\t\tvar scaleOptions = options.scale;\n\t\n\t\t\t\thelpers.each(scalesOptions.xAxes, function(xAxisOptions, index) {\n\t\t\t\t\txAxisOptions.id = xAxisOptions.id || ('x-axis-' + index);\n\t\t\t\t});\n\t\n\t\t\t\thelpers.each(scalesOptions.yAxes, function(yAxisOptions, index) {\n\t\t\t\t\tyAxisOptions.id = yAxisOptions.id || ('y-axis-' + index);\n\t\t\t\t});\n\t\n\t\t\t\tif (scaleOptions) {\n\t\t\t\t\tscaleOptions.id = scaleOptions.id || 'scale';\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Builds a map of scale ID to scale object for future lookup.\n\t\t\t */\n\t\t\tbuildScales: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar options = me.options;\n\t\t\t\tvar scales = me.scales = {};\n\t\t\t\tvar items = [];\n\t\n\t\t\t\tif (options.scales) {\n\t\t\t\t\titems = items.concat(\n\t\t\t\t\t\t(options.scales.xAxes || []).map(function(xAxisOptions) {\n\t\t\t\t\t\t\treturn {options: xAxisOptions, dtype: 'category'};\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t(options.scales.yAxes || []).map(function(yAxisOptions) {\n\t\t\t\t\t\t\treturn {options: yAxisOptions, dtype: 'linear'};\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\n\t\t\t\tif (options.scale) {\n\t\t\t\t\titems.push({options: options.scale, dtype: 'radialLinear', isDefault: true});\n\t\t\t\t}\n\t\n\t\t\t\thelpers.each(items, function(item) {\n\t\t\t\t\tvar scaleOptions = item.options;\n\t\t\t\t\tvar scaleType = helpers.getValueOrDefault(scaleOptions.type, item.dtype);\n\t\t\t\t\tvar scaleClass = Chart.scaleService.getScaleConstructor(scaleType);\n\t\t\t\t\tif (!scaleClass) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar scale = new scaleClass({\n\t\t\t\t\t\tid: scaleOptions.id,\n\t\t\t\t\t\toptions: scaleOptions,\n\t\t\t\t\t\tctx: me.chart.ctx,\n\t\t\t\t\t\tchart: me\n\t\t\t\t\t});\n\t\n\t\t\t\t\tscales[scale.id] = scale;\n\t\n\t\t\t\t\t// TODO(SB): I think we should be able to remove this custom case (options.scale)\n\t\t\t\t\t// and consider it as a regular scale part of the \"scales\"\" map only! This would\n\t\t\t\t\t// make the logic easier and remove some useless? custom code.\n\t\t\t\t\tif (item.isDefault) {\n\t\t\t\t\t\tme.scale = scale;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\tChart.scaleService.addScalesToLayout(this);\n\t\t\t},\n\t\n\t\t\tbuildOrUpdateControllers: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar types = [];\n\t\t\t\tvar newControllers = [];\n\t\n\t\t\t\thelpers.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tvar meta = me.getDatasetMeta(datasetIndex);\n\t\t\t\t\tif (!meta.type) {\n\t\t\t\t\t\tmeta.type = dataset.type || me.config.type;\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttypes.push(meta.type);\n\t\n\t\t\t\t\tif (meta.controller) {\n\t\t\t\t\t\tmeta.controller.updateIndex(datasetIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmeta.controller = new Chart.controllers[meta.type](me, datasetIndex);\n\t\t\t\t\t\tnewControllers.push(meta.controller);\n\t\t\t\t\t}\n\t\t\t\t}, me);\n\t\n\t\t\t\tif (types.length > 1) {\n\t\t\t\t\tfor (var i = 1; i < types.length; i++) {\n\t\t\t\t\t\tif (types[i] !== types[i - 1]) {\n\t\t\t\t\t\t\tme.isCombo = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn newControllers;\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Reset the elements of all datasets\n\t\t\t * @private\n\t\t\t */\n\t\t\tresetElements: function() {\n\t\t\t\tvar me = this;\n\t\t\t\thelpers.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tme.getDatasetMeta(datasetIndex).controller.reset();\n\t\t\t\t}, me);\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t* Resets the chart back to it's state before the initial animation\n\t\t\t*/\n\t\t\treset: function() {\n\t\t\t\tthis.resetElements();\n\t\t\t\tthis.tooltip.initialize();\n\t\t\t},\n\t\n\t\t\tupdate: function(animationDuration, lazy) {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\tupdateConfig(me);\n\t\n\t\t\t\tif (plugins.notify(me, 'beforeUpdate') === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// In case the entire data object changed\n\t\t\t\tme.tooltip._data = me.data;\n\t\n\t\t\t\t// Make sure dataset controllers are updated and new controllers are reset\n\t\t\t\tvar newControllers = me.buildOrUpdateControllers();\n\t\n\t\t\t\t// Make sure all dataset controllers have correct meta data counts\n\t\t\t\thelpers.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tme.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();\n\t\t\t\t}, me);\n\t\n\t\t\t\tme.updateLayout();\n\t\n\t\t\t\t// Can only reset the new controllers after the scales have been updated\n\t\t\t\thelpers.each(newControllers, function(controller) {\n\t\t\t\t\tcontroller.reset();\n\t\t\t\t});\n\t\n\t\t\t\tme.updateDatasets();\n\t\n\t\t\t\t// Do this before render so that any plugins that need final scale updates can use it\n\t\t\t\tplugins.notify(me, 'afterUpdate');\n\t\n\t\t\t\tif (me._bufferedRender) {\n\t\t\t\t\tme._bufferedRequest = {\n\t\t\t\t\t\tlazy: lazy,\n\t\t\t\t\t\tduration: animationDuration\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tme.render(animationDuration, lazy);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t\t\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t\t\t * @private\n\t\t\t */\n\t\t\tupdateLayout: function() {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\tif (plugins.notify(me, 'beforeLayout') === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tChart.layoutService.update(this, this.chart.width, this.chart.height);\n\t\n\t\t\t\t/**\n\t\t\t\t * Provided for backward compatibility, use `afterLayout` instead.\n\t\t\t\t * @method IPlugin#afterScaleUpdate\n\t\t\t\t * @deprecated since version 2.5.0\n\t\t\t\t * @todo remove at version 3\n\t\t\t\t */\n\t\t\t\tplugins.notify(me, 'afterScaleUpdate');\n\t\t\t\tplugins.notify(me, 'afterLayout');\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t\t\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t\t\t * @private\n\t\t\t */\n\t\t\tupdateDatasets: function() {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\tif (plugins.notify(me, 'beforeDatasetsUpdate') === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tfor (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n\t\t\t\t\tme.getDatasetMeta(i).controller.update();\n\t\t\t\t}\n\t\n\t\t\t\tplugins.notify(me, 'afterDatasetsUpdate');\n\t\t\t},\n\t\n\t\t\trender: function(duration, lazy) {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\tif (plugins.notify(me, 'beforeRender') === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tvar animationOptions = me.options.animation;\n\t\t\t\tvar onComplete = function() {\n\t\t\t\t\tplugins.notify(me, 'afterRender');\n\t\t\t\t\tvar callback = animationOptions && animationOptions.onComplete;\n\t\t\t\t\tif (callback && callback.call) {\n\t\t\t\t\t\tcallback.call(me);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\n\t\t\t\tif (animationOptions && ((typeof duration !== 'undefined' && duration !== 0) || (typeof duration === 'undefined' && animationOptions.duration !== 0))) {\n\t\t\t\t\tvar animation = new Chart.Animation();\n\t\t\t\t\tanimation.numSteps = (duration || animationOptions.duration) / 16.66; // 60 fps\n\t\t\t\t\tanimation.easing = animationOptions.easing;\n\t\n\t\t\t\t\t// render function\n\t\t\t\t\tanimation.render = function(chartInstance, animationObject) {\n\t\t\t\t\t\tvar easingFunction = helpers.easingEffects[animationObject.easing];\n\t\t\t\t\t\tvar stepDecimal = animationObject.currentStep / animationObject.numSteps;\n\t\t\t\t\t\tvar easeDecimal = easingFunction(stepDecimal);\n\t\n\t\t\t\t\t\tchartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);\n\t\t\t\t\t};\n\t\n\t\t\t\t\t// user events\n\t\t\t\t\tanimation.onAnimationProgress = animationOptions.onProgress;\n\t\t\t\t\tanimation.onAnimationComplete = onComplete;\n\t\n\t\t\t\t\tChart.animationService.addAnimation(me, animation, duration, lazy);\n\t\t\t\t} else {\n\t\t\t\t\tme.draw();\n\t\t\t\t\tonComplete();\n\t\t\t\t}\n\t\n\t\t\t\treturn me;\n\t\t\t},\n\t\n\t\t\tdraw: function(easingValue) {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\tme.clear();\n\t\n\t\t\t\tif (easingValue === undefined || easingValue === null) {\n\t\t\t\t\teasingValue = 1;\n\t\t\t\t}\n\t\n\t\t\t\tif (plugins.notify(me, 'beforeDraw', [easingValue]) === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// Draw all the scales\n\t\t\t\thelpers.each(me.boxes, function(box) {\n\t\t\t\t\tbox.draw(me.chartArea);\n\t\t\t\t}, me);\n\t\n\t\t\t\tif (me.scale) {\n\t\t\t\t\tme.scale.draw();\n\t\t\t\t}\n\t\n\t\t\t\tme.drawDatasets(easingValue);\n\t\n\t\t\t\t// Finally draw the tooltip\n\t\t\t\tme.tooltip.transition(easingValue).draw();\n\t\n\t\t\t\tplugins.notify(me, 'afterDraw', [easingValue]);\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t\t\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t\t\t * @private\n\t\t\t */\n\t\t\tdrawDatasets: function(easingValue) {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\tif (plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// Draw each dataset via its respective controller (reversed to support proper line stacking)\n\t\t\t\thelpers.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tif (me.isDatasetVisible(datasetIndex)) {\n\t\t\t\t\t\tme.getDatasetMeta(datasetIndex).controller.draw(easingValue);\n\t\t\t\t\t}\n\t\t\t\t}, me, true);\n\t\n\t\t\t\tplugins.notify(me, 'afterDatasetsDraw', [easingValue]);\n\t\t\t},\n\t\n\t\t\t// Get the single element that was clicked on\n\t\t\t// @return : An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw\n\t\t\tgetElementAtEvent: function(e) {\n\t\t\t\treturn Chart.Interaction.modes.single(this, e);\n\t\t\t},\n\t\n\t\t\tgetElementsAtEvent: function(e) {\n\t\t\t\treturn Chart.Interaction.modes.label(this, e, {intersect: true});\n\t\t\t},\n\t\n\t\t\tgetElementsAtXAxis: function(e) {\n\t\t\t\treturn Chart.Interaction.modes['x-axis'](this, e, {intersect: true});\n\t\t\t},\n\t\n\t\t\tgetElementsAtEventForMode: function(e, mode, options) {\n\t\t\t\tvar method = Chart.Interaction.modes[mode];\n\t\t\t\tif (typeof method === 'function') {\n\t\t\t\t\treturn method(this, e, options);\n\t\t\t\t}\n\t\n\t\t\t\treturn [];\n\t\t\t},\n\t\n\t\t\tgetDatasetAtEvent: function(e) {\n\t\t\t\treturn Chart.Interaction.modes.dataset(this, e, {intersect: true});\n\t\t\t},\n\t\n\t\t\tgetDatasetMeta: function(datasetIndex) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar dataset = me.data.datasets[datasetIndex];\n\t\t\t\tif (!dataset._meta) {\n\t\t\t\t\tdataset._meta = {};\n\t\t\t\t}\n\t\n\t\t\t\tvar meta = dataset._meta[me.id];\n\t\t\t\tif (!meta) {\n\t\t\t\t\tmeta = dataset._meta[me.id] = {\n\t\t\t\t\t\ttype: null,\n\t\t\t\t\t\tdata: [],\n\t\t\t\t\t\tdataset: null,\n\t\t\t\t\t\tcontroller: null,\n\t\t\t\t\t\thidden: null,\t\t\t// See isDatasetVisible() comment\n\t\t\t\t\t\txAxisID: null,\n\t\t\t\t\t\tyAxisID: null\n\t\t\t\t\t};\n\t\t\t\t}\n\t\n\t\t\t\treturn meta;\n\t\t\t},\n\t\n\t\t\tgetVisibleDatasetCount: function() {\n\t\t\t\tvar count = 0;\n\t\t\t\tfor (var i = 0, ilen = this.data.datasets.length; i<ilen; ++i) {\n\t\t\t\t\tif (this.isDatasetVisible(i)) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn count;\n\t\t\t},\n\t\n\t\t\tisDatasetVisible: function(datasetIndex) {\n\t\t\t\tvar meta = this.getDatasetMeta(datasetIndex);\n\t\n\t\t\t\t// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n\t\t\t\t// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n\t\t\t\treturn typeof meta.hidden === 'boolean'? !meta.hidden : !this.data.datasets[datasetIndex].hidden;\n\t\t\t},\n\t\n\t\t\tgenerateLegend: function() {\n\t\t\t\treturn this.options.legendCallback(this);\n\t\t\t},\n\t\n\t\t\tdestroy: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar canvas = me.chart.canvas;\n\t\t\t\tvar meta, i, ilen;\n\t\n\t\t\t\tme.stop();\n\t\n\t\t\t\t// dataset controllers need to cleanup associated data\n\t\t\t\tfor (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n\t\t\t\t\tmeta = me.getDatasetMeta(i);\n\t\t\t\t\tif (meta.controller) {\n\t\t\t\t\t\tmeta.controller.destroy();\n\t\t\t\t\t\tmeta.controller = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tif (canvas) {\n\t\t\t\t\tme.unbindEvents();\n\t\t\t\t\thelpers.clear(me.chart);\n\t\t\t\t\tplatform.releaseContext(me.chart.ctx);\n\t\t\t\t\tme.chart.canvas = null;\n\t\t\t\t\tme.chart.ctx = null;\n\t\t\t\t}\n\t\n\t\t\t\tplugins.notify(me, 'destroy');\n\t\n\t\t\t\tdelete Chart.instances[me.id];\n\t\t\t},\n\t\n\t\t\ttoBase64Image: function() {\n\t\t\t\treturn this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);\n\t\t\t},\n\t\n\t\t\tinitToolTip: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tme.tooltip = new Chart.Tooltip({\n\t\t\t\t\t_chart: me.chart,\n\t\t\t\t\t_chartInstance: me,\n\t\t\t\t\t_data: me.data,\n\t\t\t\t\t_options: me.options.tooltips\n\t\t\t\t}, me);\n\t\t\t\tme.tooltip.initialize();\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * @private\n\t\t\t */\n\t\t\tbindEvents: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar listeners = me._listeners = {};\n\t\t\t\tvar listener = function() {\n\t\t\t\t\tme.eventHandler.apply(me, arguments);\n\t\t\t\t};\n\t\n\t\t\t\thelpers.each(me.options.events, function(type) {\n\t\t\t\t\tplatform.addEventListener(me, type, listener);\n\t\t\t\t\tlisteners[type] = listener;\n\t\t\t\t});\n\t\n\t\t\t\t// Responsiveness is currently based on the use of an iframe, however this method causes\n\t\t\t\t// performance issues and could be troublesome when used with ad blockers. So make sure\n\t\t\t\t// that the user is still able to create a chart without iframe when responsive is false.\n\t\t\t\t// See https://github.com/chartjs/Chart.js/issues/2210\n\t\t\t\tif (me.options.responsive) {\n\t\t\t\t\tlistener = function() {\n\t\t\t\t\t\tme.resize();\n\t\t\t\t\t};\n\t\n\t\t\t\t\tplatform.addEventListener(me, 'resize', listener);\n\t\t\t\t\tlisteners.resize = listener;\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * @private\n\t\t\t */\n\t\t\tunbindEvents: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar listeners = me._listeners;\n\t\t\t\tif (!listeners) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tdelete me._listeners;\n\t\t\t\thelpers.each(listeners, function(listener, type) {\n\t\t\t\t\tplatform.removeEventListener(me, type, listener);\n\t\t\t\t});\n\t\t\t},\n\t\n\t\t\tupdateHoverStyle: function(elements, mode, enabled) {\n\t\t\t\tvar method = enabled? 'setHoverStyle' : 'removeHoverStyle';\n\t\t\t\tvar element, i, ilen;\n\t\n\t\t\t\tfor (i=0, ilen=elements.length; i<ilen; ++i) {\n\t\t\t\t\telement = elements[i];\n\t\t\t\t\tif (element) {\n\t\t\t\t\t\tthis.getDatasetMeta(element._datasetIndex).controller[method](element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * @private\n\t\t\t */\n\t\t\teventHandler: function(e) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar tooltip = me.tooltip;\n\t\n\t\t\t\tif (plugins.notify(me, 'beforeEvent', [e]) === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// Buffer any update calls so that renders do not occur\n\t\t\t\tme._bufferedRender = true;\n\t\t\t\tme._bufferedRequest = null;\n\t\n\t\t\t\tvar changed = me.handleEvent(e);\n\t\t\t\tchanged |= tooltip && tooltip.handleEvent(e);\n\t\n\t\t\t\tplugins.notify(me, 'afterEvent', [e]);\n\t\n\t\t\t\tvar bufferedRequest = me._bufferedRequest;\n\t\t\t\tif (bufferedRequest) {\n\t\t\t\t\t// If we have an update that was triggered, we need to do a normal render\n\t\t\t\t\tme.render(bufferedRequest.duration, bufferedRequest.lazy);\n\t\t\t\t} else if (changed && !me.animating) {\n\t\t\t\t\t// If entering, leaving, or changing elements, animate the change via pivot\n\t\t\t\t\tme.stop();\n\t\n\t\t\t\t\t// We only need to render at this point. Updating will cause scales to be\n\t\t\t\t\t// recomputed generating flicker & using more memory than necessary.\n\t\t\t\t\tme.render(me.options.hover.animationDuration, true);\n\t\t\t\t}\n\t\n\t\t\t\tme._bufferedRender = false;\n\t\t\t\tme._bufferedRequest = null;\n\t\n\t\t\t\treturn me;\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Handle an event\n\t\t\t * @private\n\t\t\t * @param {IEvent} event the event to handle\n\t\t\t * @return {Boolean} true if the chart needs to re-render\n\t\t\t */\n\t\t\thandleEvent: function(e) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar options = me.options || {};\n\t\t\t\tvar hoverOptions = options.hover;\n\t\t\t\tvar changed = false;\n\t\n\t\t\t\tme.lastActive = me.lastActive || [];\n\t\n\t\t\t\t// Find Active Elements for hover and tooltips\n\t\t\t\tif (e.type === 'mouseout') {\n\t\t\t\t\tme.active = [];\n\t\t\t\t} else {\n\t\t\t\t\tme.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);\n\t\t\t\t}\n\t\n\t\t\t\t// On Hover hook\n\t\t\t\tif (hoverOptions.onHover) {\n\t\t\t\t\t// Need to call with native event here to not break backwards compatibility\n\t\t\t\t\thoverOptions.onHover.call(me, e.native, me.active);\n\t\t\t\t}\n\t\n\t\t\t\tif (e.type === 'mouseup' || e.type === 'click') {\n\t\t\t\t\tif (options.onClick) {\n\t\t\t\t\t\t// Use e.native here for backwards compatibility\n\t\t\t\t\t\toptions.onClick.call(me, e.native, me.active);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Remove styling for last active (even if it may still be active)\n\t\t\t\tif (me.lastActive.length) {\n\t\t\t\t\tme.updateHoverStyle(me.lastActive, hoverOptions.mode, false);\n\t\t\t\t}\n\t\n\t\t\t\t// Built in hover styling\n\t\t\t\tif (me.active.length && hoverOptions.mode) {\n\t\t\t\t\tme.updateHoverStyle(me.active, hoverOptions.mode, true);\n\t\t\t\t}\n\t\n\t\t\t\tchanged = !helpers.arrayEquals(me.active, me.lastActive);\n\t\n\t\t\t\t// Remember Last Actives\n\t\t\t\tme.lastActive = me.active;\n\t\n\t\t\t\treturn changed;\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 592:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tvar arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n\t\n\t\t/**\n\t\t * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n\t\t * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n\t\t * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.\n\t\t */\n\t\tfunction listenArrayEvents(array, listener) {\n\t\t\tif (array._chartjs) {\n\t\t\t\tarray._chartjs.listeners.push(listener);\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tObject.defineProperty(array, '_chartjs', {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tvalue: {\n\t\t\t\t\tlisteners: [listener]\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tarrayEvents.forEach(function(key) {\n\t\t\t\tvar method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);\n\t\t\t\tvar base = array[key];\n\t\n\t\t\t\tObject.defineProperty(array, key, {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\tvalue: function() {\n\t\t\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\t\t\tvar res = base.apply(this, args);\n\t\n\t\t\t\t\t\thelpers.each(array._chartjs.listeners, function(object) {\n\t\t\t\t\t\t\tif (typeof object[method] === 'function') {\n\t\t\t\t\t\t\t\tobject[method].apply(object, args);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\n\t\t/**\n\t\t * Removes the given array event listener and cleanup extra attached properties (such as\n\t\t * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n\t\t */\n\t\tfunction unlistenArrayEvents(array, listener) {\n\t\t\tvar stub = array._chartjs;\n\t\t\tif (!stub) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tvar listeners = stub.listeners;\n\t\t\tvar index = listeners.indexOf(listener);\n\t\t\tif (index !== -1) {\n\t\t\t\tlisteners.splice(index, 1);\n\t\t\t}\n\t\n\t\t\tif (listeners.length > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tarrayEvents.forEach(function(key) {\n\t\t\t\tdelete array[key];\n\t\t\t});\n\t\n\t\t\tdelete array._chartjs;\n\t\t}\n\t\n\t\t// Base class for all dataset controllers (line, bar, etc)\n\t\tChart.DatasetController = function(chart, datasetIndex) {\n\t\t\tthis.initialize(chart, datasetIndex);\n\t\t};\n\t\n\t\thelpers.extend(Chart.DatasetController.prototype, {\n\t\n\t\t\t/**\n\t\t\t * Element type used to generate a meta dataset (e.g. Chart.element.Line).\n\t\t\t * @type {Chart.core.element}\n\t\t\t */\n\t\t\tdatasetElementType: null,\n\t\n\t\t\t/**\n\t\t\t * Element type used to generate a meta data (e.g. Chart.element.Point).\n\t\t\t * @type {Chart.core.element}\n\t\t\t */\n\t\t\tdataElementType: null,\n\t\n\t\t\tinitialize: function(chart, datasetIndex) {\n\t\t\t\tvar me = this;\n\t\t\t\tme.chart = chart;\n\t\t\t\tme.index = datasetIndex;\n\t\t\t\tme.linkScales();\n\t\t\t\tme.addElements();\n\t\t\t},\n\t\n\t\t\tupdateIndex: function(datasetIndex) {\n\t\t\t\tthis.index = datasetIndex;\n\t\t\t},\n\t\n\t\t\tlinkScales: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar dataset = me.getDataset();\n\t\n\t\t\t\tif (meta.xAxisID === null) {\n\t\t\t\t\tmeta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;\n\t\t\t\t}\n\t\t\t\tif (meta.yAxisID === null) {\n\t\t\t\t\tmeta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tgetDataset: function() {\n\t\t\t\treturn this.chart.data.datasets[this.index];\n\t\t\t},\n\t\n\t\t\tgetMeta: function() {\n\t\t\t\treturn this.chart.getDatasetMeta(this.index);\n\t\t\t},\n\t\n\t\t\tgetScaleForId: function(scaleID) {\n\t\t\t\treturn this.chart.scales[scaleID];\n\t\t\t},\n\t\n\t\t\treset: function() {\n\t\t\t\tthis.update(true);\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * @private\n\t\t\t */\n\t\t\tdestroy: function() {\n\t\t\t\tif (this._data) {\n\t\t\t\t\tunlistenArrayEvents(this._data, this);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tcreateMetaDataset: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar type = me.datasetElementType;\n\t\t\t\treturn type && new type({\n\t\t\t\t\t_chart: me.chart.chart,\n\t\t\t\t\t_datasetIndex: me.index\n\t\t\t\t});\n\t\t\t},\n\t\n\t\t\tcreateMetaData: function(index) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar type = me.dataElementType;\n\t\t\t\treturn type && new type({\n\t\t\t\t\t_chart: me.chart.chart,\n\t\t\t\t\t_datasetIndex: me.index,\n\t\t\t\t\t_index: index\n\t\t\t\t});\n\t\t\t},\n\t\n\t\t\taddElements: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar data = me.getDataset().data || [];\n\t\t\t\tvar metaData = meta.data;\n\t\t\t\tvar i, ilen;\n\t\n\t\t\t\tfor (i=0, ilen=data.length; i<ilen; ++i) {\n\t\t\t\t\tmetaData[i] = metaData[i] || me.createMetaData(i);\n\t\t\t\t}\n\t\n\t\t\t\tmeta.dataset = meta.dataset || me.createMetaDataset();\n\t\t\t},\n\t\n\t\t\taddElementAndReset: function(index) {\n\t\t\t\tvar element = this.createMetaData(index);\n\t\t\t\tthis.getMeta().data.splice(index, 0, element);\n\t\t\t\tthis.updateElement(element, index, true);\n\t\t\t},\n\t\n\t\t\tbuildOrUpdateElements: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar dataset = me.getDataset();\n\t\t\t\tvar data = dataset.data || (dataset.data = []);\n\t\n\t\t\t\t// In order to correctly handle data addition/deletion animation (an thus simulate\n\t\t\t\t// real-time charts), we need to monitor these data modifications and synchronize\n\t\t\t\t// the internal meta data accordingly.\n\t\t\t\tif (me._data !== data) {\n\t\t\t\t\tif (me._data) {\n\t\t\t\t\t\t// This case happens when the user replaced the data array instance.\n\t\t\t\t\t\tunlistenArrayEvents(me._data, me);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tlistenArrayEvents(data, me);\n\t\t\t\t\tme._data = data;\n\t\t\t\t}\n\t\n\t\t\t\t// Re-sync meta data in case the user replaced the data array or if we missed\n\t\t\t\t// any updates and so make sure that we handle number of datapoints changing.\n\t\t\t\tme.resyncElements();\n\t\t\t},\n\t\n\t\t\tupdate: helpers.noop,\n\t\n\t\t\tdraw: function(ease) {\n\t\t\t\tvar easingDecimal = ease || 1;\n\t\t\t\tvar i, len;\n\t\t\t\tvar metaData = this.getMeta().data;\n\t\t\t\tfor (i = 0, len = metaData.length; i < len; ++i) {\n\t\t\t\t\tmetaData[i].transition(easingDecimal).draw();\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tremoveHoverStyle: function(element, elementOpts) {\n\t\t\t\tvar dataset = this.chart.data.datasets[element._datasetIndex],\n\t\t\t\t\tindex = element._index,\n\t\t\t\t\tcustom = element.custom || {},\n\t\t\t\t\tvalueOrDefault = helpers.getValueAtIndexOrDefault,\n\t\t\t\t\tmodel = element._model;\n\t\n\t\t\t\tmodel.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);\n\t\t\t\tmodel.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);\n\t\t\t\tmodel.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);\n\t\t\t},\n\t\n\t\t\tsetHoverStyle: function(element) {\n\t\t\t\tvar dataset = this.chart.data.datasets[element._datasetIndex],\n\t\t\t\t\tindex = element._index,\n\t\t\t\t\tcustom = element.custom || {},\n\t\t\t\t\tvalueOrDefault = helpers.getValueAtIndexOrDefault,\n\t\t\t\t\tgetHoverColor = helpers.getHoverColor,\n\t\t\t\t\tmodel = element._model;\n\t\n\t\t\t\tmodel.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));\n\t\t\t\tmodel.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));\n\t\t\t\tmodel.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * @private\n\t\t\t */\n\t\t\tresyncElements: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar meta = me.getMeta();\n\t\t\t\tvar data = me.getDataset().data;\n\t\t\t\tvar numMeta = meta.data.length;\n\t\t\t\tvar numData = data.length;\n\t\n\t\t\t\tif (numData < numMeta) {\n\t\t\t\t\tmeta.data.splice(numData, numMeta - numData);\n\t\t\t\t} else if (numData > numMeta) {\n\t\t\t\t\tme.insertElements(numMeta, numData - numMeta);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * @private\n\t\t\t */\n\t\t\tinsertElements: function(start, count) {\n\t\t\t\tfor (var i=0; i<count; ++i) {\n\t\t\t\t\tthis.addElementAndReset(start + i);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * @private\n\t\t\t */\n\t\t\tonDataPush: function() {\n\t\t\t\tthis.insertElements(this.getDataset().data.length-1, arguments.length);\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * @private\n\t\t\t */\n\t\t\tonDataPop: function() {\n\t\t\t\tthis.getMeta().data.pop();\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * @private\n\t\t\t */\n\t\t\tonDataShift: function() {\n\t\t\t\tthis.getMeta().data.shift();\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * @private\n\t\t\t */\n\t\t\tonDataSplice: function(start, count) {\n\t\t\t\tthis.getMeta().data.splice(start, count);\n\t\t\t\tthis.insertElements(start, arguments.length - 2);\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * @private\n\t\t\t */\n\t\t\tonDataUnshift: function() {\n\t\t\t\tthis.insertElements(0, arguments.length);\n\t\t\t}\n\t\t});\n\t\n\t\tChart.DatasetController.extend = helpers.inherits;\n\t};\n\n\n/***/ },\n\n/***/ 593:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tChart.elements = {};\n\t\n\t\tChart.Element = function(configuration) {\n\t\t\thelpers.extend(this, configuration);\n\t\t\tthis.initialize.apply(this, arguments);\n\t\t};\n\t\n\t\thelpers.extend(Chart.Element.prototype, {\n\t\n\t\t\tinitialize: function() {\n\t\t\t\tthis.hidden = false;\n\t\t\t},\n\t\n\t\t\tpivot: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tif (!me._view) {\n\t\t\t\t\tme._view = helpers.clone(me._model);\n\t\t\t\t}\n\t\t\t\tme._start = helpers.clone(me._view);\n\t\t\t\treturn me;\n\t\t\t},\n\t\n\t\t\ttransition: function(ease) {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\tif (!me._view) {\n\t\t\t\t\tme._view = helpers.clone(me._model);\n\t\t\t\t}\n\t\n\t\t\t\t// No animation -> No Transition\n\t\t\t\tif (ease === 1) {\n\t\t\t\t\tme._view = me._model;\n\t\t\t\t\tme._start = null;\n\t\t\t\t\treturn me;\n\t\t\t\t}\n\t\n\t\t\t\tif (!me._start) {\n\t\t\t\t\tme.pivot();\n\t\t\t\t}\n\t\n\t\t\t\thelpers.each(me._model, function(value, key) {\n\t\n\t\t\t\t\tif (key[0] === '_') {\n\t\t\t\t\t\t// Only non-underscored properties\n\t\t\t\t\t// Init if doesn't exist\n\t\t\t\t\t} else if (!me._view.hasOwnProperty(key)) {\n\t\t\t\t\t\tif (typeof value === 'number' && !isNaN(me._view[key])) {\n\t\t\t\t\t\t\tme._view[key] = value * ease;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tme._view[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t// No unnecessary computations\n\t\t\t\t\t} else if (value === me._view[key]) {\n\t\t\t\t\t\t// It's the same! Woohoo!\n\t\t\t\t\t// Color transitions if possible\n\t\t\t\t\t} else if (typeof value === 'string') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar color = helpers.color(me._model[key]).mix(helpers.color(me._start[key]), ease);\n\t\t\t\t\t\t\tme._view[key] = color.rgbString();\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tme._view[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t// Number transitions\n\t\t\t\t\t} else if (typeof value === 'number') {\n\t\t\t\t\t\tvar startVal = me._start[key] !== undefined && isNaN(me._start[key]) === false ? me._start[key] : 0;\n\t\t\t\t\t\tme._view[key] = ((me._model[key] - startVal) * ease) + startVal;\n\t\t\t\t\t// Everything else\n\t\t\t\t\t} else {\n\t\t\t\t\t\tme._view[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}, me);\n\t\n\t\t\t\treturn me;\n\t\t\t},\n\t\n\t\t\ttooltipPosition: function() {\n\t\t\t\treturn {\n\t\t\t\t\tx: this._model.x,\n\t\t\t\t\ty: this._model.y\n\t\t\t\t};\n\t\t\t},\n\t\n\t\t\thasValue: function() {\n\t\t\t\treturn helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);\n\t\t\t}\n\t\t});\n\t\n\t\tChart.Element.extend = helpers.inherits;\n\t\n\t};\n\n\n/***/ },\n\n/***/ 594:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* global window: false */\n\t/* global document: false */\n\t'use strict';\n\t\n\tvar color = __webpack_require__(618);\n\t\n\tmodule.exports = function(Chart) {\n\t\t// Global Chart helpers object for utility methods and classes\n\t\tvar helpers = Chart.helpers = {};\n\t\n\t\t// -- Basic js utility methods\n\t\thelpers.each = function(loopable, callback, self, reverse) {\n\t\t\t// Check to see if null or undefined firstly.\n\t\t\tvar i, len;\n\t\t\tif (helpers.isArray(loopable)) {\n\t\t\t\tlen = loopable.length;\n\t\t\t\tif (reverse) {\n\t\t\t\t\tfor (i = len - 1; i >= 0; i--) {\n\t\t\t\t\t\tcallback.call(self, loopable[i], i);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\t\tcallback.call(self, loopable[i], i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (typeof loopable === 'object') {\n\t\t\t\tvar keys = Object.keys(loopable);\n\t\t\t\tlen = keys.length;\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\tcallback.call(self, loopable[keys[i]], keys[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\thelpers.clone = function(obj) {\n\t\t\tvar objClone = {};\n\t\t\thelpers.each(obj, function(value, key) {\n\t\t\t\tif (helpers.isArray(value)) {\n\t\t\t\t\tobjClone[key] = value.slice(0);\n\t\t\t\t} else if (typeof value === 'object' && value !== null) {\n\t\t\t\t\tobjClone[key] = helpers.clone(value);\n\t\t\t\t} else {\n\t\t\t\t\tobjClone[key] = value;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn objClone;\n\t\t};\n\t\thelpers.extend = function(base) {\n\t\t\tvar setFn = function(value, key) {\n\t\t\t\tbase[key] = value;\n\t\t\t};\n\t\t\tfor (var i = 1, ilen = arguments.length; i < ilen; i++) {\n\t\t\t\thelpers.each(arguments[i], setFn);\n\t\t\t}\n\t\t\treturn base;\n\t\t};\n\t\t// Need a special merge function to chart configs since they are now grouped\n\t\thelpers.configMerge = function(_base) {\n\t\t\tvar base = helpers.clone(_base);\n\t\t\thelpers.each(Array.prototype.slice.call(arguments, 1), function(extension) {\n\t\t\t\thelpers.each(extension, function(value, key) {\n\t\t\t\t\tvar baseHasProperty = base.hasOwnProperty(key);\n\t\t\t\t\tvar baseVal = baseHasProperty ? base[key] : {};\n\t\n\t\t\t\t\tif (key === 'scales') {\n\t\t\t\t\t\t// Scale config merging is complex. Add our own function here for that\n\t\t\t\t\t\tbase[key] = helpers.scaleMerge(baseVal, value);\n\t\t\t\t\t} else if (key === 'scale') {\n\t\t\t\t\t\t// Used in polar area & radar charts since there is only one scale\n\t\t\t\t\t\tbase[key] = helpers.configMerge(baseVal, Chart.scaleService.getScaleDefaults(value.type), value);\n\t\t\t\t\t} else if (baseHasProperty\n\t\t\t\t\t\t\t&& typeof baseVal === 'object'\n\t\t\t\t\t\t\t&& !helpers.isArray(baseVal)\n\t\t\t\t\t\t\t&& baseVal !== null\n\t\t\t\t\t\t\t&& typeof value === 'object'\n\t\t\t\t\t\t\t&& !helpers.isArray(value)) {\n\t\t\t\t\t\t// If we are overwriting an object with an object, do a merge of the properties.\n\t\t\t\t\t\tbase[key] = helpers.configMerge(baseVal, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// can just overwrite the value in this case\n\t\t\t\t\t\tbase[key] = value;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\n\t\t\treturn base;\n\t\t};\n\t\thelpers.scaleMerge = function(_base, extension) {\n\t\t\tvar base = helpers.clone(_base);\n\t\n\t\t\thelpers.each(extension, function(value, key) {\n\t\t\t\tif (key === 'xAxes' || key === 'yAxes') {\n\t\t\t\t\t// These properties are arrays of items\n\t\t\t\t\tif (base.hasOwnProperty(key)) {\n\t\t\t\t\t\thelpers.each(value, function(valueObj, index) {\n\t\t\t\t\t\t\tvar axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');\n\t\t\t\t\t\t\tvar axisDefaults = Chart.scaleService.getScaleDefaults(axisType);\n\t\t\t\t\t\t\tif (index >= base[key].length || !base[key][index].type) {\n\t\t\t\t\t\t\t\tbase[key].push(helpers.configMerge(axisDefaults, valueObj));\n\t\t\t\t\t\t\t} else if (valueObj.type && valueObj.type !== base[key][index].type) {\n\t\t\t\t\t\t\t\t// Type changed. Bring in the new defaults before we bring in valueObj so that valueObj can override the correct scale defaults\n\t\t\t\t\t\t\t\tbase[key][index] = helpers.configMerge(base[key][index], axisDefaults, valueObj);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Type is the same\n\t\t\t\t\t\t\t\tbase[key][index] = helpers.configMerge(base[key][index], valueObj);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbase[key] = [];\n\t\t\t\t\t\thelpers.each(value, function(valueObj) {\n\t\t\t\t\t\t\tvar axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');\n\t\t\t\t\t\t\tbase[key].push(helpers.configMerge(Chart.scaleService.getScaleDefaults(axisType), valueObj));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else if (base.hasOwnProperty(key) && typeof base[key] === 'object' && base[key] !== null && typeof value === 'object') {\n\t\t\t\t\t// If we are overwriting an object with an object, do a merge of the properties.\n\t\t\t\t\tbase[key] = helpers.configMerge(base[key], value);\n\t\n\t\t\t\t} else {\n\t\t\t\t\t// can just overwrite the value in this case\n\t\t\t\t\tbase[key] = value;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\treturn base;\n\t\t};\n\t\thelpers.getValueAtIndexOrDefault = function(value, index, defaultValue) {\n\t\t\tif (value === undefined || value === null) {\n\t\t\t\treturn defaultValue;\n\t\t\t}\n\t\n\t\t\tif (helpers.isArray(value)) {\n\t\t\t\treturn index < value.length ? value[index] : defaultValue;\n\t\t\t}\n\t\n\t\t\treturn value;\n\t\t};\n\t\thelpers.getValueOrDefault = function(value, defaultValue) {\n\t\t\treturn value === undefined ? defaultValue : value;\n\t\t};\n\t\thelpers.indexOf = Array.prototype.indexOf?\n\t\t\tfunction(array, item) {\n\t\t\t\treturn array.indexOf(item);\n\t\t\t}:\n\t\t\tfunction(array, item) {\n\t\t\t\tfor (var i = 0, ilen = array.length; i < ilen; ++i) {\n\t\t\t\t\tif (array[i] === item) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn -1;\n\t\t\t};\n\t\thelpers.where = function(collection, filterCallback) {\n\t\t\tif (helpers.isArray(collection) && Array.prototype.filter) {\n\t\t\t\treturn collection.filter(filterCallback);\n\t\t\t}\n\t\t\tvar filtered = [];\n\t\n\t\t\thelpers.each(collection, function(item) {\n\t\t\t\tif (filterCallback(item)) {\n\t\t\t\t\tfiltered.push(item);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\treturn filtered;\n\t\t};\n\t\thelpers.findIndex = Array.prototype.findIndex?\n\t\t\tfunction(array, callback, scope) {\n\t\t\t\treturn array.findIndex(callback, scope);\n\t\t\t} :\n\t\t\tfunction(array, callback, scope) {\n\t\t\t\tscope = scope === undefined? array : scope;\n\t\t\t\tfor (var i = 0, ilen = array.length; i < ilen; ++i) {\n\t\t\t\t\tif (callback.call(scope, array[i], i, array)) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn -1;\n\t\t\t};\n\t\thelpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {\n\t\t\t// Default to start of the array\n\t\t\tif (startIndex === undefined || startIndex === null) {\n\t\t\t\tstartIndex = -1;\n\t\t\t}\n\t\t\tfor (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n\t\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\t\tif (filterCallback(currentItem)) {\n\t\t\t\t\treturn currentItem;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\thelpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {\n\t\t\t// Default to end of the array\n\t\t\tif (startIndex === undefined || startIndex === null) {\n\t\t\t\tstartIndex = arrayToSearch.length;\n\t\t\t}\n\t\t\tfor (var i = startIndex - 1; i >= 0; i--) {\n\t\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\t\tif (filterCallback(currentItem)) {\n\t\t\t\t\treturn currentItem;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\thelpers.inherits = function(extensions) {\n\t\t\t// Basic javascript inheritance based on the model created in Backbone.js\n\t\t\tvar me = this;\n\t\t\tvar ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {\n\t\t\t\treturn me.apply(this, arguments);\n\t\t\t};\n\t\n\t\t\tvar Surrogate = function() {\n\t\t\t\tthis.constructor = ChartElement;\n\t\t\t};\n\t\t\tSurrogate.prototype = me.prototype;\n\t\t\tChartElement.prototype = new Surrogate();\n\t\n\t\t\tChartElement.extend = helpers.inherits;\n\t\n\t\t\tif (extensions) {\n\t\t\t\thelpers.extend(ChartElement.prototype, extensions);\n\t\t\t}\n\t\n\t\t\tChartElement.__super__ = me.prototype;\n\t\n\t\t\treturn ChartElement;\n\t\t};\n\t\thelpers.noop = function() {};\n\t\thelpers.uid = (function() {\n\t\t\tvar id = 0;\n\t\t\treturn function() {\n\t\t\t\treturn id++;\n\t\t\t};\n\t\t}());\n\t\t// -- Math methods\n\t\thelpers.isNumber = function(n) {\n\t\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\n\t\t};\n\t\thelpers.almostEquals = function(x, y, epsilon) {\n\t\t\treturn Math.abs(x - y) < epsilon;\n\t\t};\n\t\thelpers.almostWhole = function(x, epsilon) {\n\t\t\tvar rounded = Math.round(x);\n\t\t\treturn (((rounded - epsilon) < x) && ((rounded + epsilon) > x));\n\t\t};\n\t\thelpers.max = function(array) {\n\t\t\treturn array.reduce(function(max, value) {\n\t\t\t\tif (!isNaN(value)) {\n\t\t\t\t\treturn Math.max(max, value);\n\t\t\t\t}\n\t\t\t\treturn max;\n\t\t\t}, Number.NEGATIVE_INFINITY);\n\t\t};\n\t\thelpers.min = function(array) {\n\t\t\treturn array.reduce(function(min, value) {\n\t\t\t\tif (!isNaN(value)) {\n\t\t\t\t\treturn Math.min(min, value);\n\t\t\t\t}\n\t\t\t\treturn min;\n\t\t\t}, Number.POSITIVE_INFINITY);\n\t\t};\n\t\thelpers.sign = Math.sign?\n\t\t\tfunction(x) {\n\t\t\t\treturn Math.sign(x);\n\t\t\t} :\n\t\t\tfunction(x) {\n\t\t\t\tx = +x; // convert to a number\n\t\t\t\tif (x === 0 || isNaN(x)) {\n\t\t\t\t\treturn x;\n\t\t\t\t}\n\t\t\t\treturn x > 0 ? 1 : -1;\n\t\t\t};\n\t\thelpers.log10 = Math.log10?\n\t\t\tfunction(x) {\n\t\t\t\treturn Math.log10(x);\n\t\t\t} :\n\t\t\tfunction(x) {\n\t\t\t\treturn Math.log(x) / Math.LN10;\n\t\t\t};\n\t\thelpers.toRadians = function(degrees) {\n\t\t\treturn degrees * (Math.PI / 180);\n\t\t};\n\t\thelpers.toDegrees = function(radians) {\n\t\t\treturn radians * (180 / Math.PI);\n\t\t};\n\t\t// Gets the angle from vertical upright to the point about a centre.\n\t\thelpers.getAngleFromPoint = function(centrePoint, anglePoint) {\n\t\t\tvar distanceFromXCenter = anglePoint.x - centrePoint.x,\n\t\t\t\tdistanceFromYCenter = anglePoint.y - centrePoint.y,\n\t\t\t\tradialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n\t\n\t\t\tvar angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\t\n\t\t\tif (angle < (-0.5 * Math.PI)) {\n\t\t\t\tangle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tangle: angle,\n\t\t\t\tdistance: radialDistanceFromCenter\n\t\t\t};\n\t\t};\n\t\thelpers.distanceBetweenPoints = function(pt1, pt2) {\n\t\t\treturn Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n\t\t};\n\t\thelpers.aliasPixel = function(pixelWidth) {\n\t\t\treturn (pixelWidth % 2 === 0) ? 0 : 0.5;\n\t\t};\n\t\thelpers.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {\n\t\t\t// Props to Rob Spencer at scaled innovation for his post on splining between points\n\t\t\t// http://scaledinnovation.com/analytics/splines/aboutSplines.html\n\t\n\t\t\t// This function must also respect \"skipped\" points\n\t\n\t\t\tvar previous = firstPoint.skip ? middlePoint : firstPoint,\n\t\t\t\tcurrent = middlePoint,\n\t\t\t\tnext = afterPoint.skip ? middlePoint : afterPoint;\n\t\n\t\t\tvar d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));\n\t\t\tvar d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));\n\t\n\t\t\tvar s01 = d01 / (d01 + d12);\n\t\t\tvar s12 = d12 / (d01 + d12);\n\t\n\t\t\t// If all points are the same, s01 & s02 will be inf\n\t\t\ts01 = isNaN(s01) ? 0 : s01;\n\t\t\ts12 = isNaN(s12) ? 0 : s12;\n\t\n\t\t\tvar fa = t * s01; // scaling factor for triangle Ta\n\t\t\tvar fb = t * s12;\n\t\n\t\t\treturn {\n\t\t\t\tprevious: {\n\t\t\t\t\tx: current.x - fa * (next.x - previous.x),\n\t\t\t\t\ty: current.y - fa * (next.y - previous.y)\n\t\t\t\t},\n\t\t\t\tnext: {\n\t\t\t\t\tx: current.x + fb * (next.x - previous.x),\n\t\t\t\t\ty: current.y + fb * (next.y - previous.y)\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t\thelpers.EPSILON = Number.EPSILON || 1e-14;\n\t\thelpers.splineCurveMonotone = function(points) {\n\t\t\t// This function calculates Bézier control points in a similar way than |splineCurve|,\n\t\t\t// but preserves monotonicity of the provided data and ensures no local extremums are added\n\t\t\t// between the dataset discrete points due to the interpolation.\n\t\t\t// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n\t\n\t\t\tvar pointsWithTangents = (points || []).map(function(point) {\n\t\t\t\treturn {\n\t\t\t\t\tmodel: point._model,\n\t\t\t\t\tdeltaK: 0,\n\t\t\t\t\tmK: 0\n\t\t\t\t};\n\t\t\t});\n\t\n\t\t\t// Calculate slopes (deltaK) and initialize tangents (mK)\n\t\t\tvar pointsLen = pointsWithTangents.length;\n\t\t\tvar i, pointBefore, pointCurrent, pointAfter;\n\t\t\tfor (i = 0; i < pointsLen; ++i) {\n\t\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\t\tif (pointCurrent.model.skip) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\n\t\t\t\tpointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n\t\t\t\tpointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\t\t\t\tif (pointAfter && !pointAfter.model.skip) {\n\t\t\t\t\tvar slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);\n\t\n\t\t\t\t\t// In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n\t\t\t\t\tpointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;\n\t\t\t\t}\n\t\n\t\t\t\tif (!pointBefore || pointBefore.model.skip) {\n\t\t\t\t\tpointCurrent.mK = pointCurrent.deltaK;\n\t\t\t\t} else if (!pointAfter || pointAfter.model.skip) {\n\t\t\t\t\tpointCurrent.mK = pointBefore.deltaK;\n\t\t\t\t} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {\n\t\t\t\t\tpointCurrent.mK = 0;\n\t\t\t\t} else {\n\t\t\t\t\tpointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Adjust tangents to ensure monotonic properties\n\t\t\tvar alphaK, betaK, tauK, squaredMagnitude;\n\t\t\tfor (i = 0; i < pointsLen - 1; ++i) {\n\t\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\t\tpointAfter = pointsWithTangents[i + 1];\n\t\t\t\tif (pointCurrent.model.skip || pointAfter.model.skip) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\n\t\t\t\tif (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {\n\t\t\t\t\tpointCurrent.mK = pointAfter.mK = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\n\t\t\t\talphaK = pointCurrent.mK / pointCurrent.deltaK;\n\t\t\t\tbetaK = pointAfter.mK / pointCurrent.deltaK;\n\t\t\t\tsquaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\t\t\t\tif (squaredMagnitude <= 9) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\n\t\t\t\ttauK = 3 / Math.sqrt(squaredMagnitude);\n\t\t\t\tpointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;\n\t\t\t\tpointAfter.mK = betaK * tauK * pointCurrent.deltaK;\n\t\t\t}\n\t\n\t\t\t// Compute control points\n\t\t\tvar deltaX;\n\t\t\tfor (i = 0; i < pointsLen; ++i) {\n\t\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\t\tif (pointCurrent.model.skip) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\n\t\t\t\tpointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n\t\t\t\tpointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\t\t\t\tif (pointBefore && !pointBefore.model.skip) {\n\t\t\t\t\tdeltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;\n\t\t\t\t\tpointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;\n\t\t\t\t\tpointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;\n\t\t\t\t}\n\t\t\t\tif (pointAfter && !pointAfter.model.skip) {\n\t\t\t\t\tdeltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;\n\t\t\t\t\tpointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;\n\t\t\t\t\tpointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\thelpers.nextItem = function(collection, index, loop) {\n\t\t\tif (loop) {\n\t\t\t\treturn index >= collection.length - 1 ? collection[0] : collection[index + 1];\n\t\t\t}\n\t\t\treturn index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];\n\t\t};\n\t\thelpers.previousItem = function(collection, index, loop) {\n\t\t\tif (loop) {\n\t\t\t\treturn index <= 0 ? collection[collection.length - 1] : collection[index - 1];\n\t\t\t}\n\t\t\treturn index <= 0 ? collection[0] : collection[index - 1];\n\t\t};\n\t\t// Implementation of the nice number algorithm used in determining where axis labels will go\n\t\thelpers.niceNum = function(range, round) {\n\t\t\tvar exponent = Math.floor(helpers.log10(range));\n\t\t\tvar fraction = range / Math.pow(10, exponent);\n\t\t\tvar niceFraction;\n\t\n\t\t\tif (round) {\n\t\t\t\tif (fraction < 1.5) {\n\t\t\t\t\tniceFraction = 1;\n\t\t\t\t} else if (fraction < 3) {\n\t\t\t\t\tniceFraction = 2;\n\t\t\t\t} else if (fraction < 7) {\n\t\t\t\t\tniceFraction = 5;\n\t\t\t\t} else {\n\t\t\t\t\tniceFraction = 10;\n\t\t\t\t}\n\t\t\t} else if (fraction <= 1.0) {\n\t\t\t\tniceFraction = 1;\n\t\t\t} else if (fraction <= 2) {\n\t\t\t\tniceFraction = 2;\n\t\t\t} else if (fraction <= 5) {\n\t\t\t\tniceFraction = 5;\n\t\t\t} else {\n\t\t\t\tniceFraction = 10;\n\t\t\t}\n\t\n\t\t\treturn niceFraction * Math.pow(10, exponent);\n\t\t};\n\t\t// Easing functions adapted from Robert Penner's easing equations\n\t\t// http://www.robertpenner.com/easing/\n\t\tvar easingEffects = helpers.easingEffects = {\n\t\t\tlinear: function(t) {\n\t\t\t\treturn t;\n\t\t\t},\n\t\t\teaseInQuad: function(t) {\n\t\t\t\treturn t * t;\n\t\t\t},\n\t\t\teaseOutQuad: function(t) {\n\t\t\t\treturn -1 * t * (t - 2);\n\t\t\t},\n\t\t\teaseInOutQuad: function(t) {\n\t\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\t\treturn 1 / 2 * t * t;\n\t\t\t\t}\n\t\t\t\treturn -1 / 2 * ((--t) * (t - 2) - 1);\n\t\t\t},\n\t\t\teaseInCubic: function(t) {\n\t\t\t\treturn t * t * t;\n\t\t\t},\n\t\t\teaseOutCubic: function(t) {\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t + 1);\n\t\t\t},\n\t\t\teaseInOutCubic: function(t) {\n\t\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\t\treturn 1 / 2 * t * t * t;\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t + 2);\n\t\t\t},\n\t\t\teaseInQuart: function(t) {\n\t\t\t\treturn t * t * t * t;\n\t\t\t},\n\t\t\teaseOutQuart: function(t) {\n\t\t\t\treturn -1 * ((t = t / 1 - 1) * t * t * t - 1);\n\t\t\t},\n\t\t\teaseInOutQuart: function(t) {\n\t\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\t\treturn 1 / 2 * t * t * t * t;\n\t\t\t\t}\n\t\t\t\treturn -1 / 2 * ((t -= 2) * t * t * t - 2);\n\t\t\t},\n\t\t\teaseInQuint: function(t) {\n\t\t\t\treturn 1 * (t /= 1) * t * t * t * t;\n\t\t\t},\n\t\t\teaseOutQuint: function(t) {\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t * t * t + 1);\n\t\t\t},\n\t\t\teaseInOutQuint: function(t) {\n\t\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\t\treturn 1 / 2 * t * t * t * t * t;\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t * t * t + 2);\n\t\t\t},\n\t\t\teaseInSine: function(t) {\n\t\t\t\treturn -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;\n\t\t\t},\n\t\t\teaseOutSine: function(t) {\n\t\t\t\treturn 1 * Math.sin(t / 1 * (Math.PI / 2));\n\t\t\t},\n\t\t\teaseInOutSine: function(t) {\n\t\t\t\treturn -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);\n\t\t\t},\n\t\t\teaseInExpo: function(t) {\n\t\t\t\treturn (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));\n\t\t\t},\n\t\t\teaseOutExpo: function(t) {\n\t\t\t\treturn (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);\n\t\t\t},\n\t\t\teaseInOutExpo: function(t) {\n\t\t\t\tif (t === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif (t === 1) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\t\treturn 1 / 2 * Math.pow(2, 10 * (t - 1));\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * (-Math.pow(2, -10 * --t) + 2);\n\t\t\t},\n\t\t\teaseInCirc: function(t) {\n\t\t\t\tif (t >= 1) {\n\t\t\t\t\treturn t;\n\t\t\t\t}\n\t\t\t\treturn -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);\n\t\t\t},\n\t\t\teaseOutCirc: function(t) {\n\t\t\t\treturn 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);\n\t\t\t},\n\t\t\teaseInOutCirc: function(t) {\n\t\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\t\treturn -1 / 2 * (Math.sqrt(1 - t * t) - 1);\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n\t\t\t},\n\t\t\teaseInElastic: function(t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tvar p = 0;\n\t\t\t\tvar a = 1;\n\t\t\t\tif (t === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif ((t /= 1) === 1) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (!p) {\n\t\t\t\t\tp = 1 * 0.3;\n\t\t\t\t}\n\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else {\n\t\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\t}\n\t\t\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));\n\t\t\t},\n\t\t\teaseOutElastic: function(t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tvar p = 0;\n\t\t\t\tvar a = 1;\n\t\t\t\tif (t === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif ((t /= 1) === 1) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (!p) {\n\t\t\t\t\tp = 1 * 0.3;\n\t\t\t\t}\n\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else {\n\t\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\t}\n\t\t\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;\n\t\t\t},\n\t\t\teaseInOutElastic: function(t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tvar p = 0;\n\t\t\t\tvar a = 1;\n\t\t\t\tif (t === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif ((t /= 1 / 2) === 2) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (!p) {\n\t\t\t\t\tp = 1 * (0.3 * 1.5);\n\t\t\t\t}\n\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else {\n\t\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\t}\n\t\t\t\tif (t < 1) {\n\t\t\t\t\treturn -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));\n\t\t\t\t}\n\t\t\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\t\t\t},\n\t\t\teaseInBack: function(t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\treturn 1 * (t /= 1) * t * ((s + 1) * t - s);\n\t\t\t},\n\t\t\teaseOutBack: function(t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);\n\t\t\t},\n\t\t\teaseInOutBack: function(t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\t\treturn 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n\t\t\t},\n\t\t\teaseInBounce: function(t) {\n\t\t\t\treturn 1 - easingEffects.easeOutBounce(1 - t);\n\t\t\t},\n\t\t\teaseOutBounce: function(t) {\n\t\t\t\tif ((t /= 1) < (1 / 2.75)) {\n\t\t\t\t\treturn 1 * (7.5625 * t * t);\n\t\t\t\t} else if (t < (2 / 2.75)) {\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);\n\t\t\t\t} else if (t < (2.5 / 2.75)) {\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);\n\t\t\t\t}\n\t\t\t\treturn 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);\n\t\t\t},\n\t\t\teaseInOutBounce: function(t) {\n\t\t\t\tif (t < 1 / 2) {\n\t\t\t\t\treturn easingEffects.easeInBounce(t * 2) * 0.5;\n\t\t\t\t}\n\t\t\t\treturn easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;\n\t\t\t}\n\t\t};\n\t\t// Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\t\thelpers.requestAnimFrame = (function() {\n\t\t\treturn window.requestAnimationFrame ||\n\t\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\t\twindow.oRequestAnimationFrame ||\n\t\t\t\twindow.msRequestAnimationFrame ||\n\t\t\t\tfunction(callback) {\n\t\t\t\t\treturn window.setTimeout(callback, 1000 / 60);\n\t\t\t\t};\n\t\t}());\n\t\t// -- DOM methods\n\t\thelpers.getRelativePosition = function(evt, chart) {\n\t\t\tvar mouseX, mouseY;\n\t\t\tvar e = evt.originalEvent || evt,\n\t\t\t\tcanvas = evt.currentTarget || evt.srcElement,\n\t\t\t\tboundingRect = canvas.getBoundingClientRect();\n\t\n\t\t\tvar touches = e.touches;\n\t\t\tif (touches && touches.length > 0) {\n\t\t\t\tmouseX = touches[0].clientX;\n\t\t\t\tmouseY = touches[0].clientY;\n\t\n\t\t\t} else {\n\t\t\t\tmouseX = e.clientX;\n\t\t\t\tmouseY = e.clientY;\n\t\t\t}\n\t\n\t\t\t// Scale mouse coordinates into canvas coordinates\n\t\t\t// by following the pattern laid out by 'jerryj' in the comments of\n\t\t\t// http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\n\t\t\tvar paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));\n\t\t\tvar paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));\n\t\t\tvar paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));\n\t\t\tvar paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));\n\t\t\tvar width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;\n\t\t\tvar height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;\n\t\n\t\t\t// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However\n\t\t\t// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here\n\t\t\tmouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);\n\t\t\tmouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);\n\t\n\t\t\treturn {\n\t\t\t\tx: mouseX,\n\t\t\t\ty: mouseY\n\t\t\t};\n\t\n\t\t};\n\t\thelpers.addEvent = function(node, eventType, method) {\n\t\t\tif (node.addEventListener) {\n\t\t\t\tnode.addEventListener(eventType, method);\n\t\t\t} else if (node.attachEvent) {\n\t\t\t\tnode.attachEvent('on' + eventType, method);\n\t\t\t} else {\n\t\t\t\tnode['on' + eventType] = method;\n\t\t\t}\n\t\t};\n\t\thelpers.removeEvent = function(node, eventType, handler) {\n\t\t\tif (node.removeEventListener) {\n\t\t\t\tnode.removeEventListener(eventType, handler, false);\n\t\t\t} else if (node.detachEvent) {\n\t\t\t\tnode.detachEvent('on' + eventType, handler);\n\t\t\t} else {\n\t\t\t\tnode['on' + eventType] = helpers.noop;\n\t\t\t}\n\t\t};\n\t\n\t\t// Private helper function to convert max-width/max-height values that may be percentages into a number\n\t\tfunction parseMaxStyle(styleValue, node, parentProperty) {\n\t\t\tvar valueInPixels;\n\t\t\tif (typeof(styleValue) === 'string') {\n\t\t\t\tvalueInPixels = parseInt(styleValue, 10);\n\t\n\t\t\t\tif (styleValue.indexOf('%') !== -1) {\n\t\t\t\t\t// percentage * size in dimension\n\t\t\t\t\tvalueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvalueInPixels = styleValue;\n\t\t\t}\n\t\n\t\t\treturn valueInPixels;\n\t\t}\n\t\n\t\t/**\n\t\t * Returns if the given value contains an effective constraint.\n\t\t * @private\n\t\t */\n\t\tfunction isConstrainedValue(value) {\n\t\t\treturn value !== undefined && value !== null && value !== 'none';\n\t\t}\n\t\n\t\t// Private helper to get a constraint dimension\n\t\t// @param domNode : the node to check the constraint on\n\t\t// @param maxStyle : the style that defines the maximum for the direction we are using (maxWidth / maxHeight)\n\t\t// @param percentageProperty : property of parent to use when calculating width as a percentage\n\t\t// @see http://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser\n\t\tfunction getConstraintDimension(domNode, maxStyle, percentageProperty) {\n\t\t\tvar view = document.defaultView;\n\t\t\tvar parentNode = domNode.parentNode;\n\t\t\tvar constrainedNode = view.getComputedStyle(domNode)[maxStyle];\n\t\t\tvar constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];\n\t\t\tvar hasCNode = isConstrainedValue(constrainedNode);\n\t\t\tvar hasCContainer = isConstrainedValue(constrainedContainer);\n\t\t\tvar infinity = Number.POSITIVE_INFINITY;\n\t\n\t\t\tif (hasCNode || hasCContainer) {\n\t\t\t\treturn Math.min(\n\t\t\t\t\thasCNode? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,\n\t\t\t\t\thasCContainer? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);\n\t\t\t}\n\t\n\t\t\treturn 'none';\n\t\t}\n\t\t// returns Number or undefined if no constraint\n\t\thelpers.getConstraintWidth = function(domNode) {\n\t\t\treturn getConstraintDimension(domNode, 'max-width', 'clientWidth');\n\t\t};\n\t\t// returns Number or undefined if no constraint\n\t\thelpers.getConstraintHeight = function(domNode) {\n\t\t\treturn getConstraintDimension(domNode, 'max-height', 'clientHeight');\n\t\t};\n\t\thelpers.getMaximumWidth = function(domNode) {\n\t\t\tvar container = domNode.parentNode;\n\t\t\tvar paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);\n\t\t\tvar paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);\n\t\t\tvar w = container.clientWidth - paddingLeft - paddingRight;\n\t\t\tvar cw = helpers.getConstraintWidth(domNode);\n\t\t\treturn isNaN(cw)? w : Math.min(w, cw);\n\t\t};\n\t\thelpers.getMaximumHeight = function(domNode) {\n\t\t\tvar container = domNode.parentNode;\n\t\t\tvar paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);\n\t\t\tvar paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);\n\t\t\tvar h = container.clientHeight - paddingTop - paddingBottom;\n\t\t\tvar ch = helpers.getConstraintHeight(domNode);\n\t\t\treturn isNaN(ch)? h : Math.min(h, ch);\n\t\t};\n\t\thelpers.getStyle = function(el, property) {\n\t\t\treturn el.currentStyle ?\n\t\t\t\tel.currentStyle[property] :\n\t\t\t\tdocument.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n\t\t};\n\t\thelpers.retinaScale = function(chart) {\n\t\t\tvar pixelRatio = chart.currentDevicePixelRatio = window.devicePixelRatio || 1;\n\t\t\tif (pixelRatio === 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tvar canvas = chart.canvas;\n\t\t\tvar height = chart.height;\n\t\t\tvar width = chart.width;\n\t\n\t\t\tcanvas.height = height * pixelRatio;\n\t\t\tcanvas.width = width * pixelRatio;\n\t\t\tchart.ctx.scale(pixelRatio, pixelRatio);\n\t\n\t\t\t// If no style has been set on the canvas, the render size is used as display size,\n\t\t\t// making the chart visually bigger, so let's enforce it to the \"correct\" values.\n\t\t\t// See https://github.com/chartjs/Chart.js/issues/3575\n\t\t\tcanvas.style.height = height + 'px';\n\t\t\tcanvas.style.width = width + 'px';\n\t\t};\n\t\t// -- Canvas methods\n\t\thelpers.clear = function(chart) {\n\t\t\tchart.ctx.clearRect(0, 0, chart.width, chart.height);\n\t\t};\n\t\thelpers.fontString = function(pixelSize, fontStyle, fontFamily) {\n\t\t\treturn fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n\t\t};\n\t\thelpers.longestText = function(ctx, font, arrayOfThings, cache) {\n\t\t\tcache = cache || {};\n\t\t\tvar data = cache.data = cache.data || {};\n\t\t\tvar gc = cache.garbageCollect = cache.garbageCollect || [];\n\t\n\t\t\tif (cache.font !== font) {\n\t\t\t\tdata = cache.data = {};\n\t\t\t\tgc = cache.garbageCollect = [];\n\t\t\t\tcache.font = font;\n\t\t\t}\n\t\n\t\t\tctx.font = font;\n\t\t\tvar longest = 0;\n\t\t\thelpers.each(arrayOfThings, function(thing) {\n\t\t\t\t// Undefined strings and arrays should not be measured\n\t\t\t\tif (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {\n\t\t\t\t\tlongest = helpers.measureText(ctx, data, gc, longest, thing);\n\t\t\t\t} else if (helpers.isArray(thing)) {\n\t\t\t\t\t// if it is an array lets measure each element\n\t\t\t\t\t// to do maybe simplify this function a bit so we can do this more recursively?\n\t\t\t\t\thelpers.each(thing, function(nestedThing) {\n\t\t\t\t\t\t// Undefined strings and arrays should not be measured\n\t\t\t\t\t\tif (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {\n\t\t\t\t\t\t\tlongest = helpers.measureText(ctx, data, gc, longest, nestedThing);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tvar gcLen = gc.length / 2;\n\t\t\tif (gcLen > arrayOfThings.length) {\n\t\t\t\tfor (var i = 0; i < gcLen; i++) {\n\t\t\t\t\tdelete data[gc[i]];\n\t\t\t\t}\n\t\t\t\tgc.splice(0, gcLen);\n\t\t\t}\n\t\t\treturn longest;\n\t\t};\n\t\thelpers.measureText = function(ctx, data, gc, longest, string) {\n\t\t\tvar textWidth = data[string];\n\t\t\tif (!textWidth) {\n\t\t\t\ttextWidth = data[string] = ctx.measureText(string).width;\n\t\t\t\tgc.push(string);\n\t\t\t}\n\t\t\tif (textWidth > longest) {\n\t\t\t\tlongest = textWidth;\n\t\t\t}\n\t\t\treturn longest;\n\t\t};\n\t\thelpers.numberOfLabelLines = function(arrayOfThings) {\n\t\t\tvar numberOfLines = 1;\n\t\t\thelpers.each(arrayOfThings, function(thing) {\n\t\t\t\tif (helpers.isArray(thing)) {\n\t\t\t\t\tif (thing.length > numberOfLines) {\n\t\t\t\t\t\tnumberOfLines = thing.length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn numberOfLines;\n\t\t};\n\t\thelpers.drawRoundedRectangle = function(ctx, x, y, width, height, radius) {\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x + radius, y);\n\t\t\tctx.lineTo(x + width - radius, y);\n\t\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\t\t\tctx.lineTo(x + width, y + height - radius);\n\t\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\t\t\tctx.lineTo(x + radius, y + height);\n\t\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\t\t\tctx.lineTo(x, y + radius);\n\t\t\tctx.quadraticCurveTo(x, y, x + radius, y);\n\t\t\tctx.closePath();\n\t\t};\n\t\thelpers.color = function(c) {\n\t\t\tif (!color) {\n\t\t\t\tconsole.error('Color.js not found!');\n\t\t\t\treturn c;\n\t\t\t}\n\t\n\t\t\t/* global CanvasGradient */\n\t\t\tif (c instanceof CanvasGradient) {\n\t\t\t\treturn color(Chart.defaults.global.defaultColor);\n\t\t\t}\n\t\n\t\t\treturn color(c);\n\t\t};\n\t\thelpers.isArray = Array.isArray?\n\t\t\tfunction(obj) {\n\t\t\t\treturn Array.isArray(obj);\n\t\t\t} :\n\t\t\tfunction(obj) {\n\t\t\t\treturn Object.prototype.toString.call(obj) === '[object Array]';\n\t\t\t};\n\t\t// ! @see http://stackoverflow.com/a/14853974\n\t\thelpers.arrayEquals = function(a0, a1) {\n\t\t\tvar i, ilen, v0, v1;\n\t\n\t\t\tif (!a0 || !a1 || a0.length !== a1.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tfor (i = 0, ilen=a0.length; i < ilen; ++i) {\n\t\t\t\tv0 = a0[i];\n\t\t\t\tv1 = a1[i];\n\t\n\t\t\t\tif (v0 instanceof Array && v1 instanceof Array) {\n\t\t\t\t\tif (!helpers.arrayEquals(v0, v1)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else if (v0 !== v1) {\n\t\t\t\t\t// NOTE: two different object instances will never be equal: {x:20} != {x:20}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\t};\n\t\thelpers.callCallback = function(fn, args, _tArg) {\n\t\t\tif (fn && typeof fn.call === 'function') {\n\t\t\t\tfn.apply(_tArg, args);\n\t\t\t}\n\t\t};\n\t\thelpers.getHoverColor = function(colorValue) {\n\t\t\t/* global CanvasPattern */\n\t\t\treturn (colorValue instanceof CanvasPattern) ?\n\t\t\t\tcolorValue :\n\t\t\t\thelpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();\n\t\t};\n\t};\n\n\n/***/ },\n\n/***/ 595:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\tvar helpers = Chart.helpers;\n\t\n\t\t/**\n\t\t * Helper function to get relative position for an event\n\t\t * @param {Event|IEvent} event - The event to get the position for\n\t\t * @param {Chart} chart - The chart\n\t\t * @returns {Point} the event position\n\t\t */\n\t\tfunction getRelativePosition(e, chart) {\n\t\t\tif (e.native) {\n\t\t\t\treturn {\n\t\t\t\t\tx: e.x,\n\t\t\t\t\ty: e.y\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\treturn helpers.getRelativePosition(e, chart);\n\t\t}\n\t\n\t\t/**\n\t\t * Helper function to traverse all of the visible elements in the chart\n\t\t * @param chart {chart} the chart\n\t\t * @param handler {Function} the callback to execute for each visible item\n\t\t */\n\t\tfunction parseVisibleItems(chart, handler) {\n\t\t\tvar datasets = chart.data.datasets;\n\t\t\tvar meta, i, j, ilen, jlen;\n\t\n\t\t\tfor (i = 0, ilen = datasets.length; i < ilen; ++i) {\n\t\t\t\tif (!chart.isDatasetVisible(i)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\tfor (j = 0, jlen = meta.data.length; j < jlen; ++j) {\n\t\t\t\t\tvar element = meta.data[j];\n\t\t\t\t\tif (!element._view.skip) {\n\t\t\t\t\t\thandler(element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t/**\n\t\t * Helper function to get the items that intersect the event position\n\t\t * @param items {ChartElement[]} elements to filter\n\t\t * @param position {Point} the point to be nearest to\n\t\t * @return {ChartElement[]} the nearest items\n\t\t */\n\t\tfunction getIntersectItems(chart, position) {\n\t\t\tvar elements = [];\n\t\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\telements.push(element);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\treturn elements;\n\t\t}\n\t\n\t\t/**\n\t\t * Helper function to get the items nearest to the event position considering all visible items in teh chart\n\t\t * @param chart {Chart} the chart to look at elements from\n\t\t * @param position {Point} the point to be nearest to\n\t\t * @param intersect {Boolean} if true, only consider items that intersect the position\n\t\t * @param distanceMetric {Function} Optional function to provide the distance between\n\t\t * @return {ChartElement[]} the nearest items\n\t\t */\n\t\tfunction getNearestItems(chart, position, intersect, distanceMetric) {\n\t\t\tvar minDistance = Number.POSITIVE_INFINITY;\n\t\t\tvar nearestItems = [];\n\t\n\t\t\tif (!distanceMetric) {\n\t\t\t\tdistanceMetric = helpers.distanceBetweenPoints;\n\t\t\t}\n\t\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (intersect && !element.inRange(position.x, position.y)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tvar center = element.getCenterPoint();\n\t\t\t\tvar distance = distanceMetric(position, center);\n\t\n\t\t\t\tif (distance < minDistance) {\n\t\t\t\t\tnearestItems = [element];\n\t\t\t\t\tminDistance = distance;\n\t\t\t\t} else if (distance === minDistance) {\n\t\t\t\t\t// Can have multiple items at the same distance in which case we sort by size\n\t\t\t\t\tnearestItems.push(element);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\treturn nearestItems;\n\t\t}\n\t\n\t\tfunction indexMode(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart.chart);\n\t\t\tvar distanceMetric = function(pt1, pt2) {\n\t\t\t\treturn Math.abs(pt1.x - pt2.x);\n\t\t\t};\n\t\t\tvar items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\t\t\tvar elements = [];\n\t\n\t\t\tif (!items.length) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\n\t\t\tchart.data.datasets.forEach(function(dataset, datasetIndex) {\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex)) {\n\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex),\n\t\t\t\t\t\telement = meta.data[items[0]._index];\n\t\n\t\t\t\t\t// don't count items that are skipped (null data)\n\t\t\t\t\tif (element && !element._view.skip) {\n\t\t\t\t\t\telements.push(element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\treturn elements;\n\t\t}\n\t\n\t\t/**\n\t\t * @interface IInteractionOptions\n\t\t */\n\t\t/**\n\t\t * If true, only consider items that intersect the point\n\t\t * @name IInterfaceOptions#boolean\n\t\t * @type Boolean\n\t\t */\n\t\n\t\t/**\n\t\t * Contains interaction related functions\n\t\t * @namespace Chart.Interaction\n\t\t */\n\t\tChart.Interaction = {\n\t\t\t// Helper function for different modes\n\t\t\tmodes: {\n\t\t\t\tsingle: function(chart, e) {\n\t\t\t\t\tvar position = getRelativePosition(e, chart.chart);\n\t\t\t\t\tvar elements = [];\n\t\n\t\t\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\t\t\telements.push(element);\n\t\t\t\t\t\t\treturn elements;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\n\t\t\t\t\treturn elements.slice(0, 1);\n\t\t\t\t},\n\t\n\t\t\t\t/**\n\t\t\t\t * @function Chart.Interaction.modes.label\n\t\t\t\t * @deprecated since version 2.4.0\n\t\t\t\t */\n\t\t\t\tlabel: indexMode,\n\t\n\t\t\t\t/**\n\t\t\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t\t\t * @function Chart.Interaction.modes.index\n\t\t\t\t * @since v2.4.0\n\t\t\t\t * @param chart {chart} the chart we are returning items from\n\t\t\t\t * @param e {Event} the event we are find things at\n\t\t\t\t * @param options {IInteractionOptions} options to use during interaction\n\t\t\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t\t\t */\n\t\t\t\tindex: indexMode,\n\t\n\t\t\t\t/**\n\t\t\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t\t\t * @function Chart.Interaction.modes.dataset\n\t\t\t\t * @param chart {chart} the chart we are returning items from\n\t\t\t\t * @param e {Event} the event we are find things at\n\t\t\t\t * @param options {IInteractionOptions} options to use during interaction\n\t\t\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t\t\t */\n\t\t\t\tdataset: function(chart, e, options) {\n\t\t\t\t\tvar position = getRelativePosition(e, chart.chart);\n\t\t\t\t\tvar items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false);\n\t\n\t\t\t\t\tif (items.length > 0) {\n\t\t\t\t\t\titems = chart.getDatasetMeta(items[0]._datasetIndex).data;\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn items;\n\t\t\t\t},\n\t\n\t\t\t\t/**\n\t\t\t\t * @function Chart.Interaction.modes.x-axis\n\t\t\t\t * @deprecated since version 2.4.0. Use index mode and intersect == true\n\t\t\t\t */\n\t\t\t\t'x-axis': function(chart, e) {\n\t\t\t\t\treturn indexMode(chart, e, true);\n\t\t\t\t},\n\t\n\t\t\t\t/**\n\t\t\t\t * Point mode returns all elements that hit test based on the event position\n\t\t\t\t * of the event\n\t\t\t\t * @function Chart.Interaction.modes.intersect\n\t\t\t\t * @param chart {chart} the chart we are returning items from\n\t\t\t\t * @param e {Event} the event we are find things at\n\t\t\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t\t\t */\n\t\t\t\tpoint: function(chart, e) {\n\t\t\t\t\tvar position = getRelativePosition(e, chart.chart);\n\t\t\t\t\treturn getIntersectItems(chart, position);\n\t\t\t\t},\n\t\n\t\t\t\t/**\n\t\t\t\t * nearest mode returns the element closest to the point\n\t\t\t\t * @function Chart.Interaction.modes.intersect\n\t\t\t\t * @param chart {chart} the chart we are returning items from\n\t\t\t\t * @param e {Event} the event we are find things at\n\t\t\t\t * @param options {IInteractionOptions} options to use\n\t\t\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t\t\t */\n\t\t\t\tnearest: function(chart, e, options) {\n\t\t\t\t\tvar position = getRelativePosition(e, chart.chart);\n\t\t\t\t\tvar nearestItems = getNearestItems(chart, position, options.intersect);\n\t\n\t\t\t\t\t// We have multiple items at the same distance from the event. Now sort by smallest\n\t\t\t\t\tif (nearestItems.length > 1) {\n\t\t\t\t\t\tnearestItems.sort(function(a, b) {\n\t\t\t\t\t\t\tvar sizeA = a.getArea();\n\t\t\t\t\t\t\tvar sizeB = b.getArea();\n\t\t\t\t\t\t\tvar ret = sizeA - sizeB;\n\t\n\t\t\t\t\t\t\tif (ret === 0) {\n\t\t\t\t\t\t\t\t// if equal sort by dataset index\n\t\t\t\t\t\t\t\tret = a._datasetIndex - b._datasetIndex;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Return only 1 item\n\t\t\t\t\treturn nearestItems.slice(0, 1);\n\t\t\t\t},\n\t\n\t\t\t\t/**\n\t\t\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t\t\t * @function Chart.Interaction.modes.x\n\t\t\t\t * @param chart {chart} the chart we are returning items from\n\t\t\t\t * @param e {Event} the event we are find things at\n\t\t\t\t * @param options {IInteractionOptions} options to use\n\t\t\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t\t\t */\n\t\t\t\tx: function(chart, e, options) {\n\t\t\t\t\tvar position = getRelativePosition(e, chart.chart);\n\t\t\t\t\tvar items = [];\n\t\t\t\t\tvar intersectsItem = false;\n\t\n\t\t\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\t\t\tif (element.inXRange(position.x)) {\n\t\t\t\t\t\t\titems.push(element);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\t\t\tintersectsItem = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\n\t\t\t\t\t// If we want to trigger on an intersect and we don't have any items\n\t\t\t\t\t// that intersect the position, return nothing\n\t\t\t\t\tif (options.intersect && !intersectsItem) {\n\t\t\t\t\t\titems = [];\n\t\t\t\t\t}\n\t\t\t\t\treturn items;\n\t\t\t\t},\n\t\n\t\t\t\t/**\n\t\t\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t\t\t * @function Chart.Interaction.modes.y\n\t\t\t\t * @param chart {chart} the chart we are returning items from\n\t\t\t\t * @param e {Event} the event we are find things at\n\t\t\t\t * @param options {IInteractionOptions} options to use\n\t\t\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t\t\t */\n\t\t\t\ty: function(chart, e, options) {\n\t\t\t\t\tvar position = getRelativePosition(e, chart.chart);\n\t\t\t\t\tvar items = [];\n\t\t\t\t\tvar intersectsItem = false;\n\t\n\t\t\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\t\t\tif (element.inYRange(position.y)) {\n\t\t\t\t\t\t\titems.push(element);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\t\t\tintersectsItem = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\n\t\t\t\t\t// If we want to trigger on an intersect and we don't have any items\n\t\t\t\t\t// that intersect the position, return nothing\n\t\t\t\t\tif (options.intersect && !intersectsItem) {\n\t\t\t\t\t\titems = [];\n\t\t\t\t\t}\n\t\t\t\t\treturn items;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t};\n\n\n/***/ },\n\n/***/ 596:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function() {\n\t\n\t\t// Occupy the global variable of Chart, and create a simple base class\n\t\tvar Chart = function(item, config) {\n\t\t\tthis.controller = new Chart.Controller(item, config, this);\n\t\t\treturn this.controller;\n\t\t};\n\t\n\t\t// Globally expose the defaults to allow for user updating/changing\n\t\tChart.defaults = {\n\t\t\tglobal: {\n\t\t\t\tresponsive: true,\n\t\t\t\tresponsiveAnimationDuration: 0,\n\t\t\t\tmaintainAspectRatio: true,\n\t\t\t\tevents: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],\n\t\t\t\thover: {\n\t\t\t\t\tonHover: null,\n\t\t\t\t\tmode: 'nearest',\n\t\t\t\t\tintersect: true,\n\t\t\t\t\tanimationDuration: 400\n\t\t\t\t},\n\t\t\t\tonClick: null,\n\t\t\t\tdefaultColor: 'rgba(0,0,0,0.1)',\n\t\t\t\tdefaultFontColor: '#666',\n\t\t\t\tdefaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\t\t\t\tdefaultFontSize: 12,\n\t\t\t\tdefaultFontStyle: 'normal',\n\t\t\t\tshowLines: true,\n\t\n\t\t\t\t// Element defaults defined in element extensions\n\t\t\t\telements: {},\n\t\n\t\t\t\t// Legend callback string\n\t\t\t\tlegendCallback: function(chart) {\n\t\t\t\t\tvar text = [];\n\t\t\t\t\ttext.push('<ul class=\"' + chart.id + '-legend\">');\n\t\t\t\t\tfor (var i = 0; i < chart.data.datasets.length; i++) {\n\t\t\t\t\t\ttext.push('<li><span style=\"background-color:' + chart.data.datasets[i].backgroundColor + '\"></span>');\n\t\t\t\t\t\tif (chart.data.datasets[i].label) {\n\t\t\t\t\t\t\ttext.push(chart.data.datasets[i].label);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttext.push('</li>');\n\t\t\t\t\t}\n\t\t\t\t\ttext.push('</ul>');\n\t\n\t\t\t\t\treturn text.join('');\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\tChart.Chart = Chart;\n\t\n\t\treturn Chart;\n\t};\n\n\n/***/ },\n\n/***/ 597:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\t// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n\t\t// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n\t\t// It is this service's responsibility of carrying out that layout.\n\t\tChart.layoutService = {\n\t\t\tdefaults: {},\n\t\n\t\t\t// Register a box to a chartInstance. A box is simply a reference to an object that requires layout. eg. Scales, Legend, Plugins.\n\t\t\taddBox: function(chartInstance, box) {\n\t\t\t\tif (!chartInstance.boxes) {\n\t\t\t\t\tchartInstance.boxes = [];\n\t\t\t\t}\n\t\t\t\tchartInstance.boxes.push(box);\n\t\t\t},\n\t\n\t\t\tremoveBox: function(chartInstance, box) {\n\t\t\t\tif (!chartInstance.boxes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tchartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);\n\t\t\t},\n\t\n\t\t\t// The most important function\n\t\t\tupdate: function(chartInstance, width, height) {\n\t\n\t\t\t\tif (!chartInstance) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tvar layoutOptions = chartInstance.options.layout;\n\t\t\t\tvar padding = layoutOptions ? layoutOptions.padding : null;\n\t\n\t\t\t\tvar leftPadding = 0;\n\t\t\t\tvar rightPadding = 0;\n\t\t\t\tvar topPadding = 0;\n\t\t\t\tvar bottomPadding = 0;\n\t\n\t\t\t\tif (!isNaN(padding)) {\n\t\t\t\t\t// options.layout.padding is a number. assign to all\n\t\t\t\t\tleftPadding = padding;\n\t\t\t\t\trightPadding = padding;\n\t\t\t\t\ttopPadding = padding;\n\t\t\t\t\tbottomPadding = padding;\n\t\t\t\t} else {\n\t\t\t\t\tleftPadding = padding.left || 0;\n\t\t\t\t\trightPadding = padding.right || 0;\n\t\t\t\t\ttopPadding = padding.top || 0;\n\t\t\t\t\tbottomPadding = padding.bottom || 0;\n\t\t\t\t}\n\t\n\t\t\t\tvar leftBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\t\treturn box.options.position === 'left';\n\t\t\t\t});\n\t\t\t\tvar rightBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\t\treturn box.options.position === 'right';\n\t\t\t\t});\n\t\t\t\tvar topBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\t\treturn box.options.position === 'top';\n\t\t\t\t});\n\t\t\t\tvar bottomBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\t\treturn box.options.position === 'bottom';\n\t\t\t\t});\n\t\n\t\t\t\t// Boxes that overlay the chartarea such as the radialLinear scale\n\t\t\t\tvar chartAreaBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\t\treturn box.options.position === 'chartArea';\n\t\t\t\t});\n\t\n\t\t\t\t// Ensure that full width boxes are at the very top / bottom\n\t\t\t\ttopBoxes.sort(function(a, b) {\n\t\t\t\t\treturn (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);\n\t\t\t\t});\n\t\t\t\tbottomBoxes.sort(function(a, b) {\n\t\t\t\t\treturn (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);\n\t\t\t\t});\n\t\n\t\t\t\t// Essentially we now have any number of boxes on each of the 4 sides.\n\t\t\t\t// Our canvas looks like the following.\n\t\t\t\t// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n\t\t\t\t// B1 is the bottom axis\n\t\t\t\t// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n\t\t\t\t// These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n\t\t\t\t// an error will be thrown.\n\t\t\t\t//\n\t\t\t\t// |----------------------------------------------------|\n\t\t\t\t// |                  T1 (Full Width)                   |\n\t\t\t\t// |----------------------------------------------------|\n\t\t\t\t// |    |    |                 T2                  |    |\n\t\t\t\t// |    |----|-------------------------------------|----|\n\t\t\t\t// |    |    | C1 |                           | C2 |    |\n\t\t\t\t// |    |    |----|                           |----|    |\n\t\t\t\t// |    |    |                                     |    |\n\t\t\t\t// | L1 | L2 |           ChartArea (C0)            | R1 |\n\t\t\t\t// |    |    |                                     |    |\n\t\t\t\t// |    |    |----|                           |----|    |\n\t\t\t\t// |    |    | C3 |                           | C4 |    |\n\t\t\t\t// |    |----|-------------------------------------|----|\n\t\t\t\t// |    |    |                 B1                  |    |\n\t\t\t\t// |----------------------------------------------------|\n\t\t\t\t// |                  B2 (Full Width)                   |\n\t\t\t\t// |----------------------------------------------------|\n\t\t\t\t//\n\t\t\t\t// What we do to find the best sizing, we do the following\n\t\t\t\t// 1. Determine the minimum size of the chart area.\n\t\t\t\t// 2. Split the remaining width equally between each vertical axis\n\t\t\t\t// 3. Split the remaining height equally between each horizontal axis\n\t\t\t\t// 4. Give each layout the maximum size it can be. The layout will return it's minimum size\n\t\t\t\t// 5. Adjust the sizes of each axis based on it's minimum reported size.\n\t\t\t\t// 6. Refit each axis\n\t\t\t\t// 7. Position each axis in the final location\n\t\t\t\t// 8. Tell the chart the final location of the chart area\n\t\t\t\t// 9. Tell any axes that overlay the chart area the positions of the chart area\n\t\n\t\t\t\t// Step 1\n\t\t\t\tvar chartWidth = width - leftPadding - rightPadding;\n\t\t\t\tvar chartHeight = height - topPadding - bottomPadding;\n\t\t\t\tvar chartAreaWidth = chartWidth / 2; // min 50%\n\t\t\t\tvar chartAreaHeight = chartHeight / 2; // min 50%\n\t\n\t\t\t\t// Step 2\n\t\t\t\tvar verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);\n\t\n\t\t\t\t// Step 3\n\t\t\t\tvar horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);\n\t\n\t\t\t\t// Step 4\n\t\t\t\tvar maxChartAreaWidth = chartWidth;\n\t\t\t\tvar maxChartAreaHeight = chartHeight;\n\t\t\t\tvar minBoxSizes = [];\n\t\n\t\t\t\tfunction getMinimumBoxSize(box) {\n\t\t\t\t\tvar minSize;\n\t\t\t\t\tvar isHorizontal = box.isHorizontal();\n\t\n\t\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t\tminSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);\n\t\t\t\t\t\tmaxChartAreaHeight -= minSize.height;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tminSize = box.update(verticalBoxWidth, chartAreaHeight);\n\t\t\t\t\t\tmaxChartAreaWidth -= minSize.width;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tminBoxSizes.push({\n\t\t\t\t\t\thorizontal: isHorizontal,\n\t\t\t\t\t\tminSize: minSize,\n\t\t\t\t\t\tbox: box,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\thelpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);\n\t\n\t\t\t\t// If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)\n\t\t\t\tvar maxHorizontalLeftPadding = 0;\n\t\t\t\tvar maxHorizontalRightPadding = 0;\n\t\t\t\tvar maxVerticalTopPadding = 0;\n\t\t\t\tvar maxVerticalBottomPadding = 0;\n\t\n\t\t\t\thelpers.each(topBoxes.concat(bottomBoxes), function(horizontalBox) {\n\t\t\t\t\tif (horizontalBox.getPadding) {\n\t\t\t\t\t\tvar boxPadding = horizontalBox.getPadding();\n\t\t\t\t\t\tmaxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);\n\t\t\t\t\t\tmaxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\thelpers.each(leftBoxes.concat(rightBoxes), function(verticalBox) {\n\t\t\t\t\tif (verticalBox.getPadding) {\n\t\t\t\t\t\tvar boxPadding = verticalBox.getPadding();\n\t\t\t\t\t\tmaxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);\n\t\t\t\t\t\tmaxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\t// At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could\n\t\t\t\t// be if the axes are drawn at their minimum sizes.\n\t\t\t\t// Steps 5 & 6\n\t\t\t\tvar totalLeftBoxesWidth = leftPadding;\n\t\t\t\tvar totalRightBoxesWidth = rightPadding;\n\t\t\t\tvar totalTopBoxesHeight = topPadding;\n\t\t\t\tvar totalBottomBoxesHeight = bottomPadding;\n\t\n\t\t\t\t// Function to fit a box\n\t\t\t\tfunction fitBox(box) {\n\t\t\t\t\tvar minBoxSize = helpers.findNextWhere(minBoxSizes, function(minBox) {\n\t\t\t\t\t\treturn minBox.box === box;\n\t\t\t\t\t});\n\t\n\t\t\t\t\tif (minBoxSize) {\n\t\t\t\t\t\tif (box.isHorizontal()) {\n\t\t\t\t\t\t\tvar scaleMargin = {\n\t\t\t\t\t\t\t\tleft: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),\n\t\t\t\t\t\t\t\tright: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),\n\t\t\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\t\t\tbottom: 0\n\t\t\t\t\t\t\t};\n\t\n\t\t\t\t\t\t\t// Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends\n\t\t\t\t\t\t\t// on the margin. Sometimes they need to increase in size slightly\n\t\t\t\t\t\t\tbox.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbox.update(minBoxSize.minSize.width, maxChartAreaHeight);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Update, and calculate the left and right margins for the horizontal boxes\n\t\t\t\thelpers.each(leftBoxes.concat(rightBoxes), fitBox);\n\t\n\t\t\t\thelpers.each(leftBoxes, function(box) {\n\t\t\t\t\ttotalLeftBoxesWidth += box.width;\n\t\t\t\t});\n\t\n\t\t\t\thelpers.each(rightBoxes, function(box) {\n\t\t\t\t\ttotalRightBoxesWidth += box.width;\n\t\t\t\t});\n\t\n\t\t\t\t// Set the Left and Right margins for the horizontal boxes\n\t\t\t\thelpers.each(topBoxes.concat(bottomBoxes), fitBox);\n\t\n\t\t\t\t// Figure out how much margin is on the top and bottom of the vertical boxes\n\t\t\t\thelpers.each(topBoxes, function(box) {\n\t\t\t\t\ttotalTopBoxesHeight += box.height;\n\t\t\t\t});\n\t\n\t\t\t\thelpers.each(bottomBoxes, function(box) {\n\t\t\t\t\ttotalBottomBoxesHeight += box.height;\n\t\t\t\t});\n\t\n\t\t\t\tfunction finalFitVerticalBox(box) {\n\t\t\t\t\tvar minBoxSize = helpers.findNextWhere(minBoxSizes, function(minSize) {\n\t\t\t\t\t\treturn minSize.box === box;\n\t\t\t\t\t});\n\t\n\t\t\t\t\tvar scaleMargin = {\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\ttop: totalTopBoxesHeight,\n\t\t\t\t\t\tbottom: totalBottomBoxesHeight\n\t\t\t\t\t};\n\t\n\t\t\t\t\tif (minBoxSize) {\n\t\t\t\t\t\tbox.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Let the left layout know the final margin\n\t\t\t\thelpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);\n\t\n\t\t\t\t// Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)\n\t\t\t\ttotalLeftBoxesWidth = leftPadding;\n\t\t\t\ttotalRightBoxesWidth = rightPadding;\n\t\t\t\ttotalTopBoxesHeight = topPadding;\n\t\t\t\ttotalBottomBoxesHeight = bottomPadding;\n\t\n\t\t\t\thelpers.each(leftBoxes, function(box) {\n\t\t\t\t\ttotalLeftBoxesWidth += box.width;\n\t\t\t\t});\n\t\n\t\t\t\thelpers.each(rightBoxes, function(box) {\n\t\t\t\t\ttotalRightBoxesWidth += box.width;\n\t\t\t\t});\n\t\n\t\t\t\thelpers.each(topBoxes, function(box) {\n\t\t\t\t\ttotalTopBoxesHeight += box.height;\n\t\t\t\t});\n\t\t\t\thelpers.each(bottomBoxes, function(box) {\n\t\t\t\t\ttotalBottomBoxesHeight += box.height;\n\t\t\t\t});\n\t\n\t\t\t\t// We may be adding some padding to account for rotated x axis labels\n\t\t\t\tvar leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);\n\t\t\t\ttotalLeftBoxesWidth += leftPaddingAddition;\n\t\t\t\ttotalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);\n\t\n\t\t\t\tvar topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);\n\t\t\t\ttotalTopBoxesHeight += topPaddingAddition;\n\t\t\t\ttotalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0);\n\t\n\t\t\t\t// Figure out if our chart area changed. This would occur if the dataset layout label rotation\n\t\t\t\t// changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do\n\t\t\t\t// without calling `fit` again\n\t\t\t\tvar newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;\n\t\t\t\tvar newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;\n\t\n\t\t\t\tif (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {\n\t\t\t\t\thelpers.each(leftBoxes, function(box) {\n\t\t\t\t\t\tbox.height = newMaxChartAreaHeight;\n\t\t\t\t\t});\n\t\n\t\t\t\t\thelpers.each(rightBoxes, function(box) {\n\t\t\t\t\t\tbox.height = newMaxChartAreaHeight;\n\t\t\t\t\t});\n\t\n\t\t\t\t\thelpers.each(topBoxes, function(box) {\n\t\t\t\t\t\tif (!box.options.fullWidth) {\n\t\t\t\t\t\t\tbox.width = newMaxChartAreaWidth;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\n\t\t\t\t\thelpers.each(bottomBoxes, function(box) {\n\t\t\t\t\t\tif (!box.options.fullWidth) {\n\t\t\t\t\t\t\tbox.width = newMaxChartAreaWidth;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\n\t\t\t\t\tmaxChartAreaHeight = newMaxChartAreaHeight;\n\t\t\t\t\tmaxChartAreaWidth = newMaxChartAreaWidth;\n\t\t\t\t}\n\t\n\t\t\t\t// Step 7 - Position the boxes\n\t\t\t\tvar left = leftPadding + leftPaddingAddition;\n\t\t\t\tvar top = topPadding + topPaddingAddition;\n\t\n\t\t\t\tfunction placeBox(box) {\n\t\t\t\t\tif (box.isHorizontal()) {\n\t\t\t\t\t\tbox.left = box.options.fullWidth ? leftPadding : totalLeftBoxesWidth;\n\t\t\t\t\t\tbox.right = box.options.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;\n\t\t\t\t\t\tbox.top = top;\n\t\t\t\t\t\tbox.bottom = top + box.height;\n\t\n\t\t\t\t\t\t// Move to next point\n\t\t\t\t\t\ttop = box.bottom;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tbox.left = left;\n\t\t\t\t\t\tbox.right = left + box.width;\n\t\t\t\t\t\tbox.top = totalTopBoxesHeight;\n\t\t\t\t\t\tbox.bottom = totalTopBoxesHeight + maxChartAreaHeight;\n\t\n\t\t\t\t\t\t// Move to next point\n\t\t\t\t\t\tleft = box.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\thelpers.each(leftBoxes.concat(topBoxes), placeBox);\n\t\n\t\t\t\t// Account for chart width and height\n\t\t\t\tleft += maxChartAreaWidth;\n\t\t\t\ttop += maxChartAreaHeight;\n\t\n\t\t\t\thelpers.each(rightBoxes, placeBox);\n\t\t\t\thelpers.each(bottomBoxes, placeBox);\n\t\n\t\t\t\t// Step 8\n\t\t\t\tchartInstance.chartArea = {\n\t\t\t\t\tleft: totalLeftBoxesWidth,\n\t\t\t\t\ttop: totalTopBoxesHeight,\n\t\t\t\t\tright: totalLeftBoxesWidth + maxChartAreaWidth,\n\t\t\t\t\tbottom: totalTopBoxesHeight + maxChartAreaHeight\n\t\t\t\t};\n\t\n\t\t\t\t// Step 9\n\t\t\t\thelpers.each(chartAreaBoxes, function(box) {\n\t\t\t\t\tbox.left = chartInstance.chartArea.left;\n\t\t\t\t\tbox.top = chartInstance.chartArea.top;\n\t\t\t\t\tbox.right = chartInstance.chartArea.right;\n\t\t\t\t\tbox.bottom = chartInstance.chartArea.bottom;\n\t\n\t\t\t\t\tbox.update(maxChartAreaWidth, maxChartAreaHeight);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t};\n\n\n/***/ },\n\n/***/ 598:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\tvar noop = helpers.noop;\n\t\n\t\tChart.defaults.global.legend = {\n\t\n\t\t\tdisplay: true,\n\t\t\tposition: 'top',\n\t\t\tfullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)\n\t\t\treverse: false,\n\t\n\t\t\t// a callback that will handle\n\t\t\tonClick: function(e, legendItem) {\n\t\t\t\tvar index = legendItem.datasetIndex;\n\t\t\t\tvar ci = this.chart;\n\t\t\t\tvar meta = ci.getDatasetMeta(index);\n\t\n\t\t\t\t// See controller.isDatasetVisible comment\n\t\t\t\tmeta.hidden = meta.hidden === null? !ci.data.datasets[index].hidden : null;\n\t\n\t\t\t\t// We hid a dataset ... rerender the chart\n\t\t\t\tci.update();\n\t\t\t},\n\t\n\t\t\tonHover: null,\n\t\n\t\t\tlabels: {\n\t\t\t\tboxWidth: 40,\n\t\t\t\tpadding: 10,\n\t\t\t\t// Generates labels shown in the legend\n\t\t\t\t// Valid properties to return:\n\t\t\t\t// text : text to display\n\t\t\t\t// fillStyle : fill of coloured box\n\t\t\t\t// strokeStyle: stroke of coloured box\n\t\t\t\t// hidden : if this legend item refers to a hidden item\n\t\t\t\t// lineCap : cap style for line\n\t\t\t\t// lineDash\n\t\t\t\t// lineDashOffset :\n\t\t\t\t// lineJoin :\n\t\t\t\t// lineWidth :\n\t\t\t\tgenerateLabels: function(chart) {\n\t\t\t\t\tvar data = chart.data;\n\t\t\t\t\treturn helpers.isArray(data.datasets) ? data.datasets.map(function(dataset, i) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttext: dataset.label,\n\t\t\t\t\t\t\tfillStyle: (!helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0]),\n\t\t\t\t\t\t\thidden: !chart.isDatasetVisible(i),\n\t\t\t\t\t\t\tlineCap: dataset.borderCapStyle,\n\t\t\t\t\t\t\tlineDash: dataset.borderDash,\n\t\t\t\t\t\t\tlineDashOffset: dataset.borderDashOffset,\n\t\t\t\t\t\t\tlineJoin: dataset.borderJoinStyle,\n\t\t\t\t\t\t\tlineWidth: dataset.borderWidth,\n\t\t\t\t\t\t\tstrokeStyle: dataset.borderColor,\n\t\t\t\t\t\t\tpointStyle: dataset.pointStyle,\n\t\n\t\t\t\t\t\t\t// Below is extra data used for toggling the datasets\n\t\t\t\t\t\t\tdatasetIndex: i\n\t\t\t\t\t\t};\n\t\t\t\t\t}, this) : [];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Helper function to get the box width based on the usePointStyle option\n\t\t * @param labelopts {Object} the label options on the legend\n\t\t * @param fontSize {Number} the label font size\n\t\t * @return {Number} width of the color box area\n\t\t */\n\t\tfunction getBoxWidth(labelOpts, fontSize) {\n\t\t\treturn labelOpts.usePointStyle ?\n\t\t\t\tfontSize * Math.SQRT2 :\n\t\t\t\tlabelOpts.boxWidth;\n\t\t}\n\t\n\t\tChart.Legend = Chart.Element.extend({\n\t\n\t\t\tinitialize: function(config) {\n\t\t\t\thelpers.extend(this, config);\n\t\n\t\t\t\t// Contains hit boxes for each dataset (in dataset order)\n\t\t\t\tthis.legendHitBoxes = [];\n\t\n\t\t\t\t// Are we in doughnut mode which has a different data type\n\t\t\t\tthis.doughnutMode = false;\n\t\t\t},\n\t\n\t\t\t// These methods are ordered by lifecycle. Utilities then follow.\n\t\t\t// Any function defined here is inherited by all legend types.\n\t\t\t// Any function can be extended by the legend type\n\t\n\t\t\tbeforeUpdate: noop,\n\t\t\tupdate: function(maxWidth, maxHeight, margins) {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\t\t\tme.beforeUpdate();\n\t\n\t\t\t\t// Absorb the master measurements\n\t\t\t\tme.maxWidth = maxWidth;\n\t\t\t\tme.maxHeight = maxHeight;\n\t\t\t\tme.margins = margins;\n\t\n\t\t\t\t// Dimensions\n\t\t\t\tme.beforeSetDimensions();\n\t\t\t\tme.setDimensions();\n\t\t\t\tme.afterSetDimensions();\n\t\t\t\t// Labels\n\t\t\t\tme.beforeBuildLabels();\n\t\t\t\tme.buildLabels();\n\t\t\t\tme.afterBuildLabels();\n\t\n\t\t\t\t// Fit\n\t\t\t\tme.beforeFit();\n\t\t\t\tme.fit();\n\t\t\t\tme.afterFit();\n\t\t\t\t//\n\t\t\t\tme.afterUpdate();\n\t\n\t\t\t\treturn me.minSize;\n\t\t\t},\n\t\t\tafterUpdate: noop,\n\t\n\t\t\t//\n\t\n\t\t\tbeforeSetDimensions: noop,\n\t\t\tsetDimensions: function() {\n\t\t\t\tvar me = this;\n\t\t\t\t// Set the unconstrained dimension before label rotation\n\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\t// Reset position before calculating rotation\n\t\t\t\t\tme.width = me.maxWidth;\n\t\t\t\t\tme.left = 0;\n\t\t\t\t\tme.right = me.width;\n\t\t\t\t} else {\n\t\t\t\t\tme.height = me.maxHeight;\n\t\n\t\t\t\t\t// Reset position before calculating rotation\n\t\t\t\t\tme.top = 0;\n\t\t\t\t\tme.bottom = me.height;\n\t\t\t\t}\n\t\n\t\t\t\t// Reset padding\n\t\t\t\tme.paddingLeft = 0;\n\t\t\t\tme.paddingTop = 0;\n\t\t\t\tme.paddingRight = 0;\n\t\t\t\tme.paddingBottom = 0;\n\t\n\t\t\t\t// Reset minSize\n\t\t\t\tme.minSize = {\n\t\t\t\t\twidth: 0,\n\t\t\t\t\theight: 0\n\t\t\t\t};\n\t\t\t},\n\t\t\tafterSetDimensions: noop,\n\t\n\t\t\t//\n\t\n\t\t\tbeforeBuildLabels: noop,\n\t\t\tbuildLabels: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar labelOpts = me.options.labels;\n\t\t\t\tvar legendItems = labelOpts.generateLabels.call(me, me.chart);\n\t\n\t\t\t\tif (labelOpts.filter) {\n\t\t\t\t\tlegendItems = legendItems.filter(function(item) {\n\t\t\t\t\t\treturn labelOpts.filter(item, me.chart.data);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\tif (me.options.reverse) {\n\t\t\t\t\tlegendItems.reverse();\n\t\t\t\t}\n\t\n\t\t\t\tme.legendItems = legendItems;\n\t\t\t},\n\t\t\tafterBuildLabels: noop,\n\t\n\t\t\t//\n\t\n\t\t\tbeforeFit: noop,\n\t\t\tfit: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar opts = me.options;\n\t\t\t\tvar labelOpts = opts.labels;\n\t\t\t\tvar display = opts.display;\n\t\n\t\t\t\tvar ctx = me.ctx;\n\t\n\t\t\t\tvar globalDefault = Chart.defaults.global,\n\t\t\t\t\titemOrDefault = helpers.getValueOrDefault,\n\t\t\t\t\tfontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),\n\t\t\t\t\tfontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),\n\t\t\t\t\tfontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),\n\t\t\t\t\tlabelFont = helpers.fontString(fontSize, fontStyle, fontFamily);\n\t\n\t\t\t\t// Reset hit boxes\n\t\t\t\tvar hitboxes = me.legendHitBoxes = [];\n\t\n\t\t\t\tvar minSize = me.minSize;\n\t\t\t\tvar isHorizontal = me.isHorizontal();\n\t\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\tminSize.width = me.maxWidth; // fill all the width\n\t\t\t\t\tminSize.height = display ? 10 : 0;\n\t\t\t\t} else {\n\t\t\t\t\tminSize.width = display ? 10 : 0;\n\t\t\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t\t\t}\n\t\n\t\t\t\t// Increase sizes here\n\t\t\t\tif (display) {\n\t\t\t\t\tctx.font = labelFont;\n\t\n\t\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t\t// Labels\n\t\n\t\t\t\t\t\t// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n\t\t\t\t\t\tvar lineWidths = me.lineWidths = [0];\n\t\t\t\t\t\tvar totalHeight = me.legendItems.length ? fontSize + (labelOpts.padding) : 0;\n\t\n\t\t\t\t\t\tctx.textAlign = 'left';\n\t\t\t\t\t\tctx.textBaseline = 'top';\n\t\n\t\t\t\t\t\thelpers.each(me.legendItems, function(legendItem, i) {\n\t\t\t\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\t\t\t\t\tvar width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\t\n\t\t\t\t\t\t\tif (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {\n\t\t\t\t\t\t\t\ttotalHeight += fontSize + (labelOpts.padding);\n\t\t\t\t\t\t\t\tlineWidths[lineWidths.length] = me.left;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Store the hitbox width and height here. Final position will be updated in `draw`\n\t\t\t\t\t\t\thitboxes[i] = {\n\t\t\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\t\t\twidth: width,\n\t\t\t\t\t\t\t\theight: fontSize\n\t\t\t\t\t\t\t};\n\t\n\t\t\t\t\t\t\tlineWidths[lineWidths.length - 1] += width + labelOpts.padding;\n\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\tminSize.height += totalHeight;\n\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar vPadding = labelOpts.padding;\n\t\t\t\t\t\tvar columnWidths = me.columnWidths = [];\n\t\t\t\t\t\tvar totalWidth = labelOpts.padding;\n\t\t\t\t\t\tvar currentColWidth = 0;\n\t\t\t\t\t\tvar currentColHeight = 0;\n\t\t\t\t\t\tvar itemHeight = fontSize + vPadding;\n\t\n\t\t\t\t\t\thelpers.each(me.legendItems, function(legendItem, i) {\n\t\t\t\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\t\t\t\t\tvar itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\t\n\t\t\t\t\t\t\t// If too tall, go to new column\n\t\t\t\t\t\t\tif (currentColHeight + itemHeight > minSize.height) {\n\t\t\t\t\t\t\t\ttotalWidth += currentColWidth + labelOpts.padding;\n\t\t\t\t\t\t\t\tcolumnWidths.push(currentColWidth); // previous column width\n\t\n\t\t\t\t\t\t\t\tcurrentColWidth = 0;\n\t\t\t\t\t\t\t\tcurrentColHeight = 0;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Get max width\n\t\t\t\t\t\t\tcurrentColWidth = Math.max(currentColWidth, itemWidth);\n\t\t\t\t\t\t\tcurrentColHeight += itemHeight;\n\t\n\t\t\t\t\t\t\t// Store the hitbox width and height here. Final position will be updated in `draw`\n\t\t\t\t\t\t\thitboxes[i] = {\n\t\t\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\t\t\twidth: itemWidth,\n\t\t\t\t\t\t\t\theight: fontSize\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\ttotalWidth += currentColWidth;\n\t\t\t\t\t\tcolumnWidths.push(currentColWidth);\n\t\t\t\t\t\tminSize.width += totalWidth;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tme.width = minSize.width;\n\t\t\t\tme.height = minSize.height;\n\t\t\t},\n\t\t\tafterFit: noop,\n\t\n\t\t\t// Shared Methods\n\t\t\tisHorizontal: function() {\n\t\t\t\treturn this.options.position === 'top' || this.options.position === 'bottom';\n\t\t\t},\n\t\n\t\t\t// Actually draw the legend on the canvas\n\t\t\tdraw: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar opts = me.options;\n\t\t\t\tvar labelOpts = opts.labels;\n\t\t\t\tvar globalDefault = Chart.defaults.global,\n\t\t\t\t\tlineDefault = globalDefault.elements.line,\n\t\t\t\t\tlegendWidth = me.width,\n\t\t\t\t\tlineWidths = me.lineWidths;\n\t\n\t\t\t\tif (opts.display) {\n\t\t\t\t\tvar ctx = me.ctx,\n\t\t\t\t\t\tcursor,\n\t\t\t\t\t\titemOrDefault = helpers.getValueOrDefault,\n\t\t\t\t\t\tfontColor = itemOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor),\n\t\t\t\t\t\tfontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),\n\t\t\t\t\t\tfontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),\n\t\t\t\t\t\tfontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),\n\t\t\t\t\t\tlabelFont = helpers.fontString(fontSize, fontStyle, fontFamily);\n\t\n\t\t\t\t\t// Canvas setup\n\t\t\t\t\tctx.textAlign = 'left';\n\t\t\t\t\tctx.textBaseline = 'top';\n\t\t\t\t\tctx.lineWidth = 0.5;\n\t\t\t\t\tctx.strokeStyle = fontColor; // for strikethrough effect\n\t\t\t\t\tctx.fillStyle = fontColor; // render in correct colour\n\t\t\t\t\tctx.font = labelFont;\n\t\n\t\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize),\n\t\t\t\t\t\thitboxes = me.legendHitBoxes;\n\t\n\t\t\t\t\t// current position\n\t\t\t\t\tvar drawLegendBox = function(x, y, legendItem) {\n\t\t\t\t\t\tif (isNaN(boxWidth) || boxWidth <= 0) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Set the ctx for the box\n\t\t\t\t\t\tctx.save();\n\t\n\t\t\t\t\t\tctx.fillStyle = itemOrDefault(legendItem.fillStyle, globalDefault.defaultColor);\n\t\t\t\t\t\tctx.lineCap = itemOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);\n\t\t\t\t\t\tctx.lineDashOffset = itemOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);\n\t\t\t\t\t\tctx.lineJoin = itemOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);\n\t\t\t\t\t\tctx.lineWidth = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth);\n\t\t\t\t\t\tctx.strokeStyle = itemOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);\n\t\t\t\t\t\tvar isLineWidthZero = (itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0);\n\t\n\t\t\t\t\t\tif (ctx.setLineDash) {\n\t\t\t\t\t\t\t// IE 9 and 10 do not support line dash\n\t\t\t\t\t\t\tctx.setLineDash(itemOrDefault(legendItem.lineDash, lineDefault.borderDash));\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (opts.labels && opts.labels.usePointStyle) {\n\t\t\t\t\t\t\t// Recalculate x and y for drawPoint() because its expecting\n\t\t\t\t\t\t\t// x and y to be center of figure (instead of top left)\n\t\t\t\t\t\t\tvar radius = fontSize * Math.SQRT2 / 2;\n\t\t\t\t\t\t\tvar offSet = radius / Math.SQRT2;\n\t\t\t\t\t\t\tvar centerX = x + offSet;\n\t\t\t\t\t\t\tvar centerY = y + offSet;\n\t\n\t\t\t\t\t\t\t// Draw pointStyle as legend symbol\n\t\t\t\t\t\t\tChart.canvasHelpers.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Draw box as legend symbol\n\t\t\t\t\t\t\tif (!isLineWidthZero) {\n\t\t\t\t\t\t\t\tctx.strokeRect(x, y, boxWidth, fontSize);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tctx.fillRect(x, y, boxWidth, fontSize);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t};\n\t\t\t\t\tvar fillText = function(x, y, legendItem, textWidth) {\n\t\t\t\t\t\tctx.fillText(legendItem.text, boxWidth + (fontSize / 2) + x, y);\n\t\n\t\t\t\t\t\tif (legendItem.hidden) {\n\t\t\t\t\t\t\t// Strikethrough the text if hidden\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\tctx.lineWidth = 2;\n\t\t\t\t\t\t\tctx.moveTo(boxWidth + (fontSize / 2) + x, y + (fontSize / 2));\n\t\t\t\t\t\t\tctx.lineTo(boxWidth + (fontSize / 2) + x + textWidth, y + (fontSize / 2));\n\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\n\t\t\t\t\t// Horizontal\n\t\t\t\t\tvar isHorizontal = me.isHorizontal();\n\t\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t\tcursor = {\n\t\t\t\t\t\t\tx: me.left + ((legendWidth - lineWidths[0]) / 2),\n\t\t\t\t\t\t\ty: me.top + labelOpts.padding,\n\t\t\t\t\t\t\tline: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcursor = {\n\t\t\t\t\t\t\tx: me.left + labelOpts.padding,\n\t\t\t\t\t\t\ty: me.top + labelOpts.padding,\n\t\t\t\t\t\t\tline: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar itemHeight = fontSize + labelOpts.padding;\n\t\t\t\t\thelpers.each(me.legendItems, function(legendItem, i) {\n\t\t\t\t\t\tvar textWidth = ctx.measureText(legendItem.text).width,\n\t\t\t\t\t\t\twidth = boxWidth + (fontSize / 2) + textWidth,\n\t\t\t\t\t\t\tx = cursor.x,\n\t\t\t\t\t\t\ty = cursor.y;\n\t\n\t\t\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t\t\tif (x + width >= legendWidth) {\n\t\t\t\t\t\t\t\ty = cursor.y += itemHeight;\n\t\t\t\t\t\t\t\tcursor.line++;\n\t\t\t\t\t\t\t\tx = cursor.x = me.left + ((legendWidth - lineWidths[cursor.line]) / 2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (y + itemHeight > me.bottom) {\n\t\t\t\t\t\t\tx = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;\n\t\t\t\t\t\t\ty = cursor.y = me.top + labelOpts.padding;\n\t\t\t\t\t\t\tcursor.line++;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tdrawLegendBox(x, y, legendItem);\n\t\n\t\t\t\t\t\thitboxes[i].left = x;\n\t\t\t\t\t\thitboxes[i].top = y;\n\t\n\t\t\t\t\t\t// Fill the actual label\n\t\t\t\t\t\tfillText(x, y, legendItem, textWidth);\n\t\n\t\t\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t\t\tcursor.x += width + (labelOpts.padding);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcursor.y += itemHeight;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Handle an event\n\t\t\t * @private\n\t\t\t * @param {IEvent} event - The event to handle\n\t\t\t * @return {Boolean} true if a change occured\n\t\t\t */\n\t\t\thandleEvent: function(e) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar opts = me.options;\n\t\t\t\tvar type = e.type === 'mouseup' ? 'click' : e.type;\n\t\t\t\tvar changed = false;\n\t\n\t\t\t\tif (type === 'mousemove') {\n\t\t\t\t\tif (!opts.onHover) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else if (type === 'click') {\n\t\t\t\t\tif (!opts.onClick) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// Chart event already has relative position in it\n\t\t\t\tvar x = e.x,\n\t\t\t\t\ty = e.y;\n\t\n\t\t\t\tif (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n\t\t\t\t\t// See if we are touching one of the dataset boxes\n\t\t\t\t\tvar lh = me.legendHitBoxes;\n\t\t\t\t\tfor (var i = 0; i < lh.length; ++i) {\n\t\t\t\t\t\tvar hitBox = lh[i];\n\t\n\t\t\t\t\t\tif (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n\t\t\t\t\t\t\t// Touching an element\n\t\t\t\t\t\t\tif (type === 'click') {\n\t\t\t\t\t\t\t\t// use e.native for backwards compatibility\n\t\t\t\t\t\t\t\topts.onClick.call(me, e.native, me.legendItems[i]);\n\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t} else if (type === 'mousemove') {\n\t\t\t\t\t\t\t\t// use e.native for backwards compatibility\n\t\t\t\t\t\t\t\topts.onHover.call(me, e.native, me.legendItems[i]);\n\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn changed;\n\t\t\t}\n\t\t});\n\t\n\t\tfunction createNewLegendAndAttach(chartInstance, legendOpts) {\n\t\t\tvar legend = new Chart.Legend({\n\t\t\t\tctx: chartInstance.chart.ctx,\n\t\t\t\toptions: legendOpts,\n\t\t\t\tchart: chartInstance\n\t\t\t});\n\t\t\tchartInstance.legend = legend;\n\t\t\tChart.layoutService.addBox(chartInstance, legend);\n\t\t}\n\t\n\t\t// Register the legend plugin\n\t\tChart.plugins.register({\n\t\t\tbeforeInit: function(chartInstance) {\n\t\t\t\tvar legendOpts = chartInstance.options.legend;\n\t\n\t\t\t\tif (legendOpts) {\n\t\t\t\t\tcreateNewLegendAndAttach(chartInstance, legendOpts);\n\t\t\t\t}\n\t\t\t},\n\t\t\tbeforeUpdate: function(chartInstance) {\n\t\t\t\tvar legendOpts = chartInstance.options.legend;\n\t\n\t\t\t\tif (legendOpts) {\n\t\t\t\t\tlegendOpts = helpers.configMerge(Chart.defaults.global.legend, legendOpts);\n\t\n\t\t\t\t\tif (chartInstance.legend) {\n\t\t\t\t\t\tchartInstance.legend.options = legendOpts;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateNewLegendAndAttach(chartInstance, legendOpts);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tChart.layoutService.removeBox(chartInstance, chartInstance.legend);\n\t\t\t\t\tdelete chartInstance.legend;\n\t\t\t\t}\n\t\t\t},\n\t\t\tafterEvent: function(chartInstance, e) {\n\t\t\t\tvar legend = chartInstance.legend;\n\t\t\t\tif (legend) {\n\t\t\t\t\tlegend.handleEvent(e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 599:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tChart.defaults.global.plugins = {};\n\t\n\t\t/**\n\t\t * The plugin service singleton\n\t\t * @namespace Chart.plugins\n\t\t * @since 2.1.0\n\t\t */\n\t\tChart.plugins = {\n\t\t\t/**\n\t\t\t * Globally registered plugins.\n\t\t\t * @private\n\t\t\t */\n\t\t\t_plugins: [],\n\t\n\t\t\t/**\n\t\t\t * This identifier is used to invalidate the descriptors cache attached to each chart\n\t\t\t * when a global plugin is registered or unregistered. In this case, the cache ID is\n\t\t\t * incremented and descriptors are regenerated during following API calls.\n\t\t\t * @private\n\t\t\t */\n\t\t\t_cacheId: 0,\n\t\n\t\t\t/**\n\t\t\t * Registers the given plugin(s) if not already registered.\n\t\t\t * @param {Array|Object} plugins plugin instance(s).\n\t\t\t */\n\t\t\tregister: function(plugins) {\n\t\t\t\tvar p = this._plugins;\n\t\t\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\t\t\tif (p.indexOf(plugin) === -1) {\n\t\t\t\t\t\tp.push(plugin);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\tthis._cacheId++;\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Unregisters the given plugin(s) only if registered.\n\t\t\t * @param {Array|Object} plugins plugin instance(s).\n\t\t\t */\n\t\t\tunregister: function(plugins) {\n\t\t\t\tvar p = this._plugins;\n\t\t\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\t\t\tvar idx = p.indexOf(plugin);\n\t\t\t\t\tif (idx !== -1) {\n\t\t\t\t\t\tp.splice(idx, 1);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\tthis._cacheId++;\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Remove all registered plugins.\n\t\t\t * @since 2.1.5\n\t\t\t */\n\t\t\tclear: function() {\n\t\t\t\tthis._plugins = [];\n\t\t\t\tthis._cacheId++;\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Returns the number of registered plugins?\n\t\t\t * @returns {Number}\n\t\t\t * @since 2.1.5\n\t\t\t */\n\t\t\tcount: function() {\n\t\t\t\treturn this._plugins.length;\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Returns all registered plugin instances.\n\t\t\t * @returns {Array} array of plugin objects.\n\t\t\t * @since 2.1.5\n\t\t\t */\n\t\t\tgetAll: function() {\n\t\t\t\treturn this._plugins;\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t\t\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t\t\t * returned value can be used, for instance, to interrupt the current action.\n\t\t\t * @param {Object} chart - The chart instance for which plugins should be called.\n\t\t\t * @param {String} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t\t\t * @param {Array} [args] - Extra arguments to apply to the hook call.\n\t\t\t * @returns {Boolean} false if any of the plugins return false, else returns true.\n\t\t\t */\n\t\t\tnotify: function(chart, hook, args) {\n\t\t\t\tvar descriptors = this.descriptors(chart);\n\t\t\t\tvar ilen = descriptors.length;\n\t\t\t\tvar i, descriptor, plugin, params, method;\n\t\n\t\t\t\tfor (i=0; i<ilen; ++i) {\n\t\t\t\t\tdescriptor = descriptors[i];\n\t\t\t\t\tplugin = descriptor.plugin;\n\t\t\t\t\tmethod = plugin[hook];\n\t\t\t\t\tif (typeof method === 'function') {\n\t\t\t\t\t\tparams = [chart].concat(args || []);\n\t\t\t\t\t\tparams.push(descriptor.options);\n\t\t\t\t\t\tif (method.apply(plugin, params) === false) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn true;\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Returns descriptors of enabled plugins for the given chart.\n\t\t\t * @returns {Array} [{ plugin, options }]\n\t\t\t * @private\n\t\t\t */\n\t\t\tdescriptors: function(chart) {\n\t\t\t\tvar cache = chart._plugins || (chart._plugins = {});\n\t\t\t\tif (cache.id === this._cacheId) {\n\t\t\t\t\treturn cache.descriptors;\n\t\t\t\t}\n\t\n\t\t\t\tvar plugins = [];\n\t\t\t\tvar descriptors = [];\n\t\t\t\tvar config = (chart && chart.config) || {};\n\t\t\t\tvar defaults = Chart.defaults.global.plugins;\n\t\t\t\tvar options = (config.options && config.options.plugins) || {};\n\t\n\t\t\t\tthis._plugins.concat(config.plugins || []).forEach(function(plugin) {\n\t\t\t\t\tvar idx = plugins.indexOf(plugin);\n\t\t\t\t\tif (idx !== -1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar id = plugin.id;\n\t\t\t\t\tvar opts = options[id];\n\t\t\t\t\tif (opts === false) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (opts === true) {\n\t\t\t\t\t\topts = helpers.clone(defaults[id]);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tplugins.push(plugin);\n\t\t\t\t\tdescriptors.push({\n\t\t\t\t\t\tplugin: plugin,\n\t\t\t\t\t\toptions: opts || {}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\n\t\t\t\tcache.descriptors = descriptors;\n\t\t\t\tcache.id = this._cacheId;\n\t\t\t\treturn descriptors;\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Plugin extension hooks.\n\t\t * @interface IPlugin\n\t\t * @since 2.1.0\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#beforeInit\n\t\t * @desc Called before initializing `chart`.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Object} options - The plugin options.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#afterInit\n\t\t * @desc Called after `chart` has been initialized and before the first update.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Object} options - The plugin options.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#beforeUpdate\n\t\t * @desc Called before updating `chart`. If any plugin returns `false`, the update\n\t\t * is cancelled (and thus subsequent render(s)) until another `update` is triggered.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Object} options - The plugin options.\n\t\t * @returns {Boolean} `false` to cancel the chart update.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#afterUpdate\n\t\t * @desc Called after `chart` has been updated and before rendering. Note that this\n\t\t * hook will not be called if the chart update has been previously cancelled.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Object} options - The plugin options.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#beforeDatasetsUpdate\n\t \t * @desc Called before updating the `chart` datasets. If any plugin returns `false`,\n\t\t * the datasets update is cancelled until another `update` is triggered.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Object} options - The plugin options.\n\t\t * @returns {Boolean} false to cancel the datasets update.\n\t\t * @since version 2.1.5\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#afterDatasetsUpdate\n\t\t * @desc Called after the `chart` datasets have been updated. Note that this hook\n\t\t * will not be called if the datasets update has been previously cancelled.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Object} options - The plugin options.\n\t\t * @since version 2.1.5\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#beforeLayout\n\t\t * @desc Called before laying out `chart`. If any plugin returns `false`,\n\t\t * the layout update is cancelled until another `update` is triggered.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Object} options - The plugin options.\n\t\t * @returns {Boolean} `false` to cancel the chart layout.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#afterLayout\n\t\t * @desc Called after the `chart` has been layed out. Note that this hook will not\n\t\t * be called if the layout update has been previously cancelled.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Object} options - The plugin options.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#beforeRender\n\t\t * @desc Called before rendering `chart`. If any plugin returns `false`,\n\t\t * the rendering is cancelled until another `render` is triggered.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Object} options - The plugin options.\n\t\t * @returns {Boolean} `false` to cancel the chart rendering.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#afterRender\n\t\t * @desc Called after the `chart` has been fully rendered (and animation completed). Note\n\t\t * that this hook will not be called if the rendering has been previously cancelled.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Object} options - The plugin options.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#beforeDraw\n\t\t * @desc Called before drawing `chart` at every animation frame specified by the given\n\t\t * easing value. If any plugin returns `false`, the frame drawing is cancelled until\n\t\t * another `render` is triggered.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n\t\t * @param {Object} options - The plugin options.\n\t\t * @returns {Boolean} `false` to cancel the chart drawing.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#afterDraw\n\t\t * @desc Called after the `chart` has been drawn for the specific easing value. Note\n\t\t * that this hook will not be called if the drawing has been previously cancelled.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n\t\t * @param {Object} options - The plugin options.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#beforeDatasetsDraw\n\t \t * @desc Called before drawing the `chart` datasets. If any plugin returns `false`,\n\t\t * the datasets drawing is cancelled until another `render` is triggered.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n\t\t * @param {Object} options - The plugin options.\n\t\t * @returns {Boolean} `false` to cancel the chart datasets drawing.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#afterDatasetsDraw\n\t\t * @desc Called after the `chart` datasets have been drawn. Note that this hook\n\t\t * will not be called if the datasets drawing has been previously cancelled.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n\t\t * @param {Object} options - The plugin options.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#beforeEvent\n\t \t * @desc Called before processing the specified `event`. If any plugin returns `false`,\n\t\t * the event will be discarded.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {IEvent} event - The event object.\n\t\t * @param {Object} options - The plugin options.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#afterEvent\n\t\t * @desc Called after the `event` has been consumed. Note that this hook\n\t\t * will not be called if the `event` has been previously discarded.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {IEvent} event - The event object.\n\t\t * @param {Object} options - The plugin options.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#resize\n\t\t * @desc Called after the chart as been resized.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Number} size - The new canvas display size (eq. canvas.style width & height).\n\t\t * @param {Object} options - The plugin options.\n\t\t */\n\t\t/**\n\t\t * @method IPlugin#destroy\n\t\t * @desc Called after the chart as been destroyed.\n\t\t * @param {Chart.Controller} chart - The chart instance.\n\t\t * @param {Object} options - The plugin options.\n\t\t */\n\t\n\t\t/**\n\t\t * Provided for backward compatibility, use Chart.plugins instead\n\t\t * @namespace Chart.pluginService\n\t\t * @deprecated since version 2.1.5\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tChart.pluginService = Chart.plugins;\n\t\n\t\t/**\n\t\t * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n\t\t * effect, instead simply create/register plugins via plain JavaScript objects.\n\t\t * @interface Chart.PluginBase\n\t\t * @deprecated since version 2.5.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tChart.PluginBase = helpers.inherits({});\n\t};\n\n\n/***/ },\n\n/***/ 600:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tChart.defaults.scale = {\n\t\t\tdisplay: true,\n\t\t\tposition: 'left',\n\t\n\t\t\t// grid line settings\n\t\t\tgridLines: {\n\t\t\t\tdisplay: true,\n\t\t\t\tcolor: 'rgba(0, 0, 0, 0.1)',\n\t\t\t\tlineWidth: 1,\n\t\t\t\tdrawBorder: true,\n\t\t\t\tdrawOnChartArea: true,\n\t\t\t\tdrawTicks: true,\n\t\t\t\ttickMarkLength: 10,\n\t\t\t\tzeroLineWidth: 1,\n\t\t\t\tzeroLineColor: 'rgba(0,0,0,0.25)',\n\t\t\t\toffsetGridLines: false,\n\t\t\t\tborderDash: [],\n\t\t\t\tborderDashOffset: 0.0\n\t\t\t},\n\t\n\t\t\t// scale label\n\t\t\tscaleLabel: {\n\t\t\t\t// actual label\n\t\t\t\tlabelString: '',\n\t\n\t\t\t\t// display property\n\t\t\t\tdisplay: false\n\t\t\t},\n\t\n\t\t\t// label settings\n\t\t\tticks: {\n\t\t\t\tbeginAtZero: false,\n\t\t\t\tminRotation: 0,\n\t\t\t\tmaxRotation: 50,\n\t\t\t\tmirror: false,\n\t\t\t\tpadding: 0,\n\t\t\t\treverse: false,\n\t\t\t\tdisplay: true,\n\t\t\t\tautoSkip: true,\n\t\t\t\tautoSkipPadding: 0,\n\t\t\t\tlabelOffset: 0,\n\t\t\t\t// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n\t\t\t\tcallback: Chart.Ticks.formatters.values\n\t\t\t}\n\t\t};\n\t\n\t\tfunction computeTextSize(context, tick, font) {\n\t\t\treturn helpers.isArray(tick) ?\n\t\t\t\thelpers.longestText(context, font, tick) :\n\t\t\t\tcontext.measureText(tick).width;\n\t\t}\n\t\n\t\tfunction parseFontOptions(options) {\n\t\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\t\t\tvar globalDefaults = Chart.defaults.global;\n\t\t\tvar size = getValueOrDefault(options.fontSize, globalDefaults.defaultFontSize);\n\t\t\tvar style = getValueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);\n\t\t\tvar family = getValueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);\n\t\n\t\t\treturn {\n\t\t\t\tsize: size,\n\t\t\t\tstyle: style,\n\t\t\t\tfamily: family,\n\t\t\t\tfont: helpers.fontString(size, style, family)\n\t\t\t};\n\t\t}\n\t\n\t\tChart.Scale = Chart.Element.extend({\n\t\t\t/**\n\t\t\t * Get the padding needed for the scale\n\t\t\t * @method getPadding\n\t\t\t * @private\n\t\t\t * @returns {Padding} the necessary padding\n\t\t\t */\n\t\t\tgetPadding: function() {\n\t\t\t\tvar me = this;\n\t\t\t\treturn {\n\t\t\t\t\tleft: me.paddingLeft || 0,\n\t\t\t\t\ttop: me.paddingTop || 0,\n\t\t\t\t\tright: me.paddingRight || 0,\n\t\t\t\t\tbottom: me.paddingBottom || 0\n\t\t\t\t};\n\t\t\t},\n\t\n\t\t\t// These methods are ordered by lifecyle. Utilities then follow.\n\t\t\t// Any function defined here is inherited by all scale types.\n\t\t\t// Any function can be extended by the scale type\n\t\n\t\t\tbeforeUpdate: function() {\n\t\t\t\thelpers.callCallback(this.options.beforeUpdate, [this]);\n\t\t\t},\n\t\t\tupdate: function(maxWidth, maxHeight, margins) {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\t\t\tme.beforeUpdate();\n\t\n\t\t\t\t// Absorb the master measurements\n\t\t\t\tme.maxWidth = maxWidth;\n\t\t\t\tme.maxHeight = maxHeight;\n\t\t\t\tme.margins = helpers.extend({\n\t\t\t\t\tleft: 0,\n\t\t\t\t\tright: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tbottom: 0\n\t\t\t\t}, margins);\n\t\t\t\tme.longestTextCache = me.longestTextCache || {};\n\t\n\t\t\t\t// Dimensions\n\t\t\t\tme.beforeSetDimensions();\n\t\t\t\tme.setDimensions();\n\t\t\t\tme.afterSetDimensions();\n\t\n\t\t\t\t// Data min/max\n\t\t\t\tme.beforeDataLimits();\n\t\t\t\tme.determineDataLimits();\n\t\t\t\tme.afterDataLimits();\n\t\n\t\t\t\t// Ticks\n\t\t\t\tme.beforeBuildTicks();\n\t\t\t\tme.buildTicks();\n\t\t\t\tme.afterBuildTicks();\n\t\n\t\t\t\tme.beforeTickToLabelConversion();\n\t\t\t\tme.convertTicksToLabels();\n\t\t\t\tme.afterTickToLabelConversion();\n\t\n\t\t\t\t// Tick Rotation\n\t\t\t\tme.beforeCalculateTickRotation();\n\t\t\t\tme.calculateTickRotation();\n\t\t\t\tme.afterCalculateTickRotation();\n\t\t\t\t// Fit\n\t\t\t\tme.beforeFit();\n\t\t\t\tme.fit();\n\t\t\t\tme.afterFit();\n\t\t\t\t//\n\t\t\t\tme.afterUpdate();\n\t\n\t\t\t\treturn me.minSize;\n\t\n\t\t\t},\n\t\t\tafterUpdate: function() {\n\t\t\t\thelpers.callCallback(this.options.afterUpdate, [this]);\n\t\t\t},\n\t\n\t\t\t//\n\t\n\t\t\tbeforeSetDimensions: function() {\n\t\t\t\thelpers.callCallback(this.options.beforeSetDimensions, [this]);\n\t\t\t},\n\t\t\tsetDimensions: function() {\n\t\t\t\tvar me = this;\n\t\t\t\t// Set the unconstrained dimension before label rotation\n\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\t// Reset position before calculating rotation\n\t\t\t\t\tme.width = me.maxWidth;\n\t\t\t\t\tme.left = 0;\n\t\t\t\t\tme.right = me.width;\n\t\t\t\t} else {\n\t\t\t\t\tme.height = me.maxHeight;\n\t\n\t\t\t\t\t// Reset position before calculating rotation\n\t\t\t\t\tme.top = 0;\n\t\t\t\t\tme.bottom = me.height;\n\t\t\t\t}\n\t\n\t\t\t\t// Reset padding\n\t\t\t\tme.paddingLeft = 0;\n\t\t\t\tme.paddingTop = 0;\n\t\t\t\tme.paddingRight = 0;\n\t\t\t\tme.paddingBottom = 0;\n\t\t\t},\n\t\t\tafterSetDimensions: function() {\n\t\t\t\thelpers.callCallback(this.options.afterSetDimensions, [this]);\n\t\t\t},\n\t\n\t\t\t// Data limits\n\t\t\tbeforeDataLimits: function() {\n\t\t\t\thelpers.callCallback(this.options.beforeDataLimits, [this]);\n\t\t\t},\n\t\t\tdetermineDataLimits: helpers.noop,\n\t\t\tafterDataLimits: function() {\n\t\t\t\thelpers.callCallback(this.options.afterDataLimits, [this]);\n\t\t\t},\n\t\n\t\t\t//\n\t\t\tbeforeBuildTicks: function() {\n\t\t\t\thelpers.callCallback(this.options.beforeBuildTicks, [this]);\n\t\t\t},\n\t\t\tbuildTicks: helpers.noop,\n\t\t\tafterBuildTicks: function() {\n\t\t\t\thelpers.callCallback(this.options.afterBuildTicks, [this]);\n\t\t\t},\n\t\n\t\t\tbeforeTickToLabelConversion: function() {\n\t\t\t\thelpers.callCallback(this.options.beforeTickToLabelConversion, [this]);\n\t\t\t},\n\t\t\tconvertTicksToLabels: function() {\n\t\t\t\tvar me = this;\n\t\t\t\t// Convert ticks to strings\n\t\t\t\tvar tickOpts = me.options.ticks;\n\t\t\t\tme.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback);\n\t\t\t},\n\t\t\tafterTickToLabelConversion: function() {\n\t\t\t\thelpers.callCallback(this.options.afterTickToLabelConversion, [this]);\n\t\t\t},\n\t\n\t\t\t//\n\t\n\t\t\tbeforeCalculateTickRotation: function() {\n\t\t\t\thelpers.callCallback(this.options.beforeCalculateTickRotation, [this]);\n\t\t\t},\n\t\t\tcalculateTickRotation: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar context = me.ctx;\n\t\t\t\tvar tickOpts = me.options.ticks;\n\t\n\t\t\t\t// Get the width of each grid by calculating the difference\n\t\t\t\t// between x offsets between 0 and 1.\n\t\t\t\tvar tickFont = parseFontOptions(tickOpts);\n\t\t\t\tcontext.font = tickFont.font;\n\t\n\t\t\t\tvar labelRotation = tickOpts.minRotation || 0;\n\t\n\t\t\t\tif (me.options.display && me.isHorizontal()) {\n\t\t\t\t\tvar originalLabelWidth = helpers.longestText(context, tickFont.font, me.ticks, me.longestTextCache);\n\t\t\t\t\tvar labelWidth = originalLabelWidth;\n\t\t\t\t\tvar cosRotation;\n\t\t\t\t\tvar sinRotation;\n\t\n\t\t\t\t\t// Allow 3 pixels x2 padding either side for label readability\n\t\t\t\t\tvar tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;\n\t\n\t\t\t\t\t// Max label rotation can be set or default to 90 - also act as a loop counter\n\t\t\t\t\twhile (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {\n\t\t\t\t\t\tvar angleRadians = helpers.toRadians(labelRotation);\n\t\t\t\t\t\tcosRotation = Math.cos(angleRadians);\n\t\t\t\t\t\tsinRotation = Math.sin(angleRadians);\n\t\n\t\t\t\t\t\tif (sinRotation * originalLabelWidth > me.maxHeight) {\n\t\t\t\t\t\t\t// go back one step\n\t\t\t\t\t\t\tlabelRotation--;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tlabelRotation++;\n\t\t\t\t\t\tlabelWidth = cosRotation * originalLabelWidth;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tme.labelRotation = labelRotation;\n\t\t\t},\n\t\t\tafterCalculateTickRotation: function() {\n\t\t\t\thelpers.callCallback(this.options.afterCalculateTickRotation, [this]);\n\t\t\t},\n\t\n\t\t\t//\n\t\n\t\t\tbeforeFit: function() {\n\t\t\t\thelpers.callCallback(this.options.beforeFit, [this]);\n\t\t\t},\n\t\t\tfit: function() {\n\t\t\t\tvar me = this;\n\t\t\t\t// Reset\n\t\t\t\tvar minSize = me.minSize = {\n\t\t\t\t\twidth: 0,\n\t\t\t\t\theight: 0\n\t\t\t\t};\n\t\n\t\t\t\tvar opts = me.options;\n\t\t\t\tvar tickOpts = opts.ticks;\n\t\t\t\tvar scaleLabelOpts = opts.scaleLabel;\n\t\t\t\tvar gridLineOpts = opts.gridLines;\n\t\t\t\tvar display = opts.display;\n\t\t\t\tvar isHorizontal = me.isHorizontal();\n\t\n\t\t\t\tvar tickFont = parseFontOptions(tickOpts);\n\t\t\t\tvar scaleLabelFontSize = parseFontOptions(scaleLabelOpts).size * 1.5;\n\t\t\t\tvar tickMarkLength = opts.gridLines.tickMarkLength;\n\t\n\t\t\t\t// Width\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t// subtract the margins to line up with the chartArea if we are a full width scale\n\t\t\t\t\tminSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;\n\t\t\t\t} else {\n\t\t\t\t\tminSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n\t\t\t\t}\n\t\n\t\t\t\t// height\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\tminSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n\t\t\t\t} else {\n\t\t\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t\t\t}\n\t\n\t\t\t\t// Are we showing a title for the scale?\n\t\t\t\tif (scaleLabelOpts.display && display) {\n\t\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t\tminSize.height += scaleLabelFontSize;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tminSize.width += scaleLabelFontSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Don't bother fitting the ticks if we are not showing them\n\t\t\t\tif (tickOpts.display && display) {\n\t\t\t\t\tvar largestTextWidth = helpers.longestText(me.ctx, tickFont.font, me.ticks, me.longestTextCache);\n\t\t\t\t\tvar tallestLabelHeightInLines = helpers.numberOfLabelLines(me.ticks);\n\t\t\t\t\tvar lineSpace = tickFont.size * 0.5;\n\t\n\t\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t\t// A horizontal axis is more constrained by the height.\n\t\t\t\t\t\tme.longestLabelWidth = largestTextWidth;\n\t\n\t\t\t\t\t\tvar angleRadians = helpers.toRadians(me.labelRotation);\n\t\t\t\t\t\tvar cosRotation = Math.cos(angleRadians);\n\t\t\t\t\t\tvar sinRotation = Math.sin(angleRadians);\n\t\n\t\t\t\t\t\t// TODO - improve this calculation\n\t\t\t\t\t\tvar labelHeight = (sinRotation * largestTextWidth)\n\t\t\t\t\t\t\t+ (tickFont.size * tallestLabelHeightInLines)\n\t\t\t\t\t\t\t+ (lineSpace * tallestLabelHeightInLines);\n\t\n\t\t\t\t\t\tminSize.height = Math.min(me.maxHeight, minSize.height + labelHeight);\n\t\t\t\t\t\tme.ctx.font = tickFont.font;\n\t\n\t\t\t\t\t\tvar firstTick = me.ticks[0];\n\t\t\t\t\t\tvar firstLabelWidth = computeTextSize(me.ctx, firstTick, tickFont.font);\n\t\n\t\t\t\t\t\tvar lastTick = me.ticks[me.ticks.length - 1];\n\t\t\t\t\t\tvar lastLabelWidth = computeTextSize(me.ctx, lastTick, tickFont.font);\n\t\n\t\t\t\t\t\t// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned which means that the right padding is dominated\n\t\t\t\t\t\t// by the font height\n\t\t\t\t\t\tif (me.labelRotation !== 0) {\n\t\t\t\t\t\t\tme.paddingLeft = opts.position === 'bottom'? (cosRotation * firstLabelWidth) + 3: (cosRotation * lineSpace) + 3; // add 3 px to move away from canvas edges\n\t\t\t\t\t\t\tme.paddingRight = opts.position === 'bottom'? (cosRotation * lineSpace) + 3: (cosRotation * lastLabelWidth) + 3;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tme.paddingLeft = firstLabelWidth / 2 + 3; // add 3 px to move away from canvas edges\n\t\t\t\t\t\t\tme.paddingRight = lastLabelWidth / 2 + 3;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// A vertical axis is more constrained by the width. Labels are the dominant factor here, so get that length first\n\t\t\t\t\t\t// Account for padding\n\t\n\t\t\t\t\t\tif (tickOpts.mirror) {\n\t\t\t\t\t\t\tlargestTextWidth = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlargestTextWidth += me.options.ticks.padding;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tminSize.width += largestTextWidth;\n\t\t\t\t\t\tme.paddingTop = tickFont.size / 2;\n\t\t\t\t\t\tme.paddingBottom = tickFont.size / 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tme.handleMargins();\n\t\n\t\t\t\tme.width = minSize.width;\n\t\t\t\tme.height = minSize.height;\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Handle margins and padding interactions\n\t\t\t * @private\n\t\t\t */\n\t\t\thandleMargins: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tif (me.margins) {\n\t\t\t\t\tme.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);\n\t\t\t\t\tme.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);\n\t\t\t\t\tme.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);\n\t\t\t\t\tme.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tafterFit: function() {\n\t\t\t\thelpers.callCallback(this.options.afterFit, [this]);\n\t\t\t},\n\t\n\t\t\t// Shared Methods\n\t\t\tisHorizontal: function() {\n\t\t\t\treturn this.options.position === 'top' || this.options.position === 'bottom';\n\t\t\t},\n\t\t\tisFullWidth: function() {\n\t\t\t\treturn (this.options.fullWidth);\n\t\t\t},\n\t\n\t\t\t// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not\n\t\t\tgetRightValue: function(rawValue) {\n\t\t\t\t// Null and undefined values first\n\t\t\t\tif (rawValue === null || typeof(rawValue) === 'undefined') {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\t// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values\n\t\t\t\tif (typeof(rawValue) === 'number' && !isFinite(rawValue)) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\t// If it is in fact an object, dive in one more level\n\t\t\t\tif (typeof(rawValue) === 'object') {\n\t\t\t\t\tif ((rawValue instanceof Date) || (rawValue.isValid)) {\n\t\t\t\t\t\treturn rawValue;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.getRightValue(this.isHorizontal() ? rawValue.x : rawValue.y);\n\t\t\t\t}\n\t\n\t\t\t\t// Value is good, return it\n\t\t\t\treturn rawValue;\n\t\t\t},\n\t\n\t\t\t// Used to get the value to display in the tooltip for the data at the given index\n\t\t\t// function getLabelForIndex(index, datasetIndex)\n\t\t\tgetLabelForIndex: helpers.noop,\n\t\n\t\t\t// Used to get data value locations.  Value can either be an index or a numerical value\n\t\t\tgetPixelForValue: helpers.noop,\n\t\n\t\t\t// Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t\t\tgetValueForPixel: helpers.noop,\n\t\n\t\t\t// Used for tick location, should\n\t\t\tgetPixelForTick: function(index, includeOffset) {\n\t\t\t\tvar me = this;\n\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\tvar innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n\t\t\t\t\tvar tickWidth = innerWidth / Math.max((me.ticks.length - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);\n\t\t\t\t\tvar pixel = (tickWidth * index) + me.paddingLeft;\n\t\n\t\t\t\t\tif (includeOffset) {\n\t\t\t\t\t\tpixel += tickWidth / 2;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar finalVal = me.left + Math.round(pixel);\n\t\t\t\t\tfinalVal += me.isFullWidth() ? me.margins.left : 0;\n\t\t\t\t\treturn finalVal;\n\t\t\t\t}\n\t\t\t\tvar innerHeight = me.height - (me.paddingTop + me.paddingBottom);\n\t\t\t\treturn me.top + (index * (innerHeight / (me.ticks.length - 1)));\n\t\t\t},\n\t\n\t\t\t// Utility for getting the pixel location of a percentage of scale\n\t\t\tgetPixelForDecimal: function(decimal /* , includeOffset*/) {\n\t\t\t\tvar me = this;\n\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\tvar innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n\t\t\t\t\tvar valueOffset = (innerWidth * decimal) + me.paddingLeft;\n\t\n\t\t\t\t\tvar finalVal = me.left + Math.round(valueOffset);\n\t\t\t\t\tfinalVal += me.isFullWidth() ? me.margins.left : 0;\n\t\t\t\t\treturn finalVal;\n\t\t\t\t}\n\t\t\t\treturn me.top + (decimal * me.height);\n\t\t\t},\n\t\n\t\t\tgetBasePixel: function() {\n\t\t\t\treturn this.getPixelForValue(this.getBaseValue());\n\t\t\t},\n\t\n\t\t\tgetBaseValue: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar min = me.min;\n\t\t\t\tvar max = me.max;\n\t\n\t\t\t\treturn me.beginAtZero ? 0:\n\t\t\t\t\tmin < 0 && max < 0? max :\n\t\t\t\t\tmin > 0 && max > 0? min :\n\t\t\t\t\t0;\n\t\t\t},\n\t\n\t\t\t// Actually draw the scale on the canvas\n\t\t\t// @param {rectangle} chartArea : the area of the chart to draw full grid lines on\n\t\t\tdraw: function(chartArea) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar options = me.options;\n\t\t\t\tif (!options.display) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tvar context = me.ctx;\n\t\t\t\tvar globalDefaults = Chart.defaults.global;\n\t\t\t\tvar optionTicks = options.ticks;\n\t\t\t\tvar gridLines = options.gridLines;\n\t\t\t\tvar scaleLabel = options.scaleLabel;\n\t\n\t\t\t\tvar isRotated = me.labelRotation !== 0;\n\t\t\t\tvar skipRatio;\n\t\t\t\tvar useAutoskipper = optionTicks.autoSkip;\n\t\t\t\tvar isHorizontal = me.isHorizontal();\n\t\n\t\t\t\t// figure out the maximum number of gridlines to show\n\t\t\t\tvar maxTicks;\n\t\t\t\tif (optionTicks.maxTicksLimit) {\n\t\t\t\t\tmaxTicks = optionTicks.maxTicksLimit;\n\t\t\t\t}\n\t\n\t\t\t\tvar tickFontColor = helpers.getValueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);\n\t\t\t\tvar tickFont = parseFontOptions(optionTicks);\n\t\n\t\t\t\tvar tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;\n\t\t\t\tvar borderDash = helpers.getValueOrDefault(gridLines.borderDash, globalDefaults.borderDash);\n\t\t\t\tvar borderDashOffset = helpers.getValueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);\n\t\n\t\t\t\tvar scaleLabelFontColor = helpers.getValueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);\n\t\t\t\tvar scaleLabelFont = parseFontOptions(scaleLabel);\n\t\n\t\t\t\tvar labelRotationRadians = helpers.toRadians(me.labelRotation);\n\t\t\t\tvar cosRotation = Math.cos(labelRotationRadians);\n\t\t\t\tvar longestRotatedLabel = me.longestLabelWidth * cosRotation;\n\t\n\t\t\t\t// Make sure we draw text in the correct color and font\n\t\t\t\tcontext.fillStyle = tickFontColor;\n\t\n\t\t\t\tvar itemsToDraw = [];\n\t\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\tskipRatio = false;\n\t\n\t\t\t\t\t// Only calculate the skip ratio with the half width of longestRotateLabel if we got an actual rotation\n\t\t\t\t\t// See #2584\n\t\t\t\t\tif (isRotated) {\n\t\t\t\t\t\tlongestRotatedLabel /= 2;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length > (me.width - (me.paddingLeft + me.paddingRight))) {\n\t\t\t\t\t\tskipRatio = 1 + Math.floor(((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length) / (me.width - (me.paddingLeft + me.paddingRight)));\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// if they defined a max number of optionTicks,\n\t\t\t\t\t// increase skipRatio until that number is met\n\t\t\t\t\tif (maxTicks && me.ticks.length > maxTicks) {\n\t\t\t\t\t\twhile (!skipRatio || me.ticks.length / (skipRatio || 1) > maxTicks) {\n\t\t\t\t\t\t\tif (!skipRatio) {\n\t\t\t\t\t\t\t\tskipRatio = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tskipRatio += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (!useAutoskipper) {\n\t\t\t\t\t\tskipRatio = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\n\t\t\t\tvar xTickStart = options.position === 'right' ? me.left : me.right - tl;\n\t\t\t\tvar xTickEnd = options.position === 'right' ? me.left + tl : me.right;\n\t\t\t\tvar yTickStart = options.position === 'bottom' ? me.top : me.bottom - tl;\n\t\t\t\tvar yTickEnd = options.position === 'bottom' ? me.top + tl : me.bottom;\n\t\n\t\t\t\thelpers.each(me.ticks, function(label, index) {\n\t\t\t\t\t// If the callback returned a null or undefined value, do not draw this line\n\t\t\t\t\tif (label === undefined || label === null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar isLastTick = me.ticks.length === index + 1;\n\t\n\t\t\t\t\t// Since we always show the last tick,we need may need to hide the last shown one before\n\t\t\t\t\tvar shouldSkip = (skipRatio > 1 && index % skipRatio > 0) || (index % skipRatio === 0 && index + skipRatio >= me.ticks.length);\n\t\t\t\t\tif (shouldSkip && !isLastTick || (label === undefined || label === null)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar lineWidth, lineColor;\n\t\t\t\t\tif (index === (typeof me.zeroLineIndex !== 'undefined' ? me.zeroLineIndex : 0)) {\n\t\t\t\t\t\t// Draw the first index specially\n\t\t\t\t\t\tlineWidth = gridLines.zeroLineWidth;\n\t\t\t\t\t\tlineColor = gridLines.zeroLineColor;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, index);\n\t\t\t\t\t\tlineColor = helpers.getValueAtIndexOrDefault(gridLines.color, index);\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Common properties\n\t\t\t\t\tvar tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;\n\t\t\t\t\tvar textAlign = 'middle';\n\t\t\t\t\tvar textBaseline = 'middle';\n\t\n\t\t\t\t\tif (isHorizontal) {\n\t\n\t\t\t\t\t\tif (options.position === 'bottom') {\n\t\t\t\t\t\t\t// bottom\n\t\t\t\t\t\t\ttextBaseline = !isRotated? 'top':'middle';\n\t\t\t\t\t\t\ttextAlign = !isRotated? 'center': 'right';\n\t\t\t\t\t\t\tlabelY = me.top + tl;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// top\n\t\t\t\t\t\t\ttextBaseline = !isRotated? 'bottom':'middle';\n\t\t\t\t\t\t\ttextAlign = !isRotated? 'center': 'left';\n\t\t\t\t\t\t\tlabelY = me.bottom - tl;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tvar xLineValue = me.getPixelForTick(index) + helpers.aliasPixel(lineWidth); // xvalues for grid lines\n\t\t\t\t\t\tlabelX = me.getPixelForTick(index, gridLines.offsetGridLines) + optionTicks.labelOffset; // x values for optionTicks (need to consider offsetLabel option)\n\t\n\t\t\t\t\t\ttx1 = tx2 = x1 = x2 = xLineValue;\n\t\t\t\t\t\tty1 = yTickStart;\n\t\t\t\t\t\tty2 = yTickEnd;\n\t\t\t\t\t\ty1 = chartArea.top;\n\t\t\t\t\t\ty2 = chartArea.bottom;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar isLeft = options.position === 'left';\n\t\t\t\t\t\tvar tickPadding = optionTicks.padding;\n\t\t\t\t\t\tvar labelXOffset;\n\t\n\t\t\t\t\t\tif (optionTicks.mirror) {\n\t\t\t\t\t\t\ttextAlign = isLeft ? 'left' : 'right';\n\t\t\t\t\t\t\tlabelXOffset = tickPadding;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttextAlign = isLeft ? 'right' : 'left';\n\t\t\t\t\t\t\tlabelXOffset = tl + tickPadding;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tlabelX = isLeft ? me.right - labelXOffset : me.left + labelXOffset;\n\t\n\t\t\t\t\t\tvar yLineValue = me.getPixelForTick(index); // xvalues for grid lines\n\t\t\t\t\t\tyLineValue += helpers.aliasPixel(lineWidth);\n\t\t\t\t\t\tlabelY = me.getPixelForTick(index, gridLines.offsetGridLines);\n\t\n\t\t\t\t\t\ttx1 = xTickStart;\n\t\t\t\t\t\ttx2 = xTickEnd;\n\t\t\t\t\t\tx1 = chartArea.left;\n\t\t\t\t\t\tx2 = chartArea.right;\n\t\t\t\t\t\tty1 = ty2 = y1 = y2 = yLineValue;\n\t\t\t\t\t}\n\t\n\t\t\t\t\titemsToDraw.push({\n\t\t\t\t\t\ttx1: tx1,\n\t\t\t\t\t\tty1: ty1,\n\t\t\t\t\t\ttx2: tx2,\n\t\t\t\t\t\tty2: ty2,\n\t\t\t\t\t\tx1: x1,\n\t\t\t\t\t\ty1: y1,\n\t\t\t\t\t\tx2: x2,\n\t\t\t\t\t\ty2: y2,\n\t\t\t\t\t\tlabelX: labelX,\n\t\t\t\t\t\tlabelY: labelY,\n\t\t\t\t\t\tglWidth: lineWidth,\n\t\t\t\t\t\tglColor: lineColor,\n\t\t\t\t\t\tglBorderDash: borderDash,\n\t\t\t\t\t\tglBorderDashOffset: borderDashOffset,\n\t\t\t\t\t\trotation: -1 * labelRotationRadians,\n\t\t\t\t\t\tlabel: label,\n\t\t\t\t\t\ttextBaseline: textBaseline,\n\t\t\t\t\t\ttextAlign: textAlign\n\t\t\t\t\t});\n\t\t\t\t});\n\t\n\t\t\t\t// Draw all of the tick labels, tick marks, and grid lines at the correct places\n\t\t\t\thelpers.each(itemsToDraw, function(itemToDraw) {\n\t\t\t\t\tif (gridLines.display) {\n\t\t\t\t\t\tcontext.save();\n\t\t\t\t\t\tcontext.lineWidth = itemToDraw.glWidth;\n\t\t\t\t\t\tcontext.strokeStyle = itemToDraw.glColor;\n\t\t\t\t\t\tif (context.setLineDash) {\n\t\t\t\t\t\t\tcontext.setLineDash(itemToDraw.glBorderDash);\n\t\t\t\t\t\t\tcontext.lineDashOffset = itemToDraw.glBorderDashOffset;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tcontext.beginPath();\n\t\n\t\t\t\t\t\tif (gridLines.drawTicks) {\n\t\t\t\t\t\t\tcontext.moveTo(itemToDraw.tx1, itemToDraw.ty1);\n\t\t\t\t\t\t\tcontext.lineTo(itemToDraw.tx2, itemToDraw.ty2);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (gridLines.drawOnChartArea) {\n\t\t\t\t\t\t\tcontext.moveTo(itemToDraw.x1, itemToDraw.y1);\n\t\t\t\t\t\t\tcontext.lineTo(itemToDraw.x2, itemToDraw.y2);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tcontext.stroke();\n\t\t\t\t\t\tcontext.restore();\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (optionTicks.display) {\n\t\t\t\t\t\tcontext.save();\n\t\t\t\t\t\tcontext.translate(itemToDraw.labelX, itemToDraw.labelY);\n\t\t\t\t\t\tcontext.rotate(itemToDraw.rotation);\n\t\t\t\t\t\tcontext.font = tickFont.font;\n\t\t\t\t\t\tcontext.textBaseline = itemToDraw.textBaseline;\n\t\t\t\t\t\tcontext.textAlign = itemToDraw.textAlign;\n\t\n\t\t\t\t\t\tvar label = itemToDraw.label;\n\t\t\t\t\t\tif (helpers.isArray(label)) {\n\t\t\t\t\t\t\tfor (var i = 0, y = 0; i < label.length; ++i) {\n\t\t\t\t\t\t\t\t// We just make sure the multiline element is a string here..\n\t\t\t\t\t\t\t\tcontext.fillText('' + label[i], 0, y);\n\t\t\t\t\t\t\t\t// apply same lineSpacing as calculated @ L#320\n\t\t\t\t\t\t\t\ty += (tickFont.size * 1.5);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.fillText(label, 0, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontext.restore();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\tif (scaleLabel.display) {\n\t\t\t\t\t// Draw the scale label\n\t\t\t\t\tvar scaleLabelX;\n\t\t\t\t\tvar scaleLabelY;\n\t\t\t\t\tvar rotation = 0;\n\t\n\t\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t\tscaleLabelX = me.left + ((me.right - me.left) / 2); // midpoint of the width\n\t\t\t\t\t\tscaleLabelY = options.position === 'bottom' ? me.bottom - (scaleLabelFont.size / 2) : me.top + (scaleLabelFont.size / 2);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar isLeft = options.position === 'left';\n\t\t\t\t\t\tscaleLabelX = isLeft ? me.left + (scaleLabelFont.size / 2) : me.right - (scaleLabelFont.size / 2);\n\t\t\t\t\t\tscaleLabelY = me.top + ((me.bottom - me.top) / 2);\n\t\t\t\t\t\trotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tcontext.save();\n\t\t\t\t\tcontext.translate(scaleLabelX, scaleLabelY);\n\t\t\t\t\tcontext.rotate(rotation);\n\t\t\t\t\tcontext.textAlign = 'center';\n\t\t\t\t\tcontext.textBaseline = 'middle';\n\t\t\t\t\tcontext.fillStyle = scaleLabelFontColor; // render in correct colour\n\t\t\t\t\tcontext.font = scaleLabelFont.font;\n\t\t\t\t\tcontext.fillText(scaleLabel.labelString, 0, 0);\n\t\t\t\t\tcontext.restore();\n\t\t\t\t}\n\t\n\t\t\t\tif (gridLines.drawBorder) {\n\t\t\t\t\t// Draw the line at the edge of the axis\n\t\t\t\t\tcontext.lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, 0);\n\t\t\t\t\tcontext.strokeStyle = helpers.getValueAtIndexOrDefault(gridLines.color, 0);\n\t\t\t\t\tvar x1 = me.left,\n\t\t\t\t\t\tx2 = me.right,\n\t\t\t\t\t\ty1 = me.top,\n\t\t\t\t\t\ty2 = me.bottom;\n\t\n\t\t\t\t\tvar aliasPixel = helpers.aliasPixel(context.lineWidth);\n\t\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t\ty1 = y2 = options.position === 'top' ? me.bottom : me.top;\n\t\t\t\t\t\ty1 += aliasPixel;\n\t\t\t\t\t\ty2 += aliasPixel;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx1 = x2 = options.position === 'left' ? me.right : me.left;\n\t\t\t\t\t\tx1 += aliasPixel;\n\t\t\t\t\t\tx2 += aliasPixel;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tcontext.beginPath();\n\t\t\t\t\tcontext.moveTo(x1, y1);\n\t\t\t\t\tcontext.lineTo(x2, y2);\n\t\t\t\t\tcontext.stroke();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 601:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tChart.scaleService = {\n\t\t\t// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n\t\t\t// use the new chart options to grab the correct scale\n\t\t\tconstructors: {},\n\t\t\t// Use a registration function so that we can move to an ES6 map when we no longer need to support\n\t\t\t// old browsers\n\t\n\t\t\t// Scale config defaults\n\t\t\tdefaults: {},\n\t\t\tregisterScaleType: function(type, scaleConstructor, defaults) {\n\t\t\t\tthis.constructors[type] = scaleConstructor;\n\t\t\t\tthis.defaults[type] = helpers.clone(defaults);\n\t\t\t},\n\t\t\tgetScaleConstructor: function(type) {\n\t\t\t\treturn this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n\t\t\t},\n\t\t\tgetScaleDefaults: function(type) {\n\t\t\t\t// Return the scale defaults merged with the global settings so that we always use the latest ones\n\t\t\t\treturn this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};\n\t\t\t},\n\t\t\tupdateScaleDefaults: function(type, additions) {\n\t\t\t\tvar defaults = this.defaults;\n\t\t\t\tif (defaults.hasOwnProperty(type)) {\n\t\t\t\t\tdefaults[type] = helpers.extend(defaults[type], additions);\n\t\t\t\t}\n\t\t\t},\n\t\t\taddScalesToLayout: function(chartInstance) {\n\t\t\t\t// Adds each scale to the chart.boxes array to be sized accordingly\n\t\t\t\thelpers.each(chartInstance.scales, function(scale) {\n\t\t\t\t\tChart.layoutService.addBox(chartInstance, scale);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t};\n\n\n/***/ },\n\n/***/ 602:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\t/**\n\t\t * Namespace to hold static tick generation functions\n\t\t * @namespace Chart.Ticks\n\t\t */\n\t\tChart.Ticks = {\n\t\t\t/**\n\t\t\t * Namespace to hold generators for different types of ticks\n\t\t\t * @namespace Chart.Ticks.generators\n\t\t\t */\n\t\t\tgenerators: {\n\t\t\t\t/**\n\t\t\t\t * Interface for the options provided to the numeric tick generator\n\t\t\t\t * @interface INumericTickGenerationOptions\n\t\t\t\t */\n\t\t\t\t/**\n\t\t\t\t * The maximum number of ticks to display\n\t\t\t\t * @name INumericTickGenerationOptions#maxTicks\n\t\t\t\t * @type Number\n\t\t\t\t */\n\t\t\t\t/**\n\t\t\t\t * The distance between each tick.\n\t\t\t\t * @name INumericTickGenerationOptions#stepSize\n\t\t\t\t * @type Number\n\t\t\t\t * @optional\n\t\t\t\t */\n\t\t\t\t/**\n\t\t\t\t * Forced minimum for the ticks. If not specified, the minimum of the data range is used to calculate the tick minimum\n\t\t\t\t * @name INumericTickGenerationOptions#min\n\t\t\t\t * @type Number\n\t\t\t\t * @optional\n\t\t\t\t */\n\t\t\t\t/**\n\t\t\t\t * The maximum value of the ticks. If not specified, the maximum of the data range is used to calculate the tick maximum\n\t\t\t\t * @name INumericTickGenerationOptions#max\n\t\t\t\t * @type Number\n\t\t\t\t * @optional\n\t\t\t\t */\n\t\n\t\t\t\t/**\n\t\t\t\t * Generate a set of linear ticks\n\t\t\t\t * @method Chart.Ticks.generators.linear\n\t\t\t\t * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks\n\t\t\t\t * @param dataRange {IRange} the range of the data\n\t\t\t\t * @returns {Array<Number>} array of tick values\n\t\t\t\t */\n\t\t\t\tlinear: function(generationOptions, dataRange) {\n\t\t\t\t\tvar ticks = [];\n\t\t\t\t\t// To get a \"nice\" value for the tick spacing, we will use the appropriately named\n\t\t\t\t\t// \"nice number\" algorithm. See http://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n\t\t\t\t\t// for details.\n\t\n\t\t\t\t\tvar spacing;\n\t\t\t\t\tif (generationOptions.stepSize && generationOptions.stepSize > 0) {\n\t\t\t\t\t\tspacing = generationOptions.stepSize;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);\n\t\t\t\t\t\tspacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);\n\t\t\t\t\t}\n\t\t\t\t\tvar niceMin = Math.floor(dataRange.min / spacing) * spacing;\n\t\t\t\t\tvar niceMax = Math.ceil(dataRange.max / spacing) * spacing;\n\t\n\t\t\t\t\t// If min, max and stepSize is set and they make an evenly spaced scale use it.\n\t\t\t\t\tif (generationOptions.min && generationOptions.max && generationOptions.stepSize) {\n\t\t\t\t\t\t// If very close to our whole number, use it.\n\t\t\t\t\t\tif (helpers.almostWhole((generationOptions.max - generationOptions.min) / generationOptions.stepSize, spacing / 1000)) {\n\t\t\t\t\t\t\tniceMin = generationOptions.min;\n\t\t\t\t\t\t\tniceMax = generationOptions.max;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar numSpaces = (niceMax - niceMin) / spacing;\n\t\t\t\t\t// If very close to our rounded value, use it.\n\t\t\t\t\tif (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n\t\t\t\t\t\tnumSpaces = Math.round(numSpaces);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnumSpaces = Math.ceil(numSpaces);\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Put the values into the ticks array\n\t\t\t\t\tticks.push(generationOptions.min !== undefined ? generationOptions.min : niceMin);\n\t\t\t\t\tfor (var j = 1; j < numSpaces; ++j) {\n\t\t\t\t\t\tticks.push(niceMin + (j * spacing));\n\t\t\t\t\t}\n\t\t\t\t\tticks.push(generationOptions.max !== undefined ? generationOptions.max : niceMax);\n\t\n\t\t\t\t\treturn ticks;\n\t\t\t\t},\n\t\n\t\t\t\t/**\n\t\t\t\t * Generate a set of logarithmic ticks\n\t\t\t\t * @method Chart.Ticks.generators.logarithmic\n\t\t\t\t * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks\n\t\t\t\t * @param dataRange {IRange} the range of the data\n\t\t\t\t * @returns {Array<Number>} array of tick values\n\t\t\t\t */\n\t\t\t\tlogarithmic: function(generationOptions, dataRange) {\n\t\t\t\t\tvar ticks = [];\n\t\t\t\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\t\n\t\t\t\t\t// Figure out what the max number of ticks we can support it is based on the size of\n\t\t\t\t\t// the axis area. For now, we say that the minimum tick spacing in pixels must be 50\n\t\t\t\t\t// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n\t\t\t\t\t// the graph\n\t\t\t\t\tvar tickVal = getValueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));\n\t\n\t\t\t\t\tvar endExp = Math.floor(helpers.log10(dataRange.max));\n\t\t\t\t\tvar endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n\t\t\t\t\tvar exp;\n\t\t\t\t\tvar significand;\n\t\n\t\t\t\t\tif (tickVal === 0) {\n\t\t\t\t\t\texp = Math.floor(helpers.log10(dataRange.minNotZero));\n\t\t\t\t\t\tsignificand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));\n\t\n\t\t\t\t\t\tticks.push(tickVal);\n\t\t\t\t\t\ttickVal = significand * Math.pow(10, exp);\n\t\t\t\t\t} else {\n\t\t\t\t\t\texp = Math.floor(helpers.log10(tickVal));\n\t\t\t\t\t\tsignificand = Math.floor(tickVal / Math.pow(10, exp));\n\t\t\t\t\t}\n\t\n\t\t\t\t\tdo {\n\t\t\t\t\t\tticks.push(tickVal);\n\t\n\t\t\t\t\t\t++significand;\n\t\t\t\t\t\tif (significand === 10) {\n\t\t\t\t\t\t\tsignificand = 1;\n\t\t\t\t\t\t\t++exp;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\ttickVal = significand * Math.pow(10, exp);\n\t\t\t\t\t} while (exp < endExp || (exp === endExp && significand < endSignificand));\n\t\n\t\t\t\t\tvar lastTick = getValueOrDefault(generationOptions.max, tickVal);\n\t\t\t\t\tticks.push(lastTick);\n\t\n\t\t\t\t\treturn ticks;\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Namespace to hold formatters for different types of ticks\n\t\t\t * @namespace Chart.Ticks.formatters\n\t\t\t */\n\t\t\tformatters: {\n\t\t\t\t/**\n\t\t\t\t * Formatter for value labels\n\t\t\t\t * @method Chart.Ticks.formatters.values\n\t\t\t\t * @param value the value to display\n\t\t\t\t * @return {String|Array} the label to display\n\t\t\t\t */\n\t\t\t\tvalues: function(value) {\n\t\t\t\t\treturn helpers.isArray(value) ? value : '' + value;\n\t\t\t\t},\n\t\n\t\t\t\t/**\n\t\t\t\t * Formatter for linear numeric ticks\n\t\t\t\t * @method Chart.Ticks.formatters.linear\n\t\t\t\t * @param tickValue {Number} the value to be formatted\n\t\t\t\t * @param index {Number} the position of the tickValue parameter in the ticks array\n\t\t\t\t * @param ticks {Array<Number>} the list of ticks being converted\n\t\t\t\t * @return {String} string representation of the tickValue parameter\n\t\t\t\t */\n\t\t\t\tlinear: function(tickValue, index, ticks) {\n\t\t\t\t\t// If we have lots of ticks, don't use the ones\n\t\t\t\t\tvar delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];\n\t\n\t\t\t\t\t// If we have a number like 2.5 as the delta, figure out how many decimal places we need\n\t\t\t\t\tif (Math.abs(delta) > 1) {\n\t\t\t\t\t\tif (tickValue !== Math.floor(tickValue)) {\n\t\t\t\t\t\t\t// not an integer\n\t\t\t\t\t\t\tdelta = tickValue - Math.floor(tickValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar logDelta = helpers.log10(Math.abs(delta));\n\t\t\t\t\tvar tickString = '';\n\t\n\t\t\t\t\tif (tickValue !== 0) {\n\t\t\t\t\t\tvar numDecimal = -1 * Math.floor(logDelta);\n\t\t\t\t\t\tnumDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places\n\t\t\t\t\t\ttickString = tickValue.toFixed(numDecimal);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttickString = '0'; // never show decimal places for 0\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn tickString;\n\t\t\t\t},\n\t\n\t\t\t\tlogarithmic: function(tickValue, index, ticks) {\n\t\t\t\t\tvar remain = tickValue / (Math.pow(10, Math.floor(helpers.log10(tickValue))));\n\t\n\t\t\t\t\tif (tickValue === 0) {\n\t\t\t\t\t\treturn '0';\n\t\t\t\t\t} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {\n\t\t\t\t\t\treturn tickValue.toExponential();\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t};\n\n\n/***/ },\n\n/***/ 603:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tChart.defaults.global.title = {\n\t\t\tdisplay: false,\n\t\t\tposition: 'top',\n\t\t\tfullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)\n\t\n\t\t\tfontStyle: 'bold',\n\t\t\tpadding: 10,\n\t\n\t\t\t// actual title\n\t\t\ttext: ''\n\t\t};\n\t\n\t\tvar noop = helpers.noop;\n\t\tChart.Title = Chart.Element.extend({\n\t\n\t\t\tinitialize: function(config) {\n\t\t\t\tvar me = this;\n\t\t\t\thelpers.extend(me, config);\n\t\n\t\t\t\t// Contains hit boxes for each dataset (in dataset order)\n\t\t\t\tme.legendHitBoxes = [];\n\t\t\t},\n\t\n\t\t\t// These methods are ordered by lifecycle. Utilities then follow.\n\t\n\t\t\tbeforeUpdate: noop,\n\t\t\tupdate: function(maxWidth, maxHeight, margins) {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\t\t\tme.beforeUpdate();\n\t\n\t\t\t\t// Absorb the master measurements\n\t\t\t\tme.maxWidth = maxWidth;\n\t\t\t\tme.maxHeight = maxHeight;\n\t\t\t\tme.margins = margins;\n\t\n\t\t\t\t// Dimensions\n\t\t\t\tme.beforeSetDimensions();\n\t\t\t\tme.setDimensions();\n\t\t\t\tme.afterSetDimensions();\n\t\t\t\t// Labels\n\t\t\t\tme.beforeBuildLabels();\n\t\t\t\tme.buildLabels();\n\t\t\t\tme.afterBuildLabels();\n\t\n\t\t\t\t// Fit\n\t\t\t\tme.beforeFit();\n\t\t\t\tme.fit();\n\t\t\t\tme.afterFit();\n\t\t\t\t//\n\t\t\t\tme.afterUpdate();\n\t\n\t\t\t\treturn me.minSize;\n\t\n\t\t\t},\n\t\t\tafterUpdate: noop,\n\t\n\t\t\t//\n\t\n\t\t\tbeforeSetDimensions: noop,\n\t\t\tsetDimensions: function() {\n\t\t\t\tvar me = this;\n\t\t\t\t// Set the unconstrained dimension before label rotation\n\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\t// Reset position before calculating rotation\n\t\t\t\t\tme.width = me.maxWidth;\n\t\t\t\t\tme.left = 0;\n\t\t\t\t\tme.right = me.width;\n\t\t\t\t} else {\n\t\t\t\t\tme.height = me.maxHeight;\n\t\n\t\t\t\t\t// Reset position before calculating rotation\n\t\t\t\t\tme.top = 0;\n\t\t\t\t\tme.bottom = me.height;\n\t\t\t\t}\n\t\n\t\t\t\t// Reset padding\n\t\t\t\tme.paddingLeft = 0;\n\t\t\t\tme.paddingTop = 0;\n\t\t\t\tme.paddingRight = 0;\n\t\t\t\tme.paddingBottom = 0;\n\t\n\t\t\t\t// Reset minSize\n\t\t\t\tme.minSize = {\n\t\t\t\t\twidth: 0,\n\t\t\t\t\theight: 0\n\t\t\t\t};\n\t\t\t},\n\t\t\tafterSetDimensions: noop,\n\t\n\t\t\t//\n\t\n\t\t\tbeforeBuildLabels: noop,\n\t\t\tbuildLabels: noop,\n\t\t\tafterBuildLabels: noop,\n\t\n\t\t\t//\n\t\n\t\t\tbeforeFit: noop,\n\t\t\tfit: function() {\n\t\t\t\tvar me = this,\n\t\t\t\t\tvalueOrDefault = helpers.getValueOrDefault,\n\t\t\t\t\topts = me.options,\n\t\t\t\t\tglobalDefaults = Chart.defaults.global,\n\t\t\t\t\tdisplay = opts.display,\n\t\t\t\t\tfontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),\n\t\t\t\t\tminSize = me.minSize;\n\t\n\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\tminSize.width = me.maxWidth; // fill all the width\n\t\t\t\t\tminSize.height = display ? fontSize + (opts.padding * 2) : 0;\n\t\t\t\t} else {\n\t\t\t\t\tminSize.width = display ? fontSize + (opts.padding * 2) : 0;\n\t\t\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t\t\t}\n\t\n\t\t\t\tme.width = minSize.width;\n\t\t\t\tme.height = minSize.height;\n\t\n\t\t\t},\n\t\t\tafterFit: noop,\n\t\n\t\t\t// Shared Methods\n\t\t\tisHorizontal: function() {\n\t\t\t\tvar pos = this.options.position;\n\t\t\t\treturn pos === 'top' || pos === 'bottom';\n\t\t\t},\n\t\n\t\t\t// Actually draw the title block on the canvas\n\t\t\tdraw: function() {\n\t\t\t\tvar me = this,\n\t\t\t\t\tctx = me.ctx,\n\t\t\t\t\tvalueOrDefault = helpers.getValueOrDefault,\n\t\t\t\t\topts = me.options,\n\t\t\t\t\tglobalDefaults = Chart.defaults.global;\n\t\n\t\t\t\tif (opts.display) {\n\t\t\t\t\tvar fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),\n\t\t\t\t\t\tfontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle),\n\t\t\t\t\t\tfontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily),\n\t\t\t\t\t\ttitleFont = helpers.fontString(fontSize, fontStyle, fontFamily),\n\t\t\t\t\t\trotation = 0,\n\t\t\t\t\t\ttitleX,\n\t\t\t\t\t\ttitleY,\n\t\t\t\t\t\ttop = me.top,\n\t\t\t\t\t\tleft = me.left,\n\t\t\t\t\t\tbottom = me.bottom,\n\t\t\t\t\t\tright = me.right,\n\t\t\t\t\t\tmaxWidth;\n\t\n\t\t\t\t\tctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor); // render in correct colour\n\t\t\t\t\tctx.font = titleFont;\n\t\n\t\t\t\t\t// Horizontal\n\t\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\t\ttitleX = left + ((right - left) / 2); // midpoint of the width\n\t\t\t\t\t\ttitleY = top + ((bottom - top) / 2); // midpoint of the height\n\t\t\t\t\t\tmaxWidth = right - left;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttitleX = opts.position === 'left' ? left + (fontSize / 2) : right - (fontSize / 2);\n\t\t\t\t\t\ttitleY = top + ((bottom - top) / 2);\n\t\t\t\t\t\tmaxWidth = bottom - top;\n\t\t\t\t\t\trotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tctx.save();\n\t\t\t\t\tctx.translate(titleX, titleY);\n\t\t\t\t\tctx.rotate(rotation);\n\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\tctx.fillText(opts.text, 0, 0, maxWidth);\n\t\t\t\t\tctx.restore();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tfunction createNewTitleBlockAndAttach(chartInstance, titleOpts) {\n\t\t\tvar title = new Chart.Title({\n\t\t\t\tctx: chartInstance.chart.ctx,\n\t\t\t\toptions: titleOpts,\n\t\t\t\tchart: chartInstance\n\t\t\t});\n\t\t\tchartInstance.titleBlock = title;\n\t\t\tChart.layoutService.addBox(chartInstance, title);\n\t\t}\n\t\n\t\t// Register the title plugin\n\t\tChart.plugins.register({\n\t\t\tbeforeInit: function(chartInstance) {\n\t\t\t\tvar titleOpts = chartInstance.options.title;\n\t\n\t\t\t\tif (titleOpts) {\n\t\t\t\t\tcreateNewTitleBlockAndAttach(chartInstance, titleOpts);\n\t\t\t\t}\n\t\t\t},\n\t\t\tbeforeUpdate: function(chartInstance) {\n\t\t\t\tvar titleOpts = chartInstance.options.title;\n\t\n\t\t\t\tif (titleOpts) {\n\t\t\t\t\ttitleOpts = helpers.configMerge(Chart.defaults.global.title, titleOpts);\n\t\n\t\t\t\t\tif (chartInstance.titleBlock) {\n\t\t\t\t\t\tchartInstance.titleBlock.options = titleOpts;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateNewTitleBlockAndAttach(chartInstance, titleOpts);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tChart.layoutService.removeBox(chartInstance, chartInstance.titleBlock);\n\t\t\t\t\tdelete chartInstance.titleBlock;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 604:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\t/**\n\t \t * Helper method to merge the opacity into a color\n\t \t */\n\t\tfunction mergeOpacity(colorString, opacity) {\n\t\t\tvar color = helpers.color(colorString);\n\t\t\treturn color.alpha(opacity * color.alpha()).rgbaString();\n\t\t}\n\t\n\t\tChart.defaults.global.tooltips = {\n\t\t\tenabled: true,\n\t\t\tcustom: null,\n\t\t\tmode: 'nearest',\n\t\t\tposition: 'average',\n\t\t\tintersect: true,\n\t\t\tbackgroundColor: 'rgba(0,0,0,0.8)',\n\t\t\ttitleFontStyle: 'bold',\n\t\t\ttitleSpacing: 2,\n\t\t\ttitleMarginBottom: 6,\n\t\t\ttitleFontColor: '#fff',\n\t\t\ttitleAlign: 'left',\n\t\t\tbodySpacing: 2,\n\t\t\tbodyFontColor: '#fff',\n\t\t\tbodyAlign: 'left',\n\t\t\tfooterFontStyle: 'bold',\n\t\t\tfooterSpacing: 2,\n\t\t\tfooterMarginTop: 6,\n\t\t\tfooterFontColor: '#fff',\n\t\t\tfooterAlign: 'left',\n\t\t\tyPadding: 6,\n\t\t\txPadding: 6,\n\t\t\tcaretSize: 5,\n\t\t\tcornerRadius: 6,\n\t\t\tmultiKeyBackground: '#fff',\n\t\t\tdisplayColors: true,\n\t\t\tcallbacks: {\n\t\t\t\t// Args are: (tooltipItems, data)\n\t\t\t\tbeforeTitle: helpers.noop,\n\t\t\t\ttitle: function(tooltipItems, data) {\n\t\t\t\t\t// Pick first xLabel for now\n\t\t\t\t\tvar title = '';\n\t\t\t\t\tvar labels = data.labels;\n\t\t\t\t\tvar labelCount = labels ? labels.length : 0;\n\t\n\t\t\t\t\tif (tooltipItems.length > 0) {\n\t\t\t\t\t\tvar item = tooltipItems[0];\n\t\n\t\t\t\t\t\tif (item.xLabel) {\n\t\t\t\t\t\t\ttitle = item.xLabel;\n\t\t\t\t\t\t} else if (labelCount > 0 && item.index < labelCount) {\n\t\t\t\t\t\t\ttitle = labels[item.index];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn title;\n\t\t\t\t},\n\t\t\t\tafterTitle: helpers.noop,\n\t\n\t\t\t\t// Args are: (tooltipItems, data)\n\t\t\t\tbeforeBody: helpers.noop,\n\t\n\t\t\t\t// Args are: (tooltipItem, data)\n\t\t\t\tbeforeLabel: helpers.noop,\n\t\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\t\tvar datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';\n\t\t\t\t\treturn datasetLabel + ': ' + tooltipItem.yLabel;\n\t\t\t\t},\n\t\t\t\tlabelColor: function(tooltipItem, chartInstance) {\n\t\t\t\t\tvar meta = chartInstance.getDatasetMeta(tooltipItem.datasetIndex);\n\t\t\t\t\tvar activeElement = meta.data[tooltipItem.index];\n\t\t\t\t\tvar view = activeElement._view;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tborderColor: view.borderColor,\n\t\t\t\t\t\tbackgroundColor: view.backgroundColor\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tafterLabel: helpers.noop,\n\t\n\t\t\t\t// Args are: (tooltipItems, data)\n\t\t\t\tafterBody: helpers.noop,\n\t\n\t\t\t\t// Args are: (tooltipItems, data)\n\t\t\t\tbeforeFooter: helpers.noop,\n\t\t\t\tfooter: helpers.noop,\n\t\t\t\tafterFooter: helpers.noop\n\t\t\t}\n\t\t};\n\t\n\t\t// Helper to push or concat based on if the 2nd parameter is an array or not\n\t\tfunction pushOrConcat(base, toPush) {\n\t\t\tif (toPush) {\n\t\t\t\tif (helpers.isArray(toPush)) {\n\t\t\t\t\t// base = base.concat(toPush);\n\t\t\t\t\tArray.prototype.push.apply(base, toPush);\n\t\t\t\t} else {\n\t\t\t\t\tbase.push(toPush);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn base;\n\t\t}\n\t\n\t\t// Private helper to create a tooltip item model\n\t\t// @param element : the chart element (point, arc, bar) to create the tooltip item for\n\t\t// @return : new tooltip item\n\t\tfunction createTooltipItem(element) {\n\t\t\tvar xScale = element._xScale;\n\t\t\tvar yScale = element._yScale || element._scale; // handle radar || polarArea charts\n\t\t\tvar index = element._index,\n\t\t\t\tdatasetIndex = element._datasetIndex;\n\t\n\t\t\treturn {\n\t\t\t\txLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',\n\t\t\t\tyLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',\n\t\t\t\tindex: index,\n\t\t\t\tdatasetIndex: datasetIndex,\n\t\t\t\tx: element._model.x,\n\t\t\t\ty: element._model.y\n\t\t\t};\n\t\t}\n\t\n\t\t/**\n\t\t * Helper to get the reset model for the tooltip\n\t\t * @param tooltipOpts {Object} the tooltip options\n\t\t */\n\t\tfunction getBaseModel(tooltipOpts) {\n\t\t\tvar globalDefaults = Chart.defaults.global;\n\t\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\t\n\t\t\treturn {\n\t\t\t\t// Positioning\n\t\t\t\txPadding: tooltipOpts.xPadding,\n\t\t\t\tyPadding: tooltipOpts.yPadding,\n\t\t\t\txAlign: tooltipOpts.xAlign,\n\t\t\t\tyAlign: tooltipOpts.yAlign,\n\t\n\t\t\t\t// Body\n\t\t\t\tbodyFontColor: tooltipOpts.bodyFontColor,\n\t\t\t\t_bodyFontFamily: getValueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),\n\t\t\t\t_bodyFontStyle: getValueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),\n\t\t\t\t_bodyAlign: tooltipOpts.bodyAlign,\n\t\t\t\tbodyFontSize: getValueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),\n\t\t\t\tbodySpacing: tooltipOpts.bodySpacing,\n\t\n\t\t\t\t// Title\n\t\t\t\ttitleFontColor: tooltipOpts.titleFontColor,\n\t\t\t\t_titleFontFamily: getValueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),\n\t\t\t\t_titleFontStyle: getValueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),\n\t\t\t\ttitleFontSize: getValueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),\n\t\t\t\t_titleAlign: tooltipOpts.titleAlign,\n\t\t\t\ttitleSpacing: tooltipOpts.titleSpacing,\n\t\t\t\ttitleMarginBottom: tooltipOpts.titleMarginBottom,\n\t\n\t\t\t\t// Footer\n\t\t\t\tfooterFontColor: tooltipOpts.footerFontColor,\n\t\t\t\t_footerFontFamily: getValueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),\n\t\t\t\t_footerFontStyle: getValueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),\n\t\t\t\tfooterFontSize: getValueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),\n\t\t\t\t_footerAlign: tooltipOpts.footerAlign,\n\t\t\t\tfooterSpacing: tooltipOpts.footerSpacing,\n\t\t\t\tfooterMarginTop: tooltipOpts.footerMarginTop,\n\t\n\t\t\t\t// Appearance\n\t\t\t\tcaretSize: tooltipOpts.caretSize,\n\t\t\t\tcornerRadius: tooltipOpts.cornerRadius,\n\t\t\t\tbackgroundColor: tooltipOpts.backgroundColor,\n\t\t\t\topacity: 0,\n\t\t\t\tlegendColorBackground: tooltipOpts.multiKeyBackground,\n\t\t\t\tdisplayColors: tooltipOpts.displayColors\n\t\t\t};\n\t\t}\n\t\n\t\t/**\n\t\t * Get the size of the tooltip\n\t\t */\n\t\tfunction getTooltipSize(tooltip, model) {\n\t\t\tvar ctx = tooltip._chart.ctx;\n\t\n\t\t\tvar height = model.yPadding * 2; // Tooltip Padding\n\t\t\tvar width = 0;\n\t\n\t\t\t// Count of all lines in the body\n\t\t\tvar body = model.body;\n\t\t\tvar combinedBodyLength = body.reduce(function(count, bodyItem) {\n\t\t\t\treturn count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n\t\t\t}, 0);\n\t\t\tcombinedBodyLength += model.beforeBody.length + model.afterBody.length;\n\t\n\t\t\tvar titleLineCount = model.title.length;\n\t\t\tvar footerLineCount = model.footer.length;\n\t\t\tvar titleFontSize = model.titleFontSize,\n\t\t\t\tbodyFontSize = model.bodyFontSize,\n\t\t\t\tfooterFontSize = model.footerFontSize;\n\t\n\t\t\theight += titleLineCount * titleFontSize; // Title Lines\n\t\t\theight += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing\n\t\t\theight += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin\n\t\t\theight += combinedBodyLength * bodyFontSize; // Body Lines\n\t\t\theight += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing\n\t\t\theight += footerLineCount ? model.footerMarginTop : 0; // Footer Margin\n\t\t\theight += footerLineCount * (footerFontSize); // Footer Lines\n\t\t\theight += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing\n\t\n\t\t\t// Title width\n\t\t\tvar widthPadding = 0;\n\t\t\tvar maxLineWidth = function(line) {\n\t\t\t\twidth = Math.max(width, ctx.measureText(line).width + widthPadding);\n\t\t\t};\n\t\n\t\t\tctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);\n\t\t\thelpers.each(model.title, maxLineWidth);\n\t\n\t\t\t// Body width\n\t\t\tctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);\n\t\t\thelpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth);\n\t\n\t\t\t// Body lines may include some extra width due to the color box\n\t\t\twidthPadding = model.displayColors ? (bodyFontSize + 2) : 0;\n\t\t\thelpers.each(body, function(bodyItem) {\n\t\t\t\thelpers.each(bodyItem.before, maxLineWidth);\n\t\t\t\thelpers.each(bodyItem.lines, maxLineWidth);\n\t\t\t\thelpers.each(bodyItem.after, maxLineWidth);\n\t\t\t});\n\t\n\t\t\t// Reset back to 0\n\t\t\twidthPadding = 0;\n\t\n\t\t\t// Footer width\n\t\t\tctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);\n\t\t\thelpers.each(model.footer, maxLineWidth);\n\t\n\t\t\t// Add padding\n\t\t\twidth += 2 * model.xPadding;\n\t\n\t\t\treturn {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t}\n\t\n\t\t/**\n\t\t * Helper to get the alignment of a tooltip given the size\n\t\t */\n\t\tfunction determineAlignment(tooltip, size) {\n\t\t\tvar model = tooltip._model;\n\t\t\tvar chart = tooltip._chart;\n\t\t\tvar chartArea = tooltip._chartInstance.chartArea;\n\t\t\tvar xAlign = 'center';\n\t\t\tvar yAlign = 'center';\n\t\n\t\t\tif (model.y < size.height) {\n\t\t\t\tyAlign = 'top';\n\t\t\t} else if (model.y > (chart.height - size.height)) {\n\t\t\t\tyAlign = 'bottom';\n\t\t\t}\n\t\n\t\t\tvar lf, rf; // functions to determine left, right alignment\n\t\t\tvar olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart\n\t\t\tvar yf; // function to get the y alignment if the tooltip goes outside of the left or right edges\n\t\t\tvar midX = (chartArea.left + chartArea.right) / 2;\n\t\t\tvar midY = (chartArea.top + chartArea.bottom) / 2;\n\t\n\t\t\tif (yAlign === 'center') {\n\t\t\t\tlf = function(x) {\n\t\t\t\t\treturn x <= midX;\n\t\t\t\t};\n\t\t\t\trf = function(x) {\n\t\t\t\t\treturn x > midX;\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tlf = function(x) {\n\t\t\t\t\treturn x <= (size.width / 2);\n\t\t\t\t};\n\t\t\t\trf = function(x) {\n\t\t\t\t\treturn x >= (chart.width - (size.width / 2));\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\tolf = function(x) {\n\t\t\t\treturn x + size.width > chart.width;\n\t\t\t};\n\t\t\torf = function(x) {\n\t\t\t\treturn x - size.width < 0;\n\t\t\t};\n\t\t\tyf = function(y) {\n\t\t\t\treturn y <= midY ? 'top' : 'bottom';\n\t\t\t};\n\t\n\t\t\tif (lf(model.x)) {\n\t\t\t\txAlign = 'left';\n\t\n\t\t\t\t// Is tooltip too wide and goes over the right side of the chart.?\n\t\t\t\tif (olf(model.x)) {\n\t\t\t\t\txAlign = 'center';\n\t\t\t\t\tyAlign = yf(model.y);\n\t\t\t\t}\n\t\t\t} else if (rf(model.x)) {\n\t\t\t\txAlign = 'right';\n\t\n\t\t\t\t// Is tooltip too wide and goes outside left edge of canvas?\n\t\t\t\tif (orf(model.x)) {\n\t\t\t\t\txAlign = 'center';\n\t\t\t\t\tyAlign = yf(model.y);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tvar opts = tooltip._options;\n\t\t\treturn {\n\t\t\t\txAlign: opts.xAlign ? opts.xAlign : xAlign,\n\t\t\t\tyAlign: opts.yAlign ? opts.yAlign : yAlign\n\t\t\t};\n\t\t}\n\t\n\t\t/**\n\t\t * @Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n\t\t */\n\t\tfunction getBackgroundPoint(vm, size, alignment) {\n\t\t\t// Background Position\n\t\t\tvar x = vm.x;\n\t\t\tvar y = vm.y;\n\t\n\t\t\tvar caretSize = vm.caretSize,\n\t\t\t\tcaretPadding = vm.caretPadding,\n\t\t\t\tcornerRadius = vm.cornerRadius,\n\t\t\t\txAlign = alignment.xAlign,\n\t\t\t\tyAlign = alignment.yAlign,\n\t\t\t\tpaddingAndSize = caretSize + caretPadding,\n\t\t\t\tradiusAndPadding = cornerRadius + caretPadding;\n\t\n\t\t\tif (xAlign === 'right') {\n\t\t\t\tx -= size.width;\n\t\t\t} else if (xAlign === 'center') {\n\t\t\t\tx -= (size.width / 2);\n\t\t\t}\n\t\n\t\t\tif (yAlign === 'top') {\n\t\t\t\ty += paddingAndSize;\n\t\t\t} else if (yAlign === 'bottom') {\n\t\t\t\ty -= size.height + paddingAndSize;\n\t\t\t} else {\n\t\t\t\ty -= (size.height / 2);\n\t\t\t}\n\t\n\t\t\tif (yAlign === 'center') {\n\t\t\t\tif (xAlign === 'left') {\n\t\t\t\t\tx += paddingAndSize;\n\t\t\t\t} else if (xAlign === 'right') {\n\t\t\t\t\tx -= paddingAndSize;\n\t\t\t\t}\n\t\t\t} else if (xAlign === 'left') {\n\t\t\t\tx -= radiusAndPadding;\n\t\t\t} else if (xAlign === 'right') {\n\t\t\t\tx += radiusAndPadding;\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: y\n\t\t\t};\n\t\t}\n\t\n\t\tChart.Tooltip = Chart.Element.extend({\n\t\t\tinitialize: function() {\n\t\t\t\tthis._model = getBaseModel(this._options);\n\t\t\t},\n\t\n\t\t\t// Get the title\n\t\t\t// Args are: (tooltipItem, data)\n\t\t\tgetTitle: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar opts = me._options;\n\t\t\t\tvar callbacks = opts.callbacks;\n\t\n\t\t\t\tvar beforeTitle = callbacks.beforeTitle.apply(me, arguments),\n\t\t\t\t\ttitle = callbacks.title.apply(me, arguments),\n\t\t\t\t\tafterTitle = callbacks.afterTitle.apply(me, arguments);\n\t\n\t\t\t\tvar lines = [];\n\t\t\t\tlines = pushOrConcat(lines, beforeTitle);\n\t\t\t\tlines = pushOrConcat(lines, title);\n\t\t\t\tlines = pushOrConcat(lines, afterTitle);\n\t\n\t\t\t\treturn lines;\n\t\t\t},\n\t\n\t\t\t// Args are: (tooltipItem, data)\n\t\t\tgetBeforeBody: function() {\n\t\t\t\tvar lines = this._options.callbacks.beforeBody.apply(this, arguments);\n\t\t\t\treturn helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];\n\t\t\t},\n\t\n\t\t\t// Args are: (tooltipItem, data)\n\t\t\tgetBody: function(tooltipItems, data) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar callbacks = me._options.callbacks;\n\t\t\t\tvar bodyItems = [];\n\t\n\t\t\t\thelpers.each(tooltipItems, function(tooltipItem) {\n\t\t\t\t\tvar bodyItem = {\n\t\t\t\t\t\tbefore: [],\n\t\t\t\t\t\tlines: [],\n\t\t\t\t\t\tafter: []\n\t\t\t\t\t};\n\t\t\t\t\tpushOrConcat(bodyItem.before, callbacks.beforeLabel.call(me, tooltipItem, data));\n\t\t\t\t\tpushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));\n\t\t\t\t\tpushOrConcat(bodyItem.after, callbacks.afterLabel.call(me, tooltipItem, data));\n\t\n\t\t\t\t\tbodyItems.push(bodyItem);\n\t\t\t\t});\n\t\n\t\t\t\treturn bodyItems;\n\t\t\t},\n\t\n\t\t\t// Args are: (tooltipItem, data)\n\t\t\tgetAfterBody: function() {\n\t\t\t\tvar lines = this._options.callbacks.afterBody.apply(this, arguments);\n\t\t\t\treturn helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];\n\t\t\t},\n\t\n\t\t\t// Get the footer and beforeFooter and afterFooter lines\n\t\t\t// Args are: (tooltipItem, data)\n\t\t\tgetFooter: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar callbacks = me._options.callbacks;\n\t\n\t\t\t\tvar beforeFooter = callbacks.beforeFooter.apply(me, arguments);\n\t\t\t\tvar footer = callbacks.footer.apply(me, arguments);\n\t\t\t\tvar afterFooter = callbacks.afterFooter.apply(me, arguments);\n\t\n\t\t\t\tvar lines = [];\n\t\t\t\tlines = pushOrConcat(lines, beforeFooter);\n\t\t\t\tlines = pushOrConcat(lines, footer);\n\t\t\t\tlines = pushOrConcat(lines, afterFooter);\n\t\n\t\t\t\treturn lines;\n\t\t\t},\n\t\n\t\t\tupdate: function(changed) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar opts = me._options;\n\t\n\t\t\t\t// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition\n\t\t\t\t// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time\n\t\t\t\t// which breaks any animations.\n\t\t\t\tvar existingModel = me._model;\n\t\t\t\tvar model = me._model = getBaseModel(opts);\n\t\t\t\tvar active = me._active;\n\t\n\t\t\t\tvar data = me._data;\n\t\t\t\tvar chartInstance = me._chartInstance;\n\t\n\t\t\t\t// In the case where active.length === 0 we need to keep these at existing values for good animations\n\t\t\t\tvar alignment = {\n\t\t\t\t\txAlign: existingModel.xAlign,\n\t\t\t\t\tyAlign: existingModel.yAlign\n\t\t\t\t};\n\t\t\t\tvar backgroundPoint = {\n\t\t\t\t\tx: existingModel.x,\n\t\t\t\t\ty: existingModel.y\n\t\t\t\t};\n\t\t\t\tvar tooltipSize = {\n\t\t\t\t\twidth: existingModel.width,\n\t\t\t\t\theight: existingModel.height\n\t\t\t\t};\n\t\t\t\tvar tooltipPosition = {\n\t\t\t\t\tx: existingModel.caretX,\n\t\t\t\t\ty: existingModel.caretY\n\t\t\t\t};\n\t\n\t\t\t\tvar i, len;\n\t\n\t\t\t\tif (active.length) {\n\t\t\t\t\tmodel.opacity = 1;\n\t\n\t\t\t\t\tvar labelColors = [];\n\t\t\t\t\ttooltipPosition = Chart.Tooltip.positioners[opts.position](active, me._eventPosition);\n\t\n\t\t\t\t\tvar tooltipItems = [];\n\t\t\t\t\tfor (i = 0, len = active.length; i < len; ++i) {\n\t\t\t\t\t\ttooltipItems.push(createTooltipItem(active[i]));\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// If the user provided a filter function, use it to modify the tooltip items\n\t\t\t\t\tif (opts.filter) {\n\t\t\t\t\t\ttooltipItems = tooltipItems.filter(function(a) {\n\t\t\t\t\t\t\treturn opts.filter(a, data);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// If the user provided a sorting function, use it to modify the tooltip items\n\t\t\t\t\tif (opts.itemSort) {\n\t\t\t\t\t\ttooltipItems = tooltipItems.sort(function(a, b) {\n\t\t\t\t\t\t\treturn opts.itemSort(a, b, data);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Determine colors for boxes\n\t\t\t\t\thelpers.each(tooltipItems, function(tooltipItem) {\n\t\t\t\t\t\tlabelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, chartInstance));\n\t\t\t\t\t});\n\t\n\t\t\t\t\t// Build the Text Lines\n\t\t\t\t\tmodel.title = me.getTitle(tooltipItems, data);\n\t\t\t\t\tmodel.beforeBody = me.getBeforeBody(tooltipItems, data);\n\t\t\t\t\tmodel.body = me.getBody(tooltipItems, data);\n\t\t\t\t\tmodel.afterBody = me.getAfterBody(tooltipItems, data);\n\t\t\t\t\tmodel.footer = me.getFooter(tooltipItems, data);\n\t\n\t\t\t\t\t// Initial positioning and colors\n\t\t\t\t\tmodel.x = Math.round(tooltipPosition.x);\n\t\t\t\t\tmodel.y = Math.round(tooltipPosition.y);\n\t\t\t\t\tmodel.caretPadding = helpers.getValueOrDefault(tooltipPosition.padding, 2);\n\t\t\t\t\tmodel.labelColors = labelColors;\n\t\n\t\t\t\t\t// data points\n\t\t\t\t\tmodel.dataPoints = tooltipItems;\n\t\n\t\t\t\t\t// We need to determine alignment of the tooltip\n\t\t\t\t\ttooltipSize = getTooltipSize(this, model);\n\t\t\t\t\talignment = determineAlignment(this, tooltipSize);\n\t\t\t\t\t// Final Size and Position\n\t\t\t\t\tbackgroundPoint = getBackgroundPoint(model, tooltipSize, alignment);\n\t\t\t\t} else {\n\t\t\t\t\tmodel.opacity = 0;\n\t\t\t\t}\n\t\n\t\t\t\tmodel.xAlign = alignment.xAlign;\n\t\t\t\tmodel.yAlign = alignment.yAlign;\n\t\t\t\tmodel.x = backgroundPoint.x;\n\t\t\t\tmodel.y = backgroundPoint.y;\n\t\t\t\tmodel.width = tooltipSize.width;\n\t\t\t\tmodel.height = tooltipSize.height;\n\t\n\t\t\t\t// Point where the caret on the tooltip points to\n\t\t\t\tmodel.caretX = tooltipPosition.x;\n\t\t\t\tmodel.caretY = tooltipPosition.y;\n\t\n\t\t\t\tme._model = model;\n\t\n\t\t\t\tif (changed && opts.custom) {\n\t\t\t\t\topts.custom.call(me, model);\n\t\t\t\t}\n\t\n\t\t\t\treturn me;\n\t\t\t},\n\t\t\tdrawCaret: function(tooltipPoint, size, opacity) {\n\t\t\t\tvar vm = this._view;\n\t\t\t\tvar ctx = this._chart.ctx;\n\t\t\t\tvar x1, x2, x3;\n\t\t\t\tvar y1, y2, y3;\n\t\t\t\tvar caretSize = vm.caretSize;\n\t\t\t\tvar cornerRadius = vm.cornerRadius;\n\t\t\t\tvar xAlign = vm.xAlign,\n\t\t\t\t\tyAlign = vm.yAlign;\n\t\t\t\tvar ptX = tooltipPoint.x,\n\t\t\t\t\tptY = tooltipPoint.y;\n\t\t\t\tvar width = size.width,\n\t\t\t\t\theight = size.height;\n\t\n\t\t\t\tif (yAlign === 'center') {\n\t\t\t\t\t// Left or right side\n\t\t\t\t\tif (xAlign === 'left') {\n\t\t\t\t\t\tx1 = ptX;\n\t\t\t\t\t\tx2 = x1 - caretSize;\n\t\t\t\t\t\tx3 = x1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx1 = ptX + width;\n\t\t\t\t\t\tx2 = x1 + caretSize;\n\t\t\t\t\t\tx3 = x1;\n\t\t\t\t\t}\n\t\n\t\t\t\t\ty2 = ptY + (height / 2);\n\t\t\t\t\ty1 = y2 - caretSize;\n\t\t\t\t\ty3 = y2 + caretSize;\n\t\t\t\t} else {\n\t\t\t\t\tif (xAlign === 'left') {\n\t\t\t\t\t\tx1 = ptX + cornerRadius;\n\t\t\t\t\t\tx2 = x1 + caretSize;\n\t\t\t\t\t\tx3 = x2 + caretSize;\n\t\t\t\t\t} else if (xAlign === 'right') {\n\t\t\t\t\t\tx1 = ptX + width - cornerRadius;\n\t\t\t\t\t\tx2 = x1 - caretSize;\n\t\t\t\t\t\tx3 = x2 - caretSize;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx2 = ptX + (width / 2);\n\t\t\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\t\t\tx3 = x2 + caretSize;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (yAlign === 'top') {\n\t\t\t\t\t\ty1 = ptY;\n\t\t\t\t\t\ty2 = y1 - caretSize;\n\t\t\t\t\t\ty3 = y1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty1 = ptY + height;\n\t\t\t\t\t\ty2 = y1 + caretSize;\n\t\t\t\t\t\ty3 = y1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(x1, y1);\n\t\t\t\tctx.lineTo(x2, y2);\n\t\t\t\tctx.lineTo(x3, y3);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.fill();\n\t\t\t},\n\t\t\tdrawTitle: function(pt, vm, ctx, opacity) {\n\t\t\t\tvar title = vm.title;\n\t\n\t\t\t\tif (title.length) {\n\t\t\t\t\tctx.textAlign = vm._titleAlign;\n\t\t\t\t\tctx.textBaseline = 'top';\n\t\n\t\t\t\t\tvar titleFontSize = vm.titleFontSize,\n\t\t\t\t\t\ttitleSpacing = vm.titleSpacing;\n\t\n\t\t\t\t\tctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);\n\t\t\t\t\tctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);\n\t\n\t\t\t\t\tvar i, len;\n\t\t\t\t\tfor (i = 0, len = title.length; i < len; ++i) {\n\t\t\t\t\t\tctx.fillText(title[i], pt.x, pt.y);\n\t\t\t\t\t\tpt.y += titleFontSize + titleSpacing; // Line Height and spacing\n\t\n\t\t\t\t\t\tif (i + 1 === title.length) {\n\t\t\t\t\t\t\tpt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdrawBody: function(pt, vm, ctx, opacity) {\n\t\t\t\tvar bodyFontSize = vm.bodyFontSize;\n\t\t\t\tvar bodySpacing = vm.bodySpacing;\n\t\t\t\tvar body = vm.body;\n\t\n\t\t\t\tctx.textAlign = vm._bodyAlign;\n\t\t\t\tctx.textBaseline = 'top';\n\t\n\t\t\t\tvar textColor = mergeOpacity(vm.bodyFontColor, opacity);\n\t\t\t\tctx.fillStyle = textColor;\n\t\t\t\tctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);\n\t\n\t\t\t\t// Before Body\n\t\t\t\tvar xLinePadding = 0;\n\t\t\t\tvar fillLineOfText = function(line) {\n\t\t\t\t\tctx.fillText(line, pt.x + xLinePadding, pt.y);\n\t\t\t\t\tpt.y += bodyFontSize + bodySpacing;\n\t\t\t\t};\n\t\n\t\t\t\t// Before body lines\n\t\t\t\thelpers.each(vm.beforeBody, fillLineOfText);\n\t\n\t\t\t\tvar drawColorBoxes = vm.displayColors;\n\t\t\t\txLinePadding = drawColorBoxes ? (bodyFontSize + 2) : 0;\n\t\n\t\t\t\t// Draw body lines now\n\t\t\t\thelpers.each(body, function(bodyItem, i) {\n\t\t\t\t\thelpers.each(bodyItem.before, fillLineOfText);\n\t\n\t\t\t\t\thelpers.each(bodyItem.lines, function(line) {\n\t\t\t\t\t\t// Draw Legend-like boxes if needed\n\t\t\t\t\t\tif (drawColorBoxes) {\n\t\t\t\t\t\t\t// Fill a white rect so that colours merge nicely if the opacity is < 1\n\t\t\t\t\t\t\tctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);\n\t\t\t\t\t\t\tctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize);\n\t\n\t\t\t\t\t\t\t// Border\n\t\t\t\t\t\t\tctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);\n\t\t\t\t\t\t\tctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize);\n\t\n\t\t\t\t\t\t\t// Inner square\n\t\t\t\t\t\t\tctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);\n\t\t\t\t\t\t\tctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);\n\t\n\t\t\t\t\t\t\tctx.fillStyle = textColor;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tfillLineOfText(line);\n\t\t\t\t\t});\n\t\n\t\t\t\t\thelpers.each(bodyItem.after, fillLineOfText);\n\t\t\t\t});\n\t\n\t\t\t\t// Reset back to 0 for after body\n\t\t\t\txLinePadding = 0;\n\t\n\t\t\t\t// After body lines\n\t\t\t\thelpers.each(vm.afterBody, fillLineOfText);\n\t\t\t\tpt.y -= bodySpacing; // Remove last body spacing\n\t\t\t},\n\t\t\tdrawFooter: function(pt, vm, ctx, opacity) {\n\t\t\t\tvar footer = vm.footer;\n\t\n\t\t\t\tif (footer.length) {\n\t\t\t\t\tpt.y += vm.footerMarginTop;\n\t\n\t\t\t\t\tctx.textAlign = vm._footerAlign;\n\t\t\t\t\tctx.textBaseline = 'top';\n\t\n\t\t\t\t\tctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);\n\t\t\t\t\tctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);\n\t\n\t\t\t\t\thelpers.each(footer, function(line) {\n\t\t\t\t\t\tctx.fillText(line, pt.x, pt.y);\n\t\t\t\t\t\tpt.y += vm.footerFontSize + vm.footerSpacing;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tdrawBackground: function(pt, vm, ctx, tooltipSize, opacity) {\n\t\t\t\tctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);\n\t\t\t\thelpers.drawRoundedRectangle(ctx, pt.x, pt.y, tooltipSize.width, tooltipSize.height, vm.cornerRadius);\n\t\t\t\tctx.fill();\n\t\t\t},\n\t\t\tdraw: function() {\n\t\t\t\tvar ctx = this._chart.ctx;\n\t\t\t\tvar vm = this._view;\n\t\n\t\t\t\tif (vm.opacity === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tvar tooltipSize = {\n\t\t\t\t\twidth: vm.width,\n\t\t\t\t\theight: vm.height\n\t\t\t\t};\n\t\t\t\tvar pt = {\n\t\t\t\t\tx: vm.x,\n\t\t\t\t\ty: vm.y\n\t\t\t\t};\n\t\n\t\t\t\t// IE11/Edge does not like very small opacities, so snap to 0\n\t\t\t\tvar opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;\n\t\n\t\t\t\tif (this._options.enabled) {\n\t\t\t\t\t// Draw Background\n\t\t\t\t\tthis.drawBackground(pt, vm, ctx, tooltipSize, opacity);\n\t\n\t\t\t\t\t// Draw Caret\n\t\t\t\t\tthis.drawCaret(pt, tooltipSize, opacity);\n\t\n\t\t\t\t\t// Draw Title, Body, and Footer\n\t\t\t\t\tpt.x += vm.xPadding;\n\t\t\t\t\tpt.y += vm.yPadding;\n\t\n\t\t\t\t\t// Titles\n\t\t\t\t\tthis.drawTitle(pt, vm, ctx, opacity);\n\t\n\t\t\t\t\t// Body\n\t\t\t\t\tthis.drawBody(pt, vm, ctx, opacity);\n\t\n\t\t\t\t\t// Footer\n\t\t\t\t\tthis.drawFooter(pt, vm, ctx, opacity);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Handle an event\n\t\t\t * @private\n\t\t\t * @param {IEvent} event - The event to handle\n\t\t\t * @returns {Boolean} true if the tooltip changed\n\t\t\t */\n\t\t\thandleEvent: function(e) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar options = me._options;\n\t\t\t\tvar changed = false;\n\t\n\t\t\t\tme._lastActive = me._lastActive || [];\n\t\n\t\t\t\t// Find Active Elements for tooltips\n\t\t\t\tif (e.type === 'mouseout') {\n\t\t\t\t\tme._active = [];\n\t\t\t\t} else {\n\t\t\t\t\tme._active = me._chartInstance.getElementsAtEventForMode(e, options.mode, options);\n\t\t\t\t}\n\t\n\t\t\t\t// Remember Last Actives\n\t\t\t\tchanged = !helpers.arrayEquals(me._active, me._lastActive);\n\t\t\t\tme._lastActive = me._active;\n\t\n\t\t\t\tif (options.enabled || options.custom) {\n\t\t\t\t\tme._eventPosition = {\n\t\t\t\t\t\tx: e.x,\n\t\t\t\t\t\ty: e.y\n\t\t\t\t\t};\n\t\n\t\t\t\t\tvar model = me._model;\n\t\t\t\t\tme.update(true);\n\t\t\t\t\tme.pivot();\n\t\n\t\t\t\t\t// See if our tooltip position changed\n\t\t\t\t\tchanged |= (model.x !== me._model.x) || (model.y !== me._model.y);\n\t\t\t\t}\n\t\n\t\t\t\treturn changed;\n\t\t\t}\n\t\t});\n\t\n\t\t/**\n\t\t * @namespace Chart.Tooltip.positioners\n\t\t */\n\t\tChart.Tooltip.positioners = {\n\t\t\t/**\n\t\t\t * Average mode places the tooltip at the average position of the elements shown\n\t\t\t * @function Chart.Tooltip.positioners.average\n\t\t\t * @param elements {ChartElement[]} the elements being displayed in the tooltip\n\t\t\t * @returns {Point} tooltip position\n\t\t\t */\n\t\t\taverage: function(elements) {\n\t\t\t\tif (!elements.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\tvar i, len;\n\t\t\t\tvar x = 0;\n\t\t\t\tvar y = 0;\n\t\t\t\tvar count = 0;\n\t\n\t\t\t\tfor (i = 0, len = elements.length; i < len; ++i) {\n\t\t\t\t\tvar el = elements[i];\n\t\t\t\t\tif (el && el.hasValue()) {\n\t\t\t\t\t\tvar pos = el.tooltipPosition();\n\t\t\t\t\t\tx += pos.x;\n\t\t\t\t\t\ty += pos.y;\n\t\t\t\t\t\t++count;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn {\n\t\t\t\t\tx: Math.round(x / count),\n\t\t\t\t\ty: Math.round(y / count)\n\t\t\t\t};\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Gets the tooltip position nearest of the item nearest to the event position\n\t\t\t * @function Chart.Tooltip.positioners.nearest\n\t\t\t * @param elements {Chart.Element[]} the tooltip elements\n\t\t\t * @param eventPosition {Point} the position of the event in canvas coordinates\n\t\t\t * @returns {Point} the tooltip position\n\t\t\t */\n\t\t\tnearest: function(elements, eventPosition) {\n\t\t\t\tvar x = eventPosition.x;\n\t\t\t\tvar y = eventPosition.y;\n\t\n\t\t\t\tvar nearestElement;\n\t\t\t\tvar minDistance = Number.POSITIVE_INFINITY;\n\t\t\t\tvar i, len;\n\t\t\t\tfor (i = 0, len = elements.length; i < len; ++i) {\n\t\t\t\t\tvar el = elements[i];\n\t\t\t\t\tif (el && el.hasValue()) {\n\t\t\t\t\t\tvar center = el.getCenterPoint();\n\t\t\t\t\t\tvar d = helpers.distanceBetweenPoints(eventPosition, center);\n\t\n\t\t\t\t\t\tif (d < minDistance) {\n\t\t\t\t\t\t\tminDistance = d;\n\t\t\t\t\t\t\tnearestElement = el;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tif (nearestElement) {\n\t\t\t\t\tvar tp = nearestElement.tooltipPosition();\n\t\t\t\t\tx = tp.x;\n\t\t\t\t\ty = tp.y;\n\t\t\t\t}\n\t\n\t\t\t\treturn {\n\t\t\t\t\tx: x,\n\t\t\t\t\ty: y\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t};\n\n\n/***/ },\n\n/***/ 605:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers,\n\t\t\tglobalOpts = Chart.defaults.global;\n\t\n\t\tglobalOpts.elements.arc = {\n\t\t\tbackgroundColor: globalOpts.defaultColor,\n\t\t\tborderColor: '#fff',\n\t\t\tborderWidth: 2\n\t\t};\n\t\n\t\tChart.elements.Arc = Chart.Element.extend({\n\t\t\tinLabelRange: function(mouseX) {\n\t\t\t\tvar vm = this._view;\n\t\n\t\t\t\tif (vm) {\n\t\t\t\t\treturn (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tinRange: function(chartX, chartY) {\n\t\t\t\tvar vm = this._view;\n\t\n\t\t\t\tif (vm) {\n\t\t\t\t\tvar pointRelativePosition = helpers.getAngleFromPoint(vm, {\n\t\t\t\t\t\t\tx: chartX,\n\t\t\t\t\t\t\ty: chartY\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tangle = pointRelativePosition.angle,\n\t\t\t\t\t\tdistance = pointRelativePosition.distance;\n\t\n\t\t\t\t\t// Sanitise angle range\n\t\t\t\t\tvar startAngle = vm.startAngle;\n\t\t\t\t\tvar endAngle = vm.endAngle;\n\t\t\t\t\twhile (endAngle < startAngle) {\n\t\t\t\t\t\tendAngle += 2.0 * Math.PI;\n\t\t\t\t\t}\n\t\t\t\t\twhile (angle > endAngle) {\n\t\t\t\t\t\tangle -= 2.0 * Math.PI;\n\t\t\t\t\t}\n\t\t\t\t\twhile (angle < startAngle) {\n\t\t\t\t\t\tangle += 2.0 * Math.PI;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Check if within the range of the open/close angle\n\t\t\t\t\tvar betweenAngles = (angle >= startAngle && angle <= endAngle),\n\t\t\t\t\t\twithinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);\n\t\n\t\t\t\t\treturn (betweenAngles && withinRadius);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tgetCenterPoint: function() {\n\t\t\t\tvar vm = this._view;\n\t\t\t\tvar halfAngle = (vm.startAngle + vm.endAngle) / 2;\n\t\t\t\tvar halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n\t\t\t\treturn {\n\t\t\t\t\tx: vm.x + Math.cos(halfAngle) * halfRadius,\n\t\t\t\t\ty: vm.y + Math.sin(halfAngle) * halfRadius\n\t\t\t\t};\n\t\t\t},\n\t\t\tgetArea: function() {\n\t\t\t\tvar vm = this._view;\n\t\t\t\treturn Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n\t\t\t},\n\t\t\ttooltipPosition: function() {\n\t\t\t\tvar vm = this._view;\n\t\n\t\t\t\tvar centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2),\n\t\t\t\t\trangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n\t\t\t\treturn {\n\t\t\t\t\tx: vm.x + (Math.cos(centreAngle) * rangeFromCentre),\n\t\t\t\t\ty: vm.y + (Math.sin(centreAngle) * rangeFromCentre)\n\t\t\t\t};\n\t\t\t},\n\t\t\tdraw: function() {\n\t\n\t\t\t\tvar ctx = this._chart.ctx,\n\t\t\t\t\tvm = this._view,\n\t\t\t\t\tsA = vm.startAngle,\n\t\t\t\t\teA = vm.endAngle;\n\t\n\t\t\t\tctx.beginPath();\n\t\n\t\t\t\tctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);\n\t\t\t\tctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n\t\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.strokeStyle = vm.borderColor;\n\t\t\t\tctx.lineWidth = vm.borderWidth;\n\t\n\t\t\t\tctx.fillStyle = vm.backgroundColor;\n\t\n\t\t\t\tctx.fill();\n\t\t\t\tctx.lineJoin = 'bevel';\n\t\n\t\t\t\tif (vm.borderWidth) {\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 606:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\tvar globalDefaults = Chart.defaults.global;\n\t\n\t\tChart.defaults.global.elements.line = {\n\t\t\ttension: 0.4,\n\t\t\tbackgroundColor: globalDefaults.defaultColor,\n\t\t\tborderWidth: 3,\n\t\t\tborderColor: globalDefaults.defaultColor,\n\t\t\tborderCapStyle: 'butt',\n\t\t\tborderDash: [],\n\t\t\tborderDashOffset: 0.0,\n\t\t\tborderJoinStyle: 'miter',\n\t\t\tcapBezierPoints: true,\n\t\t\tfill: true, // do we fill in the area between the line and its base axis\n\t\t};\n\t\n\t\tChart.elements.Line = Chart.Element.extend({\n\t\t\tdraw: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar vm = me._view;\n\t\t\t\tvar spanGaps = vm.spanGaps;\n\t\t\t\tvar fillPoint = vm.scaleZero;\n\t\t\t\tvar loop = me._loop;\n\t\n\t\t\t\t// Handle different fill modes for cartesian lines\n\t\t\t\tif (!loop) {\n\t\t\t\t\tif (vm.fill === 'top') {\n\t\t\t\t\t\tfillPoint = vm.scaleTop;\n\t\t\t\t\t} else if (vm.fill === 'bottom') {\n\t\t\t\t\t\tfillPoint = vm.scaleBottom;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tvar ctx = me._chart.ctx;\n\t\t\t\tctx.save();\n\t\n\t\t\t\t// Helper function to draw a line to a point\n\t\t\t\tfunction lineToPoint(previousPoint, point) {\n\t\t\t\t\tvar pointVM = point._view;\n\t\t\t\t\tif (point._view.steppedLine === true) {\n\t\t\t\t\t\tctx.lineTo(pointVM.x, previousPoint._view.y);\n\t\t\t\t\t\tctx.lineTo(pointVM.x, pointVM.y);\n\t\t\t\t\t} else if (point._view.tension === 0) {\n\t\t\t\t\t\tctx.lineTo(pointVM.x, pointVM.y);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.bezierCurveTo(\n\t\t\t\t\t\t\tpreviousPoint._view.controlPointNextX,\n\t\t\t\t\t\t\tpreviousPoint._view.controlPointNextY,\n\t\t\t\t\t\t\tpointVM.controlPointPreviousX,\n\t\t\t\t\t\t\tpointVM.controlPointPreviousY,\n\t\t\t\t\t\t\tpointVM.x,\n\t\t\t\t\t\t\tpointVM.y\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tvar points = me._children.slice(); // clone array\n\t\t\t\tvar lastDrawnIndex = -1;\n\t\n\t\t\t\t// If we are looping, adding the first point again\n\t\t\t\tif (loop && points.length) {\n\t\t\t\t\tpoints.push(points[0]);\n\t\t\t\t}\n\t\n\t\t\t\tvar index, current, previous, currentVM;\n\t\n\t\t\t\t// Fill Line\n\t\t\t\tif (points.length && vm.fill) {\n\t\t\t\t\tctx.beginPath();\n\t\n\t\t\t\t\tfor (index = 0; index < points.length; ++index) {\n\t\t\t\t\t\tcurrent = points[index];\n\t\t\t\t\t\tprevious = helpers.previousItem(points, index);\n\t\t\t\t\t\tcurrentVM = current._view;\n\t\n\t\t\t\t\t\t// First point moves to it's starting position no matter what\n\t\t\t\t\t\tif (index === 0) {\n\t\t\t\t\t\t\tif (loop) {\n\t\t\t\t\t\t\t\tctx.moveTo(fillPoint.x, fillPoint.y);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tctx.moveTo(currentVM.x, fillPoint);\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif (!currentVM.skip) {\n\t\t\t\t\t\t\t\tlastDrawnIndex = index;\n\t\t\t\t\t\t\t\tctx.lineTo(currentVM.x, currentVM.y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprevious = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];\n\t\n\t\t\t\t\t\t\tif (currentVM.skip) {\n\t\t\t\t\t\t\t\t// Only do this if this is the first point that is skipped\n\t\t\t\t\t\t\t\tif (!spanGaps && lastDrawnIndex === (index - 1)) {\n\t\t\t\t\t\t\t\t\tif (loop) {\n\t\t\t\t\t\t\t\t\t\tctx.lineTo(fillPoint.x, fillPoint.y);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tctx.lineTo(previous._view.x, fillPoint);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (lastDrawnIndex !== (index - 1)) {\n\t\t\t\t\t\t\t\t\t// There was a gap and this is the first point after the gap. If we've never drawn a point, this is a special case.\n\t\t\t\t\t\t\t\t\t// If the first data point is NaN, then there is no real gap to skip\n\t\t\t\t\t\t\t\t\tif (spanGaps && lastDrawnIndex !== -1) {\n\t\t\t\t\t\t\t\t\t\t// We are spanning the gap, so simple draw a line to this point\n\t\t\t\t\t\t\t\t\t\tlineToPoint(previous, current);\n\t\t\t\t\t\t\t\t\t} else if (loop) {\n\t\t\t\t\t\t\t\t\t\tctx.lineTo(currentVM.x, currentVM.y);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tctx.lineTo(currentVM.x, fillPoint);\n\t\t\t\t\t\t\t\t\t\tctx.lineTo(currentVM.x, currentVM.y);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// Line to next point\n\t\t\t\t\t\t\t\t\tlineToPoint(previous, current);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlastDrawnIndex = index;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (!loop && lastDrawnIndex !== -1) {\n\t\t\t\t\t\tctx.lineTo(points[lastDrawnIndex]._view.x, fillPoint);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tctx.fillStyle = vm.backgroundColor || globalDefaults.defaultColor;\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.fill();\n\t\t\t\t}\n\t\n\t\t\t\t// Stroke Line Options\n\t\t\t\tvar globalOptionLineElements = globalDefaults.elements.line;\n\t\t\t\tctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;\n\t\n\t\t\t\t// IE 9 and 10 do not support line dash\n\t\t\t\tif (ctx.setLineDash) {\n\t\t\t\t\tctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);\n\t\t\t\t}\n\t\n\t\t\t\tctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;\n\t\t\t\tctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;\n\t\t\t\tctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;\n\t\t\t\tctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;\n\t\n\t\t\t\t// Stroke Line\n\t\t\t\tctx.beginPath();\n\t\t\t\tlastDrawnIndex = -1;\n\t\n\t\t\t\tfor (index = 0; index < points.length; ++index) {\n\t\t\t\t\tcurrent = points[index];\n\t\t\t\t\tprevious = helpers.previousItem(points, index);\n\t\t\t\t\tcurrentVM = current._view;\n\t\n\t\t\t\t\t// First point moves to it's starting position no matter what\n\t\t\t\t\tif (index === 0) {\n\t\t\t\t\t\tif (!currentVM.skip) {\n\t\t\t\t\t\t\tctx.moveTo(currentVM.x, currentVM.y);\n\t\t\t\t\t\t\tlastDrawnIndex = index;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprevious = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];\n\t\n\t\t\t\t\t\tif (!currentVM.skip) {\n\t\t\t\t\t\t\tif ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {\n\t\t\t\t\t\t\t\t// There was a gap and this is the first point after the gap\n\t\t\t\t\t\t\t\tctx.moveTo(currentVM.x, currentVM.y);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Line to next point\n\t\t\t\t\t\t\t\tlineToPoint(previous, current);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlastDrawnIndex = index;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tctx.stroke();\n\t\t\t\tctx.restore();\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 607:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers,\n\t\t\tglobalOpts = Chart.defaults.global,\n\t\t\tdefaultColor = globalOpts.defaultColor;\n\t\n\t\tglobalOpts.elements.point = {\n\t\t\tradius: 3,\n\t\t\tpointStyle: 'circle',\n\t\t\tbackgroundColor: defaultColor,\n\t\t\tborderWidth: 1,\n\t\t\tborderColor: defaultColor,\n\t\t\t// Hover\n\t\t\thitRadius: 1,\n\t\t\thoverRadius: 4,\n\t\t\thoverBorderWidth: 1\n\t\t};\n\t\n\t\tfunction xRange(mouseX) {\n\t\t\tvar vm = this._view;\n\t\t\treturn vm ? (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hitRadius, 2)) : false;\n\t\t}\n\t\n\t\tfunction yRange(mouseY) {\n\t\t\tvar vm = this._view;\n\t\t\treturn vm ? (Math.pow(mouseY - vm.y, 2) < Math.pow(vm.radius + vm.hitRadius, 2)) : false;\n\t\t}\n\t\n\t\tChart.elements.Point = Chart.Element.extend({\n\t\t\tinRange: function(mouseX, mouseY) {\n\t\t\t\tvar vm = this._view;\n\t\t\t\treturn vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;\n\t\t\t},\n\t\n\t\t\tinLabelRange: xRange,\n\t\t\tinXRange: xRange,\n\t\t\tinYRange: yRange,\n\t\n\t\t\tgetCenterPoint: function() {\n\t\t\t\tvar vm = this._view;\n\t\t\t\treturn {\n\t\t\t\t\tx: vm.x,\n\t\t\t\t\ty: vm.y\n\t\t\t\t};\n\t\t\t},\n\t\t\tgetArea: function() {\n\t\t\t\treturn Math.PI * Math.pow(this._view.radius, 2);\n\t\t\t},\n\t\t\ttooltipPosition: function() {\n\t\t\t\tvar vm = this._view;\n\t\t\t\treturn {\n\t\t\t\t\tx: vm.x,\n\t\t\t\t\ty: vm.y,\n\t\t\t\t\tpadding: vm.radius + vm.borderWidth\n\t\t\t\t};\n\t\t\t},\n\t\t\tdraw: function(chartArea) {\n\t\t\t\tvar vm = this._view;\n\t\t\t\tvar model = this._model;\n\t\t\t\tvar ctx = this._chart.ctx;\n\t\t\t\tvar pointStyle = vm.pointStyle;\n\t\t\t\tvar radius = vm.radius;\n\t\t\t\tvar x = vm.x;\n\t\t\t\tvar y = vm.y;\n\t\t\t\tvar color = Chart.helpers.color;\n\t\t\t\tvar errMargin = 1.01; // 1.01 is margin for Accumulated error. (Especially Edge, IE.)\n\t\t\t\tvar ratio = 0;\n\t\n\t\t\t\tif (vm.skip) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tctx.strokeStyle = vm.borderColor || defaultColor;\n\t\t\t\tctx.lineWidth = helpers.getValueOrDefault(vm.borderWidth, globalOpts.elements.point.borderWidth);\n\t\t\t\tctx.fillStyle = vm.backgroundColor || defaultColor;\n\t\n\t\t\t\t// Cliping for Points.\n\t\t\t\t// going out from inner charArea?\n\t\t\t\tif ((chartArea !== undefined) && ((model.x < chartArea.left) || (chartArea.right*errMargin < model.x) || (model.y < chartArea.top) || (chartArea.bottom*errMargin < model.y))) {\n\t\t\t\t\t// Point fade out\n\t\t\t\t\tif (model.x < chartArea.left) {\n\t\t\t\t\t\tratio = (x - model.x) / (chartArea.left - model.x);\n\t\t\t\t\t} else if (chartArea.right*errMargin < model.x) {\n\t\t\t\t\t\tratio = (model.x - x) / (model.x - chartArea.right);\n\t\t\t\t\t} else if (model.y < chartArea.top) {\n\t\t\t\t\t\tratio = (y - model.y) / (chartArea.top - model.y);\n\t\t\t\t\t} else if (chartArea.bottom*errMargin < model.y) {\n\t\t\t\t\t\tratio = (model.y - y) / (model.y - chartArea.bottom);\n\t\t\t\t\t}\n\t\t\t\t\tratio = Math.round(ratio*100) / 100;\n\t\t\t\t\tctx.strokeStyle = color(ctx.strokeStyle).alpha(ratio).rgbString();\n\t\t\t\t\tctx.fillStyle = color(ctx.fillStyle).alpha(ratio).rgbString();\n\t\t\t\t}\n\t\n\t\t\t\tChart.canvasHelpers.drawPoint(ctx, pointStyle, radius, x, y);\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 608:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar globalOpts = Chart.defaults.global;\n\t\n\t\tglobalOpts.elements.rectangle = {\n\t\t\tbackgroundColor: globalOpts.defaultColor,\n\t\t\tborderWidth: 0,\n\t\t\tborderColor: globalOpts.defaultColor,\n\t\t\tborderSkipped: 'bottom'\n\t\t};\n\t\n\t\tfunction isVertical(bar) {\n\t\t\treturn bar._view.width !== undefined;\n\t\t}\n\t\n\t\t/**\n\t\t * Helper function to get the bounds of the bar regardless of the orientation\n\t\t * @private\n\t\t * @param bar {Chart.Element.Rectangle} the bar\n\t\t * @return {Bounds} bounds of the bar\n\t\t */\n\t\tfunction getBarBounds(bar) {\n\t\t\tvar vm = bar._view;\n\t\t\tvar x1, x2, y1, y2;\n\t\n\t\t\tif (isVertical(bar)) {\n\t\t\t\t// vertical\n\t\t\t\tvar halfWidth = vm.width / 2;\n\t\t\t\tx1 = vm.x - halfWidth;\n\t\t\t\tx2 = vm.x + halfWidth;\n\t\t\t\ty1 = Math.min(vm.y, vm.base);\n\t\t\t\ty2 = Math.max(vm.y, vm.base);\n\t\t\t} else {\n\t\t\t\t// horizontal bar\n\t\t\t\tvar halfHeight = vm.height / 2;\n\t\t\t\tx1 = Math.min(vm.x, vm.base);\n\t\t\t\tx2 = Math.max(vm.x, vm.base);\n\t\t\t\ty1 = vm.y - halfHeight;\n\t\t\t\ty2 = vm.y + halfHeight;\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tleft: x1,\n\t\t\t\ttop: y1,\n\t\t\t\tright: x2,\n\t\t\t\tbottom: y2\n\t\t\t};\n\t\t}\n\t\n\t\tChart.elements.Rectangle = Chart.Element.extend({\n\t\t\tdraw: function() {\n\t\t\t\tvar ctx = this._chart.ctx;\n\t\t\t\tvar vm = this._view;\n\t\t\t\tvar left, right, top, bottom, signX, signY, borderSkipped;\n\t\t\t\tvar borderWidth = vm.borderWidth;\n\t\n\t\t\t\tif (!vm.horizontal) {\n\t\t\t\t\t// bar\n\t\t\t\t\tleft = vm.x - vm.width / 2;\n\t\t\t\t\tright = vm.x + vm.width / 2;\n\t\t\t\t\ttop = vm.y;\n\t\t\t\t\tbottom = vm.base;\n\t\t\t\t\tsignX = 1;\n\t\t\t\t\tsignY = bottom > top? 1: -1;\n\t\t\t\t\tborderSkipped = vm.borderSkipped || 'bottom';\n\t\t\t\t} else {\n\t\t\t\t\t// horizontal bar\n\t\t\t\t\tleft = vm.base;\n\t\t\t\t\tright = vm.x;\n\t\t\t\t\ttop = vm.y - vm.height / 2;\n\t\t\t\t\tbottom = vm.y + vm.height / 2;\n\t\t\t\t\tsignX = right > left? 1: -1;\n\t\t\t\t\tsignY = 1;\n\t\t\t\t\tborderSkipped = vm.borderSkipped || 'left';\n\t\t\t\t}\n\t\n\t\t\t\t// Canvas doesn't allow us to stroke inside the width so we can\n\t\t\t\t// adjust the sizes to fit if we're setting a stroke on the line\n\t\t\t\tif (borderWidth) {\n\t\t\t\t\t// borderWidth shold be less than bar width and bar height.\n\t\t\t\t\tvar barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\n\t\t\t\t\tborderWidth = borderWidth > barSize? barSize: borderWidth;\n\t\t\t\t\tvar halfStroke = borderWidth / 2;\n\t\t\t\t\t// Adjust borderWidth when bar top position is near vm.base(zero).\n\t\t\t\t\tvar borderLeft = left + (borderSkipped !== 'left'? halfStroke * signX: 0);\n\t\t\t\t\tvar borderRight = right + (borderSkipped !== 'right'? -halfStroke * signX: 0);\n\t\t\t\t\tvar borderTop = top + (borderSkipped !== 'top'? halfStroke * signY: 0);\n\t\t\t\t\tvar borderBottom = bottom + (borderSkipped !== 'bottom'? -halfStroke * signY: 0);\n\t\t\t\t\t// not become a vertical line?\n\t\t\t\t\tif (borderLeft !== borderRight) {\n\t\t\t\t\t\ttop = borderTop;\n\t\t\t\t\t\tbottom = borderBottom;\n\t\t\t\t\t}\n\t\t\t\t\t// not become a horizontal line?\n\t\t\t\t\tif (borderTop !== borderBottom) {\n\t\t\t\t\t\tleft = borderLeft;\n\t\t\t\t\t\tright = borderRight;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.fillStyle = vm.backgroundColor;\n\t\t\t\tctx.strokeStyle = vm.borderColor;\n\t\t\t\tctx.lineWidth = borderWidth;\n\t\n\t\t\t\t// Corner points, from bottom-left to bottom-right clockwise\n\t\t\t\t// | 1 2 |\n\t\t\t\t// | 0 3 |\n\t\t\t\tvar corners = [\n\t\t\t\t\t[left, bottom],\n\t\t\t\t\t[left, top],\n\t\t\t\t\t[right, top],\n\t\t\t\t\t[right, bottom]\n\t\t\t\t];\n\t\n\t\t\t\t// Find first (starting) corner with fallback to 'bottom'\n\t\t\t\tvar borders = ['bottom', 'left', 'top', 'right'];\n\t\t\t\tvar startCorner = borders.indexOf(borderSkipped, 0);\n\t\t\t\tif (startCorner === -1) {\n\t\t\t\t\tstartCorner = 0;\n\t\t\t\t}\n\t\n\t\t\t\tfunction cornerAt(index) {\n\t\t\t\t\treturn corners[(startCorner + index) % 4];\n\t\t\t\t}\n\t\n\t\t\t\t// Draw rectangle from 'startCorner'\n\t\t\t\tvar corner = cornerAt(0);\n\t\t\t\tctx.moveTo(corner[0], corner[1]);\n\t\n\t\t\t\tfor (var i = 1; i < 4; i++) {\n\t\t\t\t\tcorner = cornerAt(i);\n\t\t\t\t\tctx.lineTo(corner[0], corner[1]);\n\t\t\t\t}\n\t\n\t\t\t\tctx.fill();\n\t\t\t\tif (borderWidth) {\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t},\n\t\t\theight: function() {\n\t\t\t\tvar vm = this._view;\n\t\t\t\treturn vm.base - vm.y;\n\t\t\t},\n\t\t\tinRange: function(mouseX, mouseY) {\n\t\t\t\tvar inRange = false;\n\t\n\t\t\t\tif (this._view) {\n\t\t\t\t\tvar bounds = getBarBounds(this);\n\t\t\t\t\tinRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;\n\t\t\t\t}\n\t\n\t\t\t\treturn inRange;\n\t\t\t},\n\t\t\tinLabelRange: function(mouseX, mouseY) {\n\t\t\t\tvar me = this;\n\t\t\t\tif (!me._view) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\tvar inRange = false;\n\t\t\t\tvar bounds = getBarBounds(me);\n\t\n\t\t\t\tif (isVertical(me)) {\n\t\t\t\t\tinRange = mouseX >= bounds.left && mouseX <= bounds.right;\n\t\t\t\t} else {\n\t\t\t\t\tinRange = mouseY >= bounds.top && mouseY <= bounds.bottom;\n\t\t\t\t}\n\t\n\t\t\t\treturn inRange;\n\t\t\t},\n\t\t\tinXRange: function(mouseX) {\n\t\t\t\tvar bounds = getBarBounds(this);\n\t\t\t\treturn mouseX >= bounds.left && mouseX <= bounds.right;\n\t\t\t},\n\t\t\tinYRange: function(mouseY) {\n\t\t\t\tvar bounds = getBarBounds(this);\n\t\t\t\treturn mouseY >= bounds.top && mouseY <= bounds.bottom;\n\t\t\t},\n\t\t\tgetCenterPoint: function() {\n\t\t\t\tvar vm = this._view;\n\t\t\t\tvar x, y;\n\t\t\t\tif (isVertical(this)) {\n\t\t\t\t\tx = vm.x;\n\t\t\t\t\ty = (vm.y + vm.base) / 2;\n\t\t\t\t} else {\n\t\t\t\t\tx = (vm.x + vm.base) / 2;\n\t\t\t\t\ty = vm.y;\n\t\t\t\t}\n\t\n\t\t\t\treturn {x: x, y: y};\n\t\t\t},\n\t\t\tgetArea: function() {\n\t\t\t\tvar vm = this._view;\n\t\t\t\treturn vm.width * Math.abs(vm.y - vm.base);\n\t\t\t},\n\t\t\ttooltipPosition: function() {\n\t\t\t\tvar vm = this._view;\n\t\t\t\treturn {\n\t\t\t\t\tx: vm.x,\n\t\t\t\t\ty: vm.y\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\n\t};\n\n\n/***/ },\n\n/***/ 609:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t// Chart.Platform implementation for targeting a web browser\n\tmodule.exports = function(Chart) {\n\t\tvar helpers = Chart.helpers;\n\t\n\t\t// DOM event types -> Chart.js event types.\n\t\t// Note: only events with different types are mapped.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/Events\n\t\tvar eventTypeMap = {\n\t\t\t// Touch events\n\t\t\ttouchstart: 'mousedown',\n\t\t\ttouchmove: 'mousemove',\n\t\t\ttouchend: 'mouseup',\n\t\n\t\t\t// Pointer events\n\t\t\tpointerenter: 'mouseenter',\n\t\t\tpointerdown: 'mousedown',\n\t\t\tpointermove: 'mousemove',\n\t\t\tpointerup: 'mouseup',\n\t\t\tpointerleave: 'mouseout',\n\t\t\tpointerout: 'mouseout'\n\t\t};\n\t\n\t\t/**\n\t\t * The \"used\" size is the final value of a dimension property after all calculations have\n\t\t * been performed. This method uses the computed style of `element` but returns undefined\n\t\t * if the computed style is not expressed in pixels. That can happen in some cases where\n\t\t * `element` has a size relative to its parent and this last one is not yet displayed,\n\t\t * for example because of `display: none` on a parent node.\n\t\t * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n\t\t * @returns {Number} Size in pixels or undefined if unknown.\n\t\t */\n\t\tfunction readUsedSize(element, property) {\n\t\t\tvar value = helpers.getStyle(element, property);\n\t\t\tvar matches = value && value.match(/(\\d+)px/);\n\t\t\treturn matches? Number(matches[1]) : undefined;\n\t\t}\n\t\n\t\t/**\n\t\t * Initializes the canvas style and render size without modifying the canvas display size,\n\t\t * since responsiveness is handled by the controller.resize() method. The config is used\n\t\t * to determine the aspect ratio to apply in case no explicit height has been specified.\n\t\t */\n\t\tfunction initCanvas(canvas, config) {\n\t\t\tvar style = canvas.style;\n\t\n\t\t\t// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n\t\t\t// returns null or '' if no explicit value has been set to the canvas attribute.\n\t\t\tvar renderHeight = canvas.getAttribute('height');\n\t\t\tvar renderWidth = canvas.getAttribute('width');\n\t\n\t\t\t// Chart.js modifies some canvas values that we want to restore on destroy\n\t\t\tcanvas._chartjs = {\n\t\t\t\tinitial: {\n\t\t\t\t\theight: renderHeight,\n\t\t\t\t\twidth: renderWidth,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tdisplay: style.display,\n\t\t\t\t\t\theight: style.height,\n\t\t\t\t\t\twidth: style.width\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\t// Force canvas to display as block to avoid extra space caused by inline\n\t\t\t// elements, which would interfere with the responsive resize process.\n\t\t\t// https://github.com/chartjs/Chart.js/issues/2538\n\t\t\tstyle.display = style.display || 'block';\n\t\n\t\t\tif (renderWidth === null || renderWidth === '') {\n\t\t\t\tvar displayWidth = readUsedSize(canvas, 'width');\n\t\t\t\tif (displayWidth !== undefined) {\n\t\t\t\t\tcanvas.width = displayWidth;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (renderHeight === null || renderHeight === '') {\n\t\t\t\tif (canvas.style.height === '') {\n\t\t\t\t\t// If no explicit render height and style height, let's apply the aspect ratio,\n\t\t\t\t\t// which one can be specified by the user but also by charts as default option\n\t\t\t\t\t// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n\t\t\t\t\tcanvas.height = canvas.width / (config.options.aspectRatio || 2);\n\t\t\t\t} else {\n\t\t\t\t\tvar displayHeight = readUsedSize(canvas, 'height');\n\t\t\t\t\tif (displayWidth !== undefined) {\n\t\t\t\t\t\tcanvas.height = displayHeight;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn canvas;\n\t\t}\n\t\n\t\tfunction createEvent(type, chart, x, y, native) {\n\t\t\treturn {\n\t\t\t\ttype: type,\n\t\t\t\tchart: chart,\n\t\t\t\tnative: native || null,\n\t\t\t\tx: x !== undefined? x : null,\n\t\t\t\ty: y !== undefined? y : null,\n\t\t\t};\n\t\t}\n\t\n\t\tfunction fromNativeEvent(event, chart) {\n\t\t\tvar type = eventTypeMap[event.type] || event.type;\n\t\t\tvar pos = helpers.getRelativePosition(event, chart);\n\t\t\treturn createEvent(type, chart, pos.x, pos.y, event);\n\t\t}\n\t\n\t\tfunction createResizer(handler) {\n\t\t\tvar iframe = document.createElement('iframe');\n\t\t\tiframe.className = 'chartjs-hidden-iframe';\n\t\t\tiframe.style.cssText =\n\t\t\t\t'display:block;'+\n\t\t\t\t'overflow:hidden;'+\n\t\t\t\t'border:0;'+\n\t\t\t\t'margin:0;'+\n\t\t\t\t'top:0;'+\n\t\t\t\t'left:0;'+\n\t\t\t\t'bottom:0;'+\n\t\t\t\t'right:0;'+\n\t\t\t\t'height:100%;'+\n\t\t\t\t'width:100%;'+\n\t\t\t\t'position:absolute;'+\n\t\t\t\t'pointer-events:none;'+\n\t\t\t\t'z-index:-1;';\n\t\n\t\t\t// Prevent the iframe to gain focus on tab.\n\t\t\t// https://github.com/chartjs/Chart.js/issues/3090\n\t\t\tiframe.tabIndex = -1;\n\t\n\t\t\t// If the iframe is re-attached to the DOM, the resize listener is removed because the\n\t\t\t// content is reloaded, so make sure to install the handler after the iframe is loaded.\n\t\t\t// https://github.com/chartjs/Chart.js/issues/3521\n\t\t\thelpers.addEvent(iframe, 'load', function() {\n\t\t\t\thelpers.addEvent(iframe.contentWindow || iframe, 'resize', handler);\n\t\n\t\t\t\t// The iframe size might have changed while loading, which can also\n\t\t\t\t// happen if the size has been changed while detached from the DOM.\n\t\t\t\thandler();\n\t\t\t});\n\t\n\t\t\treturn iframe;\n\t\t}\n\t\n\t\tfunction addResizeListener(node, listener, chart) {\n\t\t\tvar stub = node._chartjs = {\n\t\t\t\tticking: false\n\t\t\t};\n\t\n\t\t\t// Throttle the callback notification until the next animation frame.\n\t\t\tvar notify = function() {\n\t\t\t\tif (!stub.ticking) {\n\t\t\t\t\tstub.ticking = true;\n\t\t\t\t\thelpers.requestAnimFrame.call(window, function() {\n\t\t\t\t\t\tif (stub.resizer) {\n\t\t\t\t\t\t\tstub.ticking = false;\n\t\t\t\t\t\t\treturn listener(createEvent('resize', chart));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\t// Let's keep track of this added iframe and thus avoid DOM query when removing it.\n\t\t\tstub.resizer = createResizer(notify);\n\t\n\t\t\tnode.insertBefore(stub.resizer, node.firstChild);\n\t\t}\n\t\n\t\tfunction removeResizeListener(node) {\n\t\t\tif (!node || !node._chartjs) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tvar resizer = node._chartjs.resizer;\n\t\t\tif (resizer) {\n\t\t\t\tresizer.parentNode.removeChild(resizer);\n\t\t\t\tnode._chartjs.resizer = null;\n\t\t\t}\n\t\n\t\t\tdelete node._chartjs;\n\t\t}\n\t\n\t\treturn {\n\t\t\tacquireContext: function(item, config) {\n\t\t\t\tif (typeof item === 'string') {\n\t\t\t\t\titem = document.getElementById(item);\n\t\t\t\t} else if (item.length) {\n\t\t\t\t\t// Support for array based queries (such as jQuery)\n\t\t\t\t\titem = item[0];\n\t\t\t\t}\n\t\n\t\t\t\tif (item && item.canvas) {\n\t\t\t\t\t// Support for any object associated to a canvas (including a context2d)\n\t\t\t\t\titem = item.canvas;\n\t\t\t\t}\n\t\n\t\t\t\tif (item instanceof HTMLCanvasElement) {\n\t\t\t\t\t// To prevent canvas fingerprinting, some add-ons undefine the getContext\n\t\t\t\t\t// method, for example: https://github.com/kkapsner/CanvasBlocker\n\t\t\t\t\t// https://github.com/chartjs/Chart.js/issues/2807\n\t\t\t\t\tvar context = item.getContext && item.getContext('2d');\n\t\t\t\t\tif (context instanceof CanvasRenderingContext2D) {\n\t\t\t\t\t\tinitCanvas(item, config);\n\t\t\t\t\t\treturn context;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn null;\n\t\t\t},\n\t\n\t\t\treleaseContext: function(context) {\n\t\t\t\tvar canvas = context.canvas;\n\t\t\t\tif (!canvas._chartjs) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tvar initial = canvas._chartjs.initial;\n\t\t\t\t['height', 'width'].forEach(function(prop) {\n\t\t\t\t\tvar value = initial[prop];\n\t\t\t\t\tif (value === undefined || value === null) {\n\t\t\t\t\t\tcanvas.removeAttribute(prop);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcanvas.setAttribute(prop, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\thelpers.each(initial.style || {}, function(value, key) {\n\t\t\t\t\tcanvas.style[key] = value;\n\t\t\t\t});\n\t\n\t\t\t\t// The canvas render size might have been changed (and thus the state stack discarded),\n\t\t\t\t// we can't use save() and restore() to restore the initial state. So make sure that at\n\t\t\t\t// least the canvas context is reset to the default state by setting the canvas width.\n\t\t\t\t// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n\t\t\t\tcanvas.width = canvas.width;\n\t\n\t\t\t\tdelete canvas._chartjs;\n\t\t\t},\n\t\n\t\t\taddEventListener: function(chart, type, listener) {\n\t\t\t\tvar canvas = chart.chart.canvas;\n\t\t\t\tif (type === 'resize') {\n\t\t\t\t\t// Note: the resize event is not supported on all browsers.\n\t\t\t\t\taddResizeListener(canvas.parentNode, listener, chart.chart);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tvar stub = listener._chartjs || (listener._chartjs = {});\n\t\t\t\tvar proxies = stub.proxies || (stub.proxies = {});\n\t\t\t\tvar proxy = proxies[chart.id + '_' + type] = function(event) {\n\t\t\t\t\tlistener(fromNativeEvent(event, chart.chart));\n\t\t\t\t};\n\t\n\t\t\t\thelpers.addEvent(canvas, type, proxy);\n\t\t\t},\n\t\n\t\t\tremoveEventListener: function(chart, type, listener) {\n\t\t\t\tvar canvas = chart.chart.canvas;\n\t\t\t\tif (type === 'resize') {\n\t\t\t\t\t// Note: the resize event is not supported on all browsers.\n\t\t\t\t\tremoveResizeListener(canvas.parentNode, listener);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tvar stub = listener._chartjs || {};\n\t\t\t\tvar proxies = stub.proxies || {};\n\t\t\t\tvar proxy = proxies[chart.id + '_' + type];\n\t\t\t\tif (!proxy) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\thelpers.removeEvent(canvas, type, proxy);\n\t\t\t}\n\t\t};\n\t};\n\n\n/***/ },\n\n/***/ 610:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t// By default, select the browser (DOM) platform.\n\t// @TODO Make possible to select another platform at build time.\n\tvar implementation = __webpack_require__(609);\n\t\n\tmodule.exports = function(Chart) {\n\t\t/**\n\t\t * @namespace Chart.platform\n\t\t * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n\t\t * @since 2.4.0\n\t\t */\n\t\tChart.platform = {\n\t\t\t/**\n\t\t\t * Called at chart construction time, returns a context2d instance implementing\n\t\t\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t\t\t * @param {*} item - The native item from which to acquire context (platform specific)\n\t\t\t * @param {Object} options - The chart options\n\t\t\t * @returns {CanvasRenderingContext2D} context2d instance\n\t\t\t */\n\t\t\tacquireContext: function() {},\n\t\n\t\t\t/**\n\t\t\t * Called at chart destruction time, releases any resources associated to the context\n\t\t\t * previously returned by the acquireContext() method.\n\t\t\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t\t\t * @returns {Boolean} true if the method succeeded, else false\n\t\t\t */\n\t\t\treleaseContext: function() {},\n\t\n\t\t\t/**\n\t\t\t * Registers the specified listener on the given chart.\n\t\t\t * @param {Chart} chart - Chart from which to listen for event\n\t\t\t * @param {String} type - The ({@link IEvent}) type to listen for\n\t\t\t * @param {Function} listener - Receives a notification (an object that implements\n\t\t\t * the {@link IEvent} interface) when an event of the specified type occurs.\n\t\t\t */\n\t\t\taddEventListener: function() {},\n\t\n\t\t\t/**\n\t\t\t * Removes the specified listener previously registered with addEventListener.\n\t\t\t * @param {Chart} chart -Chart from which to remove the listener\n\t\t\t * @param {String} type - The ({@link IEvent}) type to remove\n\t\t\t * @param {Function} listener - The listener function to remove from the event target.\n\t\t\t */\n\t\t\tremoveEventListener: function() {}\n\t\t};\n\t\n\t\t/**\n\t\t * @interface IPlatform\n\t\t * Allows abstracting platform dependencies away from the chart\n\t\t * @borrows Chart.platform.acquireContext as acquireContext\n\t\t * @borrows Chart.platform.releaseContext as releaseContext\n\t\t * @borrows Chart.platform.addEventListener as addEventListener\n\t\t * @borrows Chart.platform.removeEventListener as removeEventListener\n\t\t */\n\t\n\t\t/**\n\t\t * @interface IEvent\n\t\t * @prop {String} type - The event type name, possible values are:\n\t\t * 'contextmenu', 'mouseenter', 'mousedown', 'mousemove', 'mouseup', 'mouseout',\n\t\t * 'click', 'dblclick', 'keydown', 'keypress', 'keyup' and 'resize'\n\t\t * @prop {*} native - The original native event (null for emulated events, e.g. 'resize')\n\t\t * @prop {Number} x - The mouse x position, relative to the canvas (null for incompatible events)\n\t\t * @prop {Number} y - The mouse y position, relative to the canvas (null for incompatible events)\n\t\t */\n\t\n\t\tChart.helpers.extend(Chart.platform, implementation(Chart));\n\t};\n\n\n/***/ },\n\n/***/ 611:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\t// Default config for a category scale\n\t\tvar defaultConfig = {\n\t\t\tposition: 'bottom'\n\t\t};\n\t\n\t\tvar DatasetScale = Chart.Scale.extend({\n\t\t\t/**\n\t\t\t* Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those\n\t\t\t* else fall back to data.labels\n\t\t\t* @private\n\t\t\t*/\n\t\t\tgetLabels: function() {\n\t\t\t\tvar data = this.chart.data;\n\t\t\t\treturn (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;\n\t\t\t},\n\t\t\t// Implement this so that\n\t\t\tdetermineDataLimits: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar labels = me.getLabels();\n\t\t\t\tme.minIndex = 0;\n\t\t\t\tme.maxIndex = labels.length - 1;\n\t\t\t\tvar findIndex;\n\t\n\t\t\t\tif (me.options.ticks.min !== undefined) {\n\t\t\t\t\t// user specified min value\n\t\t\t\t\tfindIndex = helpers.indexOf(labels, me.options.ticks.min);\n\t\t\t\t\tme.minIndex = findIndex !== -1 ? findIndex : me.minIndex;\n\t\t\t\t}\n\t\n\t\t\t\tif (me.options.ticks.max !== undefined) {\n\t\t\t\t\t// user specified max value\n\t\t\t\t\tfindIndex = helpers.indexOf(labels, me.options.ticks.max);\n\t\t\t\t\tme.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;\n\t\t\t\t}\n\t\n\t\t\t\tme.min = labels[me.minIndex];\n\t\t\t\tme.max = labels[me.maxIndex];\n\t\t\t},\n\t\n\t\t\tbuildTicks: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar labels = me.getLabels();\n\t\t\t\t// If we are viewing some subset of labels, slice the original array\n\t\t\t\tme.ticks = (me.minIndex === 0 && me.maxIndex === labels.length - 1) ? labels : labels.slice(me.minIndex, me.maxIndex + 1);\n\t\t\t},\n\t\n\t\t\tgetLabelForIndex: function(index, datasetIndex) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar data = me.chart.data;\n\t\t\t\tvar isHorizontal = me.isHorizontal();\n\t\n\t\t\t\tif (data.yLabels && !isHorizontal) {\n\t\t\t\t\treturn me.getRightValue(data.datasets[datasetIndex].data[index]);\n\t\t\t\t}\n\t\t\t\treturn me.ticks[index - me.minIndex];\n\t\t\t},\n\t\n\t\t\t// Used to get data value locations.  Value can either be an index or a numerical value\n\t\t\tgetPixelForValue: function(value, index, datasetIndex, includeOffset) {\n\t\t\t\tvar me = this;\n\t\t\t\t// 1 is added because we need the length but we have the indexes\n\t\t\t\tvar offsetAmt = Math.max((me.maxIndex + 1 - me.minIndex - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);\n\t\n\t\t\t\tif (value !== undefined && isNaN(index)) {\n\t\t\t\t\tvar labels = me.getLabels();\n\t\t\t\t\tvar idx = labels.indexOf(value);\n\t\t\t\t\tindex = idx !== -1 ? idx : index;\n\t\t\t\t}\n\t\n\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\tvar valueWidth = me.width / offsetAmt;\n\t\t\t\t\tvar widthOffset = (valueWidth * (index - me.minIndex));\n\t\n\t\t\t\t\tif (me.options.gridLines.offsetGridLines && includeOffset || me.maxIndex === me.minIndex && includeOffset) {\n\t\t\t\t\t\twidthOffset += (valueWidth / 2);\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn me.left + Math.round(widthOffset);\n\t\t\t\t}\n\t\t\t\tvar valueHeight = me.height / offsetAmt;\n\t\t\t\tvar heightOffset = (valueHeight * (index - me.minIndex));\n\t\n\t\t\t\tif (me.options.gridLines.offsetGridLines && includeOffset) {\n\t\t\t\t\theightOffset += (valueHeight / 2);\n\t\t\t\t}\n\t\n\t\t\t\treturn me.top + Math.round(heightOffset);\n\t\t\t},\n\t\t\tgetPixelForTick: function(index, includeOffset) {\n\t\t\t\treturn this.getPixelForValue(this.ticks[index], index + this.minIndex, null, includeOffset);\n\t\t\t},\n\t\t\tgetValueForPixel: function(pixel) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar value;\n\t\t\t\tvar offsetAmt = Math.max((me.ticks.length - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);\n\t\t\t\tvar horz = me.isHorizontal();\n\t\t\t\tvar valueDimension = (horz ? me.width : me.height) / offsetAmt;\n\t\n\t\t\t\tpixel -= horz ? me.left : me.top;\n\t\n\t\t\t\tif (me.options.gridLines.offsetGridLines) {\n\t\t\t\t\tpixel -= (valueDimension / 2);\n\t\t\t\t}\n\t\n\t\t\t\tif (pixel <= 0) {\n\t\t\t\t\tvalue = 0;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = Math.round(pixel / valueDimension);\n\t\t\t\t}\n\t\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\tgetBasePixel: function() {\n\t\t\t\treturn this.bottom;\n\t\t\t}\n\t\t});\n\t\n\t\tChart.scaleService.registerScaleType('category', DatasetScale, defaultConfig);\n\t\n\t};\n\n\n/***/ },\n\n/***/ 612:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tvar defaultConfig = {\n\t\t\tposition: 'left',\n\t\t\tticks: {\n\t\t\t\tcallback: Chart.Ticks.formatters.linear\n\t\t\t}\n\t\t};\n\t\n\t\tvar LinearScale = Chart.LinearScaleBase.extend({\n\t\t\tdetermineDataLimits: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar opts = me.options;\n\t\t\t\tvar chart = me.chart;\n\t\t\t\tvar data = chart.data;\n\t\t\t\tvar datasets = data.datasets;\n\t\t\t\tvar isHorizontal = me.isHorizontal();\n\t\n\t\t\t\tfunction IDMatches(meta) {\n\t\t\t\t\treturn isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n\t\t\t\t}\n\t\n\t\t\t\t// First Calculate the range\n\t\t\t\tme.min = null;\n\t\t\t\tme.max = null;\n\t\n\t\t\t\tvar hasStacks = opts.stacked;\n\t\t\t\tif (hasStacks === undefined) {\n\t\t\t\t\thelpers.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\t\t\tif (hasStacks) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&\n\t\t\t\t\t\t\tmeta.stack !== undefined) {\n\t\t\t\t\t\t\thasStacks = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\tif (opts.stacked || hasStacks) {\n\t\t\t\t\tvar valuesPerStack = {};\n\t\n\t\t\t\t\thelpers.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\t\tvar key = [\n\t\t\t\t\t\t\tmeta.type,\n\t\t\t\t\t\t\t// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n\t\t\t\t\t\t\t((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),\n\t\t\t\t\t\t\tmeta.stack\n\t\t\t\t\t\t].join('.');\n\t\n\t\t\t\t\t\tif (valuesPerStack[key] === undefined) {\n\t\t\t\t\t\t\tvaluesPerStack[key] = {\n\t\t\t\t\t\t\t\tpositiveValues: [],\n\t\t\t\t\t\t\t\tnegativeValues: []\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Store these per type\n\t\t\t\t\t\tvar positiveValues = valuesPerStack[key].positiveValues;\n\t\t\t\t\t\tvar negativeValues = valuesPerStack[key].negativeValues;\n\t\n\t\t\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\t\t\thelpers.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tpositiveValues[index] = positiveValues[index] || 0;\n\t\t\t\t\t\t\t\tnegativeValues[index] = negativeValues[index] || 0;\n\t\n\t\t\t\t\t\t\t\tif (opts.relativePoints) {\n\t\t\t\t\t\t\t\t\tpositiveValues[index] = 100;\n\t\t\t\t\t\t\t\t} else if (value < 0) {\n\t\t\t\t\t\t\t\t\tnegativeValues[index] += value;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tpositiveValues[index] += value;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\n\t\t\t\t\thelpers.each(valuesPerStack, function(valuesForType) {\n\t\t\t\t\t\tvar values = valuesForType.positiveValues.concat(valuesForType.negativeValues);\n\t\t\t\t\t\tvar minVal = helpers.min(values);\n\t\t\t\t\t\tvar maxVal = helpers.max(values);\n\t\t\t\t\t\tme.min = me.min === null ? minVal : Math.min(me.min, minVal);\n\t\t\t\t\t\tme.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n\t\t\t\t\t});\n\t\n\t\t\t\t} else {\n\t\t\t\t\thelpers.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\t\t\thelpers.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tif (me.min === null) {\n\t\t\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t\t\t} else if (value < me.min) {\n\t\t\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tif (me.max === null) {\n\t\t\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t\t\t} else if (value > me.max) {\n\t\t\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\t// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\t\t\t\tthis.handleTickRangeOptions();\n\t\t\t},\n\t\t\tgetTickLimit: function() {\n\t\t\t\tvar maxTicks;\n\t\t\t\tvar me = this;\n\t\t\t\tvar tickOpts = me.options.ticks;\n\t\n\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\tmaxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));\n\t\t\t\t} else {\n\t\t\t\t\t// The factor of 2 used to scale the font size has been experimentally determined.\n\t\t\t\t\tvar tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, Chart.defaults.global.defaultFontSize);\n\t\t\t\t\tmaxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));\n\t\t\t\t}\n\t\n\t\t\t\treturn maxTicks;\n\t\t\t},\n\t\t\t// Called after the ticks are built. We need\n\t\t\thandleDirectionalChanges: function() {\n\t\t\t\tif (!this.isHorizontal()) {\n\t\t\t\t\t// We are in a vertical orientation. The top value is the highest. So reverse the array\n\t\t\t\t\tthis.ticks.reverse();\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetLabelForIndex: function(index, datasetIndex) {\n\t\t\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t\t\t},\n\t\t\t// Utils\n\t\t\tgetPixelForValue: function(value) {\n\t\t\t\t// This must be called after fit has been run so that\n\t\t\t\t// this.left, this.top, this.right, and this.bottom have been defined\n\t\t\t\tvar me = this;\n\t\t\t\tvar start = me.start;\n\t\n\t\t\t\tvar rightValue = +me.getRightValue(value);\n\t\t\t\tvar pixel;\n\t\t\t\tvar range = me.end - start;\n\t\n\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\tpixel = me.left + (me.width / range * (rightValue - start));\n\t\t\t\t\treturn Math.round(pixel);\n\t\t\t\t}\n\t\n\t\t\t\tpixel = me.bottom - (me.height / range * (rightValue - start));\n\t\t\t\treturn Math.round(pixel);\n\t\t\t},\n\t\t\tgetValueForPixel: function(pixel) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar isHorizontal = me.isHorizontal();\n\t\t\t\tvar innerDimension = isHorizontal ? me.width : me.height;\n\t\t\t\tvar offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;\n\t\t\t\treturn me.start + ((me.end - me.start) * offset);\n\t\t\t},\n\t\t\tgetPixelForTick: function(index) {\n\t\t\t\treturn this.getPixelForValue(this.ticksAsNumbers[index]);\n\t\t\t}\n\t\t});\n\t\tChart.scaleService.registerScaleType('linear', LinearScale, defaultConfig);\n\t\n\t};\n\n\n/***/ },\n\n/***/ 613:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers,\n\t\t\tnoop = helpers.noop;\n\t\n\t\tChart.LinearScaleBase = Chart.Scale.extend({\n\t\t\thandleTickRangeOptions: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar opts = me.options;\n\t\t\t\tvar tickOpts = opts.ticks;\n\t\n\t\t\t\t// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,\n\t\t\t\t// do nothing since that would make the chart weird. If the user really wants a weird chart\n\t\t\t\t// axis, they can manually override it\n\t\t\t\tif (tickOpts.beginAtZero) {\n\t\t\t\t\tvar minSign = helpers.sign(me.min);\n\t\t\t\t\tvar maxSign = helpers.sign(me.max);\n\t\n\t\t\t\t\tif (minSign < 0 && maxSign < 0) {\n\t\t\t\t\t\t// move the top up to 0\n\t\t\t\t\t\tme.max = 0;\n\t\t\t\t\t} else if (minSign > 0 && maxSign > 0) {\n\t\t\t\t\t\t// move the bottom down to 0\n\t\t\t\t\t\tme.min = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tif (tickOpts.min !== undefined) {\n\t\t\t\t\tme.min = tickOpts.min;\n\t\t\t\t} else if (tickOpts.suggestedMin !== undefined) {\n\t\t\t\t\tme.min = Math.min(me.min, tickOpts.suggestedMin);\n\t\t\t\t}\n\t\n\t\t\t\tif (tickOpts.max !== undefined) {\n\t\t\t\t\tme.max = tickOpts.max;\n\t\t\t\t} else if (tickOpts.suggestedMax !== undefined) {\n\t\t\t\t\tme.max = Math.max(me.max, tickOpts.suggestedMax);\n\t\t\t\t}\n\t\n\t\t\t\tif (me.min === me.max) {\n\t\t\t\t\tme.max++;\n\t\n\t\t\t\t\tif (!tickOpts.beginAtZero) {\n\t\t\t\t\t\tme.min--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetTickLimit: noop,\n\t\t\thandleDirectionalChanges: noop,\n\t\n\t\t\tbuildTicks: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar opts = me.options;\n\t\t\t\tvar tickOpts = opts.ticks;\n\t\n\t\t\t\t// Figure out what the max number of ticks we can support it is based on the size of\n\t\t\t\t// the axis area. For now, we say that the minimum tick spacing in pixels must be 50\n\t\t\t\t// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n\t\t\t\t// the graph. Make sure we always have at least 2 ticks\n\t\t\t\tvar maxTicks = me.getTickLimit();\n\t\t\t\tmaxTicks = Math.max(2, maxTicks);\n\t\n\t\t\t\tvar numericGeneratorOptions = {\n\t\t\t\t\tmaxTicks: maxTicks,\n\t\t\t\t\tmin: tickOpts.min,\n\t\t\t\t\tmax: tickOpts.max,\n\t\t\t\t\tstepSize: helpers.getValueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)\n\t\t\t\t};\n\t\t\t\tvar ticks = me.ticks = Chart.Ticks.generators.linear(numericGeneratorOptions, me);\n\t\n\t\t\t\tme.handleDirectionalChanges();\n\t\n\t\t\t\t// At this point, we need to update our max and min given the tick values since we have expanded the\n\t\t\t\t// range of the scale\n\t\t\t\tme.max = helpers.max(ticks);\n\t\t\t\tme.min = helpers.min(ticks);\n\t\n\t\t\t\tif (tickOpts.reverse) {\n\t\t\t\t\tticks.reverse();\n\t\n\t\t\t\t\tme.start = me.max;\n\t\t\t\t\tme.end = me.min;\n\t\t\t\t} else {\n\t\t\t\t\tme.start = me.min;\n\t\t\t\t\tme.end = me.max;\n\t\t\t\t}\n\t\t\t},\n\t\t\tconvertTicksToLabels: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tme.ticksAsNumbers = me.ticks.slice();\n\t\t\t\tme.zeroLineIndex = me.ticks.indexOf(0);\n\t\n\t\t\t\tChart.Scale.prototype.convertTicksToLabels.call(me);\n\t\t\t}\n\t\t});\n\t};\n\n\n/***/ },\n\n/***/ 614:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\n\t\tvar defaultConfig = {\n\t\t\tposition: 'left',\n\t\n\t\t\t// label settings\n\t\t\tticks: {\n\t\t\t\tcallback: Chart.Ticks.formatters.logarithmic\n\t\t\t}\n\t\t};\n\t\n\t\tvar LogarithmicScale = Chart.Scale.extend({\n\t\t\tdetermineDataLimits: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar opts = me.options;\n\t\t\t\tvar tickOpts = opts.ticks;\n\t\t\t\tvar chart = me.chart;\n\t\t\t\tvar data = chart.data;\n\t\t\t\tvar datasets = data.datasets;\n\t\t\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\t\t\t\tvar isHorizontal = me.isHorizontal();\n\t\t\t\tfunction IDMatches(meta) {\n\t\t\t\t\treturn isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n\t\t\t\t}\n\t\n\t\t\t\t// Calculate Range\n\t\t\t\tme.min = null;\n\t\t\t\tme.max = null;\n\t\t\t\tme.minNotZero = null;\n\t\n\t\t\t\tvar hasStacks = opts.stacked;\n\t\t\t\tif (hasStacks === undefined) {\n\t\t\t\t\thelpers.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\t\t\tif (hasStacks) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&\n\t\t\t\t\t\t\tmeta.stack !== undefined) {\n\t\t\t\t\t\t\thasStacks = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\tif (opts.stacked || hasStacks) {\n\t\t\t\t\tvar valuesPerStack = {};\n\t\n\t\t\t\t\thelpers.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\t\tvar key = [\n\t\t\t\t\t\t\tmeta.type,\n\t\t\t\t\t\t\t// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n\t\t\t\t\t\t\t((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),\n\t\t\t\t\t\t\tmeta.stack\n\t\t\t\t\t\t].join('.');\n\t\n\t\t\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\t\t\tif (valuesPerStack[key] === undefined) {\n\t\t\t\t\t\t\t\tvaluesPerStack[key] = [];\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\thelpers.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\t\t\tvar values = valuesPerStack[key];\n\t\t\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tvalues[index] = values[index] || 0;\n\t\n\t\t\t\t\t\t\t\tif (opts.relativePoints) {\n\t\t\t\t\t\t\t\t\tvalues[index] = 100;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// Don't need to split positive and negative since the log scale can't handle a 0 crossing\n\t\t\t\t\t\t\t\t\tvalues[index] += value;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\n\t\t\t\t\thelpers.each(valuesPerStack, function(valuesForType) {\n\t\t\t\t\t\tvar minVal = helpers.min(valuesForType);\n\t\t\t\t\t\tvar maxVal = helpers.max(valuesForType);\n\t\t\t\t\t\tme.min = me.min === null ? minVal : Math.min(me.min, minVal);\n\t\t\t\t\t\tme.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n\t\t\t\t\t});\n\t\n\t\t\t\t} else {\n\t\t\t\t\thelpers.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\t\t\thelpers.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tif (me.min === null) {\n\t\t\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t\t\t} else if (value < me.min) {\n\t\t\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tif (me.max === null) {\n\t\t\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t\t\t} else if (value > me.max) {\n\t\t\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tif (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {\n\t\t\t\t\t\t\t\t\tme.minNotZero = value;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\tme.min = getValueOrDefault(tickOpts.min, me.min);\n\t\t\t\tme.max = getValueOrDefault(tickOpts.max, me.max);\n\t\n\t\t\t\tif (me.min === me.max) {\n\t\t\t\t\tif (me.min !== 0 && me.min !== null) {\n\t\t\t\t\t\tme.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);\n\t\t\t\t\t\tme.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tme.min = 1;\n\t\t\t\t\t\tme.max = 10;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tbuildTicks: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar opts = me.options;\n\t\t\t\tvar tickOpts = opts.ticks;\n\t\n\t\t\t\tvar generationOptions = {\n\t\t\t\t\tmin: tickOpts.min,\n\t\t\t\t\tmax: tickOpts.max\n\t\t\t\t};\n\t\t\t\tvar ticks = me.ticks = Chart.Ticks.generators.logarithmic(generationOptions, me);\n\t\n\t\t\t\tif (!me.isHorizontal()) {\n\t\t\t\t\t// We are in a vertical orientation. The top value is the highest. So reverse the array\n\t\t\t\t\tticks.reverse();\n\t\t\t\t}\n\t\n\t\t\t\t// At this point, we need to update our max and min given the tick values since we have expanded the\n\t\t\t\t// range of the scale\n\t\t\t\tme.max = helpers.max(ticks);\n\t\t\t\tme.min = helpers.min(ticks);\n\t\n\t\t\t\tif (tickOpts.reverse) {\n\t\t\t\t\tticks.reverse();\n\t\n\t\t\t\t\tme.start = me.max;\n\t\t\t\t\tme.end = me.min;\n\t\t\t\t} else {\n\t\t\t\t\tme.start = me.min;\n\t\t\t\t\tme.end = me.max;\n\t\t\t\t}\n\t\t\t},\n\t\t\tconvertTicksToLabels: function() {\n\t\t\t\tthis.tickValues = this.ticks.slice();\n\t\n\t\t\t\tChart.Scale.prototype.convertTicksToLabels.call(this);\n\t\t\t},\n\t\t\t// Get the correct tooltip label\n\t\t\tgetLabelForIndex: function(index, datasetIndex) {\n\t\t\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t\t\t},\n\t\t\tgetPixelForTick: function(index) {\n\t\t\t\treturn this.getPixelForValue(this.tickValues[index]);\n\t\t\t},\n\t\t\tgetPixelForValue: function(value) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar innerDimension;\n\t\t\t\tvar pixel;\n\t\n\t\t\t\tvar start = me.start;\n\t\t\t\tvar newVal = +me.getRightValue(value);\n\t\t\t\tvar range;\n\t\t\t\tvar opts = me.options;\n\t\t\t\tvar tickOpts = opts.ticks;\n\t\n\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\trange = helpers.log10(me.end) - helpers.log10(start); // todo: if start === 0\n\t\t\t\t\tif (newVal === 0) {\n\t\t\t\t\t\tpixel = me.left;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinnerDimension = me.width;\n\t\t\t\t\t\tpixel = me.left + (innerDimension / range * (helpers.log10(newVal) - helpers.log10(start)));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Bottom - top since pixels increase downward on a screen\n\t\t\t\t\tinnerDimension = me.height;\n\t\t\t\t\tif (start === 0 && !tickOpts.reverse) {\n\t\t\t\t\t\trange = helpers.log10(me.end) - helpers.log10(me.minNotZero);\n\t\t\t\t\t\tif (newVal === start) {\n\t\t\t\t\t\t\tpixel = me.bottom;\n\t\t\t\t\t\t} else if (newVal === me.minNotZero) {\n\t\t\t\t\t\t\tpixel = me.bottom - innerDimension * 0.02;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpixel = me.bottom - innerDimension * 0.02 - (innerDimension * 0.98/ range * (helpers.log10(newVal)-helpers.log10(me.minNotZero)));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (me.end === 0 && tickOpts.reverse) {\n\t\t\t\t\t\trange = helpers.log10(me.start) - helpers.log10(me.minNotZero);\n\t\t\t\t\t\tif (newVal === me.end) {\n\t\t\t\t\t\t\tpixel = me.top;\n\t\t\t\t\t\t} else if (newVal === me.minNotZero) {\n\t\t\t\t\t\t\tpixel = me.top + innerDimension * 0.02;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpixel = me.top + innerDimension * 0.02 + (innerDimension * 0.98/ range * (helpers.log10(newVal)-helpers.log10(me.minNotZero)));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\trange = helpers.log10(me.end) - helpers.log10(start);\n\t\t\t\t\t\tinnerDimension = me.height;\n\t\t\t\t\t\tpixel = me.bottom - (innerDimension / range * (helpers.log10(newVal) - helpers.log10(start)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn pixel;\n\t\t\t},\n\t\t\tgetValueForPixel: function(pixel) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar range = helpers.log10(me.end) - helpers.log10(me.start);\n\t\t\t\tvar value, innerDimension;\n\t\n\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\tinnerDimension = me.width;\n\t\t\t\t\tvalue = me.start * Math.pow(10, (pixel - me.left) * range / innerDimension);\n\t\t\t\t} else {  // todo: if start === 0\n\t\t\t\t\tinnerDimension = me.height;\n\t\t\t\t\tvalue = Math.pow(10, (me.bottom - pixel) * range / innerDimension) / me.start;\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t});\n\t\tChart.scaleService.registerScaleType('logarithmic', LogarithmicScale, defaultConfig);\n\t\n\t};\n\n\n/***/ },\n\n/***/ 615:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\tvar globalDefaults = Chart.defaults.global;\n\t\n\t\tvar defaultConfig = {\n\t\t\tdisplay: true,\n\t\n\t\t\t// Boolean - Whether to animate scaling the chart from the centre\n\t\t\tanimate: true,\n\t\t\tlineArc: false,\n\t\t\tposition: 'chartArea',\n\t\n\t\t\tangleLines: {\n\t\t\t\tdisplay: true,\n\t\t\t\tcolor: 'rgba(0, 0, 0, 0.1)',\n\t\t\t\tlineWidth: 1\n\t\t\t},\n\t\n\t\t\t// label settings\n\t\t\tticks: {\n\t\t\t\t// Boolean - Show a backdrop to the scale label\n\t\t\t\tshowLabelBackdrop: true,\n\t\n\t\t\t\t// String - The colour of the label backdrop\n\t\t\t\tbackdropColor: 'rgba(255,255,255,0.75)',\n\t\n\t\t\t\t// Number - The backdrop padding above & below the label in pixels\n\t\t\t\tbackdropPaddingY: 2,\n\t\n\t\t\t\t// Number - The backdrop padding to the side of the label in pixels\n\t\t\t\tbackdropPaddingX: 2,\n\t\n\t\t\t\tcallback: Chart.Ticks.formatters.linear\n\t\t\t},\n\t\n\t\t\tpointLabels: {\n\t\t\t\t// Number - Point label font size in pixels\n\t\t\t\tfontSize: 10,\n\t\n\t\t\t\t// Function - Used to convert point labels\n\t\t\t\tcallback: function(label) {\n\t\t\t\t\treturn label;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\tfunction getValueCount(scale) {\n\t\t\treturn !scale.options.lineArc ? scale.chart.data.labels.length : 0;\n\t\t}\n\t\n\t\tfunction getPointLabelFontOptions(scale) {\n\t\t\tvar pointLabelOptions = scale.options.pointLabels;\n\t\t\tvar fontSize = helpers.getValueOrDefault(pointLabelOptions.fontSize, globalDefaults.defaultFontSize);\n\t\t\tvar fontStyle = helpers.getValueOrDefault(pointLabelOptions.fontStyle, globalDefaults.defaultFontStyle);\n\t\t\tvar fontFamily = helpers.getValueOrDefault(pointLabelOptions.fontFamily, globalDefaults.defaultFontFamily);\n\t\t\tvar font = helpers.fontString(fontSize, fontStyle, fontFamily);\n\t\n\t\t\treturn {\n\t\t\t\tsize: fontSize,\n\t\t\t\tstyle: fontStyle,\n\t\t\t\tfamily: fontFamily,\n\t\t\t\tfont: font\n\t\t\t};\n\t\t}\n\t\n\t\tfunction measureLabelSize(ctx, fontSize, label) {\n\t\t\tif (helpers.isArray(label)) {\n\t\t\t\treturn {\n\t\t\t\t\tw: helpers.longestText(ctx, ctx.font, label),\n\t\t\t\t\th: (label.length * fontSize) + ((label.length - 1) * 1.5 * fontSize)\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tw: ctx.measureText(label).width,\n\t\t\t\th: fontSize\n\t\t\t};\n\t\t}\n\t\n\t\tfunction determineLimits(angle, pos, size, min, max) {\n\t\t\tif (angle === min || angle === max) {\n\t\t\t\treturn {\n\t\t\t\t\tstart: pos - (size / 2),\n\t\t\t\t\tend: pos + (size / 2)\n\t\t\t\t};\n\t\t\t} else if (angle < min || angle > max) {\n\t\t\t\treturn {\n\t\t\t\t\tstart: pos - size - 5,\n\t\t\t\t\tend: pos\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tstart: pos,\n\t\t\t\tend: pos + size + 5\n\t\t\t};\n\t\t}\n\t\n\t\t/**\n\t\t * Helper function to fit a radial linear scale with point labels\n\t\t */\n\t\tfunction fitWithPointLabels(scale) {\n\t\t\t/*\n\t\t\t * Right, this is really confusing and there is a lot of maths going on here\n\t\t\t * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n\t\t\t *\n\t\t\t * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n\t\t\t *\n\t\t\t * Solution:\n\t\t\t *\n\t\t\t * We assume the radius of the polygon is half the size of the canvas at first\n\t\t\t * at each index we check if the text overlaps.\n\t\t\t *\n\t\t\t * Where it does, we store that angle and that index.\n\t\t\t *\n\t\t\t * After finding the largest index and angle we calculate how much we need to remove\n\t\t\t * from the shape radius to move the point inwards by that x.\n\t\t\t *\n\t\t\t * We average the left and right distances to get the maximum shape radius that can fit in the box\n\t\t\t * along with labels.\n\t\t\t *\n\t\t\t * Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n\t\t\t * on each side, removing that from the size, halving it and adding the left x protrusion width.\n\t\t\t *\n\t\t\t * This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n\t\t\t * and position it in the most space efficient manner\n\t\t\t *\n\t\t\t * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\t\t\t */\n\t\n\t\t\tvar plFont = getPointLabelFontOptions(scale);\n\t\n\t\t\t// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n\t\t\t// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\t\t\tvar largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);\n\t\t\tvar furthestLimits = {\n\t\t\t\tl: scale.width,\n\t\t\t\tr: 0,\n\t\t\t\tt: scale.height,\n\t\t\t\tb: 0\n\t\t\t};\n\t\t\tvar furthestAngles = {};\n\t\t\tvar i;\n\t\t\tvar textSize;\n\t\t\tvar pointPosition;\n\t\n\t\t\tscale.ctx.font = plFont.font;\n\t\t\tscale._pointLabelSizes = [];\n\t\n\t\t\tvar valueCount = getValueCount(scale);\n\t\t\tfor (i = 0; i < valueCount; i++) {\n\t\t\t\tpointPosition = scale.getPointPosition(i, largestPossibleRadius);\n\t\t\t\ttextSize = measureLabelSize(scale.ctx, plFont.size, scale.pointLabels[i] || '');\n\t\t\t\tscale._pointLabelSizes[i] = textSize;\n\t\n\t\t\t\t// Add quarter circle to make degree 0 mean top of circle\n\t\t\t\tvar angleRadians = scale.getIndexAngle(i);\n\t\t\t\tvar angle = helpers.toDegrees(angleRadians) % 360;\n\t\t\t\tvar hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n\t\t\t\tvar vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n\t\n\t\t\t\tif (hLimits.start < furthestLimits.l) {\n\t\t\t\t\tfurthestLimits.l = hLimits.start;\n\t\t\t\t\tfurthestAngles.l = angleRadians;\n\t\t\t\t}\n\t\n\t\t\t\tif (hLimits.end > furthestLimits.r) {\n\t\t\t\t\tfurthestLimits.r = hLimits.end;\n\t\t\t\t\tfurthestAngles.r = angleRadians;\n\t\t\t\t}\n\t\n\t\t\t\tif (vLimits.start < furthestLimits.t) {\n\t\t\t\t\tfurthestLimits.t = vLimits.start;\n\t\t\t\t\tfurthestAngles.t = angleRadians;\n\t\t\t\t}\n\t\n\t\t\t\tif (vLimits.end > furthestLimits.b) {\n\t\t\t\t\tfurthestLimits.b = vLimits.end;\n\t\t\t\t\tfurthestAngles.b = angleRadians;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tscale.setReductions(largestPossibleRadius, furthestLimits, furthestAngles);\n\t\t}\n\t\n\t\t/**\n\t\t * Helper function to fit a radial linear scale with no point labels\n\t\t */\n\t\tfunction fit(scale) {\n\t\t\tvar largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);\n\t\t\tscale.drawingArea = Math.round(largestPossibleRadius);\n\t\t\tscale.setCenterPoint(0, 0, 0, 0);\n\t\t}\n\t\n\t\tfunction getTextAlignForAngle(angle) {\n\t\t\tif (angle === 0 || angle === 180) {\n\t\t\t\treturn 'center';\n\t\t\t} else if (angle < 180) {\n\t\t\t\treturn 'left';\n\t\t\t}\n\t\n\t\t\treturn 'right';\n\t\t}\n\t\n\t\tfunction fillText(ctx, text, position, fontSize) {\n\t\t\tif (helpers.isArray(text)) {\n\t\t\t\tvar y = position.y;\n\t\t\t\tvar spacing = 1.5 * fontSize;\n\t\n\t\t\t\tfor (var i = 0; i < text.length; ++i) {\n\t\t\t\t\tctx.fillText(text[i], position.x, y);\n\t\t\t\t\ty+= spacing;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tctx.fillText(text, position.x, position.y);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction adjustPointPositionForLabelHeight(angle, textSize, position) {\n\t\t\tif (angle === 90 || angle === 270) {\n\t\t\t\tposition.y -= (textSize.h / 2);\n\t\t\t} else if (angle > 270 || angle < 90) {\n\t\t\t\tposition.y -= textSize.h;\n\t\t\t}\n\t\t}\n\t\n\t\tfunction drawPointLabels(scale) {\n\t\t\tvar ctx = scale.ctx;\n\t\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\t\t\tvar opts = scale.options;\n\t\t\tvar angleLineOpts = opts.angleLines;\n\t\t\tvar pointLabelOpts = opts.pointLabels;\n\t\n\t\t\tctx.lineWidth = angleLineOpts.lineWidth;\n\t\t\tctx.strokeStyle = angleLineOpts.color;\n\t\n\t\t\tvar outerDistance = scale.getDistanceFromCenterForValue(opts.reverse ? scale.min : scale.max);\n\t\n\t\t\t// Point Label Font\n\t\t\tvar plFont = getPointLabelFontOptions(scale);\n\t\n\t\t\tctx.textBaseline = 'top';\n\t\n\t\t\tfor (var i = getValueCount(scale) - 1; i >= 0; i--) {\n\t\t\t\tif (angleLineOpts.display) {\n\t\t\t\t\tvar outerPosition = scale.getPointPosition(i, outerDistance);\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(scale.xCenter, scale.yCenter);\n\t\t\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t\tctx.closePath();\n\t\t\t\t}\n\t\t\t\t// Extra 3px out for some label spacing\n\t\t\t\tvar pointLabelPosition = scale.getPointPosition(i, outerDistance + 5);\n\t\n\t\t\t\t// Keep this in loop since we may support array properties here\n\t\t\t\tvar pointLabelFontColor = getValueOrDefault(pointLabelOpts.fontColor, globalDefaults.defaultFontColor);\n\t\t\t\tctx.font = plFont.font;\n\t\t\t\tctx.fillStyle = pointLabelFontColor;\n\t\n\t\t\t\tvar angleRadians = scale.getIndexAngle(i);\n\t\t\t\tvar angle = helpers.toDegrees(angleRadians);\n\t\t\t\tctx.textAlign = getTextAlignForAngle(angle);\n\t\t\t\tadjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);\n\t\t\t\tfillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.size);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction drawRadiusLine(scale, gridLineOpts, radius, index) {\n\t\t\tvar ctx = scale.ctx;\n\t\t\tctx.strokeStyle = helpers.getValueAtIndexOrDefault(gridLineOpts.color, index - 1);\n\t\t\tctx.lineWidth = helpers.getValueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);\n\t\n\t\t\tif (scale.options.lineArc) {\n\t\t\t\t// Draw circular arcs between the points\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.stroke();\n\t\t\t} else {\n\t\t\t\t// Draw straight lines connecting each index\n\t\t\t\tvar valueCount = getValueCount(scale);\n\t\n\t\t\t\tif (valueCount === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tctx.beginPath();\n\t\t\t\tvar pointPosition = scale.getPointPosition(0, radius);\n\t\t\t\tctx.moveTo(pointPosition.x, pointPosition.y);\n\t\n\t\t\t\tfor (var i = 1; i < valueCount; i++) {\n\t\t\t\t\tpointPosition = scale.getPointPosition(i, radius);\n\t\t\t\t\tctx.lineTo(pointPosition.x, pointPosition.y);\n\t\t\t\t}\n\t\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t}\n\t\n\t\tfunction numberOrZero(param) {\n\t\t\treturn helpers.isNumber(param) ? param : 0;\n\t\t}\n\t\n\t\tvar LinearRadialScale = Chart.LinearScaleBase.extend({\n\t\t\tsetDimensions: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar opts = me.options;\n\t\t\t\tvar tickOpts = opts.ticks;\n\t\t\t\t// Set the unconstrained dimension before label rotation\n\t\t\t\tme.width = me.maxWidth;\n\t\t\t\tme.height = me.maxHeight;\n\t\t\t\tme.xCenter = Math.round(me.width / 2);\n\t\t\t\tme.yCenter = Math.round(me.height / 2);\n\t\n\t\t\t\tvar minSize = helpers.min([me.height, me.width]);\n\t\t\t\tvar tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);\n\t\t\t\tme.drawingArea = opts.display ? (minSize / 2) - (tickFontSize / 2 + tickOpts.backdropPaddingY) : (minSize / 2);\n\t\t\t},\n\t\t\tdetermineDataLimits: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar chart = me.chart;\n\t\t\t\tvar min = Number.POSITIVE_INFINITY;\n\t\t\t\tvar max = Number.NEGATIVE_INFINITY;\n\t\n\t\t\t\thelpers.each(chart.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tif (chart.isDatasetVisible(datasetIndex)) {\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\n\t\t\t\t\t\thelpers.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tmin = Math.min(value, min);\n\t\t\t\t\t\t\tmax = Math.max(value, max);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\tme.min = (min === Number.POSITIVE_INFINITY ? 0 : min);\n\t\t\t\tme.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);\n\t\n\t\t\t\t// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\t\t\t\tme.handleTickRangeOptions();\n\t\t\t},\n\t\t\tgetTickLimit: function() {\n\t\t\t\tvar tickOpts = this.options.ticks;\n\t\t\t\tvar tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);\n\t\t\t\treturn Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));\n\t\t\t},\n\t\t\tconvertTicksToLabels: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tChart.LinearScaleBase.prototype.convertTicksToLabels.call(me);\n\t\n\t\t\t\t// Point labels\n\t\t\t\tme.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);\n\t\t\t},\n\t\t\tgetLabelForIndex: function(index, datasetIndex) {\n\t\t\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t\t\t},\n\t\t\tfit: function() {\n\t\t\t\tif (this.options.lineArc) {\n\t\t\t\t\tfit(this);\n\t\t\t\t} else {\n\t\t\t\t\tfitWithPointLabels(this);\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * Set radius reductions and determine new radius and center point\n\t\t\t * @private\n\t\t\t */\n\t\t\tsetReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n\t\t\t\tvar radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n\t\t\t\tvar radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n\t\t\t\tvar radiusReductionBottom = -Math.max(furthestLimits.b - me.height, 0) / Math.cos(furthestAngles.b);\n\t\n\t\t\t\tradiusReductionLeft = numberOrZero(radiusReductionLeft);\n\t\t\t\tradiusReductionRight = numberOrZero(radiusReductionRight);\n\t\t\t\tradiusReductionTop = numberOrZero(radiusReductionTop);\n\t\t\t\tradiusReductionBottom = numberOrZero(radiusReductionBottom);\n\t\n\t\t\t\tme.drawingArea = Math.min(\n\t\t\t\t\tMath.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),\n\t\t\t\t\tMath.round(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));\n\t\t\t\tme.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n\t\t\t},\n\t\t\tsetCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar maxRight = me.width - rightMovement - me.drawingArea,\n\t\t\t\t\tmaxLeft = leftMovement + me.drawingArea,\n\t\t\t\t\tmaxTop = topMovement + me.drawingArea,\n\t\t\t\t\tmaxBottom = me.height - bottomMovement - me.drawingArea;\n\t\n\t\t\t\tme.xCenter = Math.round(((maxLeft + maxRight) / 2) + me.left);\n\t\t\t\tme.yCenter = Math.round(((maxTop + maxBottom) / 2) + me.top);\n\t\t\t},\n\t\n\t\t\tgetIndexAngle: function(index) {\n\t\t\t\tvar angleMultiplier = (Math.PI * 2) / getValueCount(this);\n\t\t\t\tvar startAngle = this.chart.options && this.chart.options.startAngle ?\n\t\t\t\t\tthis.chart.options.startAngle :\n\t\t\t\t\t0;\n\t\n\t\t\t\tvar startAngleRadians = startAngle * Math.PI * 2 / 360;\n\t\n\t\t\t\t// Start from the top instead of right, so remove a quarter of the circle\n\t\t\t\treturn index * angleMultiplier + startAngleRadians;\n\t\t\t},\n\t\t\tgetDistanceFromCenterForValue: function(value) {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn 0; // null always in center\n\t\t\t\t}\n\t\n\t\t\t\t// Take into account half font size + the yPadding of the top value\n\t\t\t\tvar scalingFactor = me.drawingArea / (me.max - me.min);\n\t\t\t\tif (me.options.reverse) {\n\t\t\t\t\treturn (me.max - value) * scalingFactor;\n\t\t\t\t}\n\t\t\t\treturn (value - me.min) * scalingFactor;\n\t\t\t},\n\t\t\tgetPointPosition: function(index, distanceFromCenter) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar thisAngle = me.getIndexAngle(index) - (Math.PI / 2);\n\t\t\t\treturn {\n\t\t\t\t\tx: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,\n\t\t\t\t\ty: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter\n\t\t\t\t};\n\t\t\t},\n\t\t\tgetPointPositionForValue: function(index, value) {\n\t\t\t\treturn this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n\t\t\t},\n\t\n\t\t\tgetBasePosition: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar min = me.min;\n\t\t\t\tvar max = me.max;\n\t\n\t\t\t\treturn me.getPointPositionForValue(0,\n\t\t\t\t\tme.beginAtZero? 0:\n\t\t\t\t\tmin < 0 && max < 0? max :\n\t\t\t\t\tmin > 0 && max > 0? min :\n\t\t\t\t\t0);\n\t\t\t},\n\t\n\t\t\tdraw: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tvar opts = me.options;\n\t\t\t\tvar gridLineOpts = opts.gridLines;\n\t\t\t\tvar tickOpts = opts.ticks;\n\t\t\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\t\n\t\t\t\tif (opts.display) {\n\t\t\t\t\tvar ctx = me.ctx;\n\t\n\t\t\t\t\t// Tick Font\n\t\t\t\t\tvar tickFontSize = getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);\n\t\t\t\t\tvar tickFontStyle = getValueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);\n\t\t\t\t\tvar tickFontFamily = getValueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);\n\t\t\t\t\tvar tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);\n\t\n\t\t\t\t\thelpers.each(me.ticks, function(label, index) {\n\t\t\t\t\t\t// Don't draw a centre value (if it is minimum)\n\t\t\t\t\t\tif (index > 0 || opts.reverse) {\n\t\t\t\t\t\t\tvar yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);\n\t\t\t\t\t\t\tvar yHeight = me.yCenter - yCenterOffset;\n\t\n\t\t\t\t\t\t\t// Draw circular lines around the scale\n\t\t\t\t\t\t\tif (gridLineOpts.display && index !== 0) {\n\t\t\t\t\t\t\t\tdrawRadiusLine(me, gridLineOpts, yCenterOffset, index);\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif (tickOpts.display) {\n\t\t\t\t\t\t\t\tvar tickFontColor = getValueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);\n\t\t\t\t\t\t\t\tctx.font = tickLabelFont;\n\t\n\t\t\t\t\t\t\t\tif (tickOpts.showLabelBackdrop) {\n\t\t\t\t\t\t\t\t\tvar labelWidth = ctx.measureText(label).width;\n\t\t\t\t\t\t\t\t\tctx.fillStyle = tickOpts.backdropColor;\n\t\t\t\t\t\t\t\t\tctx.fillRect(\n\t\t\t\t\t\t\t\t\t\tme.xCenter - labelWidth / 2 - tickOpts.backdropPaddingX,\n\t\t\t\t\t\t\t\t\t\tyHeight - tickFontSize / 2 - tickOpts.backdropPaddingY,\n\t\t\t\t\t\t\t\t\t\tlabelWidth + tickOpts.backdropPaddingX * 2,\n\t\t\t\t\t\t\t\t\t\ttickFontSize + tickOpts.backdropPaddingY * 2\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\t\t\t\tctx.fillStyle = tickFontColor;\n\t\t\t\t\t\t\t\tctx.fillText(label, me.xCenter, yHeight);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\n\t\t\t\t\tif (!opts.lineArc) {\n\t\t\t\t\t\tdrawPointLabels(me);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tChart.scaleService.registerScaleType('radialLinear', LinearRadialScale, defaultConfig);\n\t\n\t};\n\n\n/***/ },\n\n/***/ 616:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* global window: false */\n\t'use strict';\n\t\n\tvar moment = __webpack_require__(2);\n\tmoment = typeof(moment) === 'function' ? moment : window.moment;\n\t\n\tmodule.exports = function(Chart) {\n\t\n\t\tvar helpers = Chart.helpers;\n\t\tvar time = {\n\t\t\tunits: [{\n\t\t\t\tname: 'millisecond',\n\t\t\t\tsteps: [1, 2, 5, 10, 20, 50, 100, 250, 500]\n\t\t\t}, {\n\t\t\t\tname: 'second',\n\t\t\t\tsteps: [1, 2, 5, 10, 30]\n\t\t\t}, {\n\t\t\t\tname: 'minute',\n\t\t\t\tsteps: [1, 2, 5, 10, 30]\n\t\t\t}, {\n\t\t\t\tname: 'hour',\n\t\t\t\tsteps: [1, 2, 3, 6, 12]\n\t\t\t}, {\n\t\t\t\tname: 'day',\n\t\t\t\tsteps: [1, 2, 5]\n\t\t\t}, {\n\t\t\t\tname: 'week',\n\t\t\t\tmaxStep: 4\n\t\t\t}, {\n\t\t\t\tname: 'month',\n\t\t\t\tmaxStep: 3\n\t\t\t}, {\n\t\t\t\tname: 'quarter',\n\t\t\t\tmaxStep: 4\n\t\t\t}, {\n\t\t\t\tname: 'year',\n\t\t\t\tmaxStep: false\n\t\t\t}]\n\t\t};\n\t\n\t\tvar defaultConfig = {\n\t\t\tposition: 'bottom',\n\t\n\t\t\ttime: {\n\t\t\t\tparser: false, // false == a pattern string from http://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment\n\t\t\t\tformat: false, // DEPRECATED false == date objects, moment object, callback or a pattern string from http://momentjs.com/docs/#/parsing/string-format/\n\t\t\t\tunit: false, // false == automatic or override with week, month, year, etc.\n\t\t\t\tround: false, // none, or override with week, month, year, etc.\n\t\t\t\tdisplayFormat: false, // DEPRECATED\n\t\t\t\tisoWeekday: false, // override week start day - see http://momentjs.com/docs/#/get-set/iso-weekday/\n\t\t\t\tminUnit: 'millisecond',\n\t\n\t\t\t\t// defaults to unit's corresponding unitFormat below or override using pattern string from http://momentjs.com/docs/#/displaying/format/\n\t\t\t\tdisplayFormats: {\n\t\t\t\t\tmillisecond: 'h:mm:ss.SSS a', // 11:20:01.123 AM,\n\t\t\t\t\tsecond: 'h:mm:ss a', // 11:20:01 AM\n\t\t\t\t\tminute: 'h:mm:ss a', // 11:20:01 AM\n\t\t\t\t\thour: 'MMM D, hA', // Sept 4, 5PM\n\t\t\t\t\tday: 'll', // Sep 4 2015\n\t\t\t\t\tweek: 'll', // Week 46, or maybe \"[W]WW - YYYY\" ?\n\t\t\t\t\tmonth: 'MMM YYYY', // Sept 2015\n\t\t\t\t\tquarter: '[Q]Q - YYYY', // Q3\n\t\t\t\t\tyear: 'YYYY' // 2015\n\t\t\t\t}\n\t\t\t},\n\t\t\tticks: {\n\t\t\t\tautoSkip: false\n\t\t\t}\n\t\t};\n\t\n\t\tvar TimeScale = Chart.Scale.extend({\n\t\t\tinitialize: function() {\n\t\t\t\tif (!moment) {\n\t\t\t\t\tthrow new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');\n\t\t\t\t}\n\t\n\t\t\t\tChart.Scale.prototype.initialize.call(this);\n\t\t\t},\n\t\t\tgetLabelMoment: function(datasetIndex, index) {\n\t\t\t\tif (datasetIndex === null || index === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\n\t\t\t\tif (typeof this.labelMoments[datasetIndex] !== 'undefined') {\n\t\t\t\t\treturn this.labelMoments[datasetIndex][index];\n\t\t\t\t}\n\t\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\tgetLabelDiff: function(datasetIndex, index) {\n\t\t\t\tvar me = this;\n\t\t\t\tif (datasetIndex === null || index === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\n\t\t\t\tif (me.labelDiffs === undefined) {\n\t\t\t\t\tme.buildLabelDiffs();\n\t\t\t\t}\n\t\n\t\t\t\tif (typeof me.labelDiffs[datasetIndex] !== 'undefined') {\n\t\t\t\t\treturn me.labelDiffs[datasetIndex][index];\n\t\t\t\t}\n\t\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\tgetMomentStartOf: function(tick) {\n\t\t\t\tvar me = this;\n\t\t\t\tif (me.options.time.unit === 'week' && me.options.time.isoWeekday !== false) {\n\t\t\t\t\treturn tick.clone().startOf('isoWeek').isoWeekday(me.options.time.isoWeekday);\n\t\t\t\t}\n\t\t\t\treturn tick.clone().startOf(me.tickUnit);\n\t\t\t},\n\t\t\tdetermineDataLimits: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tme.labelMoments = [];\n\t\n\t\t\t\t// Only parse these once. If the dataset does not have data as x,y pairs, we will use\n\t\t\t\t// these\n\t\t\t\tvar scaleLabelMoments = [];\n\t\t\t\tif (me.chart.data.labels && me.chart.data.labels.length > 0) {\n\t\t\t\t\thelpers.each(me.chart.data.labels, function(label) {\n\t\t\t\t\t\tvar labelMoment = me.parseTime(label);\n\t\n\t\t\t\t\t\tif (labelMoment.isValid()) {\n\t\t\t\t\t\t\tif (me.options.time.round) {\n\t\t\t\t\t\t\t\tlabelMoment.startOf(me.options.time.round);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tscaleLabelMoments.push(labelMoment);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, me);\n\t\n\t\t\t\t\tme.firstTick = moment.min.call(me, scaleLabelMoments);\n\t\t\t\t\tme.lastTick = moment.max.call(me, scaleLabelMoments);\n\t\t\t\t} else {\n\t\t\t\t\tme.firstTick = null;\n\t\t\t\t\tme.lastTick = null;\n\t\t\t\t}\n\t\n\t\t\t\thelpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tvar momentsForDataset = [];\n\t\t\t\t\tvar datasetVisible = me.chart.isDatasetVisible(datasetIndex);\n\t\n\t\t\t\t\tif (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {\n\t\t\t\t\t\thelpers.each(dataset.data, function(value) {\n\t\t\t\t\t\t\tvar labelMoment = me.parseTime(me.getRightValue(value));\n\t\n\t\t\t\t\t\t\tif (labelMoment.isValid()) {\n\t\t\t\t\t\t\t\tif (me.options.time.round) {\n\t\t\t\t\t\t\t\t\tlabelMoment.startOf(me.options.time.round);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmomentsForDataset.push(labelMoment);\n\t\n\t\t\t\t\t\t\t\tif (datasetVisible) {\n\t\t\t\t\t\t\t\t\t// May have gone outside the scale ranges, make sure we keep the first and last ticks updated\n\t\t\t\t\t\t\t\t\tme.firstTick = me.firstTick !== null ? moment.min(me.firstTick, labelMoment) : labelMoment;\n\t\t\t\t\t\t\t\t\tme.lastTick = me.lastTick !== null ? moment.max(me.lastTick, labelMoment) : labelMoment;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, me);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// We have no labels. Use the ones from the scale\n\t\t\t\t\t\tmomentsForDataset = scaleLabelMoments;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tme.labelMoments.push(momentsForDataset);\n\t\t\t\t}, me);\n\t\n\t\t\t\t// Set these after we've done all the data\n\t\t\t\tif (me.options.time.min) {\n\t\t\t\t\tme.firstTick = me.parseTime(me.options.time.min);\n\t\t\t\t}\n\t\n\t\t\t\tif (me.options.time.max) {\n\t\t\t\t\tme.lastTick = me.parseTime(me.options.time.max);\n\t\t\t\t}\n\t\n\t\t\t\t// We will modify these, so clone for later\n\t\t\t\tme.firstTick = (me.firstTick || moment()).clone();\n\t\t\t\tme.lastTick = (me.lastTick || moment()).clone();\n\t\t\t},\n\t\t\tbuildLabelDiffs: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tme.labelDiffs = [];\n\t\t\t\tvar scaleLabelDiffs = [];\n\t\t\t\t// Parse common labels once\n\t\t\t\tif (me.chart.data.labels && me.chart.data.labels.length > 0) {\n\t\t\t\t\thelpers.each(me.chart.data.labels, function(label) {\n\t\t\t\t\t\tvar labelMoment = me.parseTime(label);\n\t\n\t\t\t\t\t\tif (labelMoment.isValid()) {\n\t\t\t\t\t\t\tif (me.options.time.round) {\n\t\t\t\t\t\t\t\tlabelMoment.startOf(me.options.time.round);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tscaleLabelDiffs.push(labelMoment.diff(me.firstTick, me.tickUnit, true));\n\t\t\t\t\t\t}\n\t\t\t\t\t}, me);\n\t\t\t\t}\n\t\n\t\t\t\thelpers.each(me.chart.data.datasets, function(dataset) {\n\t\t\t\t\tvar diffsForDataset = [];\n\t\n\t\t\t\t\tif (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {\n\t\t\t\t\t\thelpers.each(dataset.data, function(value) {\n\t\t\t\t\t\t\tvar labelMoment = me.parseTime(me.getRightValue(value));\n\t\n\t\t\t\t\t\t\tif (labelMoment.isValid()) {\n\t\t\t\t\t\t\t\tif (me.options.time.round) {\n\t\t\t\t\t\t\t\t\tlabelMoment.startOf(me.options.time.round);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdiffsForDataset.push(labelMoment.diff(me.firstTick, me.tickUnit, true));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, me);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// We have no labels. Use common ones\n\t\t\t\t\t\tdiffsForDataset = scaleLabelDiffs;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tme.labelDiffs.push(diffsForDataset);\n\t\t\t\t}, me);\n\t\t\t},\n\t\t\tbuildTicks: function() {\n\t\t\t\tvar me = this;\n\t\n\t\t\t\tme.ctx.save();\n\t\t\t\tvar tickFontSize = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);\n\t\t\t\tvar tickFontStyle = helpers.getValueOrDefault(me.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);\n\t\t\t\tvar tickFontFamily = helpers.getValueOrDefault(me.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);\n\t\t\t\tvar tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);\n\t\t\t\tme.ctx.font = tickLabelFont;\n\t\n\t\t\t\tme.ticks = [];\n\t\t\t\tme.unitScale = 1; // How much we scale the unit by, ie 2 means 2x unit per step\n\t\t\t\tme.scaleSizeInUnits = 0; // How large the scale is in the base unit (seconds, minutes, etc)\n\t\n\t\t\t\t// Set unit override if applicable\n\t\t\t\tif (me.options.time.unit) {\n\t\t\t\t\tme.tickUnit = me.options.time.unit || 'day';\n\t\t\t\t\tme.displayFormat = me.options.time.displayFormats[me.tickUnit];\n\t\t\t\t\tme.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);\n\t\t\t\t\tme.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, 1);\n\t\t\t\t} else {\n\t\t\t\t\t// Determine the smallest needed unit of the time\n\t\t\t\t\tvar innerWidth = me.isHorizontal() ? me.width : me.height;\n\t\n\t\t\t\t\t// Crude approximation of what the label length might be\n\t\t\t\t\tvar tempFirstLabel = me.tickFormatFunction(me.firstTick, 0, []);\n\t\t\t\t\tvar tickLabelWidth = me.ctx.measureText(tempFirstLabel).width;\n\t\t\t\t\tvar cosRotation = Math.cos(helpers.toRadians(me.options.ticks.maxRotation));\n\t\t\t\t\tvar sinRotation = Math.sin(helpers.toRadians(me.options.ticks.maxRotation));\n\t\t\t\t\ttickLabelWidth = (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation);\n\t\t\t\t\tvar labelCapacity = innerWidth / (tickLabelWidth);\n\t\n\t\t\t\t\t// Start as small as possible\n\t\t\t\t\tme.tickUnit = me.options.time.minUnit;\n\t\t\t\t\tme.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);\n\t\t\t\t\tme.displayFormat = me.options.time.displayFormats[me.tickUnit];\n\t\n\t\t\t\t\tvar unitDefinitionIndex = 0;\n\t\t\t\t\tvar unitDefinition = time.units[unitDefinitionIndex];\n\t\n\t\t\t\t\t// While we aren't ideal and we don't have units left\n\t\t\t\t\twhile (unitDefinitionIndex < time.units.length) {\n\t\t\t\t\t\t// Can we scale this unit. If `false` we can scale infinitely\n\t\t\t\t\t\tme.unitScale = 1;\n\t\n\t\t\t\t\t\tif (helpers.isArray(unitDefinition.steps) && Math.ceil(me.scaleSizeInUnits / labelCapacity) < helpers.max(unitDefinition.steps)) {\n\t\t\t\t\t\t\t// Use one of the predefined steps\n\t\t\t\t\t\t\tfor (var idx = 0; idx < unitDefinition.steps.length; ++idx) {\n\t\t\t\t\t\t\t\tif (unitDefinition.steps[idx] >= Math.ceil(me.scaleSizeInUnits / labelCapacity)) {\n\t\t\t\t\t\t\t\t\tme.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, unitDefinition.steps[idx]);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if ((unitDefinition.maxStep === false) || (Math.ceil(me.scaleSizeInUnits / labelCapacity) < unitDefinition.maxStep)) {\n\t\t\t\t\t\t\t// We have a max step. Scale this unit\n\t\t\t\t\t\t\tme.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, Math.ceil(me.scaleSizeInUnits / labelCapacity));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Move to the next unit up\n\t\t\t\t\t\t\t++unitDefinitionIndex;\n\t\t\t\t\t\t\tunitDefinition = time.units[unitDefinitionIndex];\n\t\n\t\t\t\t\t\t\tme.tickUnit = unitDefinition.name;\n\t\t\t\t\t\t\tvar leadingUnitBuffer = me.firstTick.diff(me.getMomentStartOf(me.firstTick), me.tickUnit, true);\n\t\t\t\t\t\t\tvar trailingUnitBuffer = me.getMomentStartOf(me.lastTick.clone().add(1, me.tickUnit)).diff(me.lastTick, me.tickUnit, true);\n\t\t\t\t\t\t\tme.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true) + leadingUnitBuffer + trailingUnitBuffer;\n\t\t\t\t\t\t\tme.displayFormat = me.options.time.displayFormats[unitDefinition.name];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tvar roundedStart;\n\t\n\t\t\t\t// Only round the first tick if we have no hard minimum\n\t\t\t\tif (!me.options.time.min) {\n\t\t\t\t\tme.firstTick = me.getMomentStartOf(me.firstTick);\n\t\t\t\t\troundedStart = me.firstTick;\n\t\t\t\t} else {\n\t\t\t\t\troundedStart = me.getMomentStartOf(me.firstTick);\n\t\t\t\t}\n\t\n\t\t\t\t// Only round the last tick if we have no hard maximum\n\t\t\t\tif (!me.options.time.max) {\n\t\t\t\t\tvar roundedEnd = me.getMomentStartOf(me.lastTick);\n\t\t\t\t\tvar delta = roundedEnd.diff(me.lastTick, me.tickUnit, true);\n\t\t\t\t\tif (delta < 0) {\n\t\t\t\t\t\t// Do not use end of because we need me to be in the next time unit\n\t\t\t\t\t\tme.lastTick = me.getMomentStartOf(me.lastTick.add(1, me.tickUnit));\n\t\t\t\t\t} else if (delta >= 0) {\n\t\t\t\t\t\tme.lastTick = roundedEnd;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tme.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);\n\t\t\t\t}\n\t\n\t\t\t\t// Tick displayFormat override\n\t\t\t\tif (me.options.time.displayFormat) {\n\t\t\t\t\tme.displayFormat = me.options.time.displayFormat;\n\t\t\t\t}\n\t\n\t\t\t\t// first tick. will have been rounded correctly if options.time.min is not specified\n\t\t\t\tme.ticks.push(me.firstTick.clone());\n\t\n\t\t\t\t// For every unit in between the first and last moment, create a moment and add it to the ticks tick\n\t\t\t\tfor (var i = me.unitScale; i <= me.scaleSizeInUnits; i += me.unitScale) {\n\t\t\t\t\tvar newTick = roundedStart.clone().add(i, me.tickUnit);\n\t\n\t\t\t\t\t// Are we greater than the max time\n\t\t\t\t\tif (me.options.time.max && newTick.diff(me.lastTick, me.tickUnit, true) >= 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tme.ticks.push(newTick);\n\t\t\t\t}\n\t\n\t\t\t\t// Always show the right tick\n\t\t\t\tvar diff = me.ticks[me.ticks.length - 1].diff(me.lastTick, me.tickUnit);\n\t\t\t\tif (diff !== 0 || me.scaleSizeInUnits === 0) {\n\t\t\t\t\t// this is a weird case. If the <max> option is the same as the end option, we can't just diff the times because the tick was created from the roundedStart\n\t\t\t\t\t// but the last tick was not rounded.\n\t\t\t\t\tif (me.options.time.max) {\n\t\t\t\t\t\tme.ticks.push(me.lastTick.clone());\n\t\t\t\t\t\tme.scaleSizeInUnits = me.lastTick.diff(me.ticks[0], me.tickUnit, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tme.ticks.push(me.lastTick.clone());\n\t\t\t\t\t\tme.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tme.ctx.restore();\n\t\n\t\t\t\t// Invalidate label diffs cache\n\t\t\t\tme.labelDiffs = undefined;\n\t\t\t},\n\t\t\t// Get tooltip label\n\t\t\tgetLabelForIndex: function(index, datasetIndex) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar label = me.chart.data.labels && index < me.chart.data.labels.length ? me.chart.data.labels[index] : '';\n\t\t\t\tvar value = me.chart.data.datasets[datasetIndex].data[index];\n\t\n\t\t\t\tif (value !== null && typeof value === 'object') {\n\t\t\t\t\tlabel = me.getRightValue(value);\n\t\t\t\t}\n\t\n\t\t\t\t// Format nicely\n\t\t\t\tif (me.options.time.tooltipFormat) {\n\t\t\t\t\tlabel = me.parseTime(label).format(me.options.time.tooltipFormat);\n\t\t\t\t}\n\t\n\t\t\t\treturn label;\n\t\t\t},\n\t\t\t// Function to format an individual tick mark\n\t\t\ttickFormatFunction: function(tick, index, ticks) {\n\t\t\t\tvar formattedTick = tick.format(this.displayFormat);\n\t\t\t\tvar tickOpts = this.options.ticks;\n\t\t\t\tvar callback = helpers.getValueOrDefault(tickOpts.callback, tickOpts.userCallback);\n\t\n\t\t\t\tif (callback) {\n\t\t\t\t\treturn callback(formattedTick, index, ticks);\n\t\t\t\t}\n\t\t\t\treturn formattedTick;\n\t\t\t},\n\t\t\tconvertTicksToLabels: function() {\n\t\t\t\tvar me = this;\n\t\t\t\tme.tickMoments = me.ticks;\n\t\t\t\tme.ticks = me.ticks.map(me.tickFormatFunction, me);\n\t\t\t},\n\t\t\tgetPixelForValue: function(value, index, datasetIndex) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar offset = null;\n\t\t\t\tif (index !== undefined && datasetIndex !== undefined) {\n\t\t\t\t\toffset = me.getLabelDiff(datasetIndex, index);\n\t\t\t\t}\n\t\n\t\t\t\tif (offset === null) {\n\t\t\t\t\tif (!value || !value.isValid) {\n\t\t\t\t\t\t// not already a moment object\n\t\t\t\t\t\tvalue = me.parseTime(me.getRightValue(value));\n\t\t\t\t\t}\n\t\t\t\t\tif (value && value.isValid && value.isValid()) {\n\t\t\t\t\t\toffset = value.diff(me.firstTick, me.tickUnit, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tif (offset !== null) {\n\t\t\t\t\tvar decimal = offset !== 0 ? offset / me.scaleSizeInUnits : offset;\n\t\n\t\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\t\tvar valueOffset = (me.width * decimal);\n\t\t\t\t\t\treturn me.left + Math.round(valueOffset);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar heightOffset = (me.height * decimal);\n\t\t\t\t\treturn me.top + Math.round(heightOffset);\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetPixelForTick: function(index) {\n\t\t\t\treturn this.getPixelForValue(this.tickMoments[index], null, null);\n\t\t\t},\n\t\t\tgetValueForPixel: function(pixel) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar innerDimension = me.isHorizontal() ? me.width : me.height;\n\t\t\t\tvar offset = (pixel - (me.isHorizontal() ? me.left : me.top)) / innerDimension;\n\t\t\t\toffset *= me.scaleSizeInUnits;\n\t\t\t\treturn me.firstTick.clone().add(moment.duration(offset, me.tickUnit).asSeconds(), 'seconds');\n\t\t\t},\n\t\t\tparseTime: function(label) {\n\t\t\t\tvar me = this;\n\t\t\t\tif (typeof me.options.time.parser === 'string') {\n\t\t\t\t\treturn moment(label, me.options.time.parser);\n\t\t\t\t}\n\t\t\t\tif (typeof me.options.time.parser === 'function') {\n\t\t\t\t\treturn me.options.time.parser(label);\n\t\t\t\t}\n\t\t\t\t// Date objects\n\t\t\t\tif (typeof label.getMonth === 'function' || typeof label === 'number') {\n\t\t\t\t\treturn moment(label);\n\t\t\t\t}\n\t\t\t\t// Moment support\n\t\t\t\tif (label.isValid && label.isValid()) {\n\t\t\t\t\treturn label;\n\t\t\t\t}\n\t\t\t\t// Custom parsing (return an instance of moment)\n\t\t\t\tif (typeof me.options.time.format !== 'string' && me.options.time.format.call) {\n\t\t\t\t\tconsole.warn('options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale');\n\t\t\t\t\treturn me.options.time.format(label);\n\t\t\t\t}\n\t\t\t\t// Moment format parsing\n\t\t\t\treturn moment(label, me.options.time.format);\n\t\t\t}\n\t\t});\n\t\tChart.scaleService.registerScaleType('time', TimeScale, defaultConfig);\n\t\n\t};\n\n\n/***/ },\n\n/***/ 617:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* MIT license */\r\n\tvar colorNames = __webpack_require__(623);\r\n\t\r\n\tmodule.exports = {\r\n\t   getRgba: getRgba,\r\n\t   getHsla: getHsla,\r\n\t   getRgb: getRgb,\r\n\t   getHsl: getHsl,\r\n\t   getHwb: getHwb,\r\n\t   getAlpha: getAlpha,\r\n\t\r\n\t   hexString: hexString,\r\n\t   rgbString: rgbString,\r\n\t   rgbaString: rgbaString,\r\n\t   percentString: percentString,\r\n\t   percentaString: percentaString,\r\n\t   hslString: hslString,\r\n\t   hslaString: hslaString,\r\n\t   hwbString: hwbString,\r\n\t   keyword: keyword\r\n\t}\r\n\t\r\n\tfunction getRgba(string) {\r\n\t   if (!string) {\r\n\t      return;\r\n\t   }\r\n\t   var abbr =  /^#([a-fA-F0-9]{3})$/,\r\n\t       hex =  /^#([a-fA-F0-9]{6})$/,\r\n\t       rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/,\r\n\t       per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/,\r\n\t       keyword = /(\\w+)/;\r\n\t\r\n\t   var rgb = [0, 0, 0],\r\n\t       a = 1,\r\n\t       match = string.match(abbr);\r\n\t   if (match) {\r\n\t      match = match[1];\r\n\t      for (var i = 0; i < rgb.length; i++) {\r\n\t         rgb[i] = parseInt(match[i] + match[i], 16);\r\n\t      }\r\n\t   }\r\n\t   else if (match = string.match(hex)) {\r\n\t      match = match[1];\r\n\t      for (var i = 0; i < rgb.length; i++) {\r\n\t         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);\r\n\t      }\r\n\t   }\r\n\t   else if (match = string.match(rgba)) {\r\n\t      for (var i = 0; i < rgb.length; i++) {\r\n\t         rgb[i] = parseInt(match[i + 1]);\r\n\t      }\r\n\t      a = parseFloat(match[4]);\r\n\t   }\r\n\t   else if (match = string.match(per)) {\r\n\t      for (var i = 0; i < rgb.length; i++) {\r\n\t         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\r\n\t      }\r\n\t      a = parseFloat(match[4]);\r\n\t   }\r\n\t   else if (match = string.match(keyword)) {\r\n\t      if (match[1] == \"transparent\") {\r\n\t         return [0, 0, 0, 0];\r\n\t      }\r\n\t      rgb = colorNames[match[1]];\r\n\t      if (!rgb) {\r\n\t         return;\r\n\t      }\r\n\t   }\r\n\t\r\n\t   for (var i = 0; i < rgb.length; i++) {\r\n\t      rgb[i] = scale(rgb[i], 0, 255);\r\n\t   }\r\n\t   if (!a && a != 0) {\r\n\t      a = 1;\r\n\t   }\r\n\t   else {\r\n\t      a = scale(a, 0, 1);\r\n\t   }\r\n\t   rgb[3] = a;\r\n\t   return rgb;\r\n\t}\r\n\t\r\n\tfunction getHsla(string) {\r\n\t   if (!string) {\r\n\t      return;\r\n\t   }\r\n\t   var hsl = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\r\n\t   var match = string.match(hsl);\r\n\t   if (match) {\r\n\t      var alpha = parseFloat(match[4]);\r\n\t      var h = scale(parseInt(match[1]), 0, 360),\r\n\t          s = scale(parseFloat(match[2]), 0, 100),\r\n\t          l = scale(parseFloat(match[3]), 0, 100),\r\n\t          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\r\n\t      return [h, s, l, a];\r\n\t   }\r\n\t}\r\n\t\r\n\tfunction getHwb(string) {\r\n\t   if (!string) {\r\n\t      return;\r\n\t   }\r\n\t   var hwb = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\r\n\t   var match = string.match(hwb);\r\n\t   if (match) {\r\n\t    var alpha = parseFloat(match[4]);\r\n\t      var h = scale(parseInt(match[1]), 0, 360),\r\n\t          w = scale(parseFloat(match[2]), 0, 100),\r\n\t          b = scale(parseFloat(match[3]), 0, 100),\r\n\t          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\r\n\t      return [h, w, b, a];\r\n\t   }\r\n\t}\r\n\t\r\n\tfunction getRgb(string) {\r\n\t   var rgba = getRgba(string);\r\n\t   return rgba && rgba.slice(0, 3);\r\n\t}\r\n\t\r\n\tfunction getHsl(string) {\r\n\t  var hsla = getHsla(string);\r\n\t  return hsla && hsla.slice(0, 3);\r\n\t}\r\n\t\r\n\tfunction getAlpha(string) {\r\n\t   var vals = getRgba(string);\r\n\t   if (vals) {\r\n\t      return vals[3];\r\n\t   }\r\n\t   else if (vals = getHsla(string)) {\r\n\t      return vals[3];\r\n\t   }\r\n\t   else if (vals = getHwb(string)) {\r\n\t      return vals[3];\r\n\t   }\r\n\t}\r\n\t\r\n\t// generators\r\n\tfunction hexString(rgb) {\r\n\t   return \"#\" + hexDouble(rgb[0]) + hexDouble(rgb[1])\r\n\t              + hexDouble(rgb[2]);\r\n\t}\r\n\t\r\n\tfunction rgbString(rgba, alpha) {\r\n\t   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\r\n\t      return rgbaString(rgba, alpha);\r\n\t   }\r\n\t   return \"rgb(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \")\";\r\n\t}\r\n\t\r\n\tfunction rgbaString(rgba, alpha) {\r\n\t   if (alpha === undefined) {\r\n\t      alpha = (rgba[3] !== undefined ? rgba[3] : 1);\r\n\t   }\r\n\t   return \"rgba(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2]\r\n\t           + \", \" + alpha + \")\";\r\n\t}\r\n\t\r\n\tfunction percentString(rgba, alpha) {\r\n\t   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\r\n\t      return percentaString(rgba, alpha);\r\n\t   }\r\n\t   var r = Math.round(rgba[0]/255 * 100),\r\n\t       g = Math.round(rgba[1]/255 * 100),\r\n\t       b = Math.round(rgba[2]/255 * 100);\r\n\t\r\n\t   return \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\";\r\n\t}\r\n\t\r\n\tfunction percentaString(rgba, alpha) {\r\n\t   var r = Math.round(rgba[0]/255 * 100),\r\n\t       g = Math.round(rgba[1]/255 * 100),\r\n\t       b = Math.round(rgba[2]/255 * 100);\r\n\t   return \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + (alpha || rgba[3] || 1) + \")\";\r\n\t}\r\n\t\r\n\tfunction hslString(hsla, alpha) {\r\n\t   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {\r\n\t      return hslaString(hsla, alpha);\r\n\t   }\r\n\t   return \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\";\r\n\t}\r\n\t\r\n\tfunction hslaString(hsla, alpha) {\r\n\t   if (alpha === undefined) {\r\n\t      alpha = (hsla[3] !== undefined ? hsla[3] : 1);\r\n\t   }\r\n\t   return \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \"\r\n\t           + alpha + \")\";\r\n\t}\r\n\t\r\n\t// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\r\n\t// (hwb have alpha optional & 1 is default value)\r\n\tfunction hwbString(hwb, alpha) {\r\n\t   if (alpha === undefined) {\r\n\t      alpha = (hwb[3] !== undefined ? hwb[3] : 1);\r\n\t   }\r\n\t   return \"hwb(\" + hwb[0] + \", \" + hwb[1] + \"%, \" + hwb[2] + \"%\"\r\n\t           + (alpha !== undefined && alpha !== 1 ? \", \" + alpha : \"\") + \")\";\r\n\t}\r\n\t\r\n\tfunction keyword(rgb) {\r\n\t  return reverseNames[rgb.slice(0, 3)];\r\n\t}\r\n\t\r\n\t// helpers\r\n\tfunction scale(num, min, max) {\r\n\t   return Math.min(Math.max(min, num), max);\r\n\t}\r\n\t\r\n\tfunction hexDouble(num) {\r\n\t  var str = num.toString(16).toUpperCase();\r\n\t  return (str.length < 2) ? \"0\" + str : str;\r\n\t}\r\n\t\r\n\t\r\n\t//create a list of reverse color names\r\n\tvar reverseNames = {};\r\n\tfor (var name in colorNames) {\r\n\t   reverseNames[colorNames[name]] = name;\r\n\t}\r\n\n\n/***/ },\n\n/***/ 618:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* MIT license */\n\tvar convert = __webpack_require__(622);\n\tvar string = __webpack_require__(617);\n\t\n\tvar Color = function (obj) {\n\t\tif (obj instanceof Color) {\n\t\t\treturn obj;\n\t\t}\n\t\tif (!(this instanceof Color)) {\n\t\t\treturn new Color(obj);\n\t\t}\n\t\n\t\tthis.valid = false;\n\t\tthis.values = {\n\t\t\trgb: [0, 0, 0],\n\t\t\thsl: [0, 0, 0],\n\t\t\thsv: [0, 0, 0],\n\t\t\thwb: [0, 0, 0],\n\t\t\tcmyk: [0, 0, 0, 0],\n\t\t\talpha: 1\n\t\t};\n\t\n\t\t// parse Color() argument\n\t\tvar vals;\n\t\tif (typeof obj === 'string') {\n\t\t\tvals = string.getRgba(obj);\n\t\t\tif (vals) {\n\t\t\t\tthis.setValues('rgb', vals);\n\t\t\t} else if (vals = string.getHsla(obj)) {\n\t\t\t\tthis.setValues('hsl', vals);\n\t\t\t} else if (vals = string.getHwb(obj)) {\n\t\t\t\tthis.setValues('hwb', vals);\n\t\t\t}\n\t\t} else if (typeof obj === 'object') {\n\t\t\tvals = obj;\n\t\t\tif (vals.r !== undefined || vals.red !== undefined) {\n\t\t\t\tthis.setValues('rgb', vals);\n\t\t\t} else if (vals.l !== undefined || vals.lightness !== undefined) {\n\t\t\t\tthis.setValues('hsl', vals);\n\t\t\t} else if (vals.v !== undefined || vals.value !== undefined) {\n\t\t\t\tthis.setValues('hsv', vals);\n\t\t\t} else if (vals.w !== undefined || vals.whiteness !== undefined) {\n\t\t\t\tthis.setValues('hwb', vals);\n\t\t\t} else if (vals.c !== undefined || vals.cyan !== undefined) {\n\t\t\t\tthis.setValues('cmyk', vals);\n\t\t\t}\n\t\t}\n\t};\n\t\n\tColor.prototype = {\n\t\tisValid: function () {\n\t\t\treturn this.valid;\n\t\t},\n\t\trgb: function () {\n\t\t\treturn this.setSpace('rgb', arguments);\n\t\t},\n\t\thsl: function () {\n\t\t\treturn this.setSpace('hsl', arguments);\n\t\t},\n\t\thsv: function () {\n\t\t\treturn this.setSpace('hsv', arguments);\n\t\t},\n\t\thwb: function () {\n\t\t\treturn this.setSpace('hwb', arguments);\n\t\t},\n\t\tcmyk: function () {\n\t\t\treturn this.setSpace('cmyk', arguments);\n\t\t},\n\t\n\t\trgbArray: function () {\n\t\t\treturn this.values.rgb;\n\t\t},\n\t\thslArray: function () {\n\t\t\treturn this.values.hsl;\n\t\t},\n\t\thsvArray: function () {\n\t\t\treturn this.values.hsv;\n\t\t},\n\t\thwbArray: function () {\n\t\t\tvar values = this.values;\n\t\t\tif (values.alpha !== 1) {\n\t\t\t\treturn values.hwb.concat([values.alpha]);\n\t\t\t}\n\t\t\treturn values.hwb;\n\t\t},\n\t\tcmykArray: function () {\n\t\t\treturn this.values.cmyk;\n\t\t},\n\t\trgbaArray: function () {\n\t\t\tvar values = this.values;\n\t\t\treturn values.rgb.concat([values.alpha]);\n\t\t},\n\t\thslaArray: function () {\n\t\t\tvar values = this.values;\n\t\t\treturn values.hsl.concat([values.alpha]);\n\t\t},\n\t\talpha: function (val) {\n\t\t\tif (val === undefined) {\n\t\t\t\treturn this.values.alpha;\n\t\t\t}\n\t\t\tthis.setValues('alpha', val);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tred: function (val) {\n\t\t\treturn this.setChannel('rgb', 0, val);\n\t\t},\n\t\tgreen: function (val) {\n\t\t\treturn this.setChannel('rgb', 1, val);\n\t\t},\n\t\tblue: function (val) {\n\t\t\treturn this.setChannel('rgb', 2, val);\n\t\t},\n\t\thue: function (val) {\n\t\t\tif (val) {\n\t\t\t\tval %= 360;\n\t\t\t\tval = val < 0 ? 360 + val : val;\n\t\t\t}\n\t\t\treturn this.setChannel('hsl', 0, val);\n\t\t},\n\t\tsaturation: function (val) {\n\t\t\treturn this.setChannel('hsl', 1, val);\n\t\t},\n\t\tlightness: function (val) {\n\t\t\treturn this.setChannel('hsl', 2, val);\n\t\t},\n\t\tsaturationv: function (val) {\n\t\t\treturn this.setChannel('hsv', 1, val);\n\t\t},\n\t\twhiteness: function (val) {\n\t\t\treturn this.setChannel('hwb', 1, val);\n\t\t},\n\t\tblackness: function (val) {\n\t\t\treturn this.setChannel('hwb', 2, val);\n\t\t},\n\t\tvalue: function (val) {\n\t\t\treturn this.setChannel('hsv', 2, val);\n\t\t},\n\t\tcyan: function (val) {\n\t\t\treturn this.setChannel('cmyk', 0, val);\n\t\t},\n\t\tmagenta: function (val) {\n\t\t\treturn this.setChannel('cmyk', 1, val);\n\t\t},\n\t\tyellow: function (val) {\n\t\t\treturn this.setChannel('cmyk', 2, val);\n\t\t},\n\t\tblack: function (val) {\n\t\t\treturn this.setChannel('cmyk', 3, val);\n\t\t},\n\t\n\t\thexString: function () {\n\t\t\treturn string.hexString(this.values.rgb);\n\t\t},\n\t\trgbString: function () {\n\t\t\treturn string.rgbString(this.values.rgb, this.values.alpha);\n\t\t},\n\t\trgbaString: function () {\n\t\t\treturn string.rgbaString(this.values.rgb, this.values.alpha);\n\t\t},\n\t\tpercentString: function () {\n\t\t\treturn string.percentString(this.values.rgb, this.values.alpha);\n\t\t},\n\t\thslString: function () {\n\t\t\treturn string.hslString(this.values.hsl, this.values.alpha);\n\t\t},\n\t\thslaString: function () {\n\t\t\treturn string.hslaString(this.values.hsl, this.values.alpha);\n\t\t},\n\t\thwbString: function () {\n\t\t\treturn string.hwbString(this.values.hwb, this.values.alpha);\n\t\t},\n\t\tkeyword: function () {\n\t\t\treturn string.keyword(this.values.rgb, this.values.alpha);\n\t\t},\n\t\n\t\trgbNumber: function () {\n\t\t\tvar rgb = this.values.rgb;\n\t\t\treturn (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];\n\t\t},\n\t\n\t\tluminosity: function () {\n\t\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\t\tvar rgb = this.values.rgb;\n\t\t\tvar lum = [];\n\t\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\t\tvar chan = rgb[i] / 255;\n\t\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t\t}\n\t\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t\t},\n\t\n\t\tcontrast: function (color2) {\n\t\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\t\tvar lum1 = this.luminosity();\n\t\t\tvar lum2 = color2.luminosity();\n\t\t\tif (lum1 > lum2) {\n\t\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t\t}\n\t\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t\t},\n\t\n\t\tlevel: function (color2) {\n\t\t\tvar contrastRatio = this.contrast(color2);\n\t\t\tif (contrastRatio >= 7.1) {\n\t\t\t\treturn 'AAA';\n\t\t\t}\n\t\n\t\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t\t},\n\t\n\t\tdark: function () {\n\t\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\t\tvar rgb = this.values.rgb;\n\t\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\t\treturn yiq < 128;\n\t\t},\n\t\n\t\tlight: function () {\n\t\t\treturn !this.dark();\n\t\t},\n\t\n\t\tnegate: function () {\n\t\t\tvar rgb = [];\n\t\t\tfor (var i = 0; i < 3; i++) {\n\t\t\t\trgb[i] = 255 - this.values.rgb[i];\n\t\t\t}\n\t\t\tthis.setValues('rgb', rgb);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tlighten: function (ratio) {\n\t\t\tvar hsl = this.values.hsl;\n\t\t\thsl[2] += hsl[2] * ratio;\n\t\t\tthis.setValues('hsl', hsl);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tdarken: function (ratio) {\n\t\t\tvar hsl = this.values.hsl;\n\t\t\thsl[2] -= hsl[2] * ratio;\n\t\t\tthis.setValues('hsl', hsl);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tsaturate: function (ratio) {\n\t\t\tvar hsl = this.values.hsl;\n\t\t\thsl[1] += hsl[1] * ratio;\n\t\t\tthis.setValues('hsl', hsl);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tdesaturate: function (ratio) {\n\t\t\tvar hsl = this.values.hsl;\n\t\t\thsl[1] -= hsl[1] * ratio;\n\t\t\tthis.setValues('hsl', hsl);\n\t\t\treturn this;\n\t\t},\n\t\n\t\twhiten: function (ratio) {\n\t\t\tvar hwb = this.values.hwb;\n\t\t\thwb[1] += hwb[1] * ratio;\n\t\t\tthis.setValues('hwb', hwb);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tblacken: function (ratio) {\n\t\t\tvar hwb = this.values.hwb;\n\t\t\thwb[2] += hwb[2] * ratio;\n\t\t\tthis.setValues('hwb', hwb);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tgreyscale: function () {\n\t\t\tvar rgb = this.values.rgb;\n\t\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\t\tthis.setValues('rgb', [val, val, val]);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tclearer: function (ratio) {\n\t\t\tvar alpha = this.values.alpha;\n\t\t\tthis.setValues('alpha', alpha - (alpha * ratio));\n\t\t\treturn this;\n\t\t},\n\t\n\t\topaquer: function (ratio) {\n\t\t\tvar alpha = this.values.alpha;\n\t\t\tthis.setValues('alpha', alpha + (alpha * ratio));\n\t\t\treturn this;\n\t\t},\n\t\n\t\trotate: function (degrees) {\n\t\t\tvar hsl = this.values.hsl;\n\t\t\tvar hue = (hsl[0] + degrees) % 360;\n\t\t\thsl[0] = hue < 0 ? 360 + hue : hue;\n\t\t\tthis.setValues('hsl', hsl);\n\t\t\treturn this;\n\t\t},\n\t\n\t\t/**\n\t\t * Ported from sass implementation in C\n\t\t * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\t */\n\t\tmix: function (mixinColor, weight) {\n\t\t\tvar color1 = this;\n\t\t\tvar color2 = mixinColor;\n\t\t\tvar p = weight === undefined ? 0.5 : weight;\n\t\n\t\t\tvar w = 2 * p - 1;\n\t\t\tvar a = color1.alpha() - color2.alpha();\n\t\n\t\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\t\tvar w2 = 1 - w1;\n\t\n\t\t\treturn this\n\t\t\t\t.rgb(\n\t\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\t\tw1 * color1.blue() + w2 * color2.blue()\n\t\t\t\t)\n\t\t\t\t.alpha(color1.alpha() * p + color2.alpha() * (1 - p));\n\t\t},\n\t\n\t\ttoJSON: function () {\n\t\t\treturn this.rgb();\n\t\t},\n\t\n\t\tclone: function () {\n\t\t\t// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,\n\t\t\t// making the final build way to big to embed in Chart.js. So let's do it manually,\n\t\t\t// assuming that values to clone are 1 dimension arrays containing only numbers,\n\t\t\t// except 'alpha' which is a number.\n\t\t\tvar result = new Color();\n\t\t\tvar source = this.values;\n\t\t\tvar target = result.values;\n\t\t\tvar value, type;\n\t\n\t\t\tfor (var prop in source) {\n\t\t\t\tif (source.hasOwnProperty(prop)) {\n\t\t\t\t\tvalue = source[prop];\n\t\t\t\t\ttype = ({}).toString.call(value);\n\t\t\t\t\tif (type === '[object Array]') {\n\t\t\t\t\t\ttarget[prop] = value.slice(0);\n\t\t\t\t\t} else if (type === '[object Number]') {\n\t\t\t\t\t\ttarget[prop] = value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('unexpected color value:', value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn result;\n\t\t}\n\t};\n\t\n\tColor.prototype.spaces = {\n\t\trgb: ['red', 'green', 'blue'],\n\t\thsl: ['hue', 'saturation', 'lightness'],\n\t\thsv: ['hue', 'saturation', 'value'],\n\t\thwb: ['hue', 'whiteness', 'blackness'],\n\t\tcmyk: ['cyan', 'magenta', 'yellow', 'black']\n\t};\n\t\n\tColor.prototype.maxes = {\n\t\trgb: [255, 255, 255],\n\t\thsl: [360, 100, 100],\n\t\thsv: [360, 100, 100],\n\t\thwb: [360, 100, 100],\n\t\tcmyk: [100, 100, 100, 100]\n\t};\n\t\n\tColor.prototype.getValues = function (space) {\n\t\tvar values = this.values;\n\t\tvar vals = {};\n\t\n\t\tfor (var i = 0; i < space.length; i++) {\n\t\t\tvals[space.charAt(i)] = values[space][i];\n\t\t}\n\t\n\t\tif (values.alpha !== 1) {\n\t\t\tvals.a = values.alpha;\n\t\t}\n\t\n\t\t// {r: 255, g: 255, b: 255, a: 0.4}\n\t\treturn vals;\n\t};\n\t\n\tColor.prototype.setValues = function (space, vals) {\n\t\tvar values = this.values;\n\t\tvar spaces = this.spaces;\n\t\tvar maxes = this.maxes;\n\t\tvar alpha = 1;\n\t\tvar i;\n\t\n\t\tthis.valid = true;\n\t\n\t\tif (space === 'alpha') {\n\t\t\talpha = vals;\n\t\t} else if (vals.length) {\n\t\t\t// [10, 10, 10]\n\t\t\tvalues[space] = vals.slice(0, space.length);\n\t\t\talpha = vals[space.length];\n\t\t} else if (vals[space.charAt(0)] !== undefined) {\n\t\t\t// {r: 10, g: 10, b: 10}\n\t\t\tfor (i = 0; i < space.length; i++) {\n\t\t\t\tvalues[space][i] = vals[space.charAt(i)];\n\t\t\t}\n\t\n\t\t\talpha = vals.a;\n\t\t} else if (vals[spaces[space][0]] !== undefined) {\n\t\t\t// {red: 10, green: 10, blue: 10}\n\t\t\tvar chans = spaces[space];\n\t\n\t\t\tfor (i = 0; i < space.length; i++) {\n\t\t\t\tvalues[space][i] = vals[chans[i]];\n\t\t\t}\n\t\n\t\t\talpha = vals.alpha;\n\t\t}\n\t\n\t\tvalues.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));\n\t\n\t\tif (space === 'alpha') {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tvar capped;\n\t\n\t\t// cap values of the space prior converting all values\n\t\tfor (i = 0; i < space.length; i++) {\n\t\t\tcapped = Math.max(0, Math.min(maxes[space][i], values[space][i]));\n\t\t\tvalues[space][i] = Math.round(capped);\n\t\t}\n\t\n\t\t// convert to all the other color spaces\n\t\tfor (var sname in spaces) {\n\t\t\tif (sname !== space) {\n\t\t\t\tvalues[sname] = convert[space][sname](values[space]);\n\t\t\t}\n\t\t}\n\t\n\t\treturn true;\n\t};\n\t\n\tColor.prototype.setSpace = function (space, args) {\n\t\tvar vals = args[0];\n\t\n\t\tif (vals === undefined) {\n\t\t\t// color.rgb()\n\t\t\treturn this.getValues(space);\n\t\t}\n\t\n\t\t// color.rgb(10, 10, 10)\n\t\tif (typeof vals === 'number') {\n\t\t\tvals = Array.prototype.slice.call(args);\n\t\t}\n\t\n\t\tthis.setValues(space, vals);\n\t\treturn this;\n\t};\n\t\n\tColor.prototype.setChannel = function (space, index, val) {\n\t\tvar svalues = this.values[space];\n\t\tif (val === undefined) {\n\t\t\t// color.red()\n\t\t\treturn svalues[index];\n\t\t} else if (val === svalues[index]) {\n\t\t\t// color.red(color.red())\n\t\t\treturn this;\n\t\t}\n\t\n\t\t// color.red(100)\n\t\tsvalues[index] = val;\n\t\tthis.setValues(space, svalues);\n\t\n\t\treturn this;\n\t};\n\t\n\tif (typeof window !== 'undefined') {\n\t\twindow.Color = Color;\n\t}\n\t\n\tmodule.exports = Color;\n\n\n/***/ },\n\n/***/ 621:\n/***/ function(module, exports) {\n\n\t/* MIT license */\n\t\n\tmodule.exports = {\n\t  rgb2hsl: rgb2hsl,\n\t  rgb2hsv: rgb2hsv,\n\t  rgb2hwb: rgb2hwb,\n\t  rgb2cmyk: rgb2cmyk,\n\t  rgb2keyword: rgb2keyword,\n\t  rgb2xyz: rgb2xyz,\n\t  rgb2lab: rgb2lab,\n\t  rgb2lch: rgb2lch,\n\t\n\t  hsl2rgb: hsl2rgb,\n\t  hsl2hsv: hsl2hsv,\n\t  hsl2hwb: hsl2hwb,\n\t  hsl2cmyk: hsl2cmyk,\n\t  hsl2keyword: hsl2keyword,\n\t\n\t  hsv2rgb: hsv2rgb,\n\t  hsv2hsl: hsv2hsl,\n\t  hsv2hwb: hsv2hwb,\n\t  hsv2cmyk: hsv2cmyk,\n\t  hsv2keyword: hsv2keyword,\n\t\n\t  hwb2rgb: hwb2rgb,\n\t  hwb2hsl: hwb2hsl,\n\t  hwb2hsv: hwb2hsv,\n\t  hwb2cmyk: hwb2cmyk,\n\t  hwb2keyword: hwb2keyword,\n\t\n\t  cmyk2rgb: cmyk2rgb,\n\t  cmyk2hsl: cmyk2hsl,\n\t  cmyk2hsv: cmyk2hsv,\n\t  cmyk2hwb: cmyk2hwb,\n\t  cmyk2keyword: cmyk2keyword,\n\t\n\t  keyword2rgb: keyword2rgb,\n\t  keyword2hsl: keyword2hsl,\n\t  keyword2hsv: keyword2hsv,\n\t  keyword2hwb: keyword2hwb,\n\t  keyword2cmyk: keyword2cmyk,\n\t  keyword2lab: keyword2lab,\n\t  keyword2xyz: keyword2xyz,\n\t\n\t  xyz2rgb: xyz2rgb,\n\t  xyz2lab: xyz2lab,\n\t  xyz2lch: xyz2lch,\n\t\n\t  lab2xyz: lab2xyz,\n\t  lab2rgb: lab2rgb,\n\t  lab2lch: lab2lch,\n\t\n\t  lch2lab: lch2lab,\n\t  lch2xyz: lch2xyz,\n\t  lch2rgb: lch2rgb\n\t}\n\t\n\t\n\tfunction rgb2hsl(rgb) {\n\t  var r = rgb[0]/255,\n\t      g = rgb[1]/255,\n\t      b = rgb[2]/255,\n\t      min = Math.min(r, g, b),\n\t      max = Math.max(r, g, b),\n\t      delta = max - min,\n\t      h, s, l;\n\t\n\t  if (max == min)\n\t    h = 0;\n\t  else if (r == max)\n\t    h = (g - b) / delta;\n\t  else if (g == max)\n\t    h = 2 + (b - r) / delta;\n\t  else if (b == max)\n\t    h = 4 + (r - g)/ delta;\n\t\n\t  h = Math.min(h * 60, 360);\n\t\n\t  if (h < 0)\n\t    h += 360;\n\t\n\t  l = (min + max) / 2;\n\t\n\t  if (max == min)\n\t    s = 0;\n\t  else if (l <= 0.5)\n\t    s = delta / (max + min);\n\t  else\n\t    s = delta / (2 - max - min);\n\t\n\t  return [h, s * 100, l * 100];\n\t}\n\t\n\tfunction rgb2hsv(rgb) {\n\t  var r = rgb[0],\n\t      g = rgb[1],\n\t      b = rgb[2],\n\t      min = Math.min(r, g, b),\n\t      max = Math.max(r, g, b),\n\t      delta = max - min,\n\t      h, s, v;\n\t\n\t  if (max == 0)\n\t    s = 0;\n\t  else\n\t    s = (delta/max * 1000)/10;\n\t\n\t  if (max == min)\n\t    h = 0;\n\t  else if (r == max)\n\t    h = (g - b) / delta;\n\t  else if (g == max)\n\t    h = 2 + (b - r) / delta;\n\t  else if (b == max)\n\t    h = 4 + (r - g) / delta;\n\t\n\t  h = Math.min(h * 60, 360);\n\t\n\t  if (h < 0)\n\t    h += 360;\n\t\n\t  v = ((max / 255) * 1000) / 10;\n\t\n\t  return [h, s, v];\n\t}\n\t\n\tfunction rgb2hwb(rgb) {\n\t  var r = rgb[0],\n\t      g = rgb[1],\n\t      b = rgb[2],\n\t      h = rgb2hsl(rgb)[0],\n\t      w = 1/255 * Math.min(r, Math.min(g, b)),\n\t      b = 1 - 1/255 * Math.max(r, Math.max(g, b));\n\t\n\t  return [h, w * 100, b * 100];\n\t}\n\t\n\tfunction rgb2cmyk(rgb) {\n\t  var r = rgb[0] / 255,\n\t      g = rgb[1] / 255,\n\t      b = rgb[2] / 255,\n\t      c, m, y, k;\n\t\n\t  k = Math.min(1 - r, 1 - g, 1 - b);\n\t  c = (1 - r - k) / (1 - k) || 0;\n\t  m = (1 - g - k) / (1 - k) || 0;\n\t  y = (1 - b - k) / (1 - k) || 0;\n\t  return [c * 100, m * 100, y * 100, k * 100];\n\t}\n\t\n\tfunction rgb2keyword(rgb) {\n\t  return reverseKeywords[JSON.stringify(rgb)];\n\t}\n\t\n\tfunction rgb2xyz(rgb) {\n\t  var r = rgb[0] / 255,\n\t      g = rgb[1] / 255,\n\t      b = rgb[2] / 255;\n\t\n\t  // assume sRGB\n\t  r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\t  g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\t  b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\t\n\t  var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\t  var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\t  var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\t\n\t  return [x * 100, y *100, z * 100];\n\t}\n\t\n\tfunction rgb2lab(rgb) {\n\t  var xyz = rgb2xyz(rgb),\n\t        x = xyz[0],\n\t        y = xyz[1],\n\t        z = xyz[2],\n\t        l, a, b;\n\t\n\t  x /= 95.047;\n\t  y /= 100;\n\t  z /= 108.883;\n\t\n\t  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);\n\t  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);\n\t  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);\n\t\n\t  l = (116 * y) - 16;\n\t  a = 500 * (x - y);\n\t  b = 200 * (y - z);\n\t\n\t  return [l, a, b];\n\t}\n\t\n\tfunction rgb2lch(args) {\n\t  return lab2lch(rgb2lab(args));\n\t}\n\t\n\tfunction hsl2rgb(hsl) {\n\t  var h = hsl[0] / 360,\n\t      s = hsl[1] / 100,\n\t      l = hsl[2] / 100,\n\t      t1, t2, t3, rgb, val;\n\t\n\t  if (s == 0) {\n\t    val = l * 255;\n\t    return [val, val, val];\n\t  }\n\t\n\t  if (l < 0.5)\n\t    t2 = l * (1 + s);\n\t  else\n\t    t2 = l + s - l * s;\n\t  t1 = 2 * l - t2;\n\t\n\t  rgb = [0, 0, 0];\n\t  for (var i = 0; i < 3; i++) {\n\t    t3 = h + 1 / 3 * - (i - 1);\n\t    t3 < 0 && t3++;\n\t    t3 > 1 && t3--;\n\t\n\t    if (6 * t3 < 1)\n\t      val = t1 + (t2 - t1) * 6 * t3;\n\t    else if (2 * t3 < 1)\n\t      val = t2;\n\t    else if (3 * t3 < 2)\n\t      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t    else\n\t      val = t1;\n\t\n\t    rgb[i] = val * 255;\n\t  }\n\t\n\t  return rgb;\n\t}\n\t\n\tfunction hsl2hsv(hsl) {\n\t  var h = hsl[0],\n\t      s = hsl[1] / 100,\n\t      l = hsl[2] / 100,\n\t      sv, v;\n\t\n\t  if(l === 0) {\n\t      // no need to do calc on black\n\t      // also avoids divide by 0 error\n\t      return [0, 0, 0];\n\t  }\n\t\n\t  l *= 2;\n\t  s *= (l <= 1) ? l : 2 - l;\n\t  v = (l + s) / 2;\n\t  sv = (2 * s) / (l + s);\n\t  return [h, sv * 100, v * 100];\n\t}\n\t\n\tfunction hsl2hwb(args) {\n\t  return rgb2hwb(hsl2rgb(args));\n\t}\n\t\n\tfunction hsl2cmyk(args) {\n\t  return rgb2cmyk(hsl2rgb(args));\n\t}\n\t\n\tfunction hsl2keyword(args) {\n\t  return rgb2keyword(hsl2rgb(args));\n\t}\n\t\n\t\n\tfunction hsv2rgb(hsv) {\n\t  var h = hsv[0] / 60,\n\t      s = hsv[1] / 100,\n\t      v = hsv[2] / 100,\n\t      hi = Math.floor(h) % 6;\n\t\n\t  var f = h - Math.floor(h),\n\t      p = 255 * v * (1 - s),\n\t      q = 255 * v * (1 - (s * f)),\n\t      t = 255 * v * (1 - (s * (1 - f))),\n\t      v = 255 * v;\n\t\n\t  switch(hi) {\n\t    case 0:\n\t      return [v, t, p];\n\t    case 1:\n\t      return [q, v, p];\n\t    case 2:\n\t      return [p, v, t];\n\t    case 3:\n\t      return [p, q, v];\n\t    case 4:\n\t      return [t, p, v];\n\t    case 5:\n\t      return [v, p, q];\n\t  }\n\t}\n\t\n\tfunction hsv2hsl(hsv) {\n\t  var h = hsv[0],\n\t      s = hsv[1] / 100,\n\t      v = hsv[2] / 100,\n\t      sl, l;\n\t\n\t  l = (2 - s) * v;\n\t  sl = s * v;\n\t  sl /= (l <= 1) ? l : 2 - l;\n\t  sl = sl || 0;\n\t  l /= 2;\n\t  return [h, sl * 100, l * 100];\n\t}\n\t\n\tfunction hsv2hwb(args) {\n\t  return rgb2hwb(hsv2rgb(args))\n\t}\n\t\n\tfunction hsv2cmyk(args) {\n\t  return rgb2cmyk(hsv2rgb(args));\n\t}\n\t\n\tfunction hsv2keyword(args) {\n\t  return rgb2keyword(hsv2rgb(args));\n\t}\n\t\n\t// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\n\tfunction hwb2rgb(hwb) {\n\t  var h = hwb[0] / 360,\n\t      wh = hwb[1] / 100,\n\t      bl = hwb[2] / 100,\n\t      ratio = wh + bl,\n\t      i, v, f, n;\n\t\n\t  // wh + bl cant be > 1\n\t  if (ratio > 1) {\n\t    wh /= ratio;\n\t    bl /= ratio;\n\t  }\n\t\n\t  i = Math.floor(6 * h);\n\t  v = 1 - bl;\n\t  f = 6 * h - i;\n\t  if ((i & 0x01) != 0) {\n\t    f = 1 - f;\n\t  }\n\t  n = wh + f * (v - wh);  // linear interpolation\n\t\n\t  switch (i) {\n\t    default:\n\t    case 6:\n\t    case 0: r = v; g = n; b = wh; break;\n\t    case 1: r = n; g = v; b = wh; break;\n\t    case 2: r = wh; g = v; b = n; break;\n\t    case 3: r = wh; g = n; b = v; break;\n\t    case 4: r = n; g = wh; b = v; break;\n\t    case 5: r = v; g = wh; b = n; break;\n\t  }\n\t\n\t  return [r * 255, g * 255, b * 255];\n\t}\n\t\n\tfunction hwb2hsl(args) {\n\t  return rgb2hsl(hwb2rgb(args));\n\t}\n\t\n\tfunction hwb2hsv(args) {\n\t  return rgb2hsv(hwb2rgb(args));\n\t}\n\t\n\tfunction hwb2cmyk(args) {\n\t  return rgb2cmyk(hwb2rgb(args));\n\t}\n\t\n\tfunction hwb2keyword(args) {\n\t  return rgb2keyword(hwb2rgb(args));\n\t}\n\t\n\tfunction cmyk2rgb(cmyk) {\n\t  var c = cmyk[0] / 100,\n\t      m = cmyk[1] / 100,\n\t      y = cmyk[2] / 100,\n\t      k = cmyk[3] / 100,\n\t      r, g, b;\n\t\n\t  r = 1 - Math.min(1, c * (1 - k) + k);\n\t  g = 1 - Math.min(1, m * (1 - k) + k);\n\t  b = 1 - Math.min(1, y * (1 - k) + k);\n\t  return [r * 255, g * 255, b * 255];\n\t}\n\t\n\tfunction cmyk2hsl(args) {\n\t  return rgb2hsl(cmyk2rgb(args));\n\t}\n\t\n\tfunction cmyk2hsv(args) {\n\t  return rgb2hsv(cmyk2rgb(args));\n\t}\n\t\n\tfunction cmyk2hwb(args) {\n\t  return rgb2hwb(cmyk2rgb(args));\n\t}\n\t\n\tfunction cmyk2keyword(args) {\n\t  return rgb2keyword(cmyk2rgb(args));\n\t}\n\t\n\t\n\tfunction xyz2rgb(xyz) {\n\t  var x = xyz[0] / 100,\n\t      y = xyz[1] / 100,\n\t      z = xyz[2] / 100,\n\t      r, g, b;\n\t\n\t  r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\t  g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\t  b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\t\n\t  // assume sRGB\n\t  r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t    : r = (r * 12.92);\n\t\n\t  g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t    : g = (g * 12.92);\n\t\n\t  b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t    : b = (b * 12.92);\n\t\n\t  r = Math.min(Math.max(0, r), 1);\n\t  g = Math.min(Math.max(0, g), 1);\n\t  b = Math.min(Math.max(0, b), 1);\n\t\n\t  return [r * 255, g * 255, b * 255];\n\t}\n\t\n\tfunction xyz2lab(xyz) {\n\t  var x = xyz[0],\n\t      y = xyz[1],\n\t      z = xyz[2],\n\t      l, a, b;\n\t\n\t  x /= 95.047;\n\t  y /= 100;\n\t  z /= 108.883;\n\t\n\t  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);\n\t  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);\n\t  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);\n\t\n\t  l = (116 * y) - 16;\n\t  a = 500 * (x - y);\n\t  b = 200 * (y - z);\n\t\n\t  return [l, a, b];\n\t}\n\t\n\tfunction xyz2lch(args) {\n\t  return lab2lch(xyz2lab(args));\n\t}\n\t\n\tfunction lab2xyz(lab) {\n\t  var l = lab[0],\n\t      a = lab[1],\n\t      b = lab[2],\n\t      x, y, z, y2;\n\t\n\t  if (l <= 8) {\n\t    y = (l * 100) / 903.3;\n\t    y2 = (7.787 * (y / 100)) + (16 / 116);\n\t  } else {\n\t    y = 100 * Math.pow((l + 16) / 116, 3);\n\t    y2 = Math.pow(y / 100, 1/3);\n\t  }\n\t\n\t  x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);\n\t\n\t  z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);\n\t\n\t  return [x, y, z];\n\t}\n\t\n\tfunction lab2lch(lab) {\n\t  var l = lab[0],\n\t      a = lab[1],\n\t      b = lab[2],\n\t      hr, h, c;\n\t\n\t  hr = Math.atan2(b, a);\n\t  h = hr * 360 / 2 / Math.PI;\n\t  if (h < 0) {\n\t    h += 360;\n\t  }\n\t  c = Math.sqrt(a * a + b * b);\n\t  return [l, c, h];\n\t}\n\t\n\tfunction lab2rgb(args) {\n\t  return xyz2rgb(lab2xyz(args));\n\t}\n\t\n\tfunction lch2lab(lch) {\n\t  var l = lch[0],\n\t      c = lch[1],\n\t      h = lch[2],\n\t      a, b, hr;\n\t\n\t  hr = h / 360 * 2 * Math.PI;\n\t  a = c * Math.cos(hr);\n\t  b = c * Math.sin(hr);\n\t  return [l, a, b];\n\t}\n\t\n\tfunction lch2xyz(args) {\n\t  return lab2xyz(lch2lab(args));\n\t}\n\t\n\tfunction lch2rgb(args) {\n\t  return lab2rgb(lch2lab(args));\n\t}\n\t\n\tfunction keyword2rgb(keyword) {\n\t  return cssKeywords[keyword];\n\t}\n\t\n\tfunction keyword2hsl(args) {\n\t  return rgb2hsl(keyword2rgb(args));\n\t}\n\t\n\tfunction keyword2hsv(args) {\n\t  return rgb2hsv(keyword2rgb(args));\n\t}\n\t\n\tfunction keyword2hwb(args) {\n\t  return rgb2hwb(keyword2rgb(args));\n\t}\n\t\n\tfunction keyword2cmyk(args) {\n\t  return rgb2cmyk(keyword2rgb(args));\n\t}\n\t\n\tfunction keyword2lab(args) {\n\t  return rgb2lab(keyword2rgb(args));\n\t}\n\t\n\tfunction keyword2xyz(args) {\n\t  return rgb2xyz(keyword2rgb(args));\n\t}\n\t\n\tvar cssKeywords = {\n\t  aliceblue:  [240,248,255],\n\t  antiquewhite: [250,235,215],\n\t  aqua: [0,255,255],\n\t  aquamarine: [127,255,212],\n\t  azure:  [240,255,255],\n\t  beige:  [245,245,220],\n\t  bisque: [255,228,196],\n\t  black:  [0,0,0],\n\t  blanchedalmond: [255,235,205],\n\t  blue: [0,0,255],\n\t  blueviolet: [138,43,226],\n\t  brown:  [165,42,42],\n\t  burlywood:  [222,184,135],\n\t  cadetblue:  [95,158,160],\n\t  chartreuse: [127,255,0],\n\t  chocolate:  [210,105,30],\n\t  coral:  [255,127,80],\n\t  cornflowerblue: [100,149,237],\n\t  cornsilk: [255,248,220],\n\t  crimson:  [220,20,60],\n\t  cyan: [0,255,255],\n\t  darkblue: [0,0,139],\n\t  darkcyan: [0,139,139],\n\t  darkgoldenrod:  [184,134,11],\n\t  darkgray: [169,169,169],\n\t  darkgreen:  [0,100,0],\n\t  darkgrey: [169,169,169],\n\t  darkkhaki:  [189,183,107],\n\t  darkmagenta:  [139,0,139],\n\t  darkolivegreen: [85,107,47],\n\t  darkorange: [255,140,0],\n\t  darkorchid: [153,50,204],\n\t  darkred:  [139,0,0],\n\t  darksalmon: [233,150,122],\n\t  darkseagreen: [143,188,143],\n\t  darkslateblue:  [72,61,139],\n\t  darkslategray:  [47,79,79],\n\t  darkslategrey:  [47,79,79],\n\t  darkturquoise:  [0,206,209],\n\t  darkviolet: [148,0,211],\n\t  deeppink: [255,20,147],\n\t  deepskyblue:  [0,191,255],\n\t  dimgray:  [105,105,105],\n\t  dimgrey:  [105,105,105],\n\t  dodgerblue: [30,144,255],\n\t  firebrick:  [178,34,34],\n\t  floralwhite:  [255,250,240],\n\t  forestgreen:  [34,139,34],\n\t  fuchsia:  [255,0,255],\n\t  gainsboro:  [220,220,220],\n\t  ghostwhite: [248,248,255],\n\t  gold: [255,215,0],\n\t  goldenrod:  [218,165,32],\n\t  gray: [128,128,128],\n\t  green:  [0,128,0],\n\t  greenyellow:  [173,255,47],\n\t  grey: [128,128,128],\n\t  honeydew: [240,255,240],\n\t  hotpink:  [255,105,180],\n\t  indianred:  [205,92,92],\n\t  indigo: [75,0,130],\n\t  ivory:  [255,255,240],\n\t  khaki:  [240,230,140],\n\t  lavender: [230,230,250],\n\t  lavenderblush:  [255,240,245],\n\t  lawngreen:  [124,252,0],\n\t  lemonchiffon: [255,250,205],\n\t  lightblue:  [173,216,230],\n\t  lightcoral: [240,128,128],\n\t  lightcyan:  [224,255,255],\n\t  lightgoldenrodyellow: [250,250,210],\n\t  lightgray:  [211,211,211],\n\t  lightgreen: [144,238,144],\n\t  lightgrey:  [211,211,211],\n\t  lightpink:  [255,182,193],\n\t  lightsalmon:  [255,160,122],\n\t  lightseagreen:  [32,178,170],\n\t  lightskyblue: [135,206,250],\n\t  lightslategray: [119,136,153],\n\t  lightslategrey: [119,136,153],\n\t  lightsteelblue: [176,196,222],\n\t  lightyellow:  [255,255,224],\n\t  lime: [0,255,0],\n\t  limegreen:  [50,205,50],\n\t  linen:  [250,240,230],\n\t  magenta:  [255,0,255],\n\t  maroon: [128,0,0],\n\t  mediumaquamarine: [102,205,170],\n\t  mediumblue: [0,0,205],\n\t  mediumorchid: [186,85,211],\n\t  mediumpurple: [147,112,219],\n\t  mediumseagreen: [60,179,113],\n\t  mediumslateblue:  [123,104,238],\n\t  mediumspringgreen:  [0,250,154],\n\t  mediumturquoise:  [72,209,204],\n\t  mediumvioletred:  [199,21,133],\n\t  midnightblue: [25,25,112],\n\t  mintcream:  [245,255,250],\n\t  mistyrose:  [255,228,225],\n\t  moccasin: [255,228,181],\n\t  navajowhite:  [255,222,173],\n\t  navy: [0,0,128],\n\t  oldlace:  [253,245,230],\n\t  olive:  [128,128,0],\n\t  olivedrab:  [107,142,35],\n\t  orange: [255,165,0],\n\t  orangered:  [255,69,0],\n\t  orchid: [218,112,214],\n\t  palegoldenrod:  [238,232,170],\n\t  palegreen:  [152,251,152],\n\t  paleturquoise:  [175,238,238],\n\t  palevioletred:  [219,112,147],\n\t  papayawhip: [255,239,213],\n\t  peachpuff:  [255,218,185],\n\t  peru: [205,133,63],\n\t  pink: [255,192,203],\n\t  plum: [221,160,221],\n\t  powderblue: [176,224,230],\n\t  purple: [128,0,128],\n\t  rebeccapurple: [102, 51, 153],\n\t  red:  [255,0,0],\n\t  rosybrown:  [188,143,143],\n\t  royalblue:  [65,105,225],\n\t  saddlebrown:  [139,69,19],\n\t  salmon: [250,128,114],\n\t  sandybrown: [244,164,96],\n\t  seagreen: [46,139,87],\n\t  seashell: [255,245,238],\n\t  sienna: [160,82,45],\n\t  silver: [192,192,192],\n\t  skyblue:  [135,206,235],\n\t  slateblue:  [106,90,205],\n\t  slategray:  [112,128,144],\n\t  slategrey:  [112,128,144],\n\t  snow: [255,250,250],\n\t  springgreen:  [0,255,127],\n\t  steelblue:  [70,130,180],\n\t  tan:  [210,180,140],\n\t  teal: [0,128,128],\n\t  thistle:  [216,191,216],\n\t  tomato: [255,99,71],\n\t  turquoise:  [64,224,208],\n\t  violet: [238,130,238],\n\t  wheat:  [245,222,179],\n\t  white:  [255,255,255],\n\t  whitesmoke: [245,245,245],\n\t  yellow: [255,255,0],\n\t  yellowgreen:  [154,205,50]\n\t};\n\t\n\tvar reverseKeywords = {};\n\tfor (var key in cssKeywords) {\n\t  reverseKeywords[JSON.stringify(cssKeywords[key])] = key;\n\t}\n\n\n/***/ },\n\n/***/ 622:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar conversions = __webpack_require__(621);\n\t\n\tvar convert = function() {\n\t   return new Converter();\n\t}\n\t\n\tfor (var func in conversions) {\n\t  // export Raw versions\n\t  convert[func + \"Raw\"] =  (function(func) {\n\t    // accept array or plain args\n\t    return function(arg) {\n\t      if (typeof arg == \"number\")\n\t        arg = Array.prototype.slice.call(arguments);\n\t      return conversions[func](arg);\n\t    }\n\t  })(func);\n\t\n\t  var pair = /(\\w+)2(\\w+)/.exec(func),\n\t      from = pair[1],\n\t      to = pair[2];\n\t\n\t  // export rgb2hsl and [\"rgb\"][\"hsl\"]\n\t  convert[from] = convert[from] || {};\n\t\n\t  convert[from][to] = convert[func] = (function(func) { \n\t    return function(arg) {\n\t      if (typeof arg == \"number\")\n\t        arg = Array.prototype.slice.call(arguments);\n\t      \n\t      var val = conversions[func](arg);\n\t      if (typeof val == \"string\" || val === undefined)\n\t        return val; // keyword\n\t\n\t      for (var i = 0; i < val.length; i++)\n\t        val[i] = Math.round(val[i]);\n\t      return val;\n\t    }\n\t  })(func);\n\t}\n\t\n\t\n\t/* Converter does lazy conversion and caching */\n\tvar Converter = function() {\n\t   this.convs = {};\n\t};\n\t\n\t/* Either get the values for a space or\n\t  set the values for a space, depending on args */\n\tConverter.prototype.routeSpace = function(space, args) {\n\t   var values = args[0];\n\t   if (values === undefined) {\n\t      // color.rgb()\n\t      return this.getValues(space);\n\t   }\n\t   // color.rgb(10, 10, 10)\n\t   if (typeof values == \"number\") {\n\t      values = Array.prototype.slice.call(args);        \n\t   }\n\t\n\t   return this.setValues(space, values);\n\t};\n\t  \n\t/* Set the values for a space, invalidating cache */\n\tConverter.prototype.setValues = function(space, values) {\n\t   this.space = space;\n\t   this.convs = {};\n\t   this.convs[space] = values;\n\t   return this;\n\t};\n\t\n\t/* Get the values for a space. If there's already\n\t  a conversion for the space, fetch it, otherwise\n\t  compute it */\n\tConverter.prototype.getValues = function(space) {\n\t   var vals = this.convs[space];\n\t   if (!vals) {\n\t      var fspace = this.space,\n\t          from = this.convs[fspace];\n\t      vals = convert[fspace][space](from);\n\t\n\t      this.convs[space] = vals;\n\t   }\n\t  return vals;\n\t};\n\t\n\t[\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function(space) {\n\t   Converter.prototype[space] = function(vals) {\n\t      return this.routeSpace(space, arguments);\n\t   }\n\t});\n\t\n\tmodule.exports = convert;\n\n/***/ },\n\n/***/ 623:\n/***/ function(module, exports) {\n\n\tmodule.exports = {\r\n\t\t\"aliceblue\": [240, 248, 255],\r\n\t\t\"antiquewhite\": [250, 235, 215],\r\n\t\t\"aqua\": [0, 255, 255],\r\n\t\t\"aquamarine\": [127, 255, 212],\r\n\t\t\"azure\": [240, 255, 255],\r\n\t\t\"beige\": [245, 245, 220],\r\n\t\t\"bisque\": [255, 228, 196],\r\n\t\t\"black\": [0, 0, 0],\r\n\t\t\"blanchedalmond\": [255, 235, 205],\r\n\t\t\"blue\": [0, 0, 255],\r\n\t\t\"blueviolet\": [138, 43, 226],\r\n\t\t\"brown\": [165, 42, 42],\r\n\t\t\"burlywood\": [222, 184, 135],\r\n\t\t\"cadetblue\": [95, 158, 160],\r\n\t\t\"chartreuse\": [127, 255, 0],\r\n\t\t\"chocolate\": [210, 105, 30],\r\n\t\t\"coral\": [255, 127, 80],\r\n\t\t\"cornflowerblue\": [100, 149, 237],\r\n\t\t\"cornsilk\": [255, 248, 220],\r\n\t\t\"crimson\": [220, 20, 60],\r\n\t\t\"cyan\": [0, 255, 255],\r\n\t\t\"darkblue\": [0, 0, 139],\r\n\t\t\"darkcyan\": [0, 139, 139],\r\n\t\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\t\"darkgray\": [169, 169, 169],\r\n\t\t\"darkgreen\": [0, 100, 0],\r\n\t\t\"darkgrey\": [169, 169, 169],\r\n\t\t\"darkkhaki\": [189, 183, 107],\r\n\t\t\"darkmagenta\": [139, 0, 139],\r\n\t\t\"darkolivegreen\": [85, 107, 47],\r\n\t\t\"darkorange\": [255, 140, 0],\r\n\t\t\"darkorchid\": [153, 50, 204],\r\n\t\t\"darkred\": [139, 0, 0],\r\n\t\t\"darksalmon\": [233, 150, 122],\r\n\t\t\"darkseagreen\": [143, 188, 143],\r\n\t\t\"darkslateblue\": [72, 61, 139],\r\n\t\t\"darkslategray\": [47, 79, 79],\r\n\t\t\"darkslategrey\": [47, 79, 79],\r\n\t\t\"darkturquoise\": [0, 206, 209],\r\n\t\t\"darkviolet\": [148, 0, 211],\r\n\t\t\"deeppink\": [255, 20, 147],\r\n\t\t\"deepskyblue\": [0, 191, 255],\r\n\t\t\"dimgray\": [105, 105, 105],\r\n\t\t\"dimgrey\": [105, 105, 105],\r\n\t\t\"dodgerblue\": [30, 144, 255],\r\n\t\t\"firebrick\": [178, 34, 34],\r\n\t\t\"floralwhite\": [255, 250, 240],\r\n\t\t\"forestgreen\": [34, 139, 34],\r\n\t\t\"fuchsia\": [255, 0, 255],\r\n\t\t\"gainsboro\": [220, 220, 220],\r\n\t\t\"ghostwhite\": [248, 248, 255],\r\n\t\t\"gold\": [255, 215, 0],\r\n\t\t\"goldenrod\": [218, 165, 32],\r\n\t\t\"gray\": [128, 128, 128],\r\n\t\t\"green\": [0, 128, 0],\r\n\t\t\"greenyellow\": [173, 255, 47],\r\n\t\t\"grey\": [128, 128, 128],\r\n\t\t\"honeydew\": [240, 255, 240],\r\n\t\t\"hotpink\": [255, 105, 180],\r\n\t\t\"indianred\": [205, 92, 92],\r\n\t\t\"indigo\": [75, 0, 130],\r\n\t\t\"ivory\": [255, 255, 240],\r\n\t\t\"khaki\": [240, 230, 140],\r\n\t\t\"lavender\": [230, 230, 250],\r\n\t\t\"lavenderblush\": [255, 240, 245],\r\n\t\t\"lawngreen\": [124, 252, 0],\r\n\t\t\"lemonchiffon\": [255, 250, 205],\r\n\t\t\"lightblue\": [173, 216, 230],\r\n\t\t\"lightcoral\": [240, 128, 128],\r\n\t\t\"lightcyan\": [224, 255, 255],\r\n\t\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\t\"lightgray\": [211, 211, 211],\r\n\t\t\"lightgreen\": [144, 238, 144],\r\n\t\t\"lightgrey\": [211, 211, 211],\r\n\t\t\"lightpink\": [255, 182, 193],\r\n\t\t\"lightsalmon\": [255, 160, 122],\r\n\t\t\"lightseagreen\": [32, 178, 170],\r\n\t\t\"lightskyblue\": [135, 206, 250],\r\n\t\t\"lightslategray\": [119, 136, 153],\r\n\t\t\"lightslategrey\": [119, 136, 153],\r\n\t\t\"lightsteelblue\": [176, 196, 222],\r\n\t\t\"lightyellow\": [255, 255, 224],\r\n\t\t\"lime\": [0, 255, 0],\r\n\t\t\"limegreen\": [50, 205, 50],\r\n\t\t\"linen\": [250, 240, 230],\r\n\t\t\"magenta\": [255, 0, 255],\r\n\t\t\"maroon\": [128, 0, 0],\r\n\t\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\t\"mediumblue\": [0, 0, 205],\r\n\t\t\"mediumorchid\": [186, 85, 211],\r\n\t\t\"mediumpurple\": [147, 112, 219],\r\n\t\t\"mediumseagreen\": [60, 179, 113],\r\n\t\t\"mediumslateblue\": [123, 104, 238],\r\n\t\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\t\"mediumturquoise\": [72, 209, 204],\r\n\t\t\"mediumvioletred\": [199, 21, 133],\r\n\t\t\"midnightblue\": [25, 25, 112],\r\n\t\t\"mintcream\": [245, 255, 250],\r\n\t\t\"mistyrose\": [255, 228, 225],\r\n\t\t\"moccasin\": [255, 228, 181],\r\n\t\t\"navajowhite\": [255, 222, 173],\r\n\t\t\"navy\": [0, 0, 128],\r\n\t\t\"oldlace\": [253, 245, 230],\r\n\t\t\"olive\": [128, 128, 0],\r\n\t\t\"olivedrab\": [107, 142, 35],\r\n\t\t\"orange\": [255, 165, 0],\r\n\t\t\"orangered\": [255, 69, 0],\r\n\t\t\"orchid\": [218, 112, 214],\r\n\t\t\"palegoldenrod\": [238, 232, 170],\r\n\t\t\"palegreen\": [152, 251, 152],\r\n\t\t\"paleturquoise\": [175, 238, 238],\r\n\t\t\"palevioletred\": [219, 112, 147],\r\n\t\t\"papayawhip\": [255, 239, 213],\r\n\t\t\"peachpuff\": [255, 218, 185],\r\n\t\t\"peru\": [205, 133, 63],\r\n\t\t\"pink\": [255, 192, 203],\r\n\t\t\"plum\": [221, 160, 221],\r\n\t\t\"powderblue\": [176, 224, 230],\r\n\t\t\"purple\": [128, 0, 128],\r\n\t\t\"rebeccapurple\": [102, 51, 153],\r\n\t\t\"red\": [255, 0, 0],\r\n\t\t\"rosybrown\": [188, 143, 143],\r\n\t\t\"royalblue\": [65, 105, 225],\r\n\t\t\"saddlebrown\": [139, 69, 19],\r\n\t\t\"salmon\": [250, 128, 114],\r\n\t\t\"sandybrown\": [244, 164, 96],\r\n\t\t\"seagreen\": [46, 139, 87],\r\n\t\t\"seashell\": [255, 245, 238],\r\n\t\t\"sienna\": [160, 82, 45],\r\n\t\t\"silver\": [192, 192, 192],\r\n\t\t\"skyblue\": [135, 206, 235],\r\n\t\t\"slateblue\": [106, 90, 205],\r\n\t\t\"slategray\": [112, 128, 144],\r\n\t\t\"slategrey\": [112, 128, 144],\r\n\t\t\"snow\": [255, 250, 250],\r\n\t\t\"springgreen\": [0, 255, 127],\r\n\t\t\"steelblue\": [70, 130, 180],\r\n\t\t\"tan\": [210, 180, 140],\r\n\t\t\"teal\": [0, 128, 128],\r\n\t\t\"thistle\": [216, 191, 216],\r\n\t\t\"tomato\": [255, 99, 71],\r\n\t\t\"turquoise\": [64, 224, 208],\r\n\t\t\"violet\": [238, 130, 238],\r\n\t\t\"wheat\": [245, 222, 179],\r\n\t\t\"white\": [255, 255, 255],\r\n\t\t\"whitesmoke\": [245, 245, 245],\r\n\t\t\"yellow\": [255, 255, 0],\r\n\t\t\"yellowgreen\": [154, 205, 50]\r\n\t};\n\n/***/ },\n\n/***/ 736:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global, module) {/**\n\t * Lodash (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modularize exports=\"npm\" -o ./`\n\t * Copyright JS Foundation and other contributors <https://js.foundation/>\n\t * Released under MIT license <https://lodash.com/license>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t */\n\t\n\t/** Used as the size to enable large array optimizations. */\n\tvar LARGE_ARRAY_SIZE = 200;\n\t\n\t/** Used to stand-in for `undefined` hash values. */\n\tvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\t\n\t/** Used to compose bitmasks for value comparisons. */\n\tvar COMPARE_PARTIAL_FLAG = 1,\n\t    COMPARE_UNORDERED_FLAG = 2;\n\t\n\t/** Used as references for various `Number` constants. */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/** `Object#toString` result references. */\n\tvar argsTag = '[object Arguments]',\n\t    arrayTag = '[object Array]',\n\t    asyncTag = '[object AsyncFunction]',\n\t    boolTag = '[object Boolean]',\n\t    dateTag = '[object Date]',\n\t    errorTag = '[object Error]',\n\t    funcTag = '[object Function]',\n\t    genTag = '[object GeneratorFunction]',\n\t    mapTag = '[object Map]',\n\t    numberTag = '[object Number]',\n\t    nullTag = '[object Null]',\n\t    objectTag = '[object Object]',\n\t    promiseTag = '[object Promise]',\n\t    proxyTag = '[object Proxy]',\n\t    regexpTag = '[object RegExp]',\n\t    setTag = '[object Set]',\n\t    stringTag = '[object String]',\n\t    symbolTag = '[object Symbol]',\n\t    undefinedTag = '[object Undefined]',\n\t    weakMapTag = '[object WeakMap]';\n\t\n\tvar arrayBufferTag = '[object ArrayBuffer]',\n\t    dataViewTag = '[object DataView]',\n\t    float32Tag = '[object Float32Array]',\n\t    float64Tag = '[object Float64Array]',\n\t    int8Tag = '[object Int8Array]',\n\t    int16Tag = '[object Int16Array]',\n\t    int32Tag = '[object Int32Array]',\n\t    uint8Tag = '[object Uint8Array]',\n\t    uint8ClampedTag = '[object Uint8ClampedArray]',\n\t    uint16Tag = '[object Uint16Array]',\n\t    uint32Tag = '[object Uint32Array]';\n\t\n\t/**\n\t * Used to match `RegExp`\n\t * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n\t */\n\tvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\t\n\t/** Used to detect host constructors (Safari). */\n\tvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\t\n\t/** Used to detect unsigned integer values. */\n\tvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\t\n\t/** Used to identify `toStringTag` values of typed arrays. */\n\tvar typedArrayTags = {};\n\ttypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n\ttypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n\ttypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n\ttypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n\ttypedArrayTags[uint32Tag] = true;\n\ttypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n\ttypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n\ttypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n\ttypedArrayTags[errorTag] = typedArrayTags[funcTag] =\n\ttypedArrayTags[mapTag] = typedArrayTags[numberTag] =\n\ttypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n\ttypedArrayTags[setTag] = typedArrayTags[stringTag] =\n\ttypedArrayTags[weakMapTag] = false;\n\t\n\t/** Detect free variable `global` from Node.js. */\n\tvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\t\n\t/** Detect free variable `self`. */\n\tvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\t\n\t/** Used as a reference to the global object. */\n\tvar root = freeGlobal || freeSelf || Function('return this')();\n\t\n\t/** Detect free variable `exports`. */\n\tvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\t\n\t/** Detect free variable `module`. */\n\tvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\t\n\t/** Detect the popular CommonJS extension `module.exports`. */\n\tvar moduleExports = freeModule && freeModule.exports === freeExports;\n\t\n\t/** Detect free variable `process` from Node.js. */\n\tvar freeProcess = moduleExports && freeGlobal.process;\n\t\n\t/** Used to access faster Node.js helpers. */\n\tvar nodeUtil = (function() {\n\t  try {\n\t    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n\t  } catch (e) {}\n\t}());\n\t\n\t/* Node.js helper references. */\n\tvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\t\n\t/**\n\t * A specialized version of `_.filter` for arrays without support for\n\t * iteratee shorthands.\n\t *\n\t * @private\n\t * @param {Array} [array] The array to iterate over.\n\t * @param {Function} predicate The function invoked per iteration.\n\t * @returns {Array} Returns the new filtered array.\n\t */\n\tfunction arrayFilter(array, predicate) {\n\t  var index = -1,\n\t      length = array == null ? 0 : array.length,\n\t      resIndex = 0,\n\t      result = [];\n\t\n\t  while (++index < length) {\n\t    var value = array[index];\n\t    if (predicate(value, index, array)) {\n\t      result[resIndex++] = value;\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * Appends the elements of `values` to `array`.\n\t *\n\t * @private\n\t * @param {Array} array The array to modify.\n\t * @param {Array} values The values to append.\n\t * @returns {Array} Returns `array`.\n\t */\n\tfunction arrayPush(array, values) {\n\t  var index = -1,\n\t      length = values.length,\n\t      offset = array.length;\n\t\n\t  while (++index < length) {\n\t    array[offset + index] = values[index];\n\t  }\n\t  return array;\n\t}\n\t\n\t/**\n\t * A specialized version of `_.some` for arrays without support for iteratee\n\t * shorthands.\n\t *\n\t * @private\n\t * @param {Array} [array] The array to iterate over.\n\t * @param {Function} predicate The function invoked per iteration.\n\t * @returns {boolean} Returns `true` if any element passes the predicate check,\n\t *  else `false`.\n\t */\n\tfunction arraySome(array, predicate) {\n\t  var index = -1,\n\t      length = array == null ? 0 : array.length;\n\t\n\t  while (++index < length) {\n\t    if (predicate(array[index], index, array)) {\n\t      return true;\n\t    }\n\t  }\n\t  return false;\n\t}\n\t\n\t/**\n\t * The base implementation of `_.times` without support for iteratee shorthands\n\t * or max array length checks.\n\t *\n\t * @private\n\t * @param {number} n The number of times to invoke `iteratee`.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Array} Returns the array of results.\n\t */\n\tfunction baseTimes(n, iteratee) {\n\t  var index = -1,\n\t      result = Array(n);\n\t\n\t  while (++index < n) {\n\t    result[index] = iteratee(index);\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * The base implementation of `_.unary` without support for storing metadata.\n\t *\n\t * @private\n\t * @param {Function} func The function to cap arguments for.\n\t * @returns {Function} Returns the new capped function.\n\t */\n\tfunction baseUnary(func) {\n\t  return function(value) {\n\t    return func(value);\n\t  };\n\t}\n\t\n\t/**\n\t * Checks if a `cache` value for `key` exists.\n\t *\n\t * @private\n\t * @param {Object} cache The cache to query.\n\t * @param {string} key The key of the entry to check.\n\t * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t */\n\tfunction cacheHas(cache, key) {\n\t  return cache.has(key);\n\t}\n\t\n\t/**\n\t * Gets the value at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} [object] The object to query.\n\t * @param {string} key The key of the property to get.\n\t * @returns {*} Returns the property value.\n\t */\n\tfunction getValue(object, key) {\n\t  return object == null ? undefined : object[key];\n\t}\n\t\n\t/**\n\t * Converts `map` to its key-value pairs.\n\t *\n\t * @private\n\t * @param {Object} map The map to convert.\n\t * @returns {Array} Returns the key-value pairs.\n\t */\n\tfunction mapToArray(map) {\n\t  var index = -1,\n\t      result = Array(map.size);\n\t\n\t  map.forEach(function(value, key) {\n\t    result[++index] = [key, value];\n\t  });\n\t  return result;\n\t}\n\t\n\t/**\n\t * Creates a unary function that invokes `func` with its argument transformed.\n\t *\n\t * @private\n\t * @param {Function} func The function to wrap.\n\t * @param {Function} transform The argument transform.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction overArg(func, transform) {\n\t  return function(arg) {\n\t    return func(transform(arg));\n\t  };\n\t}\n\t\n\t/**\n\t * Converts `set` to an array of its values.\n\t *\n\t * @private\n\t * @param {Object} set The set to convert.\n\t * @returns {Array} Returns the values.\n\t */\n\tfunction setToArray(set) {\n\t  var index = -1,\n\t      result = Array(set.size);\n\t\n\t  set.forEach(function(value) {\n\t    result[++index] = value;\n\t  });\n\t  return result;\n\t}\n\t\n\t/** Used for built-in method references. */\n\tvar arrayProto = Array.prototype,\n\t    funcProto = Function.prototype,\n\t    objectProto = Object.prototype;\n\t\n\t/** Used to detect overreaching core-js shims. */\n\tvar coreJsData = root['__core-js_shared__'];\n\t\n\t/** Used to resolve the decompiled source of functions. */\n\tvar funcToString = funcProto.toString;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/** Used to detect methods masquerading as native. */\n\tvar maskSrcKey = (function() {\n\t  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n\t  return uid ? ('Symbol(src)_1.' + uid) : '';\n\t}());\n\t\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar nativeObjectToString = objectProto.toString;\n\t\n\t/** Used to detect if a method is native. */\n\tvar reIsNative = RegExp('^' +\n\t  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n\t  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n\t);\n\t\n\t/** Built-in value references. */\n\tvar Buffer = moduleExports ? root.Buffer : undefined,\n\t    Symbol = root.Symbol,\n\t    Uint8Array = root.Uint8Array,\n\t    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n\t    splice = arrayProto.splice,\n\t    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\t\n\t/* Built-in method references for those with the same name as other `lodash` methods. */\n\tvar nativeGetSymbols = Object.getOwnPropertySymbols,\n\t    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n\t    nativeKeys = overArg(Object.keys, Object);\n\t\n\t/* Built-in method references that are verified to be native. */\n\tvar DataView = getNative(root, 'DataView'),\n\t    Map = getNative(root, 'Map'),\n\t    Promise = getNative(root, 'Promise'),\n\t    Set = getNative(root, 'Set'),\n\t    WeakMap = getNative(root, 'WeakMap'),\n\t    nativeCreate = getNative(Object, 'create');\n\t\n\t/** Used to detect maps, sets, and weakmaps. */\n\tvar dataViewCtorString = toSource(DataView),\n\t    mapCtorString = toSource(Map),\n\t    promiseCtorString = toSource(Promise),\n\t    setCtorString = toSource(Set),\n\t    weakMapCtorString = toSource(WeakMap);\n\t\n\t/** Used to convert symbols to primitives and strings. */\n\tvar symbolProto = Symbol ? Symbol.prototype : undefined,\n\t    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\t\n\t/**\n\t * Creates a hash object.\n\t *\n\t * @private\n\t * @constructor\n\t * @param {Array} [entries] The key-value pairs to cache.\n\t */\n\tfunction Hash(entries) {\n\t  var index = -1,\n\t      length = entries == null ? 0 : entries.length;\n\t\n\t  this.clear();\n\t  while (++index < length) {\n\t    var entry = entries[index];\n\t    this.set(entry[0], entry[1]);\n\t  }\n\t}\n\t\n\t/**\n\t * Removes all key-value entries from the hash.\n\t *\n\t * @private\n\t * @name clear\n\t * @memberOf Hash\n\t */\n\tfunction hashClear() {\n\t  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n\t  this.size = 0;\n\t}\n\t\n\t/**\n\t * Removes `key` and its value from the hash.\n\t *\n\t * @private\n\t * @name delete\n\t * @memberOf Hash\n\t * @param {Object} hash The hash to modify.\n\t * @param {string} key The key of the value to remove.\n\t * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t */\n\tfunction hashDelete(key) {\n\t  var result = this.has(key) && delete this.__data__[key];\n\t  this.size -= result ? 1 : 0;\n\t  return result;\n\t}\n\t\n\t/**\n\t * Gets the hash value for `key`.\n\t *\n\t * @private\n\t * @name get\n\t * @memberOf Hash\n\t * @param {string} key The key of the value to get.\n\t * @returns {*} Returns the entry value.\n\t */\n\tfunction hashGet(key) {\n\t  var data = this.__data__;\n\t  if (nativeCreate) {\n\t    var result = data[key];\n\t    return result === HASH_UNDEFINED ? undefined : result;\n\t  }\n\t  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n\t}\n\t\n\t/**\n\t * Checks if a hash value for `key` exists.\n\t *\n\t * @private\n\t * @name has\n\t * @memberOf Hash\n\t * @param {string} key The key of the entry to check.\n\t * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t */\n\tfunction hashHas(key) {\n\t  var data = this.__data__;\n\t  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n\t}\n\t\n\t/**\n\t * Sets the hash `key` to `value`.\n\t *\n\t * @private\n\t * @name set\n\t * @memberOf Hash\n\t * @param {string} key The key of the value to set.\n\t * @param {*} value The value to set.\n\t * @returns {Object} Returns the hash instance.\n\t */\n\tfunction hashSet(key, value) {\n\t  var data = this.__data__;\n\t  this.size += this.has(key) ? 0 : 1;\n\t  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n\t  return this;\n\t}\n\t\n\t// Add methods to `Hash`.\n\tHash.prototype.clear = hashClear;\n\tHash.prototype['delete'] = hashDelete;\n\tHash.prototype.get = hashGet;\n\tHash.prototype.has = hashHas;\n\tHash.prototype.set = hashSet;\n\t\n\t/**\n\t * Creates an list cache object.\n\t *\n\t * @private\n\t * @constructor\n\t * @param {Array} [entries] The key-value pairs to cache.\n\t */\n\tfunction ListCache(entries) {\n\t  var index = -1,\n\t      length = entries == null ? 0 : entries.length;\n\t\n\t  this.clear();\n\t  while (++index < length) {\n\t    var entry = entries[index];\n\t    this.set(entry[0], entry[1]);\n\t  }\n\t}\n\t\n\t/**\n\t * Removes all key-value entries from the list cache.\n\t *\n\t * @private\n\t * @name clear\n\t * @memberOf ListCache\n\t */\n\tfunction listCacheClear() {\n\t  this.__data__ = [];\n\t  this.size = 0;\n\t}\n\t\n\t/**\n\t * Removes `key` and its value from the list cache.\n\t *\n\t * @private\n\t * @name delete\n\t * @memberOf ListCache\n\t * @param {string} key The key of the value to remove.\n\t * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t */\n\tfunction listCacheDelete(key) {\n\t  var data = this.__data__,\n\t      index = assocIndexOf(data, key);\n\t\n\t  if (index < 0) {\n\t    return false;\n\t  }\n\t  var lastIndex = data.length - 1;\n\t  if (index == lastIndex) {\n\t    data.pop();\n\t  } else {\n\t    splice.call(data, index, 1);\n\t  }\n\t  --this.size;\n\t  return true;\n\t}\n\t\n\t/**\n\t * Gets the list cache value for `key`.\n\t *\n\t * @private\n\t * @name get\n\t * @memberOf ListCache\n\t * @param {string} key The key of the value to get.\n\t * @returns {*} Returns the entry value.\n\t */\n\tfunction listCacheGet(key) {\n\t  var data = this.__data__,\n\t      index = assocIndexOf(data, key);\n\t\n\t  return index < 0 ? undefined : data[index][1];\n\t}\n\t\n\t/**\n\t * Checks if a list cache value for `key` exists.\n\t *\n\t * @private\n\t * @name has\n\t * @memberOf ListCache\n\t * @param {string} key The key of the entry to check.\n\t * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t */\n\tfunction listCacheHas(key) {\n\t  return assocIndexOf(this.__data__, key) > -1;\n\t}\n\t\n\t/**\n\t * Sets the list cache `key` to `value`.\n\t *\n\t * @private\n\t * @name set\n\t * @memberOf ListCache\n\t * @param {string} key The key of the value to set.\n\t * @param {*} value The value to set.\n\t * @returns {Object} Returns the list cache instance.\n\t */\n\tfunction listCacheSet(key, value) {\n\t  var data = this.__data__,\n\t      index = assocIndexOf(data, key);\n\t\n\t  if (index < 0) {\n\t    ++this.size;\n\t    data.push([key, value]);\n\t  } else {\n\t    data[index][1] = value;\n\t  }\n\t  return this;\n\t}\n\t\n\t// Add methods to `ListCache`.\n\tListCache.prototype.clear = listCacheClear;\n\tListCache.prototype['delete'] = listCacheDelete;\n\tListCache.prototype.get = listCacheGet;\n\tListCache.prototype.has = listCacheHas;\n\tListCache.prototype.set = listCacheSet;\n\t\n\t/**\n\t * Creates a map cache object to store key-value pairs.\n\t *\n\t * @private\n\t * @constructor\n\t * @param {Array} [entries] The key-value pairs to cache.\n\t */\n\tfunction MapCache(entries) {\n\t  var index = -1,\n\t      length = entries == null ? 0 : entries.length;\n\t\n\t  this.clear();\n\t  while (++index < length) {\n\t    var entry = entries[index];\n\t    this.set(entry[0], entry[1]);\n\t  }\n\t}\n\t\n\t/**\n\t * Removes all key-value entries from the map.\n\t *\n\t * @private\n\t * @name clear\n\t * @memberOf MapCache\n\t */\n\tfunction mapCacheClear() {\n\t  this.size = 0;\n\t  this.__data__ = {\n\t    'hash': new Hash,\n\t    'map': new (Map || ListCache),\n\t    'string': new Hash\n\t  };\n\t}\n\t\n\t/**\n\t * Removes `key` and its value from the map.\n\t *\n\t * @private\n\t * @name delete\n\t * @memberOf MapCache\n\t * @param {string} key The key of the value to remove.\n\t * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t */\n\tfunction mapCacheDelete(key) {\n\t  var result = getMapData(this, key)['delete'](key);\n\t  this.size -= result ? 1 : 0;\n\t  return result;\n\t}\n\t\n\t/**\n\t * Gets the map value for `key`.\n\t *\n\t * @private\n\t * @name get\n\t * @memberOf MapCache\n\t * @param {string} key The key of the value to get.\n\t * @returns {*} Returns the entry value.\n\t */\n\tfunction mapCacheGet(key) {\n\t  return getMapData(this, key).get(key);\n\t}\n\t\n\t/**\n\t * Checks if a map value for `key` exists.\n\t *\n\t * @private\n\t * @name has\n\t * @memberOf MapCache\n\t * @param {string} key The key of the entry to check.\n\t * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t */\n\tfunction mapCacheHas(key) {\n\t  return getMapData(this, key).has(key);\n\t}\n\t\n\t/**\n\t * Sets the map `key` to `value`.\n\t *\n\t * @private\n\t * @name set\n\t * @memberOf MapCache\n\t * @param {string} key The key of the value to set.\n\t * @param {*} value The value to set.\n\t * @returns {Object} Returns the map cache instance.\n\t */\n\tfunction mapCacheSet(key, value) {\n\t  var data = getMapData(this, key),\n\t      size = data.size;\n\t\n\t  data.set(key, value);\n\t  this.size += data.size == size ? 0 : 1;\n\t  return this;\n\t}\n\t\n\t// Add methods to `MapCache`.\n\tMapCache.prototype.clear = mapCacheClear;\n\tMapCache.prototype['delete'] = mapCacheDelete;\n\tMapCache.prototype.get = mapCacheGet;\n\tMapCache.prototype.has = mapCacheHas;\n\tMapCache.prototype.set = mapCacheSet;\n\t\n\t/**\n\t *\n\t * Creates an array cache object to store unique values.\n\t *\n\t * @private\n\t * @constructor\n\t * @param {Array} [values] The values to cache.\n\t */\n\tfunction SetCache(values) {\n\t  var index = -1,\n\t      length = values == null ? 0 : values.length;\n\t\n\t  this.__data__ = new MapCache;\n\t  while (++index < length) {\n\t    this.add(values[index]);\n\t  }\n\t}\n\t\n\t/**\n\t * Adds `value` to the array cache.\n\t *\n\t * @private\n\t * @name add\n\t * @memberOf SetCache\n\t * @alias push\n\t * @param {*} value The value to cache.\n\t * @returns {Object} Returns the cache instance.\n\t */\n\tfunction setCacheAdd(value) {\n\t  this.__data__.set(value, HASH_UNDEFINED);\n\t  return this;\n\t}\n\t\n\t/**\n\t * Checks if `value` is in the array cache.\n\t *\n\t * @private\n\t * @name has\n\t * @memberOf SetCache\n\t * @param {*} value The value to search for.\n\t * @returns {number} Returns `true` if `value` is found, else `false`.\n\t */\n\tfunction setCacheHas(value) {\n\t  return this.__data__.has(value);\n\t}\n\t\n\t// Add methods to `SetCache`.\n\tSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n\tSetCache.prototype.has = setCacheHas;\n\t\n\t/**\n\t * Creates a stack cache object to store key-value pairs.\n\t *\n\t * @private\n\t * @constructor\n\t * @param {Array} [entries] The key-value pairs to cache.\n\t */\n\tfunction Stack(entries) {\n\t  var data = this.__data__ = new ListCache(entries);\n\t  this.size = data.size;\n\t}\n\t\n\t/**\n\t * Removes all key-value entries from the stack.\n\t *\n\t * @private\n\t * @name clear\n\t * @memberOf Stack\n\t */\n\tfunction stackClear() {\n\t  this.__data__ = new ListCache;\n\t  this.size = 0;\n\t}\n\t\n\t/**\n\t * Removes `key` and its value from the stack.\n\t *\n\t * @private\n\t * @name delete\n\t * @memberOf Stack\n\t * @param {string} key The key of the value to remove.\n\t * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t */\n\tfunction stackDelete(key) {\n\t  var data = this.__data__,\n\t      result = data['delete'](key);\n\t\n\t  this.size = data.size;\n\t  return result;\n\t}\n\t\n\t/**\n\t * Gets the stack value for `key`.\n\t *\n\t * @private\n\t * @name get\n\t * @memberOf Stack\n\t * @param {string} key The key of the value to get.\n\t * @returns {*} Returns the entry value.\n\t */\n\tfunction stackGet(key) {\n\t  return this.__data__.get(key);\n\t}\n\t\n\t/**\n\t * Checks if a stack value for `key` exists.\n\t *\n\t * @private\n\t * @name has\n\t * @memberOf Stack\n\t * @param {string} key The key of the entry to check.\n\t * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t */\n\tfunction stackHas(key) {\n\t  return this.__data__.has(key);\n\t}\n\t\n\t/**\n\t * Sets the stack `key` to `value`.\n\t *\n\t * @private\n\t * @name set\n\t * @memberOf Stack\n\t * @param {string} key The key of the value to set.\n\t * @param {*} value The value to set.\n\t * @returns {Object} Returns the stack cache instance.\n\t */\n\tfunction stackSet(key, value) {\n\t  var data = this.__data__;\n\t  if (data instanceof ListCache) {\n\t    var pairs = data.__data__;\n\t    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n\t      pairs.push([key, value]);\n\t      this.size = ++data.size;\n\t      return this;\n\t    }\n\t    data = this.__data__ = new MapCache(pairs);\n\t  }\n\t  data.set(key, value);\n\t  this.size = data.size;\n\t  return this;\n\t}\n\t\n\t// Add methods to `Stack`.\n\tStack.prototype.clear = stackClear;\n\tStack.prototype['delete'] = stackDelete;\n\tStack.prototype.get = stackGet;\n\tStack.prototype.has = stackHas;\n\tStack.prototype.set = stackSet;\n\t\n\t/**\n\t * Creates an array of the enumerable property names of the array-like `value`.\n\t *\n\t * @private\n\t * @param {*} value The value to query.\n\t * @param {boolean} inherited Specify returning inherited property names.\n\t * @returns {Array} Returns the array of property names.\n\t */\n\tfunction arrayLikeKeys(value, inherited) {\n\t  var isArr = isArray(value),\n\t      isArg = !isArr && isArguments(value),\n\t      isBuff = !isArr && !isArg && isBuffer(value),\n\t      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n\t      skipIndexes = isArr || isArg || isBuff || isType,\n\t      result = skipIndexes ? baseTimes(value.length, String) : [],\n\t      length = result.length;\n\t\n\t  for (var key in value) {\n\t    if ((inherited || hasOwnProperty.call(value, key)) &&\n\t        !(skipIndexes && (\n\t           // Safari 9 has enumerable `arguments.length` in strict mode.\n\t           key == 'length' ||\n\t           // Node.js 0.10 has enumerable non-index properties on buffers.\n\t           (isBuff && (key == 'offset' || key == 'parent')) ||\n\t           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n\t           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n\t           // Skip index properties.\n\t           isIndex(key, length)\n\t        ))) {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * Gets the index at which the `key` is found in `array` of key-value pairs.\n\t *\n\t * @private\n\t * @param {Array} array The array to inspect.\n\t * @param {*} key The key to search for.\n\t * @returns {number} Returns the index of the matched value, else `-1`.\n\t */\n\tfunction assocIndexOf(array, key) {\n\t  var length = array.length;\n\t  while (length--) {\n\t    if (eq(array[length][0], key)) {\n\t      return length;\n\t    }\n\t  }\n\t  return -1;\n\t}\n\t\n\t/**\n\t * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n\t * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n\t * symbols of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {Function} keysFunc The function to get the keys of `object`.\n\t * @param {Function} symbolsFunc The function to get the symbols of `object`.\n\t * @returns {Array} Returns the array of property names and symbols.\n\t */\n\tfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n\t  var result = keysFunc(object);\n\t  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n\t}\n\t\n\t/**\n\t * The base implementation of `getTag` without fallbacks for buggy environments.\n\t *\n\t * @private\n\t * @param {*} value The value to query.\n\t * @returns {string} Returns the `toStringTag`.\n\t */\n\tfunction baseGetTag(value) {\n\t  if (value == null) {\n\t    return value === undefined ? undefinedTag : nullTag;\n\t  }\n\t  return (symToStringTag && symToStringTag in Object(value))\n\t    ? getRawTag(value)\n\t    : objectToString(value);\n\t}\n\t\n\t/**\n\t * The base implementation of `_.isArguments`.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n\t */\n\tfunction baseIsArguments(value) {\n\t  return isObjectLike(value) && baseGetTag(value) == argsTag;\n\t}\n\t\n\t/**\n\t * The base implementation of `_.isEqual` which supports partial comparisons\n\t * and tracks traversed objects.\n\t *\n\t * @private\n\t * @param {*} value The value to compare.\n\t * @param {*} other The other value to compare.\n\t * @param {boolean} bitmask The bitmask flags.\n\t *  1 - Unordered comparison\n\t *  2 - Partial comparison\n\t * @param {Function} [customizer] The function to customize comparisons.\n\t * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n\t * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n\t */\n\tfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n\t  if (value === other) {\n\t    return true;\n\t  }\n\t  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n\t    return value !== value && other !== other;\n\t  }\n\t  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n\t}\n\t\n\t/**\n\t * A specialized version of `baseIsEqual` for arrays and objects which performs\n\t * deep comparisons and tracks traversed objects enabling objects with circular\n\t * references to be compared.\n\t *\n\t * @private\n\t * @param {Object} object The object to compare.\n\t * @param {Object} other The other object to compare.\n\t * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n\t * @param {Function} customizer The function to customize comparisons.\n\t * @param {Function} equalFunc The function to determine equivalents of values.\n\t * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n\t * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n\t */\n\tfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n\t  var objIsArr = isArray(object),\n\t      othIsArr = isArray(other),\n\t      objTag = objIsArr ? arrayTag : getTag(object),\n\t      othTag = othIsArr ? arrayTag : getTag(other);\n\t\n\t  objTag = objTag == argsTag ? objectTag : objTag;\n\t  othTag = othTag == argsTag ? objectTag : othTag;\n\t\n\t  var objIsObj = objTag == objectTag,\n\t      othIsObj = othTag == objectTag,\n\t      isSameTag = objTag == othTag;\n\t\n\t  if (isSameTag && isBuffer(object)) {\n\t    if (!isBuffer(other)) {\n\t      return false;\n\t    }\n\t    objIsArr = true;\n\t    objIsObj = false;\n\t  }\n\t  if (isSameTag && !objIsObj) {\n\t    stack || (stack = new Stack);\n\t    return (objIsArr || isTypedArray(object))\n\t      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n\t      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n\t  }\n\t  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n\t    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n\t        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\t\n\t    if (objIsWrapped || othIsWrapped) {\n\t      var objUnwrapped = objIsWrapped ? object.value() : object,\n\t          othUnwrapped = othIsWrapped ? other.value() : other;\n\t\n\t      stack || (stack = new Stack);\n\t      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n\t    }\n\t  }\n\t  if (!isSameTag) {\n\t    return false;\n\t  }\n\t  stack || (stack = new Stack);\n\t  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n\t}\n\t\n\t/**\n\t * The base implementation of `_.isNative` without bad shim checks.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a native function,\n\t *  else `false`.\n\t */\n\tfunction baseIsNative(value) {\n\t  if (!isObject(value) || isMasked(value)) {\n\t    return false;\n\t  }\n\t  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n\t  return pattern.test(toSource(value));\n\t}\n\t\n\t/**\n\t * The base implementation of `_.isTypedArray` without Node.js optimizations.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n\t */\n\tfunction baseIsTypedArray(value) {\n\t  return isObjectLike(value) &&\n\t    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n\t}\n\t\n\t/**\n\t * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t */\n\tfunction baseKeys(object) {\n\t  if (!isPrototype(object)) {\n\t    return nativeKeys(object);\n\t  }\n\t  var result = [];\n\t  for (var key in Object(object)) {\n\t    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * A specialized version of `baseIsEqualDeep` for arrays with support for\n\t * partial deep comparisons.\n\t *\n\t * @private\n\t * @param {Array} array The array to compare.\n\t * @param {Array} other The other array to compare.\n\t * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n\t * @param {Function} customizer The function to customize comparisons.\n\t * @param {Function} equalFunc The function to determine equivalents of values.\n\t * @param {Object} stack Tracks traversed `array` and `other` objects.\n\t * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n\t */\n\tfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n\t  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n\t      arrLength = array.length,\n\t      othLength = other.length;\n\t\n\t  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n\t    return false;\n\t  }\n\t  // Assume cyclic values are equal.\n\t  var stacked = stack.get(array);\n\t  if (stacked && stack.get(other)) {\n\t    return stacked == other;\n\t  }\n\t  var index = -1,\n\t      result = true,\n\t      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\t\n\t  stack.set(array, other);\n\t  stack.set(other, array);\n\t\n\t  // Ignore non-index properties.\n\t  while (++index < arrLength) {\n\t    var arrValue = array[index],\n\t        othValue = other[index];\n\t\n\t    if (customizer) {\n\t      var compared = isPartial\n\t        ? customizer(othValue, arrValue, index, other, array, stack)\n\t        : customizer(arrValue, othValue, index, array, other, stack);\n\t    }\n\t    if (compared !== undefined) {\n\t      if (compared) {\n\t        continue;\n\t      }\n\t      result = false;\n\t      break;\n\t    }\n\t    // Recursively compare arrays (susceptible to call stack limits).\n\t    if (seen) {\n\t      if (!arraySome(other, function(othValue, othIndex) {\n\t            if (!cacheHas(seen, othIndex) &&\n\t                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n\t              return seen.push(othIndex);\n\t            }\n\t          })) {\n\t        result = false;\n\t        break;\n\t      }\n\t    } else if (!(\n\t          arrValue === othValue ||\n\t            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n\t        )) {\n\t      result = false;\n\t      break;\n\t    }\n\t  }\n\t  stack['delete'](array);\n\t  stack['delete'](other);\n\t  return result;\n\t}\n\t\n\t/**\n\t * A specialized version of `baseIsEqualDeep` for comparing objects of\n\t * the same `toStringTag`.\n\t *\n\t * **Note:** This function only supports comparing values with tags of\n\t * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n\t *\n\t * @private\n\t * @param {Object} object The object to compare.\n\t * @param {Object} other The other object to compare.\n\t * @param {string} tag The `toStringTag` of the objects to compare.\n\t * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n\t * @param {Function} customizer The function to customize comparisons.\n\t * @param {Function} equalFunc The function to determine equivalents of values.\n\t * @param {Object} stack Tracks traversed `object` and `other` objects.\n\t * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n\t */\n\tfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n\t  switch (tag) {\n\t    case dataViewTag:\n\t      if ((object.byteLength != other.byteLength) ||\n\t          (object.byteOffset != other.byteOffset)) {\n\t        return false;\n\t      }\n\t      object = object.buffer;\n\t      other = other.buffer;\n\t\n\t    case arrayBufferTag:\n\t      if ((object.byteLength != other.byteLength) ||\n\t          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n\t        return false;\n\t      }\n\t      return true;\n\t\n\t    case boolTag:\n\t    case dateTag:\n\t    case numberTag:\n\t      // Coerce booleans to `1` or `0` and dates to milliseconds.\n\t      // Invalid dates are coerced to `NaN`.\n\t      return eq(+object, +other);\n\t\n\t    case errorTag:\n\t      return object.name == other.name && object.message == other.message;\n\t\n\t    case regexpTag:\n\t    case stringTag:\n\t      // Coerce regexes to strings and treat strings, primitives and objects,\n\t      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n\t      // for more details.\n\t      return object == (other + '');\n\t\n\t    case mapTag:\n\t      var convert = mapToArray;\n\t\n\t    case setTag:\n\t      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n\t      convert || (convert = setToArray);\n\t\n\t      if (object.size != other.size && !isPartial) {\n\t        return false;\n\t      }\n\t      // Assume cyclic values are equal.\n\t      var stacked = stack.get(object);\n\t      if (stacked) {\n\t        return stacked == other;\n\t      }\n\t      bitmask |= COMPARE_UNORDERED_FLAG;\n\t\n\t      // Recursively compare objects (susceptible to call stack limits).\n\t      stack.set(object, other);\n\t      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n\t      stack['delete'](object);\n\t      return result;\n\t\n\t    case symbolTag:\n\t      if (symbolValueOf) {\n\t        return symbolValueOf.call(object) == symbolValueOf.call(other);\n\t      }\n\t  }\n\t  return false;\n\t}\n\t\n\t/**\n\t * A specialized version of `baseIsEqualDeep` for objects with support for\n\t * partial deep comparisons.\n\t *\n\t * @private\n\t * @param {Object} object The object to compare.\n\t * @param {Object} other The other object to compare.\n\t * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n\t * @param {Function} customizer The function to customize comparisons.\n\t * @param {Function} equalFunc The function to determine equivalents of values.\n\t * @param {Object} stack Tracks traversed `object` and `other` objects.\n\t * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n\t */\n\tfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n\t  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n\t      objProps = getAllKeys(object),\n\t      objLength = objProps.length,\n\t      othProps = getAllKeys(other),\n\t      othLength = othProps.length;\n\t\n\t  if (objLength != othLength && !isPartial) {\n\t    return false;\n\t  }\n\t  var index = objLength;\n\t  while (index--) {\n\t    var key = objProps[index];\n\t    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n\t      return false;\n\t    }\n\t  }\n\t  // Assume cyclic values are equal.\n\t  var stacked = stack.get(object);\n\t  if (stacked && stack.get(other)) {\n\t    return stacked == other;\n\t  }\n\t  var result = true;\n\t  stack.set(object, other);\n\t  stack.set(other, object);\n\t\n\t  var skipCtor = isPartial;\n\t  while (++index < objLength) {\n\t    key = objProps[index];\n\t    var objValue = object[key],\n\t        othValue = other[key];\n\t\n\t    if (customizer) {\n\t      var compared = isPartial\n\t        ? customizer(othValue, objValue, key, other, object, stack)\n\t        : customizer(objValue, othValue, key, object, other, stack);\n\t    }\n\t    // Recursively compare objects (susceptible to call stack limits).\n\t    if (!(compared === undefined\n\t          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n\t          : compared\n\t        )) {\n\t      result = false;\n\t      break;\n\t    }\n\t    skipCtor || (skipCtor = key == 'constructor');\n\t  }\n\t  if (result && !skipCtor) {\n\t    var objCtor = object.constructor,\n\t        othCtor = other.constructor;\n\t\n\t    // Non `Object` object instances with different constructors are not equal.\n\t    if (objCtor != othCtor &&\n\t        ('constructor' in object && 'constructor' in other) &&\n\t        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n\t          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n\t      result = false;\n\t    }\n\t  }\n\t  stack['delete'](object);\n\t  stack['delete'](other);\n\t  return result;\n\t}\n\t\n\t/**\n\t * Creates an array of own enumerable property names and symbols of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names and symbols.\n\t */\n\tfunction getAllKeys(object) {\n\t  return baseGetAllKeys(object, keys, getSymbols);\n\t}\n\t\n\t/**\n\t * Gets the data for `map`.\n\t *\n\t * @private\n\t * @param {Object} map The map to query.\n\t * @param {string} key The reference key.\n\t * @returns {*} Returns the map data.\n\t */\n\tfunction getMapData(map, key) {\n\t  var data = map.__data__;\n\t  return isKeyable(key)\n\t    ? data[typeof key == 'string' ? 'string' : 'hash']\n\t    : data.map;\n\t}\n\t\n\t/**\n\t * Gets the native function at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {string} key The key of the method to get.\n\t * @returns {*} Returns the function if it's native, else `undefined`.\n\t */\n\tfunction getNative(object, key) {\n\t  var value = getValue(object, key);\n\t  return baseIsNative(value) ? value : undefined;\n\t}\n\t\n\t/**\n\t * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n\t *\n\t * @private\n\t * @param {*} value The value to query.\n\t * @returns {string} Returns the raw `toStringTag`.\n\t */\n\tfunction getRawTag(value) {\n\t  var isOwn = hasOwnProperty.call(value, symToStringTag),\n\t      tag = value[symToStringTag];\n\t\n\t  try {\n\t    value[symToStringTag] = undefined;\n\t    var unmasked = true;\n\t  } catch (e) {}\n\t\n\t  var result = nativeObjectToString.call(value);\n\t  if (unmasked) {\n\t    if (isOwn) {\n\t      value[symToStringTag] = tag;\n\t    } else {\n\t      delete value[symToStringTag];\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * Creates an array of the own enumerable symbols of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of symbols.\n\t */\n\tvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n\t  if (object == null) {\n\t    return [];\n\t  }\n\t  object = Object(object);\n\t  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n\t    return propertyIsEnumerable.call(object, symbol);\n\t  });\n\t};\n\t\n\t/**\n\t * Gets the `toStringTag` of `value`.\n\t *\n\t * @private\n\t * @param {*} value The value to query.\n\t * @returns {string} Returns the `toStringTag`.\n\t */\n\tvar getTag = baseGetTag;\n\t\n\t// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n\tif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n\t    (Map && getTag(new Map) != mapTag) ||\n\t    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n\t    (Set && getTag(new Set) != setTag) ||\n\t    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n\t  getTag = function(value) {\n\t    var result = baseGetTag(value),\n\t        Ctor = result == objectTag ? value.constructor : undefined,\n\t        ctorString = Ctor ? toSource(Ctor) : '';\n\t\n\t    if (ctorString) {\n\t      switch (ctorString) {\n\t        case dataViewCtorString: return dataViewTag;\n\t        case mapCtorString: return mapTag;\n\t        case promiseCtorString: return promiseTag;\n\t        case setCtorString: return setTag;\n\t        case weakMapCtorString: return weakMapTag;\n\t      }\n\t    }\n\t    return result;\n\t  };\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like index.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n\t * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n\t */\n\tfunction isIndex(value, length) {\n\t  length = length == null ? MAX_SAFE_INTEGER : length;\n\t  return !!length &&\n\t    (typeof value == 'number' || reIsUint.test(value)) &&\n\t    (value > -1 && value % 1 == 0 && value < length);\n\t}\n\t\n\t/**\n\t * Checks if `value` is suitable for use as unique object key.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n\t */\n\tfunction isKeyable(value) {\n\t  var type = typeof value;\n\t  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n\t    ? (value !== '__proto__')\n\t    : (value === null);\n\t}\n\t\n\t/**\n\t * Checks if `func` has its source masked.\n\t *\n\t * @private\n\t * @param {Function} func The function to check.\n\t * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n\t */\n\tfunction isMasked(func) {\n\t  return !!maskSrcKey && (maskSrcKey in func);\n\t}\n\t\n\t/**\n\t * Checks if `value` is likely a prototype object.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n\t */\n\tfunction isPrototype(value) {\n\t  var Ctor = value && value.constructor,\n\t      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\t\n\t  return value === proto;\n\t}\n\t\n\t/**\n\t * Converts `value` to a string using `Object.prototype.toString`.\n\t *\n\t * @private\n\t * @param {*} value The value to convert.\n\t * @returns {string} Returns the converted string.\n\t */\n\tfunction objectToString(value) {\n\t  return nativeObjectToString.call(value);\n\t}\n\t\n\t/**\n\t * Converts `func` to its source code.\n\t *\n\t * @private\n\t * @param {Function} func The function to convert.\n\t * @returns {string} Returns the source code.\n\t */\n\tfunction toSource(func) {\n\t  if (func != null) {\n\t    try {\n\t      return funcToString.call(func);\n\t    } catch (e) {}\n\t    try {\n\t      return (func + '');\n\t    } catch (e) {}\n\t  }\n\t  return '';\n\t}\n\t\n\t/**\n\t * Performs a\n\t * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n\t * comparison between two values to determine if they are equivalent.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to compare.\n\t * @param {*} other The other value to compare.\n\t * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n\t * @example\n\t *\n\t * var object = { 'a': 1 };\n\t * var other = { 'a': 1 };\n\t *\n\t * _.eq(object, object);\n\t * // => true\n\t *\n\t * _.eq(object, other);\n\t * // => false\n\t *\n\t * _.eq('a', 'a');\n\t * // => true\n\t *\n\t * _.eq('a', Object('a'));\n\t * // => false\n\t *\n\t * _.eq(NaN, NaN);\n\t * // => true\n\t */\n\tfunction eq(value, other) {\n\t  return value === other || (value !== value && other !== other);\n\t}\n\t\n\t/**\n\t * Checks if `value` is likely an `arguments` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n\t *  else `false`.\n\t * @example\n\t *\n\t * _.isArguments(function() { return arguments; }());\n\t * // => true\n\t *\n\t * _.isArguments([1, 2, 3]);\n\t * // => false\n\t */\n\tvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n\t  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n\t    !propertyIsEnumerable.call(value, 'callee');\n\t};\n\t\n\t/**\n\t * Checks if `value` is classified as an `Array` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n\t * @example\n\t *\n\t * _.isArray([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArray(document.body.children);\n\t * // => false\n\t *\n\t * _.isArray('abc');\n\t * // => false\n\t *\n\t * _.isArray(_.noop);\n\t * // => false\n\t */\n\tvar isArray = Array.isArray;\n\t\n\t/**\n\t * Checks if `value` is array-like. A value is considered array-like if it's\n\t * not a function and has a `value.length` that's an integer greater than or\n\t * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t * @example\n\t *\n\t * _.isArrayLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArrayLike(document.body.children);\n\t * // => true\n\t *\n\t * _.isArrayLike('abc');\n\t * // => true\n\t *\n\t * _.isArrayLike(_.noop);\n\t * // => false\n\t */\n\tfunction isArrayLike(value) {\n\t  return value != null && isLength(value.length) && !isFunction(value);\n\t}\n\t\n\t/**\n\t * Checks if `value` is a buffer.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.3.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n\t * @example\n\t *\n\t * _.isBuffer(new Buffer(2));\n\t * // => true\n\t *\n\t * _.isBuffer(new Uint8Array(2));\n\t * // => false\n\t */\n\tvar isBuffer = nativeIsBuffer || stubFalse;\n\t\n\t/**\n\t * Performs a deep comparison between two values to determine if they are\n\t * equivalent.\n\t *\n\t * **Note:** This method supports comparing arrays, array buffers, booleans,\n\t * date objects, error objects, maps, numbers, `Object` objects, regexes,\n\t * sets, strings, symbols, and typed arrays. `Object` objects are compared\n\t * by their own, not inherited, enumerable properties. Functions and DOM\n\t * nodes are compared by strict equality, i.e. `===`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to compare.\n\t * @param {*} other The other value to compare.\n\t * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n\t * @example\n\t *\n\t * var object = { 'a': 1 };\n\t * var other = { 'a': 1 };\n\t *\n\t * _.isEqual(object, other);\n\t * // => true\n\t *\n\t * object === other;\n\t * // => false\n\t */\n\tfunction isEqual(value, other) {\n\t  return baseIsEqual(value, other);\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction(value) {\n\t  if (!isObject(value)) {\n\t    return false;\n\t  }\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\t  var tag = baseGetTag(value);\n\t  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This method is loosely based on\n\t * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t * @example\n\t *\n\t * _.isLength(3);\n\t * // => true\n\t *\n\t * _.isLength(Number.MIN_VALUE);\n\t * // => false\n\t *\n\t * _.isLength(Infinity);\n\t * // => false\n\t *\n\t * _.isLength('3');\n\t * // => false\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' &&\n\t    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the\n\t * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n\t * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(_.noop);\n\t * // => true\n\t *\n\t * _.isObject(null);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  var type = typeof value;\n\t  return value != null && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t * and has a `typeof` result of \"object\".\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t * @example\n\t *\n\t * _.isObjectLike({});\n\t * // => true\n\t *\n\t * _.isObjectLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObjectLike(_.noop);\n\t * // => false\n\t *\n\t * _.isObjectLike(null);\n\t * // => false\n\t */\n\tfunction isObjectLike(value) {\n\t  return value != null && typeof value == 'object';\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as a typed array.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 3.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n\t * @example\n\t *\n\t * _.isTypedArray(new Uint8Array);\n\t * // => true\n\t *\n\t * _.isTypedArray([]);\n\t * // => false\n\t */\n\tvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\t\n\t/**\n\t * Creates an array of the own enumerable property names of `object`.\n\t *\n\t * **Note:** Non-object values are coerced to objects. See the\n\t * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n\t * for more details.\n\t *\n\t * @static\n\t * @since 0.1.0\n\t * @memberOf _\n\t * @category Object\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t * @example\n\t *\n\t * function Foo() {\n\t *   this.a = 1;\n\t *   this.b = 2;\n\t * }\n\t *\n\t * Foo.prototype.c = 3;\n\t *\n\t * _.keys(new Foo);\n\t * // => ['a', 'b'] (iteration order is not guaranteed)\n\t *\n\t * _.keys('hi');\n\t * // => ['0', '1']\n\t */\n\tfunction keys(object) {\n\t  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n\t}\n\t\n\t/**\n\t * This method returns a new empty array.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.13.0\n\t * @category Util\n\t * @returns {Array} Returns the new empty array.\n\t * @example\n\t *\n\t * var arrays = _.times(2, _.stubArray);\n\t *\n\t * console.log(arrays);\n\t * // => [[], []]\n\t *\n\t * console.log(arrays[0] === arrays[1]);\n\t * // => false\n\t */\n\tfunction stubArray() {\n\t  return [];\n\t}\n\t\n\t/**\n\t * This method returns `false`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.13.0\n\t * @category Util\n\t * @returns {boolean} Returns `false`.\n\t * @example\n\t *\n\t * _.times(2, _.stubFalse);\n\t * // => [false, false]\n\t */\n\tfunction stubFalse() {\n\t  return false;\n\t}\n\t\n\tmodule.exports = isEqual;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(80)(module)))\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/react-chart.3661a7d0.chunk.js","/**\n * @namespace Chart\n */\nvar Chart = require('./core/core.js')();\n\nrequire('./core/core.helpers')(Chart);\nrequire('./platforms/platform.js')(Chart);\nrequire('./core/core.canvasHelpers')(Chart);\nrequire('./core/core.plugin.js')(Chart);\nrequire('./core/core.element')(Chart);\nrequire('./core/core.animation')(Chart);\nrequire('./core/core.controller')(Chart);\nrequire('./core/core.datasetController')(Chart);\nrequire('./core/core.layoutService')(Chart);\nrequire('./core/core.scaleService')(Chart);\nrequire('./core/core.ticks.js')(Chart);\nrequire('./core/core.scale')(Chart);\nrequire('./core/core.title')(Chart);\nrequire('./core/core.legend')(Chart);\nrequire('./core/core.interaction')(Chart);\nrequire('./core/core.tooltip')(Chart);\n\nrequire('./elements/element.arc')(Chart);\nrequire('./elements/element.line')(Chart);\nrequire('./elements/element.point')(Chart);\nrequire('./elements/element.rectangle')(Chart);\n\nrequire('./scales/scale.linearbase.js')(Chart);\nrequire('./scales/scale.category')(Chart);\nrequire('./scales/scale.linear')(Chart);\nrequire('./scales/scale.logarithmic')(Chart);\nrequire('./scales/scale.radialLinear')(Chart);\nrequire('./scales/scale.time')(Chart);\n\n// Controllers must be loaded after elements\n// See Chart.core.datasetController.dataElementType\nrequire('./controllers/controller.bar')(Chart);\nrequire('./controllers/controller.bubble')(Chart);\nrequire('./controllers/controller.doughnut')(Chart);\nrequire('./controllers/controller.line')(Chart);\nrequire('./controllers/controller.polarArea')(Chart);\nrequire('./controllers/controller.radar')(Chart);\n\nrequire('./charts/Chart.Bar')(Chart);\nrequire('./charts/Chart.Bubble')(Chart);\nrequire('./charts/Chart.Doughnut')(Chart);\nrequire('./charts/Chart.Line')(Chart);\nrequire('./charts/Chart.PolarArea')(Chart);\nrequire('./charts/Chart.Radar')(Chart);\nrequire('./charts/Chart.Scatter')(Chart);\n\nwindow.Chart = module.exports = Chart;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/chart.js\n// module id = 127\n// module chunks = 0","module.exports = require('./lib/react-chart');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@axetroy/react-chart.js/index.js\n// module id = 182\n// module chunks = 0","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"chart.js\"), require(\"lodash.debounce\"), require(\"lodash.isequal\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"chart.js\", \"lodash.debounce\", \"lodash.isequal\", \"react\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"chart.js\"), require(\"lodash.debounce\"), require(\"lodash.isequal\"), require(\"react\")) : factory(root[\"chart.js\"], root[\"lodash.debounce\"], root[\"lodash.isequal\"], root[\"react\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 4);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(3);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = __webpack_require__(1);\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _lodash3 = __webpack_require__(2);\n\nvar _lodash4 = _interopRequireDefault(_lodash3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Chart = function (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart() {\n    _classCallCheck(this, Chart);\n\n    return _possibleConstructorReturn(this, (Chart.__proto__ || Object.getPrototypeOf(Chart)).apply(this, arguments));\n  }\n\n  _createClass(Chart, [{\n    key: 'componentWillUnmounted',\n    value: function componentWillUnmounted() {\n      this.__chart__ && this.__chart__.destroy && this.__chart__.destroy();\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      return !(0, _lodash4.default)(this.props, nextProps);\n    }\n  }, {\n    key: 'draw',\n    value: function draw(ctx) {\n      var _this2 = this;\n\n      if (!ctx) return;\n\n      var config = {\n        type: this.props.type,\n        data: _extends({}, this.props.data),\n        options: _extends({}, this.props.options)\n      };\n\n      Promise.resolve().then((function (require) {\n        var ChartJs = __webpack_require__(0);\n        _this2.__chart__ = new ChartJs(ctx, config);\n      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      return _react2.default.createElement('canvas', _extends({\n        className: 'react-chart.js' + (this.props.className ? ' ' + this.props.className : ''),\n        width: this.props.width,\n        height: this.props.height\n      }, this.props.style, {\n        ref: (0, _lodash2.default)(function (ctx) {\n          return _this3.draw(ctx);\n        }, 500)\n      }));\n    }\n  }]);\n\n  return Chart;\n}(_react.Component);\n\nexports.default = Chart;\n\n/***/ })\n/******/ ]);\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@axetroy/react-chart.js/lib/react-chart.js\n// module id = 442\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tChart.Bar = function(context, config) {\n\t\tconfig.type = 'bar';\n\n\t\treturn new Chart(context, config);\n\t};\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/charts/Chart.Bar.js\n// module id = 576\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tChart.Bubble = function(context, config) {\n\t\tconfig.type = 'bubble';\n\t\treturn new Chart(context, config);\n\t};\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/charts/Chart.Bubble.js\n// module id = 577\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tChart.Doughnut = function(context, config) {\n\t\tconfig.type = 'doughnut';\n\n\t\treturn new Chart(context, config);\n\t};\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/charts/Chart.Doughnut.js\n// module id = 578\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tChart.Line = function(context, config) {\n\t\tconfig.type = 'line';\n\n\t\treturn new Chart(context, config);\n\t};\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/charts/Chart.Line.js\n// module id = 579\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tChart.PolarArea = function(context, config) {\n\t\tconfig.type = 'polarArea';\n\n\t\treturn new Chart(context, config);\n\t};\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/charts/Chart.PolarArea.js\n// module id = 580\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tChart.Radar = function(context, config) {\n\t\tconfig.type = 'radar';\n\n\t\treturn new Chart(context, config);\n\t};\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/charts/Chart.Radar.js\n// module id = 581\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar defaultConfig = {\n\t\thover: {\n\t\t\tmode: 'single'\n\t\t},\n\n\t\tscales: {\n\t\t\txAxes: [{\n\t\t\t\ttype: 'linear', // scatter should not use a category axis\n\t\t\t\tposition: 'bottom',\n\t\t\t\tid: 'x-axis-1' // need an ID so datasets can reference the scale\n\t\t\t}],\n\t\t\tyAxes: [{\n\t\t\t\ttype: 'linear',\n\t\t\t\tposition: 'left',\n\t\t\t\tid: 'y-axis-1'\n\t\t\t}]\n\t\t},\n\n\t\ttooltips: {\n\t\t\tcallbacks: {\n\t\t\t\ttitle: function() {\n\t\t\t\t\t// Title doesn't make sense for scatter since we format the data as a point\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\t\t\t\tlabel: function(tooltipItem) {\n\t\t\t\t\treturn '(' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ')';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// Register the default config for this type\n\tChart.defaults.scatter = defaultConfig;\n\n\t// Scatter charts use line controllers\n\tChart.controllers.scatter = Chart.controllers.line;\n\n\tChart.Scatter = function(context, config) {\n\t\tconfig.type = 'scatter';\n\t\treturn new Chart(context, config);\n\t};\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/charts/Chart.Scatter.js\n// module id = 582\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tChart.defaults.bar = {\n\t\thover: {\n\t\t\tmode: 'label'\n\t\t},\n\n\t\tscales: {\n\t\t\txAxes: [{\n\t\t\t\ttype: 'category',\n\n\t\t\t\t// Specific to Bar Controller\n\t\t\t\tcategoryPercentage: 0.8,\n\t\t\t\tbarPercentage: 0.9,\n\n\t\t\t\t// grid line settings\n\t\t\t\tgridLines: {\n\t\t\t\t\toffsetGridLines: true\n\t\t\t\t}\n\t\t\t}],\n\t\t\tyAxes: [{\n\t\t\t\ttype: 'linear'\n\t\t\t}]\n\t\t}\n\t};\n\n\tChart.controllers.bar = Chart.DatasetController.extend({\n\n\t\tdataElementType: Chart.elements.Rectangle,\n\n\t\tinitialize: function(chart, datasetIndex) {\n\t\t\tChart.DatasetController.prototype.initialize.call(this, chart, datasetIndex);\n\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar dataset = me.getDataset();\n\n\t\t\tmeta.stack = dataset.stack;\n\t\t\t// Use this to indicate that this is a bar dataset.\n\t\t\tmeta.bar = true;\n\t\t},\n\n\t\t// Correctly calculate the bar width accounting for stacks and the fact that not all bars are visible\n\t\tgetStackCount: function() {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\n\t\t\tvar stacks = [];\n\t\t\thelpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\tvar dsMeta = me.chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) &&\n\t\t\t\t\t(yScale.options.stacked === false ||\n\t\t\t\t\t(yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||\n\t\t\t\t\t(yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {\n\t\t\t\t\tstacks.push(dsMeta.stack);\n\t\t\t\t}\n\t\t\t}, me);\n\n\t\t\treturn stacks.length;\n\t\t},\n\n\t\tupdate: function(reset) {\n\t\t\tvar me = this;\n\t\t\thelpers.each(me.getMeta().data, function(rectangle, index) {\n\t\t\t\tme.updateElement(rectangle, index, reset);\n\t\t\t}, me);\n\t\t},\n\n\t\tupdateElement: function(rectangle, index, reset) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\tvar scaleBase = yScale.getBasePixel();\n\t\t\tvar rectangleElementOptions = me.chart.options.elements.rectangle;\n\t\t\tvar custom = rectangle.custom || {};\n\t\t\tvar dataset = me.getDataset();\n\n\t\t\trectangle._xScale = xScale;\n\t\t\trectangle._yScale = yScale;\n\t\t\trectangle._datasetIndex = me.index;\n\t\t\trectangle._index = index;\n\n\t\t\tvar ruler = me.getRuler(index); // The index argument for compatible\n\t\t\trectangle._model = {\n\t\t\t\tx: me.calculateBarX(index, me.index, ruler),\n\t\t\t\ty: reset ? scaleBase : me.calculateBarY(index, me.index),\n\n\t\t\t\t// Tooltip\n\t\t\t\tlabel: me.chart.data.labels[index],\n\t\t\t\tdatasetLabel: dataset.label,\n\n\t\t\t\t// Appearance\n\t\t\t\thorizontal: false,\n\t\t\t\tbase: reset ? scaleBase : me.calculateBarBase(me.index, index),\n\t\t\t\twidth: me.calculateBarWidth(ruler),\n\t\t\t\tbackgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),\n\t\t\t\tborderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,\n\t\t\t\tborderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),\n\t\t\t\tborderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)\n\t\t\t};\n\n\t\t\trectangle.pivot();\n\t\t},\n\n\t\tcalculateBarBase: function(datasetIndex, index) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\tvar base = yScale.getBaseValue();\n\t\t\tvar original = base;\n\n\t\t\tif ((yScale.options.stacked === true) ||\n\t\t\t\t(yScale.options.stacked === undefined && meta.stack !== undefined)) {\n\t\t\t\tvar chart = me.chart;\n\t\t\t\tvar datasets = chart.data.datasets;\n\t\t\t\tvar value = Number(datasets[datasetIndex].data[index]);\n\n\t\t\t\tfor (var i = 0; i < datasetIndex; i++) {\n\t\t\t\t\tvar currentDs = datasets[i];\n\t\t\t\t\tvar currentDsMeta = chart.getDatasetMeta(i);\n\t\t\t\t\tif (currentDsMeta.bar && currentDsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i) &&\n\t\t\t\t\t\tmeta.stack === currentDsMeta.stack) {\n\t\t\t\t\t\tvar currentVal = Number(currentDs.data[index]);\n\t\t\t\t\t\tbase += value < 0 ? Math.min(currentVal, original) : Math.max(currentVal, original);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn yScale.getPixelForValue(base);\n\t\t\t}\n\n\t\t\treturn yScale.getBasePixel();\n\t\t},\n\n\t\tgetRuler: function() {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\tvar stackCount = me.getStackCount();\n\n\t\t\tvar tickWidth = xScale.width / xScale.ticks.length;\r\n\t\t\tvar categoryWidth = tickWidth * xScale.options.categoryPercentage;\n\t\t\tvar categorySpacing = (tickWidth - (tickWidth * xScale.options.categoryPercentage)) / 2;\n\t\t\tvar fullBarWidth = categoryWidth / stackCount;\n\n\t\t\tvar barWidth = fullBarWidth * xScale.options.barPercentage;\n\t\t\tvar barSpacing = fullBarWidth - (fullBarWidth * xScale.options.barPercentage);\n\n\t\t\treturn {\n\t\t\t\tstackCount: stackCount,\n\t\t\t\ttickWidth: tickWidth,\n\t\t\t\tcategoryWidth: categoryWidth,\n\t\t\t\tcategorySpacing: categorySpacing,\n\t\t\t\tfullBarWidth: fullBarWidth,\n\t\t\t\tbarWidth: barWidth,\n\t\t\t\tbarSpacing: barSpacing\n\t\t\t};\n\t\t},\n\n\t\tcalculateBarWidth: function(ruler) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\tif (xScale.options.barThickness) {\n\t\t\t\treturn xScale.options.barThickness;\n\t\t\t}\n\t\t\treturn ruler.barWidth;\r\n\t\t},\n\n\t\t// Get stack index from the given dataset index accounting for stacks and the fact that not all bars are visible\n\t\tgetStackIndex: function(datasetIndex) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.chart.getDatasetMeta(datasetIndex);\n\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\tvar dsMeta, j;\n\t\t\tvar stacks = [meta.stack];\n\n\t\t\tfor (j = 0; j < datasetIndex; ++j) {\n\t\t\t\tdsMeta = this.chart.getDatasetMeta(j);\n\t\t\t\tif (dsMeta.bar && this.chart.isDatasetVisible(j) &&\n\t\t\t\t\t(yScale.options.stacked === false ||\n\t\t\t\t\t(yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||\n\t\t\t\t\t(yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {\n\t\t\t\t\tstacks.push(dsMeta.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn stacks.length - 1;\n\t\t},\n\n\t\tcalculateBarX: function(index, datasetIndex, ruler) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\tvar stackIndex = me.getStackIndex(datasetIndex);\n\t\t\tvar leftTick = xScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);\n\t\t\tleftTick -= me.chart.isCombo ? (ruler.tickWidth / 2) : 0;\n\n\t\t\treturn leftTick +\n\t\t\t\t(ruler.barWidth / 2) +\n\t\t\t\truler.categorySpacing +\n\t\t\t\t(ruler.barWidth * stackIndex) +\n\t\t\t\t(ruler.barSpacing / 2) +\n\t\t\t\t(ruler.barSpacing * stackIndex);\n\t\t},\n\n\t\tcalculateBarY: function(index, datasetIndex) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\tvar value = Number(me.getDataset().data[index]);\n\n\t\t\tif (yScale.options.stacked ||\n\t\t\t\t(yScale.options.stacked === undefined && meta.stack !== undefined)) {\n\t\t\t\tvar base = yScale.getBaseValue();\n\t\t\t\tvar sumPos = base,\n\t\t\t\t\tsumNeg = base;\r\n\n\t\t\t\tfor (var i = 0; i < datasetIndex; i++) {\n\t\t\t\t\tvar ds = me.chart.data.datasets[i];\n\t\t\t\t\tvar dsMeta = me.chart.getDatasetMeta(i);\n\t\t\t\t\tif (dsMeta.bar && dsMeta.yAxisID === yScale.id && me.chart.isDatasetVisible(i) &&\n\t\t\t\t\t\tmeta.stack === dsMeta.stack) {\n\t\t\t\t\t\tvar stackedVal = Number(ds.data[index]);\n\t\t\t\t\t\tif (stackedVal < 0) {\n\t\t\t\t\t\t\tsumNeg += stackedVal || 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsumPos += stackedVal || 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (value < 0) {\n\t\t\t\t\treturn yScale.getPixelForValue(sumNeg + value);\n\t\t\t\t}\n\t\t\t\treturn yScale.getPixelForValue(sumPos + value);\n\t\t\t}\n\n\t\t\treturn yScale.getPixelForValue(value);\n\t\t},\n\n\t\tdraw: function(ease) {\n\t\t\tvar me = this;\n\t\t\tvar easingDecimal = ease || 1;\n\t\t\tvar metaData = me.getMeta().data;\n\t\t\tvar dataset = me.getDataset();\n\t\t\tvar i, len;\n\n\t\t\tChart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);\n\t\t\tfor (i = 0, len = metaData.length; i < len; ++i) {\n\t\t\t\tvar d = dataset.data[i];\n\t\t\t\tif (d !== null && d !== undefined && !isNaN(d)) {\n\t\t\t\t\tmetaData[i].transition(easingDecimal).draw();\n\t\t\t\t}\n\t\t\t}\n\t\t\tChart.canvasHelpers.unclipArea(me.chart.chart.ctx);\n\t\t},\n\n\t\tsetHoverStyle: function(rectangle) {\n\t\t\tvar dataset = this.chart.data.datasets[rectangle._datasetIndex];\n\t\t\tvar index = rectangle._index;\n\n\t\t\tvar custom = rectangle.custom || {};\n\t\t\tvar model = rectangle._model;\n\t\t\tmodel.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));\n\t\t\tmodel.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));\n\t\t\tmodel.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);\n\t\t},\n\n\t\tremoveHoverStyle: function(rectangle) {\n\t\t\tvar dataset = this.chart.data.datasets[rectangle._datasetIndex];\n\t\t\tvar index = rectangle._index;\n\t\t\tvar custom = rectangle.custom || {};\n\t\t\tvar model = rectangle._model;\n\t\t\tvar rectangleElementOptions = this.chart.options.elements.rectangle;\n\n\t\t\tmodel.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);\n\t\t\tmodel.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);\n\t\t\tmodel.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);\n\t\t}\n\n\t});\n\n\n\t// including horizontalBar in the bar file, instead of a file of its own\n\t// it extends bar (like pie extends doughnut)\n\tChart.defaults.horizontalBar = {\n\t\thover: {\n\t\t\tmode: 'label'\n\t\t},\n\n\t\tscales: {\n\t\t\txAxes: [{\n\t\t\t\ttype: 'linear',\n\t\t\t\tposition: 'bottom'\n\t\t\t}],\n\t\t\tyAxes: [{\n\t\t\t\tposition: 'left',\n\t\t\t\ttype: 'category',\n\n\t\t\t\t// Specific to Horizontal Bar Controller\n\t\t\t\tcategoryPercentage: 0.8,\n\t\t\t\tbarPercentage: 0.9,\n\n\t\t\t\t// grid line settings\n\t\t\t\tgridLines: {\n\t\t\t\t\toffsetGridLines: true\n\t\t\t\t}\n\t\t\t}]\n\t\t},\n\t\telements: {\n\t\t\trectangle: {\n\t\t\t\tborderSkipped: 'left'\n\t\t\t}\n\t\t},\n\t\ttooltips: {\n\t\t\tcallbacks: {\n\t\t\t\ttitle: function(tooltipItems, data) {\n\t\t\t\t\t// Pick first xLabel for now\n\t\t\t\t\tvar title = '';\n\n\t\t\t\t\tif (tooltipItems.length > 0) {\n\t\t\t\t\t\tif (tooltipItems[0].yLabel) {\n\t\t\t\t\t\t\ttitle = tooltipItems[0].yLabel;\n\t\t\t\t\t\t} else if (data.labels.length > 0 && tooltipItems[0].index < data.labels.length) {\n\t\t\t\t\t\t\ttitle = data.labels[tooltipItems[0].index];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn title;\n\t\t\t\t},\n\t\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\t\tvar datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';\n\t\t\t\t\treturn datasetLabel + ': ' + tooltipItem.xLabel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tChart.controllers.horizontalBar = Chart.controllers.bar.extend({\n\n\t\t// Correctly calculate the bar width accounting for stacks and the fact that not all bars are visible\n\t\tgetStackCount: function() {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\n\t\t\tvar stacks = [];\n\t\t\thelpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\tvar dsMeta = me.chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) &&\n\t\t\t\t\t(xScale.options.stacked === false ||\n\t\t\t\t\t(xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||\n\t\t\t\t\t(xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {\n\t\t\t\t\tstacks.push(dsMeta.stack);\n\t\t\t\t}\n\t\t\t}, me);\n\n\t\t\treturn stacks.length;\n\t\t},\n\n\t\tupdateElement: function(rectangle, index, reset) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\tvar scaleBase = xScale.getBasePixel();\n\t\t\tvar custom = rectangle.custom || {};\n\t\t\tvar dataset = me.getDataset();\n\t\t\tvar rectangleElementOptions = me.chart.options.elements.rectangle;\n\n\t\t\trectangle._xScale = xScale;\n\t\t\trectangle._yScale = yScale;\n\t\t\trectangle._datasetIndex = me.index;\n\t\t\trectangle._index = index;\n\n\t\t\tvar ruler = me.getRuler(index); // The index argument for compatible\n\t\t\trectangle._model = {\n\t\t\t\tx: reset ? scaleBase : me.calculateBarX(index, me.index),\n\t\t\t\ty: me.calculateBarY(index, me.index, ruler),\n\n\t\t\t\t// Tooltip\n\t\t\t\tlabel: me.chart.data.labels[index],\n\t\t\t\tdatasetLabel: dataset.label,\n\n\t\t\t\t// Appearance\n\t\t\t\thorizontal: true,\n\t\t\t\tbase: reset ? scaleBase : me.calculateBarBase(me.index, index),\n\t\t\t\theight: me.calculateBarHeight(ruler),\n\t\t\t\tbackgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),\n\t\t\t\tborderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,\n\t\t\t\tborderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),\n\t\t\t\tborderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)\n\t\t\t};\n\n\t\t\trectangle.pivot();\n\t\t},\n\n\t\tcalculateBarBase: function(datasetIndex, index) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\tvar base = xScale.getBaseValue();\n\t\t\tvar originalBase = base;\n\n\t\t\tif (xScale.options.stacked ||\n\t\t\t\t(xScale.options.stacked === undefined && meta.stack !== undefined)) {\n\t\t\t\tvar chart = me.chart;\n\t\t\t\tvar datasets = chart.data.datasets;\n\t\t\t\tvar value = Number(datasets[datasetIndex].data[index]);\n\n\t\t\t\tfor (var i = 0; i < datasetIndex; i++) {\n\t\t\t\t\tvar currentDs = datasets[i];\n\t\t\t\t\tvar currentDsMeta = chart.getDatasetMeta(i);\n\t\t\t\t\tif (currentDsMeta.bar && currentDsMeta.xAxisID === xScale.id && chart.isDatasetVisible(i) &&\n\t\t\t\t\t\tmeta.stack === currentDsMeta.stack) {\n\t\t\t\t\t\tvar currentVal = Number(currentDs.data[index]);\n\t\t\t\t\t\tbase += value < 0 ? Math.min(currentVal, originalBase) : Math.max(currentVal, originalBase);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn xScale.getPixelForValue(base);\n\t\t\t}\n\n\t\t\treturn xScale.getBasePixel();\n\t\t},\n\n\t\tgetRuler: function() {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\tvar stackCount = me.getStackCount();\n\n\t\t\tvar tickHeight = yScale.height / yScale.ticks.length;\n\t\t\tvar categoryHeight = tickHeight * yScale.options.categoryPercentage;\n\t\t\tvar categorySpacing = (tickHeight - (tickHeight * yScale.options.categoryPercentage)) / 2;\n\t\t\tvar fullBarHeight = categoryHeight / stackCount;\n\n\t\t\tvar barHeight = fullBarHeight * yScale.options.barPercentage;\n\t\t\tvar barSpacing = fullBarHeight - (fullBarHeight * yScale.options.barPercentage);\n\n\t\t\treturn {\n\t\t\t\tstackCount: stackCount,\n\t\t\t\ttickHeight: tickHeight,\n\t\t\t\tcategoryHeight: categoryHeight,\n\t\t\t\tcategorySpacing: categorySpacing,\n\t\t\t\tfullBarHeight: fullBarHeight,\n\t\t\t\tbarHeight: barHeight,\n\t\t\t\tbarSpacing: barSpacing\n\t\t\t};\n\t\t},\n\n\t\tcalculateBarHeight: function(ruler) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\tif (yScale.options.barThickness) {\n\t\t\t\treturn yScale.options.barThickness;\n\t\t\t}\n\t\t\treturn ruler.barHeight;\n\t\t},\n\n\t\t// Get stack index from the given dataset index accounting for stacks and the fact that not all bars are visible\n\t\tgetStackIndex: function(datasetIndex) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.chart.getDatasetMeta(datasetIndex);\n\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\tvar dsMeta, j;\n\t\t\tvar stacks = [meta.stack];\n\n\t\t\tfor (j = 0; j < datasetIndex; ++j) {\n\t\t\t\tdsMeta = this.chart.getDatasetMeta(j);\n\t\t\t\tif (dsMeta.bar && this.chart.isDatasetVisible(j) &&\n\t\t\t\t\t(xScale.options.stacked === false ||\n\t\t\t\t\t(xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||\n\t\t\t\t\t(xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {\n\t\t\t\t\tstacks.push(dsMeta.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn stacks.length - 1;\r\n\t\t},\n\n\t\tcalculateBarX: function(index, datasetIndex) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\tvar value = Number(me.getDataset().data[index]);\n\n\t\t\tif (xScale.options.stacked ||\n\t\t\t\t(xScale.options.stacked === undefined && meta.stack !== undefined)) {\n\t\t\t\tvar base = xScale.getBaseValue();\n\t\t\t\tvar sumPos = base,\n\t\t\t\t\tsumNeg = base;\r\n\n\t\t\t\tfor (var i = 0; i < datasetIndex; i++) {\n\t\t\t\t\tvar ds = me.chart.data.datasets[i];\n\t\t\t\t\tvar dsMeta = me.chart.getDatasetMeta(i);\n\t\t\t\t\tif (dsMeta.bar && dsMeta.xAxisID === xScale.id && me.chart.isDatasetVisible(i) &&\n\t\t\t\t\t\tmeta.stack === dsMeta.stack) {\n\t\t\t\t\t\tvar stackedVal = Number(ds.data[index]);\n\t\t\t\t\t\tif (stackedVal < 0) {\n\t\t\t\t\t\t\tsumNeg += stackedVal || 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsumPos += stackedVal || 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (value < 0) {\n\t\t\t\t\treturn xScale.getPixelForValue(sumNeg + value);\n\t\t\t\t}\n\t\t\t\treturn xScale.getPixelForValue(sumPos + value);\n\t\t\t}\n\n\t\t\treturn xScale.getPixelForValue(value);\n\t\t},\n\n\t\tcalculateBarY: function(index, datasetIndex, ruler) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\tvar stackIndex = me.getStackIndex(datasetIndex);\n\t\t\tvar topTick = yScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);\n\t\t\ttopTick -= me.chart.isCombo ? (ruler.tickHeight / 2) : 0;\n\n\t\t\treturn topTick +\n\t\t\t\t(ruler.barHeight / 2) +\n\t\t\t\truler.categorySpacing +\n\t\t\t\t(ruler.barHeight * stackIndex) +\n\t\t\t\t(ruler.barSpacing / 2) +\n\t\t\t\t(ruler.barSpacing * stackIndex);\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/controllers/controller.bar.js\n// module id = 583\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tChart.defaults.bubble = {\n\t\thover: {\n\t\t\tmode: 'single'\n\t\t},\n\n\t\tscales: {\n\t\t\txAxes: [{\n\t\t\t\ttype: 'linear', // bubble should probably use a linear scale by default\n\t\t\t\tposition: 'bottom',\n\t\t\t\tid: 'x-axis-0' // need an ID so datasets can reference the scale\n\t\t\t}],\n\t\t\tyAxes: [{\n\t\t\t\ttype: 'linear',\n\t\t\t\tposition: 'left',\n\t\t\t\tid: 'y-axis-0'\n\t\t\t}]\n\t\t},\n\n\t\ttooltips: {\n\t\t\tcallbacks: {\n\t\t\t\ttitle: function() {\n\t\t\t\t\t// Title doesn't make sense for scatter since we format the data as a point\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\t\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\t\tvar datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';\n\t\t\t\t\tvar dataPoint = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\t\t\t\t\treturn datasetLabel + ': (' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ', ' + dataPoint.r + ')';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tChart.controllers.bubble = Chart.DatasetController.extend({\n\n\t\tdataElementType: Chart.elements.Point,\n\n\t\tupdate: function(reset) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar points = meta.data;\n\n\t\t\t// Update Points\n\t\t\thelpers.each(points, function(point, index) {\n\t\t\t\tme.updateElement(point, index, reset);\n\t\t\t});\n\t\t},\n\n\t\tupdateElement: function(point, index, reset) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\n\t\t\tvar custom = point.custom || {};\n\t\t\tvar dataset = me.getDataset();\n\t\t\tvar data = dataset.data[index];\n\t\t\tvar pointElementOptions = me.chart.options.elements.point;\n\t\t\tvar dsIndex = me.index;\n\n\t\t\thelpers.extend(point, {\n\t\t\t\t// Utility\n\t\t\t\t_xScale: xScale,\n\t\t\t\t_yScale: yScale,\n\t\t\t\t_datasetIndex: dsIndex,\n\t\t\t\t_index: index,\n\n\t\t\t\t// Desired view properties\n\t\t\t\t_model: {\n\t\t\t\t\tx: reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex, me.chart.isCombo),\n\t\t\t\t\ty: reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex),\n\t\t\t\t\t// Appearance\n\t\t\t\t\tradius: reset ? 0 : custom.radius ? custom.radius : me.getRadius(data),\n\n\t\t\t\t\t// Tooltip\n\t\t\t\t\thitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Trick to reset the styles of the point\n\t\t\tChart.DatasetController.prototype.removeHoverStyle.call(me, point, pointElementOptions);\n\n\t\t\tvar model = point._model;\n\t\t\tmodel.skip = custom.skip ? custom.skip : (isNaN(model.x) || isNaN(model.y));\n\n\t\t\tpoint.pivot();\n\t\t},\n\n\t\tgetRadius: function(value) {\n\t\t\treturn value.r || this.chart.options.elements.point.radius;\n\t\t},\n\n\t\tsetHoverStyle: function(point) {\n\t\t\tvar me = this;\n\t\t\tChart.DatasetController.prototype.setHoverStyle.call(me, point);\n\n\t\t\t// Radius\n\t\t\tvar dataset = me.chart.data.datasets[point._datasetIndex];\n\t\t\tvar index = point._index;\n\t\t\tvar custom = point.custom || {};\n\t\t\tvar model = point._model;\n\t\t\tmodel.radius = custom.hoverRadius ? custom.hoverRadius : (helpers.getValueAtIndexOrDefault(dataset.hoverRadius, index, me.chart.options.elements.point.hoverRadius)) + me.getRadius(dataset.data[index]);\n\t\t},\n\n\t\tremoveHoverStyle: function(point) {\n\t\t\tvar me = this;\n\t\t\tChart.DatasetController.prototype.removeHoverStyle.call(me, point, me.chart.options.elements.point);\n\n\t\t\tvar dataVal = me.chart.data.datasets[point._datasetIndex].data[point._index];\n\t\t\tvar custom = point.custom || {};\n\t\t\tvar model = point._model;\n\n\t\t\tmodel.radius = custom.radius ? custom.radius : me.getRadius(dataVal);\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/controllers/controller.bubble.js\n// module id = 584\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers,\n\t\tdefaults = Chart.defaults;\n\n\tdefaults.doughnut = {\n\t\tanimation: {\n\t\t\t// Boolean - Whether we animate the rotation of the Doughnut\n\t\t\tanimateRotate: true,\n\t\t\t// Boolean - Whether we animate scaling the Doughnut from the centre\n\t\t\tanimateScale: false\n\t\t},\n\t\taspectRatio: 1,\n\t\thover: {\n\t\t\tmode: 'single'\n\t\t},\n\t\tlegendCallback: function(chart) {\n\t\t\tvar text = [];\n\t\t\ttext.push('<ul class=\"' + chart.id + '-legend\">');\n\n\t\t\tvar data = chart.data;\n\t\t\tvar datasets = data.datasets;\n\t\t\tvar labels = data.labels;\n\n\t\t\tif (datasets.length) {\n\t\t\t\tfor (var i = 0; i < datasets[0].data.length; ++i) {\n\t\t\t\t\ttext.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\t\t\t\t\tif (labels[i]) {\n\t\t\t\t\t\ttext.push(labels[i]);\n\t\t\t\t\t}\n\t\t\t\t\ttext.push('</li>');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttext.push('</ul>');\n\t\t\treturn text.join('');\n\t\t},\n\t\tlegend: {\n\t\t\tlabels: {\n\t\t\t\tgenerateLabels: function(chart) {\n\t\t\t\t\tvar data = chart.data;\n\t\t\t\t\tif (data.labels.length && data.datasets.length) {\n\t\t\t\t\t\treturn data.labels.map(function(label, i) {\n\t\t\t\t\t\t\tvar meta = chart.getDatasetMeta(0);\n\t\t\t\t\t\t\tvar ds = data.datasets[0];\n\t\t\t\t\t\t\tvar arc = meta.data[i];\n\t\t\t\t\t\t\tvar custom = arc && arc.custom || {};\n\t\t\t\t\t\t\tvar getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;\n\t\t\t\t\t\t\tvar arcOpts = chart.options.elements.arc;\n\t\t\t\t\t\t\tvar fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);\n\t\t\t\t\t\t\tvar stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);\n\t\t\t\t\t\t\tvar bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\t\tfillStyle: fill,\n\t\t\t\t\t\t\t\tstrokeStyle: stroke,\n\t\t\t\t\t\t\t\tlineWidth: bw,\n\t\t\t\t\t\t\t\thidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n\n\t\t\t\t\t\t\t\t// Extra data used for toggling the correct item\n\t\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tonClick: function(e, legendItem) {\n\t\t\t\tvar index = legendItem.index;\n\t\t\t\tvar chart = this.chart;\n\t\t\t\tvar i, ilen, meta;\n\n\t\t\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\t\t// toggle visibility of index if exists\n\t\t\t\t\tif (meta.data[index]) {\n\t\t\t\t\t\tmeta.data[index].hidden = !meta.data[index].hidden;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tchart.update();\n\t\t\t}\n\t\t},\n\n\t\t// The percentage of the chart that we cut out of the middle.\n\t\tcutoutPercentage: 50,\n\n\t\t// The rotation of the chart, where the first data arc begins.\n\t\trotation: Math.PI * -0.5,\n\n\t\t// The total circumference of the chart.\n\t\tcircumference: Math.PI * 2.0,\n\n\t\t// Need to override these to give a nice default\n\t\ttooltips: {\n\t\t\tcallbacks: {\n\t\t\t\ttitle: function() {\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\t\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\t\tvar dataLabel = data.labels[tooltipItem.index];\n\t\t\t\t\tvar value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n\t\t\t\t\tif (helpers.isArray(dataLabel)) {\n\t\t\t\t\t\t// show value on first line of multiline label\n\t\t\t\t\t\t// need to clone because we are changing the value\n\t\t\t\t\t\tdataLabel = dataLabel.slice();\n\t\t\t\t\t\tdataLabel[0] += value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdataLabel += value;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn dataLabel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tdefaults.pie = helpers.clone(defaults.doughnut);\n\thelpers.extend(defaults.pie, {\n\t\tcutoutPercentage: 0\n\t});\n\n\n\tChart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({\n\n\t\tdataElementType: Chart.elements.Arc,\n\n\t\tlinkScales: helpers.noop,\n\n\t\t// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\n\t\tgetRingIndex: function(datasetIndex) {\n\t\t\tvar ringIndex = 0;\n\n\t\t\tfor (var j = 0; j < datasetIndex; ++j) {\n\t\t\t\tif (this.chart.isDatasetVisible(j)) {\n\t\t\t\t\t++ringIndex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ringIndex;\n\t\t},\n\n\t\tupdate: function(reset) {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart,\n\t\t\t\tchartArea = chart.chartArea,\n\t\t\t\topts = chart.options,\n\t\t\t\tarcOpts = opts.elements.arc,\n\t\t\t\tavailableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth,\n\t\t\t\tavailableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth,\n\t\t\t\tminSize = Math.min(availableWidth, availableHeight),\n\t\t\t\toffset = {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0\n\t\t\t\t},\n\t\t\t\tmeta = me.getMeta(),\n\t\t\t\tcutoutPercentage = opts.cutoutPercentage,\n\t\t\t\tcircumference = opts.circumference;\n\n\t\t\t// If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc\n\t\t\tif (circumference < Math.PI * 2.0) {\n\t\t\t\tvar startAngle = opts.rotation % (Math.PI * 2.0);\n\t\t\t\tstartAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);\n\t\t\t\tvar endAngle = startAngle + circumference;\n\t\t\t\tvar start = {x: Math.cos(startAngle), y: Math.sin(startAngle)};\n\t\t\t\tvar end = {x: Math.cos(endAngle), y: Math.sin(endAngle)};\n\t\t\t\tvar contains0 = (startAngle <= 0 && 0 <= endAngle) || (startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle);\n\t\t\t\tvar contains90 = (startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle);\n\t\t\t\tvar contains180 = (startAngle <= -Math.PI && -Math.PI <= endAngle) || (startAngle <= Math.PI && Math.PI <= endAngle);\n\t\t\t\tvar contains270 = (startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle);\n\t\t\t\tvar cutout = cutoutPercentage / 100.0;\n\t\t\t\tvar min = {x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)), y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))};\n\t\t\t\tvar max = {x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)), y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))};\n\t\t\t\tvar size = {width: (max.x - min.x) * 0.5, height: (max.y - min.y) * 0.5};\n\t\t\t\tminSize = Math.min(availableWidth / size.width, availableHeight / size.height);\n\t\t\t\toffset = {x: (max.x + min.x) * -0.5, y: (max.y + min.y) * -0.5};\n\t\t\t}\n\n\t\t\tchart.borderWidth = me.getMaxBorderWidth(meta.data);\n\t\t\tchart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);\n\t\t\tchart.innerRadius = Math.max(cutoutPercentage ? (chart.outerRadius / 100) * (cutoutPercentage) : 0, 0);\n\t\t\tchart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n\t\t\tchart.offsetX = offset.x * chart.outerRadius;\n\t\t\tchart.offsetY = offset.y * chart.outerRadius;\n\n\t\t\tmeta.total = me.calculateTotal();\n\n\t\t\tme.outerRadius = chart.outerRadius - (chart.radiusLength * me.getRingIndex(me.index));\n\t\t\tme.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);\n\n\t\t\thelpers.each(meta.data, function(arc, index) {\n\t\t\t\tme.updateElement(arc, index, reset);\n\t\t\t});\n\t\t},\n\n\t\tupdateElement: function(arc, index, reset) {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart,\n\t\t\t\tchartArea = chart.chartArea,\n\t\t\t\topts = chart.options,\n\t\t\t\tanimationOpts = opts.animation,\n\t\t\t\tcenterX = (chartArea.left + chartArea.right) / 2,\n\t\t\t\tcenterY = (chartArea.top + chartArea.bottom) / 2,\n\t\t\t\tstartAngle = opts.rotation, // non reset case handled later\n\t\t\t\tendAngle = opts.rotation, // non reset case handled later\n\t\t\t\tdataset = me.getDataset(),\n\t\t\t\tcircumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI)),\n\t\t\t\tinnerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius,\n\t\t\t\touterRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius,\n\t\t\t\tvalueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;\n\n\t\t\thelpers.extend(arc, {\n\t\t\t\t// Utility\n\t\t\t\t_datasetIndex: me.index,\n\t\t\t\t_index: index,\n\n\t\t\t\t// Desired view properties\n\t\t\t\t_model: {\n\t\t\t\t\tx: centerX + chart.offsetX,\n\t\t\t\t\ty: centerY + chart.offsetY,\n\t\t\t\t\tstartAngle: startAngle,\n\t\t\t\t\tendAngle: endAngle,\n\t\t\t\t\tcircumference: circumference,\n\t\t\t\t\touterRadius: outerRadius,\n\t\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\t\tlabel: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar model = arc._model;\n\t\t\t// Resets the visual styles\n\t\t\tthis.removeHoverStyle(arc);\n\n\t\t\t// Set correct angles if not resetting\n\t\t\tif (!reset || !animationOpts.animateRotate) {\n\t\t\t\tif (index === 0) {\n\t\t\t\t\tmodel.startAngle = opts.rotation;\n\t\t\t\t} else {\n\t\t\t\t\tmodel.startAngle = me.getMeta().data[index - 1]._model.endAngle;\n\t\t\t\t}\n\n\t\t\t\tmodel.endAngle = model.startAngle + model.circumference;\n\t\t\t}\n\n\t\t\tarc.pivot();\n\t\t},\n\n\t\tremoveHoverStyle: function(arc) {\n\t\t\tChart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);\n\t\t},\n\n\t\tcalculateTotal: function() {\n\t\t\tvar dataset = this.getDataset();\n\t\t\tvar meta = this.getMeta();\n\t\t\tvar total = 0;\n\t\t\tvar value;\n\n\t\t\thelpers.each(meta.data, function(element, index) {\n\t\t\t\tvalue = dataset.data[index];\n\t\t\t\tif (!isNaN(value) && !element.hidden) {\n\t\t\t\t\ttotal += Math.abs(value);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/* if (total === 0) {\n\t\t\t\ttotal = NaN;\n\t\t\t}*/\n\n\t\t\treturn total;\n\t\t},\n\n\t\tcalculateCircumference: function(value) {\n\t\t\tvar total = this.getMeta().total;\n\t\t\tif (total > 0 && !isNaN(value)) {\n\t\t\t\treturn (Math.PI * 2.0) * (value / total);\n\t\t\t}\n\t\t\treturn 0;\n\t\t},\n\n\t\t// gets the max border or hover width to properly scale pie charts\n\t\tgetMaxBorderWidth: function(elements) {\n\t\t\tvar max = 0,\n\t\t\t\tindex = this.index,\n\t\t\t\tlength = elements.length,\n\t\t\t\tborderWidth,\n\t\t\t\thoverWidth;\n\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tborderWidth = elements[i]._model ? elements[i]._model.borderWidth : 0;\n\t\t\t\thoverWidth = elements[i]._chart ? elements[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;\n\n\t\t\t\tmax = borderWidth > max ? borderWidth : max;\n\t\t\t\tmax = hoverWidth > max ? hoverWidth : max;\n\t\t\t}\n\t\t\treturn max;\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/controllers/controller.doughnut.js\n// module id = 585\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tChart.defaults.line = {\n\t\tshowLines: true,\n\t\tspanGaps: false,\n\n\t\thover: {\n\t\t\tmode: 'label'\n\t\t},\n\n\t\tscales: {\n\t\t\txAxes: [{\n\t\t\t\ttype: 'category',\n\t\t\t\tid: 'x-axis-0'\n\t\t\t}],\n\t\t\tyAxes: [{\n\t\t\t\ttype: 'linear',\n\t\t\t\tid: 'y-axis-0'\n\t\t\t}]\n\t\t}\n\t};\n\n\tfunction lineEnabled(dataset, options) {\n\t\treturn helpers.getValueOrDefault(dataset.showLine, options.showLines);\n\t}\n\n\tChart.controllers.line = Chart.DatasetController.extend({\n\n\t\tdatasetElementType: Chart.elements.Line,\n\n\t\tdataElementType: Chart.elements.Point,\n\n\t\tupdate: function(reset) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar line = meta.dataset;\n\t\t\tvar points = meta.data || [];\n\t\t\tvar options = me.chart.options;\n\t\t\tvar lineElementOptions = options.elements.line;\n\t\t\tvar scale = me.getScaleForId(meta.yAxisID);\n\t\t\tvar i, ilen, custom;\n\t\t\tvar dataset = me.getDataset();\n\t\t\tvar showLine = lineEnabled(dataset, options);\n\n\t\t\t// Update Line\n\t\t\tif (showLine) {\n\t\t\t\tcustom = line.custom || {};\n\n\t\t\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\t\t\tif ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {\n\t\t\t\t\tdataset.lineTension = dataset.tension;\n\t\t\t\t}\n\n\t\t\t\t// Utility\n\t\t\t\tline._scale = scale;\n\t\t\t\tline._datasetIndex = me.index;\n\t\t\t\t// Data\n\t\t\t\tline._children = points;\n\t\t\t\t// Model\n\t\t\t\tline._model = {\n\t\t\t\t\t// Appearance\n\t\t\t\t\t// The default behavior of lines is to break at null values, according\n\t\t\t\t\t// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158\n\t\t\t\t\t// This option gives lines the ability to span gaps\n\t\t\t\t\tspanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,\n\t\t\t\t\ttension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),\n\t\t\t\t\tbackgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),\n\t\t\t\t\tborderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),\n\t\t\t\t\tborderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),\n\t\t\t\t\tborderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),\n\t\t\t\t\tborderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),\n\t\t\t\t\tborderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),\n\t\t\t\t\tborderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),\n\t\t\t\t\tfill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),\n\t\t\t\t\tsteppedLine: custom.steppedLine ? custom.steppedLine : helpers.getValueOrDefault(dataset.steppedLine, lineElementOptions.stepped),\n\t\t\t\t\tcubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.getValueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode),\n\t\t\t\t\t// Scale\n\t\t\t\t\tscaleTop: scale.top,\n\t\t\t\t\tscaleBottom: scale.bottom,\n\t\t\t\t\tscaleZero: scale.getBasePixel()\n\t\t\t\t};\n\n\t\t\t\tline.pivot();\n\t\t\t}\n\n\t\t\t// Update Points\n\t\t\tfor (i=0, ilen=points.length; i<ilen; ++i) {\n\t\t\t\tme.updateElement(points[i], i, reset);\n\t\t\t}\n\n\t\t\tif (showLine && line._model.tension !== 0) {\n\t\t\t\tme.updateBezierControlPoints();\n\t\t\t}\n\n\t\t\t// Now pivot the point for animation\n\t\t\tfor (i=0, ilen=points.length; i<ilen; ++i) {\n\t\t\t\tpoints[i].pivot();\n\t\t\t}\n\t\t},\n\n\t\tgetPointBackgroundColor: function(point, index) {\n\t\t\tvar backgroundColor = this.chart.options.elements.point.backgroundColor;\n\t\t\tvar dataset = this.getDataset();\n\t\t\tvar custom = point.custom || {};\n\n\t\t\tif (custom.backgroundColor) {\n\t\t\t\tbackgroundColor = custom.backgroundColor;\n\t\t\t} else if (dataset.pointBackgroundColor) {\n\t\t\t\tbackgroundColor = helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);\n\t\t\t} else if (dataset.backgroundColor) {\n\t\t\t\tbackgroundColor = dataset.backgroundColor;\n\t\t\t}\n\n\t\t\treturn backgroundColor;\n\t\t},\n\n\t\tgetPointBorderColor: function(point, index) {\n\t\t\tvar borderColor = this.chart.options.elements.point.borderColor;\n\t\t\tvar dataset = this.getDataset();\n\t\t\tvar custom = point.custom || {};\n\n\t\t\tif (custom.borderColor) {\n\t\t\t\tborderColor = custom.borderColor;\n\t\t\t} else if (dataset.pointBorderColor) {\n\t\t\t\tborderColor = helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);\n\t\t\t} else if (dataset.borderColor) {\n\t\t\t\tborderColor = dataset.borderColor;\n\t\t\t}\n\n\t\t\treturn borderColor;\n\t\t},\n\n\t\tgetPointBorderWidth: function(point, index) {\n\t\t\tvar borderWidth = this.chart.options.elements.point.borderWidth;\n\t\t\tvar dataset = this.getDataset();\n\t\t\tvar custom = point.custom || {};\n\n\t\t\tif (!isNaN(custom.borderWidth)) {\n\t\t\t\tborderWidth = custom.borderWidth;\n\t\t\t} else if (!isNaN(dataset.pointBorderWidth)) {\n\t\t\t\tborderWidth = helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);\n\t\t\t} else if (!isNaN(dataset.borderWidth)) {\n\t\t\t\tborderWidth = dataset.borderWidth;\n\t\t\t}\n\n\t\t\treturn borderWidth;\n\t\t},\n\n\t\tupdateElement: function(point, index, reset) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar custom = point.custom || {};\n\t\t\tvar dataset = me.getDataset();\n\t\t\tvar datasetIndex = me.index;\n\t\t\tvar value = dataset.data[index];\n\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\t\tvar pointOptions = me.chart.options.elements.point;\n\t\t\tvar x, y;\n\t\t\tvar labels = me.chart.data.labels || [];\n\t\t\tvar includeOffset = (labels.length === 1 || dataset.data.length === 1) || me.chart.isCombo;\n\n\t\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\t\tif ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {\n\t\t\t\tdataset.pointRadius = dataset.radius;\n\t\t\t}\n\t\t\tif ((dataset.hitRadius !== undefined) && (dataset.pointHitRadius === undefined)) {\n\t\t\t\tdataset.pointHitRadius = dataset.hitRadius;\n\t\t\t}\n\n\t\t\tx = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex, includeOffset);\n\t\t\ty = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);\n\n\t\t\t// Utility\n\t\t\tpoint._xScale = xScale;\n\t\t\tpoint._yScale = yScale;\n\t\t\tpoint._datasetIndex = datasetIndex;\n\t\t\tpoint._index = index;\n\n\t\t\t// Desired view properties\n\t\t\tpoint._model = {\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\t\t// Appearance\n\t\t\t\tradius: custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),\n\t\t\t\tpointStyle: custom.pointStyle || helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),\n\t\t\t\tbackgroundColor: me.getPointBackgroundColor(point, index),\n\t\t\t\tborderColor: me.getPointBorderColor(point, index),\n\t\t\t\tborderWidth: me.getPointBorderWidth(point, index),\n\t\t\t\ttension: meta.dataset._model ? meta.dataset._model.tension : 0,\n\t\t\t\tsteppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,\n\t\t\t\t// Tooltip\n\t\t\t\thitRadius: custom.hitRadius || helpers.getValueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)\n\t\t\t};\n\t\t},\n\n\t\tcalculatePointY: function(value, index, datasetIndex) {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\t\tvar sumPos = 0;\n\t\t\tvar sumNeg = 0;\n\t\t\tvar i, ds, dsMeta;\n\n\t\t\tif (yScale.options.stacked) {\n\t\t\t\tfor (i = 0; i < datasetIndex; i++) {\n\t\t\t\t\tds = chart.data.datasets[i];\n\t\t\t\t\tdsMeta = chart.getDatasetMeta(i);\n\t\t\t\t\tif (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {\n\t\t\t\t\t\tvar stackedRightValue = Number(yScale.getRightValue(ds.data[index]));\n\t\t\t\t\t\tif (stackedRightValue < 0) {\n\t\t\t\t\t\t\tsumNeg += stackedRightValue || 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsumPos += stackedRightValue || 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar rightValue = Number(yScale.getRightValue(value));\n\t\t\t\tif (rightValue < 0) {\n\t\t\t\t\treturn yScale.getPixelForValue(sumNeg + rightValue);\n\t\t\t\t}\n\t\t\t\treturn yScale.getPixelForValue(sumPos + rightValue);\n\t\t\t}\n\n\t\t\treturn yScale.getPixelForValue(value);\n\t\t},\n\n\t\tupdateBezierControlPoints: function() {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar area = me.chart.chartArea;\n\t\t\tvar points = (meta.data || []);\n\t\t\tvar i, ilen, point, model, controlPoints;\n\n\t\t\t// Only consider points that are drawn in case the spanGaps option is used\n\t\t\tif (meta.dataset._model.spanGaps) {\n\t\t\t\tpoints = points.filter(function(pt) {\n\t\t\t\t\treturn !pt._model.skip;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction capControlPoint(pt, min, max) {\n\t\t\t\treturn Math.max(Math.min(pt, max), min);\n\t\t\t}\n\n\t\t\tif (meta.dataset._model.cubicInterpolationMode === 'monotone') {\n\t\t\t\thelpers.splineCurveMonotone(points);\n\t\t\t} else {\n\t\t\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tmodel = point._model;\n\t\t\t\t\tcontrolPoints = helpers.splineCurve(\n\t\t\t\t\t\thelpers.previousItem(points, i)._model,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\thelpers.nextItem(points, i)._model,\n\t\t\t\t\t\tmeta.dataset._model.tension\n\t\t\t\t\t);\n\t\t\t\t\tmodel.controlPointPreviousX = controlPoints.previous.x;\n\t\t\t\t\tmodel.controlPointPreviousY = controlPoints.previous.y;\n\t\t\t\t\tmodel.controlPointNextX = controlPoints.next.x;\n\t\t\t\t\tmodel.controlPointNextY = controlPoints.next.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (me.chart.options.elements.line.capBezierPoints) {\n\t\t\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\t\t\tmodel = points[i]._model;\n\t\t\t\t\tmodel.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);\n\t\t\t\t\tmodel.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);\n\t\t\t\t\tmodel.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);\n\t\t\t\t\tmodel.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tdraw: function(ease) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar points = meta.data || [];\n\t\t\tvar easingDecimal = ease || 1;\n\t\t\tvar i, ilen;\n\n\t\t\t// Transition Point Locations\n\t\t\tfor (i=0, ilen=points.length; i<ilen; ++i) {\n\t\t\t\tpoints[i].transition(easingDecimal);\n\t\t\t}\n\n\t\t\tChart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);\n\t\t\t// Transition and Draw the line\n\t\t\tif (lineEnabled(me.getDataset(), me.chart.options)) {\n\t\t\t\tmeta.dataset.transition(easingDecimal).draw();\n\t\t\t}\n\t\t\tChart.canvasHelpers.unclipArea(me.chart.chart.ctx);\n\n\t\t\t// Draw the points\n\t\t\tfor (i=0, ilen=points.length; i<ilen; ++i) {\n\t\t\t\tpoints[i].draw(me.chart.chartArea);\n\t\t\t}\n\t\t},\n\n\t\tsetHoverStyle: function(point) {\n\t\t\t// Point\n\t\t\tvar dataset = this.chart.data.datasets[point._datasetIndex];\n\t\t\tvar index = point._index;\n\t\t\tvar custom = point.custom || {};\n\t\t\tvar model = point._model;\n\n\t\t\tmodel.radius = custom.hoverRadius || helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);\n\t\t\tmodel.backgroundColor = custom.hoverBackgroundColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));\n\t\t\tmodel.borderColor = custom.hoverBorderColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));\n\t\t\tmodel.borderWidth = custom.hoverBorderWidth || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);\n\t\t},\n\n\t\tremoveHoverStyle: function(point) {\n\t\t\tvar me = this;\n\t\t\tvar dataset = me.chart.data.datasets[point._datasetIndex];\n\t\t\tvar index = point._index;\n\t\t\tvar custom = point.custom || {};\n\t\t\tvar model = point._model;\n\n\t\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\t\tif ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {\n\t\t\t\tdataset.pointRadius = dataset.radius;\n\t\t\t}\n\n\t\t\tmodel.radius = custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, me.chart.options.elements.point.radius);\n\t\t\tmodel.backgroundColor = me.getPointBackgroundColor(point, index);\n\t\t\tmodel.borderColor = me.getPointBorderColor(point, index);\n\t\t\tmodel.borderWidth = me.getPointBorderWidth(point, index);\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/controllers/controller.line.js\n// module id = 586\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tChart.defaults.polarArea = {\n\n\t\tscale: {\n\t\t\ttype: 'radialLinear',\n\t\t\tlineArc: true, // so that lines are circular\n\t\t\tticks: {\n\t\t\t\tbeginAtZero: true\n\t\t\t}\n\t\t},\n\n\t\t// Boolean - Whether to animate the rotation of the chart\n\t\tanimation: {\n\t\t\tanimateRotate: true,\n\t\t\tanimateScale: true\n\t\t},\n\n\t\tstartAngle: -0.5 * Math.PI,\n\t\taspectRatio: 1,\n\t\tlegendCallback: function(chart) {\n\t\t\tvar text = [];\n\t\t\ttext.push('<ul class=\"' + chart.id + '-legend\">');\n\n\t\t\tvar data = chart.data;\n\t\t\tvar datasets = data.datasets;\n\t\t\tvar labels = data.labels;\n\n\t\t\tif (datasets.length) {\n\t\t\t\tfor (var i = 0; i < datasets[0].data.length; ++i) {\n\t\t\t\t\ttext.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\t\t\t\t\tif (labels[i]) {\n\t\t\t\t\t\ttext.push(labels[i]);\n\t\t\t\t\t}\n\t\t\t\t\ttext.push('</li>');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttext.push('</ul>');\n\t\t\treturn text.join('');\n\t\t},\n\t\tlegend: {\n\t\t\tlabels: {\n\t\t\t\tgenerateLabels: function(chart) {\n\t\t\t\t\tvar data = chart.data;\n\t\t\t\t\tif (data.labels.length && data.datasets.length) {\n\t\t\t\t\t\treturn data.labels.map(function(label, i) {\n\t\t\t\t\t\t\tvar meta = chart.getDatasetMeta(0);\n\t\t\t\t\t\t\tvar ds = data.datasets[0];\n\t\t\t\t\t\t\tvar arc = meta.data[i];\n\t\t\t\t\t\t\tvar custom = arc.custom || {};\n\t\t\t\t\t\t\tvar getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;\n\t\t\t\t\t\t\tvar arcOpts = chart.options.elements.arc;\n\t\t\t\t\t\t\tvar fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);\n\t\t\t\t\t\t\tvar stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);\n\t\t\t\t\t\t\tvar bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\t\tfillStyle: fill,\n\t\t\t\t\t\t\t\tstrokeStyle: stroke,\n\t\t\t\t\t\t\t\tlineWidth: bw,\n\t\t\t\t\t\t\t\thidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n\n\t\t\t\t\t\t\t\t// Extra data used for toggling the correct item\n\t\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tonClick: function(e, legendItem) {\n\t\t\t\tvar index = legendItem.index;\n\t\t\t\tvar chart = this.chart;\n\t\t\t\tvar i, ilen, meta;\n\n\t\t\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\t\tmeta.data[index].hidden = !meta.data[index].hidden;\n\t\t\t\t}\n\n\t\t\t\tchart.update();\n\t\t\t}\n\t\t},\n\n\t\t// Need to override these to give a nice default\n\t\ttooltips: {\n\t\t\tcallbacks: {\n\t\t\t\ttitle: function() {\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\t\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\t\treturn data.labels[tooltipItem.index] + ': ' + tooltipItem.yLabel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tChart.controllers.polarArea = Chart.DatasetController.extend({\n\n\t\tdataElementType: Chart.elements.Arc,\n\n\t\tlinkScales: helpers.noop,\n\n\t\tupdate: function(reset) {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart;\n\t\t\tvar chartArea = chart.chartArea;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar opts = chart.options;\n\t\t\tvar arcOpts = opts.elements.arc;\n\t\t\tvar minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\t\t\tchart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);\n\t\t\tchart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n\t\t\tchart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n\n\t\t\tme.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);\n\t\t\tme.innerRadius = me.outerRadius - chart.radiusLength;\n\n\t\t\tmeta.count = me.countVisibleElements();\n\n\t\t\thelpers.each(meta.data, function(arc, index) {\n\t\t\t\tme.updateElement(arc, index, reset);\n\t\t\t});\n\t\t},\n\n\t\tupdateElement: function(arc, index, reset) {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart;\n\t\t\tvar dataset = me.getDataset();\n\t\t\tvar opts = chart.options;\n\t\t\tvar animationOpts = opts.animation;\n\t\t\tvar scale = chart.scale;\n\t\t\tvar getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;\n\t\t\tvar labels = chart.data.labels;\n\n\t\t\tvar circumference = me.calculateCircumference(dataset.data[index]);\n\t\t\tvar centerX = scale.xCenter;\n\t\t\tvar centerY = scale.yCenter;\n\n\t\t\t// If there is NaN data before us, we need to calculate the starting angle correctly.\n\t\t\t// We could be way more efficient here, but its unlikely that the polar area chart will have a lot of data\n\t\t\tvar visibleCount = 0;\n\t\t\tvar meta = me.getMeta();\n\t\t\tfor (var i = 0; i < index; ++i) {\n\t\t\t\tif (!isNaN(dataset.data[i]) && !meta.data[i].hidden) {\n\t\t\t\t\t++visibleCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// var negHalfPI = -0.5 * Math.PI;\n\t\t\tvar datasetStartAngle = opts.startAngle;\n\t\t\tvar distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n\t\t\tvar startAngle = datasetStartAngle + (circumference * visibleCount);\n\t\t\tvar endAngle = startAngle + (arc.hidden ? 0 : circumference);\n\n\t\t\tvar resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n\n\t\t\thelpers.extend(arc, {\n\t\t\t\t// Utility\n\t\t\t\t_datasetIndex: me.index,\n\t\t\t\t_index: index,\n\t\t\t\t_scale: scale,\n\n\t\t\t\t// Desired view properties\n\t\t\t\t_model: {\n\t\t\t\t\tx: centerX,\n\t\t\t\t\ty: centerY,\n\t\t\t\t\tinnerRadius: 0,\n\t\t\t\t\touterRadius: reset ? resetRadius : distance,\n\t\t\t\t\tstartAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,\n\t\t\t\t\tendAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,\n\t\t\t\t\tlabel: getValueAtIndexOrDefault(labels, index, labels[index])\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Apply border and fill style\n\t\t\tme.removeHoverStyle(arc);\n\n\t\t\tarc.pivot();\n\t\t},\n\n\t\tremoveHoverStyle: function(arc) {\n\t\t\tChart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);\n\t\t},\n\n\t\tcountVisibleElements: function() {\n\t\t\tvar dataset = this.getDataset();\n\t\t\tvar meta = this.getMeta();\n\t\t\tvar count = 0;\n\n\t\t\thelpers.each(meta.data, function(element, index) {\n\t\t\t\tif (!isNaN(dataset.data[index]) && !element.hidden) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn count;\n\t\t},\n\n\t\tcalculateCircumference: function(value) {\n\t\t\tvar count = this.getMeta().count;\n\t\t\tif (count > 0 && !isNaN(value)) {\n\t\t\t\treturn (2 * Math.PI) / count;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/controllers/controller.polarArea.js\n// module id = 587\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tChart.defaults.radar = {\n\t\taspectRatio: 1,\n\t\tscale: {\n\t\t\ttype: 'radialLinear'\n\t\t},\n\t\telements: {\n\t\t\tline: {\n\t\t\t\ttension: 0 // no bezier in radar\n\t\t\t}\n\t\t}\n\t};\n\n\tChart.controllers.radar = Chart.DatasetController.extend({\n\n\t\tdatasetElementType: Chart.elements.Line,\n\n\t\tdataElementType: Chart.elements.Point,\n\n\t\tlinkScales: helpers.noop,\n\n\t\tupdate: function(reset) {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar line = meta.dataset;\n\t\t\tvar points = meta.data;\n\t\t\tvar custom = line.custom || {};\n\t\t\tvar dataset = me.getDataset();\n\t\t\tvar lineElementOptions = me.chart.options.elements.line;\n\t\t\tvar scale = me.chart.scale;\n\n\t\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\t\tif ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {\n\t\t\t\tdataset.lineTension = dataset.tension;\n\t\t\t}\n\n\t\t\thelpers.extend(meta.dataset, {\n\t\t\t\t// Utility\n\t\t\t\t_datasetIndex: me.index,\n\t\t\t\t// Data\n\t\t\t\t_children: points,\n\t\t\t\t_loop: true,\n\t\t\t\t// Model\n\t\t\t\t_model: {\n\t\t\t\t\t// Appearance\n\t\t\t\t\ttension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),\n\t\t\t\t\tbackgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),\n\t\t\t\t\tborderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),\n\t\t\t\t\tborderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),\n\t\t\t\t\tfill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),\n\t\t\t\t\tborderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),\n\t\t\t\t\tborderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),\n\t\t\t\t\tborderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),\n\t\t\t\t\tborderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),\n\n\t\t\t\t\t// Scale\n\t\t\t\t\tscaleTop: scale.top,\n\t\t\t\t\tscaleBottom: scale.bottom,\n\t\t\t\t\tscaleZero: scale.getBasePosition()\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tmeta.dataset.pivot();\n\n\t\t\t// Update Points\n\t\t\thelpers.each(points, function(point, index) {\n\t\t\t\tme.updateElement(point, index, reset);\n\t\t\t}, me);\n\n\t\t\t// Update bezier control points\n\t\t\tme.updateBezierControlPoints();\n\t\t},\n\t\tupdateElement: function(point, index, reset) {\n\t\t\tvar me = this;\n\t\t\tvar custom = point.custom || {};\n\t\t\tvar dataset = me.getDataset();\n\t\t\tvar scale = me.chart.scale;\n\t\t\tvar pointElementOptions = me.chart.options.elements.point;\n\t\t\tvar pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);\n\n\t\t\thelpers.extend(point, {\n\t\t\t\t// Utility\n\t\t\t\t_datasetIndex: me.index,\n\t\t\t\t_index: index,\n\t\t\t\t_scale: scale,\n\n\t\t\t\t// Desired view properties\n\t\t\t\t_model: {\n\t\t\t\t\tx: reset ? scale.xCenter : pointPosition.x, // value not used in dataset scale, but we want a consistent API between scales\n\t\t\t\t\ty: reset ? scale.yCenter : pointPosition.y,\n\n\t\t\t\t\t// Appearance\n\t\t\t\t\ttension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, me.chart.options.elements.line.tension),\n\t\t\t\t\tradius: custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),\n\t\t\t\t\tbackgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),\n\t\t\t\t\tborderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),\n\t\t\t\t\tborderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),\n\t\t\t\t\tpointStyle: custom.pointStyle ? custom.pointStyle : helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),\n\n\t\t\t\t\t// Tooltip\n\t\t\t\t\thitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tpoint._model.skip = custom.skip ? custom.skip : (isNaN(point._model.x) || isNaN(point._model.y));\n\t\t},\n\t\tupdateBezierControlPoints: function() {\n\t\t\tvar chartArea = this.chart.chartArea;\n\t\t\tvar meta = this.getMeta();\n\n\t\t\thelpers.each(meta.data, function(point, index) {\n\t\t\t\tvar model = point._model;\n\t\t\t\tvar controlPoints = helpers.splineCurve(\n\t\t\t\t\thelpers.previousItem(meta.data, index, true)._model,\n\t\t\t\t\tmodel,\n\t\t\t\t\thelpers.nextItem(meta.data, index, true)._model,\n\t\t\t\t\tmodel.tension\n\t\t\t\t);\n\n\t\t\t\t// Prevent the bezier going outside of the bounds of the graph\n\t\t\t\tmodel.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);\n\t\t\t\tmodel.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);\n\n\t\t\t\tmodel.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);\n\t\t\t\tmodel.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top);\n\n\t\t\t\t// Now pivot the point for animation\n\t\t\t\tpoint.pivot();\n\t\t\t});\n\t\t},\n\n\t\tdraw: function(ease) {\n\t\t\tvar meta = this.getMeta();\n\t\t\tvar easingDecimal = ease || 1;\n\n\t\t\t// Transition Point Locations\n\t\t\thelpers.each(meta.data, function(point) {\n\t\t\t\tpoint.transition(easingDecimal);\n\t\t\t});\n\n\t\t\t// Transition and Draw the line\n\t\t\tmeta.dataset.transition(easingDecimal).draw();\n\n\t\t\t// Draw the points\n\t\t\thelpers.each(meta.data, function(point) {\n\t\t\t\tpoint.draw();\n\t\t\t});\n\t\t},\n\n\t\tsetHoverStyle: function(point) {\n\t\t\t// Point\n\t\t\tvar dataset = this.chart.data.datasets[point._datasetIndex];\n\t\t\tvar custom = point.custom || {};\n\t\t\tvar index = point._index;\n\t\t\tvar model = point._model;\n\n\t\t\tmodel.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);\n\t\t\tmodel.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));\n\t\t\tmodel.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));\n\t\t\tmodel.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);\n\t\t},\n\n\t\tremoveHoverStyle: function(point) {\n\t\t\tvar dataset = this.chart.data.datasets[point._datasetIndex];\n\t\t\tvar custom = point.custom || {};\n\t\t\tvar index = point._index;\n\t\t\tvar model = point._model;\n\t\t\tvar pointElementOptions = this.chart.options.elements.point;\n\n\t\t\tmodel.radius = custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.radius, index, pointElementOptions.radius);\n\t\t\tmodel.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor);\n\t\t\tmodel.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor);\n\t\t\tmodel.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth);\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/controllers/controller.radar.js\n// module id = 588\n// module chunks = 0","/* global window: false */\n'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tChart.defaults.global.animation = {\n\t\tduration: 1000,\n\t\teasing: 'easeOutQuart',\n\t\tonProgress: helpers.noop,\n\t\tonComplete: helpers.noop\n\t};\n\n\tChart.Animation = Chart.Element.extend({\n\t\tcurrentStep: null, // the current animation step\n\t\tnumSteps: 60, // default number of steps\n\t\teasing: '', // the easing to use for this animation\n\t\trender: null, // render function used by the animation service\n\n\t\tonAnimationProgress: null, // user specified callback to fire on each step of the animation\n\t\tonAnimationComplete: null // user specified callback to fire when the animation finishes\n\t});\n\n\tChart.animationService = {\n\t\tframeDuration: 17,\n\t\tanimations: [],\n\t\tdropFrames: 0,\n\t\trequest: null,\n\n\t\t/**\n\t\t * @function Chart.animationService.addAnimation\n\t\t * @param chartInstance {ChartController} the chart to animate\n\t\t * @param animationObject {IAnimation} the animation that we will animate\n\t\t * @param duration {Number} length of animation in ms\n\t\t * @param lazy {Boolean} if true, the chart is not marked as animating to enable more responsive interactions\n\t\t */\n\t\taddAnimation: function(chartInstance, animationObject, duration, lazy) {\n\t\t\tvar me = this;\n\n\t\t\tif (!lazy) {\n\t\t\t\tchartInstance.animating = true;\n\t\t\t}\n\n\t\t\tfor (var index = 0; index < me.animations.length; ++index) {\n\t\t\t\tif (me.animations[index].chartInstance === chartInstance) {\n\t\t\t\t\t// replacing an in progress animation\n\t\t\t\t\tme.animations[index].animationObject = animationObject;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tme.animations.push({\n\t\t\t\tchartInstance: chartInstance,\n\t\t\t\tanimationObject: animationObject\n\t\t\t});\n\n\t\t\t// If there are no animations queued, manually kickstart a digest, for lack of a better word\n\t\t\tif (me.animations.length === 1) {\n\t\t\t\tme.requestAnimationFrame();\n\t\t\t}\n\t\t},\n\t\t// Cancel the animation for a given chart instance\n\t\tcancelAnimation: function(chartInstance) {\n\t\t\tvar index = helpers.findIndex(this.animations, function(animationWrapper) {\n\t\t\t\treturn animationWrapper.chartInstance === chartInstance;\n\t\t\t});\n\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.animations.splice(index, 1);\n\t\t\t\tchartInstance.animating = false;\n\t\t\t}\n\t\t},\n\t\trequestAnimationFrame: function() {\n\t\t\tvar me = this;\n\t\t\tif (me.request === null) {\n\t\t\t\t// Skip animation frame requests until the active one is executed.\n\t\t\t\t// This can happen when processing mouse events, e.g. 'mousemove'\n\t\t\t\t// and 'mouseout' events will trigger multiple renders.\n\t\t\t\tme.request = helpers.requestAnimFrame.call(window, function() {\n\t\t\t\t\tme.request = null;\n\t\t\t\t\tme.startDigest();\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tstartDigest: function() {\n\t\t\tvar me = this;\n\n\t\t\tvar startTime = Date.now();\n\t\t\tvar framesToDrop = 0;\n\n\t\t\tif (me.dropFrames > 1) {\n\t\t\t\tframesToDrop = Math.floor(me.dropFrames);\n\t\t\t\tme.dropFrames = me.dropFrames % 1;\n\t\t\t}\n\n\t\t\tvar i = 0;\n\t\t\twhile (i < me.animations.length) {\n\t\t\t\tif (me.animations[i].animationObject.currentStep === null) {\n\t\t\t\t\tme.animations[i].animationObject.currentStep = 0;\n\t\t\t\t}\n\n\t\t\t\tme.animations[i].animationObject.currentStep += 1 + framesToDrop;\n\n\t\t\t\tif (me.animations[i].animationObject.currentStep > me.animations[i].animationObject.numSteps) {\n\t\t\t\t\tme.animations[i].animationObject.currentStep = me.animations[i].animationObject.numSteps;\n\t\t\t\t}\n\n\t\t\t\tme.animations[i].animationObject.render(me.animations[i].chartInstance, me.animations[i].animationObject);\n\t\t\t\tif (me.animations[i].animationObject.onAnimationProgress && me.animations[i].animationObject.onAnimationProgress.call) {\n\t\t\t\t\tme.animations[i].animationObject.onAnimationProgress.call(me.animations[i].chartInstance, me.animations[i]);\n\t\t\t\t}\n\n\t\t\t\tif (me.animations[i].animationObject.currentStep === me.animations[i].animationObject.numSteps) {\n\t\t\t\t\tif (me.animations[i].animationObject.onAnimationComplete && me.animations[i].animationObject.onAnimationComplete.call) {\n\t\t\t\t\t\tme.animations[i].animationObject.onAnimationComplete.call(me.animations[i].chartInstance, me.animations[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// executed the last frame. Remove the animation.\n\t\t\t\t\tme.animations[i].chartInstance.animating = false;\n\n\t\t\t\t\tme.animations.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\t++i;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar endTime = Date.now();\n\t\t\tvar dropFrames = (endTime - startTime) / me.frameDuration;\n\n\t\t\tme.dropFrames += dropFrames;\n\n\t\t\t// Do we have more stuff to animate?\n\t\t\tif (me.animations.length > 0) {\n\t\t\t\tme.requestAnimationFrame();\n\t\t\t}\n\t\t}\n\t};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.animation.js\n// module id = 589\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\t// Global Chart canvas helpers object for drawing items to canvas\n\tvar helpers = Chart.canvasHelpers = {};\n\n\thelpers.drawPoint = function(ctx, pointStyle, radius, x, y) {\n\t\tvar type, edgeLength, xOffset, yOffset, height, size;\n\n\t\tif (typeof pointStyle === 'object') {\n\t\t\ttype = pointStyle.toString();\n\t\t\tif (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n\t\t\t\tctx.drawImage(pointStyle, x - pointStyle.width / 2, y - pointStyle.height / 2);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (isNaN(radius) || radius <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (pointStyle) {\n\t\t// Default includes circle\n\t\tdefault:\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(x, y, radius, 0, Math.PI * 2);\n\t\t\tctx.closePath();\n\t\t\tctx.fill();\n\t\t\tbreak;\n\t\tcase 'triangle':\n\t\t\tctx.beginPath();\n\t\t\tedgeLength = 3 * radius / Math.sqrt(3);\n\t\t\theight = edgeLength * Math.sqrt(3) / 2;\n\t\t\tctx.moveTo(x - edgeLength / 2, y + height / 3);\n\t\t\tctx.lineTo(x + edgeLength / 2, y + height / 3);\n\t\t\tctx.lineTo(x, y - 2 * height / 3);\n\t\t\tctx.closePath();\n\t\t\tctx.fill();\n\t\t\tbreak;\n\t\tcase 'rect':\n\t\t\tsize = 1 / Math.SQRT2 * radius;\n\t\t\tctx.beginPath();\n\t\t\tctx.fillRect(x - size, y - size, 2 * size, 2 * size);\n\t\t\tctx.strokeRect(x - size, y - size, 2 * size, 2 * size);\n\t\t\tbreak;\n\t\tcase 'rectRounded':\n\t\t\tvar offset = radius / Math.SQRT2;\n\t\t\tvar leftX = x - offset;\n\t\t\tvar topY = y - offset;\n\t\t\tvar sideSize = Math.SQRT2 * radius;\n\t\t\tChart.helpers.drawRoundedRectangle(ctx, leftX, topY, sideSize, sideSize, radius / 2);\n\t\t\tctx.fill();\n\t\t\tbreak;\n\t\tcase 'rectRot':\n\t\t\tsize = 1 / Math.SQRT2 * radius;\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x - size, y);\n\t\t\tctx.lineTo(x, y + size);\n\t\t\tctx.lineTo(x + size, y);\n\t\t\tctx.lineTo(x, y - size);\n\t\t\tctx.closePath();\n\t\t\tctx.fill();\n\t\t\tbreak;\n\t\tcase 'cross':\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x, y + radius);\n\t\t\tctx.lineTo(x, y - radius);\n\t\t\tctx.moveTo(x - radius, y);\n\t\t\tctx.lineTo(x + radius, y);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'crossRot':\n\t\t\tctx.beginPath();\n\t\t\txOffset = Math.cos(Math.PI / 4) * radius;\n\t\t\tyOffset = Math.sin(Math.PI / 4) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x - xOffset, y + yOffset);\n\t\t\tctx.lineTo(x + xOffset, y - yOffset);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'star':\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x, y + radius);\n\t\t\tctx.lineTo(x, y - radius);\n\t\t\tctx.moveTo(x - radius, y);\n\t\t\tctx.lineTo(x + radius, y);\n\t\t\txOffset = Math.cos(Math.PI / 4) * radius;\n\t\t\tyOffset = Math.sin(Math.PI / 4) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x - xOffset, y + yOffset);\n\t\t\tctx.lineTo(x + xOffset, y - yOffset);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'line':\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x - radius, y);\n\t\t\tctx.lineTo(x + radius, y);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'dash':\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x, y);\n\t\t\tctx.lineTo(x + radius, y);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\t}\n\n\t\tctx.stroke();\n\t};\n\n\thelpers.clipArea = function(ctx, clipArea) {\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(clipArea.left, clipArea.top, clipArea.right - clipArea.left, clipArea.bottom - clipArea.top);\n\t\tctx.clip();\n\t};\n\n\thelpers.unclipArea = function(ctx) {\n\t\tctx.restore();\n\t};\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.canvasHelpers.js\n// module id = 590\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\tvar plugins = Chart.plugins;\n\tvar platform = Chart.platform;\n\n\t// Create a dictionary of chart types, to allow for extension of existing types\n\tChart.types = {};\n\n\t// Store a reference to each instance - allowing us to globally resize chart instances on window resize.\n\t// Destroy method on the chart will remove the instance of the chart from this reference.\n\tChart.instances = {};\n\n\t// Controllers available for dataset visualization eg. bar, line, slice, etc.\n\tChart.controllers = {};\n\n\t/**\n\t * Initializes the given config with global and chart default values.\n\t */\n\tfunction initConfig(config) {\n\t\tconfig = config || {};\n\n\t\t// Do NOT use configMerge() for the data object because this method merges arrays\n\t\t// and so would change references to labels and datasets, preventing data updates.\n\t\tvar data = config.data = config.data || {};\n\t\tdata.datasets = data.datasets || [];\n\t\tdata.labels = data.labels || [];\n\n\t\tconfig.options = helpers.configMerge(\n\t\t\tChart.defaults.global,\n\t\t\tChart.defaults[config.type],\n\t\t\tconfig.options || {});\n\n\t\treturn config;\n\t}\n\n\t/**\n\t * Updates the config of the chart\n\t * @param chart {Chart.Controller} chart to update the options for\n\t */\n\tfunction updateConfig(chart) {\n\t\tvar newOptions = chart.options;\n\n\t\t// Update Scale(s) with options\n\t\tif (newOptions.scale) {\n\t\t\tchart.scale.options = newOptions.scale;\n\t\t} else if (newOptions.scales) {\n\t\t\tnewOptions.scales.xAxes.concat(newOptions.scales.yAxes).forEach(function(scaleOptions) {\n\t\t\t\tchart.scales[scaleOptions.id].options = scaleOptions;\n\t\t\t});\n\t\t}\n\n\t\t// Tooltip\n\t\tchart.tooltip._options = newOptions.tooltips;\n\t}\n\n\t/**\n\t * @class Chart.Controller\n\t * The main controller of a chart.\n\t */\n\tChart.Controller = function(item, config, instance) {\n\t\tvar me = this;\n\n\t\tconfig = initConfig(config);\n\n\t\tvar context = platform.acquireContext(item, config);\n\t\tvar canvas = context && context.canvas;\n\t\tvar height = canvas && canvas.height;\n\t\tvar width = canvas && canvas.width;\n\n\t\tinstance.ctx = context;\n\t\tinstance.canvas = canvas;\n\t\tinstance.config = config;\n\t\tinstance.width = width;\n\t\tinstance.height = height;\n\t\tinstance.aspectRatio = height? width / height : null;\n\n\t\tme.id = helpers.uid();\n\t\tme.chart = instance;\n\t\tme.config = config;\n\t\tme.options = config.options;\n\t\tme._bufferedRender = false;\n\n\t\t// Add the chart instance to the global namespace\n\t\tChart.instances[me.id] = me;\n\n\t\tObject.defineProperty(me, 'data', {\n\t\t\tget: function() {\n\t\t\t\treturn me.config.data;\n\t\t\t}\n\t\t});\n\n\t\tif (!context || !canvas) {\n\t\t\t// The given item is not a compatible context2d element, let's return before finalizing\n\t\t\t// the chart initialization but after setting basic chart / controller properties that\n\t\t\t// can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n\t\t\t// https://github.com/chartjs/Chart.js/issues/2807\n\t\t\tconsole.error(\"Failed to create chart: can't acquire context from the given item\");\n\t\t\treturn me;\n\t\t}\n\n\t\tme.initialize();\n\t\tme.update();\n\n\t\treturn me;\n\t};\n\n\thelpers.extend(Chart.Controller.prototype, /** @lends Chart.Controller.prototype */ {\n\t\tinitialize: function() {\n\t\t\tvar me = this;\n\n\t\t\t// Before init plugin notification\n\t\t\tplugins.notify(me, 'beforeInit');\n\n\t\t\thelpers.retinaScale(me.chart);\n\n\t\t\tme.bindEvents();\n\n\t\t\tif (me.options.responsive) {\n\t\t\t\t// Initial resize before chart draws (must be silent to preserve initial animations).\n\t\t\t\tme.resize(true);\n\t\t\t}\n\n\t\t\t// Make sure scales have IDs and are built before we build any controllers.\n\t\t\tme.ensureScalesHaveIDs();\n\t\t\tme.buildScales();\n\t\t\tme.initToolTip();\n\n\t\t\t// After init plugin notification\n\t\t\tplugins.notify(me, 'afterInit');\n\n\t\t\treturn me;\n\t\t},\n\n\t\tclear: function() {\n\t\t\thelpers.clear(this.chart);\n\t\t\treturn this;\n\t\t},\n\n\t\tstop: function() {\n\t\t\t// Stops any current animation loop occurring\n\t\t\tChart.animationService.cancelAnimation(this);\n\t\t\treturn this;\n\t\t},\n\n\t\tresize: function(silent) {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart;\n\t\t\tvar options = me.options;\n\t\t\tvar canvas = chart.canvas;\n\t\t\tvar aspectRatio = (options.maintainAspectRatio && chart.aspectRatio) || null;\n\n\t\t\t// the canvas render width and height will be casted to integers so make sure that\n\t\t\t// the canvas display style uses the same integer values to avoid blurring effect.\n\t\t\tvar newWidth = Math.floor(helpers.getMaximumWidth(canvas));\n\t\t\tvar newHeight = Math.floor(aspectRatio? newWidth / aspectRatio : helpers.getMaximumHeight(canvas));\n\n\t\t\tif (chart.width === newWidth && chart.height === newHeight) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcanvas.width = chart.width = newWidth;\n\t\t\tcanvas.height = chart.height = newHeight;\n\t\t\tcanvas.style.width = newWidth + 'px';\n\t\t\tcanvas.style.height = newHeight + 'px';\n\n\t\t\thelpers.retinaScale(chart);\n\n\t\t\tif (!silent) {\n\t\t\t\t// Notify any plugins about the resize\n\t\t\t\tvar newSize = {width: newWidth, height: newHeight};\n\t\t\t\tplugins.notify(me, 'resize', [newSize]);\n\n\t\t\t\t// Notify of resize\n\t\t\t\tif (me.options.onResize) {\n\t\t\t\t\tme.options.onResize(me, newSize);\n\t\t\t\t}\n\n\t\t\t\tme.stop();\n\t\t\t\tme.update(me.options.responsiveAnimationDuration);\n\t\t\t}\n\t\t},\n\n\t\tensureScalesHaveIDs: function() {\n\t\t\tvar options = this.options;\n\t\t\tvar scalesOptions = options.scales || {};\n\t\t\tvar scaleOptions = options.scale;\n\n\t\t\thelpers.each(scalesOptions.xAxes, function(xAxisOptions, index) {\n\t\t\t\txAxisOptions.id = xAxisOptions.id || ('x-axis-' + index);\n\t\t\t});\n\n\t\t\thelpers.each(scalesOptions.yAxes, function(yAxisOptions, index) {\n\t\t\t\tyAxisOptions.id = yAxisOptions.id || ('y-axis-' + index);\n\t\t\t});\n\n\t\t\tif (scaleOptions) {\n\t\t\t\tscaleOptions.id = scaleOptions.id || 'scale';\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Builds a map of scale ID to scale object for future lookup.\n\t\t */\n\t\tbuildScales: function() {\n\t\t\tvar me = this;\n\t\t\tvar options = me.options;\n\t\t\tvar scales = me.scales = {};\n\t\t\tvar items = [];\n\n\t\t\tif (options.scales) {\n\t\t\t\titems = items.concat(\n\t\t\t\t\t(options.scales.xAxes || []).map(function(xAxisOptions) {\n\t\t\t\t\t\treturn {options: xAxisOptions, dtype: 'category'};\n\t\t\t\t\t}),\n\t\t\t\t\t(options.scales.yAxes || []).map(function(yAxisOptions) {\n\t\t\t\t\t\treturn {options: yAxisOptions, dtype: 'linear'};\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (options.scale) {\n\t\t\t\titems.push({options: options.scale, dtype: 'radialLinear', isDefault: true});\n\t\t\t}\n\n\t\t\thelpers.each(items, function(item) {\n\t\t\t\tvar scaleOptions = item.options;\n\t\t\t\tvar scaleType = helpers.getValueOrDefault(scaleOptions.type, item.dtype);\n\t\t\t\tvar scaleClass = Chart.scaleService.getScaleConstructor(scaleType);\n\t\t\t\tif (!scaleClass) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar scale = new scaleClass({\n\t\t\t\t\tid: scaleOptions.id,\n\t\t\t\t\toptions: scaleOptions,\n\t\t\t\t\tctx: me.chart.ctx,\n\t\t\t\t\tchart: me\n\t\t\t\t});\n\n\t\t\t\tscales[scale.id] = scale;\n\n\t\t\t\t// TODO(SB): I think we should be able to remove this custom case (options.scale)\n\t\t\t\t// and consider it as a regular scale part of the \"scales\"\" map only! This would\n\t\t\t\t// make the logic easier and remove some useless? custom code.\n\t\t\t\tif (item.isDefault) {\n\t\t\t\t\tme.scale = scale;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tChart.scaleService.addScalesToLayout(this);\n\t\t},\n\n\t\tbuildOrUpdateControllers: function() {\n\t\t\tvar me = this;\n\t\t\tvar types = [];\n\t\t\tvar newControllers = [];\n\n\t\t\thelpers.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\tvar meta = me.getDatasetMeta(datasetIndex);\n\t\t\t\tif (!meta.type) {\n\t\t\t\t\tmeta.type = dataset.type || me.config.type;\n\t\t\t\t}\n\n\t\t\t\ttypes.push(meta.type);\n\n\t\t\t\tif (meta.controller) {\n\t\t\t\t\tmeta.controller.updateIndex(datasetIndex);\n\t\t\t\t} else {\n\t\t\t\t\tmeta.controller = new Chart.controllers[meta.type](me, datasetIndex);\n\t\t\t\t\tnewControllers.push(meta.controller);\n\t\t\t\t}\n\t\t\t}, me);\n\n\t\t\tif (types.length > 1) {\n\t\t\t\tfor (var i = 1; i < types.length; i++) {\n\t\t\t\t\tif (types[i] !== types[i - 1]) {\n\t\t\t\t\t\tme.isCombo = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn newControllers;\n\t\t},\n\n\t\t/**\n\t\t * Reset the elements of all datasets\n\t\t * @private\n\t\t */\n\t\tresetElements: function() {\n\t\t\tvar me = this;\n\t\t\thelpers.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\tme.getDatasetMeta(datasetIndex).controller.reset();\n\t\t\t}, me);\n\t\t},\n\n\t\t/**\n\t\t* Resets the chart back to it's state before the initial animation\n\t\t*/\n\t\treset: function() {\n\t\t\tthis.resetElements();\n\t\t\tthis.tooltip.initialize();\n\t\t},\n\n\t\tupdate: function(animationDuration, lazy) {\n\t\t\tvar me = this;\n\n\t\t\tupdateConfig(me);\n\n\t\t\tif (plugins.notify(me, 'beforeUpdate') === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// In case the entire data object changed\n\t\t\tme.tooltip._data = me.data;\n\n\t\t\t// Make sure dataset controllers are updated and new controllers are reset\n\t\t\tvar newControllers = me.buildOrUpdateControllers();\n\n\t\t\t// Make sure all dataset controllers have correct meta data counts\n\t\t\thelpers.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\tme.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();\n\t\t\t}, me);\n\n\t\t\tme.updateLayout();\n\n\t\t\t// Can only reset the new controllers after the scales have been updated\n\t\t\thelpers.each(newControllers, function(controller) {\n\t\t\t\tcontroller.reset();\n\t\t\t});\n\n\t\t\tme.updateDatasets();\n\n\t\t\t// Do this before render so that any plugins that need final scale updates can use it\n\t\t\tplugins.notify(me, 'afterUpdate');\n\n\t\t\tif (me._bufferedRender) {\n\t\t\t\tme._bufferedRequest = {\n\t\t\t\t\tlazy: lazy,\n\t\t\t\t\tduration: animationDuration\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tme.render(animationDuration, lazy);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t\t * @private\n\t\t */\n\t\tupdateLayout: function() {\n\t\t\tvar me = this;\n\n\t\t\tif (plugins.notify(me, 'beforeLayout') === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tChart.layoutService.update(this, this.chart.width, this.chart.height);\n\n\t\t\t/**\n\t\t\t * Provided for backward compatibility, use `afterLayout` instead.\n\t\t\t * @method IPlugin#afterScaleUpdate\n\t\t\t * @deprecated since version 2.5.0\n\t\t\t * @todo remove at version 3\n\t\t\t */\n\t\t\tplugins.notify(me, 'afterScaleUpdate');\n\t\t\tplugins.notify(me, 'afterLayout');\n\t\t},\n\n\t\t/**\n\t\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t\t * @private\n\t\t */\n\t\tupdateDatasets: function() {\n\t\t\tvar me = this;\n\n\t\t\tif (plugins.notify(me, 'beforeDatasetsUpdate') === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n\t\t\t\tme.getDatasetMeta(i).controller.update();\n\t\t\t}\n\n\t\t\tplugins.notify(me, 'afterDatasetsUpdate');\n\t\t},\n\n\t\trender: function(duration, lazy) {\n\t\t\tvar me = this;\n\n\t\t\tif (plugins.notify(me, 'beforeRender') === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar animationOptions = me.options.animation;\n\t\t\tvar onComplete = function() {\n\t\t\t\tplugins.notify(me, 'afterRender');\n\t\t\t\tvar callback = animationOptions && animationOptions.onComplete;\n\t\t\t\tif (callback && callback.call) {\n\t\t\t\t\tcallback.call(me);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (animationOptions && ((typeof duration !== 'undefined' && duration !== 0) || (typeof duration === 'undefined' && animationOptions.duration !== 0))) {\n\t\t\t\tvar animation = new Chart.Animation();\n\t\t\t\tanimation.numSteps = (duration || animationOptions.duration) / 16.66; // 60 fps\n\t\t\t\tanimation.easing = animationOptions.easing;\n\n\t\t\t\t// render function\n\t\t\t\tanimation.render = function(chartInstance, animationObject) {\n\t\t\t\t\tvar easingFunction = helpers.easingEffects[animationObject.easing];\n\t\t\t\t\tvar stepDecimal = animationObject.currentStep / animationObject.numSteps;\n\t\t\t\t\tvar easeDecimal = easingFunction(stepDecimal);\n\n\t\t\t\t\tchartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);\n\t\t\t\t};\n\n\t\t\t\t// user events\n\t\t\t\tanimation.onAnimationProgress = animationOptions.onProgress;\n\t\t\t\tanimation.onAnimationComplete = onComplete;\n\n\t\t\t\tChart.animationService.addAnimation(me, animation, duration, lazy);\n\t\t\t} else {\n\t\t\t\tme.draw();\n\t\t\t\tonComplete();\n\t\t\t}\n\n\t\t\treturn me;\n\t\t},\n\n\t\tdraw: function(easingValue) {\n\t\t\tvar me = this;\n\n\t\t\tme.clear();\n\n\t\t\tif (easingValue === undefined || easingValue === null) {\n\t\t\t\teasingValue = 1;\n\t\t\t}\n\n\t\t\tif (plugins.notify(me, 'beforeDraw', [easingValue]) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Draw all the scales\n\t\t\thelpers.each(me.boxes, function(box) {\n\t\t\t\tbox.draw(me.chartArea);\n\t\t\t}, me);\n\n\t\t\tif (me.scale) {\n\t\t\t\tme.scale.draw();\n\t\t\t}\n\n\t\t\tme.drawDatasets(easingValue);\n\n\t\t\t// Finally draw the tooltip\n\t\t\tme.tooltip.transition(easingValue).draw();\n\n\t\t\tplugins.notify(me, 'afterDraw', [easingValue]);\n\t\t},\n\n\t\t/**\n\t\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t\t * @private\n\t\t */\n\t\tdrawDatasets: function(easingValue) {\n\t\t\tvar me = this;\n\n\t\t\tif (plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Draw each dataset via its respective controller (reversed to support proper line stacking)\n\t\t\thelpers.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\tif (me.isDatasetVisible(datasetIndex)) {\n\t\t\t\t\tme.getDatasetMeta(datasetIndex).controller.draw(easingValue);\n\t\t\t\t}\n\t\t\t}, me, true);\n\n\t\t\tplugins.notify(me, 'afterDatasetsDraw', [easingValue]);\n\t\t},\n\n\t\t// Get the single element that was clicked on\n\t\t// @return : An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw\n\t\tgetElementAtEvent: function(e) {\n\t\t\treturn Chart.Interaction.modes.single(this, e);\n\t\t},\n\n\t\tgetElementsAtEvent: function(e) {\n\t\t\treturn Chart.Interaction.modes.label(this, e, {intersect: true});\n\t\t},\n\n\t\tgetElementsAtXAxis: function(e) {\n\t\t\treturn Chart.Interaction.modes['x-axis'](this, e, {intersect: true});\n\t\t},\n\n\t\tgetElementsAtEventForMode: function(e, mode, options) {\n\t\t\tvar method = Chart.Interaction.modes[mode];\n\t\t\tif (typeof method === 'function') {\n\t\t\t\treturn method(this, e, options);\n\t\t\t}\n\n\t\t\treturn [];\n\t\t},\n\n\t\tgetDatasetAtEvent: function(e) {\n\t\t\treturn Chart.Interaction.modes.dataset(this, e, {intersect: true});\n\t\t},\n\n\t\tgetDatasetMeta: function(datasetIndex) {\n\t\t\tvar me = this;\n\t\t\tvar dataset = me.data.datasets[datasetIndex];\n\t\t\tif (!dataset._meta) {\n\t\t\t\tdataset._meta = {};\n\t\t\t}\n\n\t\t\tvar meta = dataset._meta[me.id];\n\t\t\tif (!meta) {\n\t\t\t\tmeta = dataset._meta[me.id] = {\n\t\t\t\t\ttype: null,\n\t\t\t\t\tdata: [],\n\t\t\t\t\tdataset: null,\n\t\t\t\t\tcontroller: null,\n\t\t\t\t\thidden: null,\t\t\t// See isDatasetVisible() comment\n\t\t\t\t\txAxisID: null,\n\t\t\t\t\tyAxisID: null\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn meta;\n\t\t},\n\n\t\tgetVisibleDatasetCount: function() {\n\t\t\tvar count = 0;\n\t\t\tfor (var i = 0, ilen = this.data.datasets.length; i<ilen; ++i) {\n\t\t\t\tif (this.isDatasetVisible(i)) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn count;\n\t\t},\n\n\t\tisDatasetVisible: function(datasetIndex) {\n\t\t\tvar meta = this.getDatasetMeta(datasetIndex);\n\n\t\t\t// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n\t\t\t// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n\t\t\treturn typeof meta.hidden === 'boolean'? !meta.hidden : !this.data.datasets[datasetIndex].hidden;\n\t\t},\n\n\t\tgenerateLegend: function() {\n\t\t\treturn this.options.legendCallback(this);\n\t\t},\n\n\t\tdestroy: function() {\n\t\t\tvar me = this;\n\t\t\tvar canvas = me.chart.canvas;\n\t\t\tvar meta, i, ilen;\n\n\t\t\tme.stop();\n\n\t\t\t// dataset controllers need to cleanup associated data\n\t\t\tfor (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n\t\t\t\tmeta = me.getDatasetMeta(i);\n\t\t\t\tif (meta.controller) {\n\t\t\t\t\tmeta.controller.destroy();\n\t\t\t\t\tmeta.controller = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (canvas) {\n\t\t\t\tme.unbindEvents();\n\t\t\t\thelpers.clear(me.chart);\n\t\t\t\tplatform.releaseContext(me.chart.ctx);\n\t\t\t\tme.chart.canvas = null;\n\t\t\t\tme.chart.ctx = null;\n\t\t\t}\n\n\t\t\tplugins.notify(me, 'destroy');\n\n\t\t\tdelete Chart.instances[me.id];\n\t\t},\n\n\t\ttoBase64Image: function() {\n\t\t\treturn this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);\n\t\t},\n\n\t\tinitToolTip: function() {\n\t\t\tvar me = this;\n\t\t\tme.tooltip = new Chart.Tooltip({\n\t\t\t\t_chart: me.chart,\n\t\t\t\t_chartInstance: me,\n\t\t\t\t_data: me.data,\n\t\t\t\t_options: me.options.tooltips\n\t\t\t}, me);\n\t\t\tme.tooltip.initialize();\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tbindEvents: function() {\n\t\t\tvar me = this;\n\t\t\tvar listeners = me._listeners = {};\n\t\t\tvar listener = function() {\n\t\t\t\tme.eventHandler.apply(me, arguments);\n\t\t\t};\n\n\t\t\thelpers.each(me.options.events, function(type) {\n\t\t\t\tplatform.addEventListener(me, type, listener);\n\t\t\t\tlisteners[type] = listener;\n\t\t\t});\n\n\t\t\t// Responsiveness is currently based on the use of an iframe, however this method causes\n\t\t\t// performance issues and could be troublesome when used with ad blockers. So make sure\n\t\t\t// that the user is still able to create a chart without iframe when responsive is false.\n\t\t\t// See https://github.com/chartjs/Chart.js/issues/2210\n\t\t\tif (me.options.responsive) {\n\t\t\t\tlistener = function() {\n\t\t\t\t\tme.resize();\n\t\t\t\t};\n\n\t\t\t\tplatform.addEventListener(me, 'resize', listener);\n\t\t\t\tlisteners.resize = listener;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tunbindEvents: function() {\n\t\t\tvar me = this;\n\t\t\tvar listeners = me._listeners;\n\t\t\tif (!listeners) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdelete me._listeners;\n\t\t\thelpers.each(listeners, function(listener, type) {\n\t\t\t\tplatform.removeEventListener(me, type, listener);\n\t\t\t});\n\t\t},\n\n\t\tupdateHoverStyle: function(elements, mode, enabled) {\n\t\t\tvar method = enabled? 'setHoverStyle' : 'removeHoverStyle';\n\t\t\tvar element, i, ilen;\n\n\t\t\tfor (i=0, ilen=elements.length; i<ilen; ++i) {\n\t\t\t\telement = elements[i];\n\t\t\t\tif (element) {\n\t\t\t\t\tthis.getDatasetMeta(element._datasetIndex).controller[method](element);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\teventHandler: function(e) {\n\t\t\tvar me = this;\n\t\t\tvar tooltip = me.tooltip;\n\n\t\t\tif (plugins.notify(me, 'beforeEvent', [e]) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Buffer any update calls so that renders do not occur\n\t\t\tme._bufferedRender = true;\n\t\t\tme._bufferedRequest = null;\n\n\t\t\tvar changed = me.handleEvent(e);\n\t\t\tchanged |= tooltip && tooltip.handleEvent(e);\n\n\t\t\tplugins.notify(me, 'afterEvent', [e]);\n\n\t\t\tvar bufferedRequest = me._bufferedRequest;\n\t\t\tif (bufferedRequest) {\n\t\t\t\t// If we have an update that was triggered, we need to do a normal render\n\t\t\t\tme.render(bufferedRequest.duration, bufferedRequest.lazy);\n\t\t\t} else if (changed && !me.animating) {\n\t\t\t\t// If entering, leaving, or changing elements, animate the change via pivot\n\t\t\t\tme.stop();\n\n\t\t\t\t// We only need to render at this point. Updating will cause scales to be\n\t\t\t\t// recomputed generating flicker & using more memory than necessary.\n\t\t\t\tme.render(me.options.hover.animationDuration, true);\n\t\t\t}\n\n\t\t\tme._bufferedRender = false;\n\t\t\tme._bufferedRequest = null;\n\n\t\t\treturn me;\n\t\t},\n\n\t\t/**\n\t\t * Handle an event\n\t\t * @private\n\t\t * @param {IEvent} event the event to handle\n\t\t * @return {Boolean} true if the chart needs to re-render\n\t\t */\n\t\thandleEvent: function(e) {\n\t\t\tvar me = this;\n\t\t\tvar options = me.options || {};\n\t\t\tvar hoverOptions = options.hover;\n\t\t\tvar changed = false;\n\n\t\t\tme.lastActive = me.lastActive || [];\n\n\t\t\t// Find Active Elements for hover and tooltips\n\t\t\tif (e.type === 'mouseout') {\n\t\t\t\tme.active = [];\n\t\t\t} else {\n\t\t\t\tme.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);\n\t\t\t}\n\n\t\t\t// On Hover hook\n\t\t\tif (hoverOptions.onHover) {\n\t\t\t\t// Need to call with native event here to not break backwards compatibility\n\t\t\t\thoverOptions.onHover.call(me, e.native, me.active);\n\t\t\t}\n\n\t\t\tif (e.type === 'mouseup' || e.type === 'click') {\n\t\t\t\tif (options.onClick) {\n\t\t\t\t\t// Use e.native here for backwards compatibility\n\t\t\t\t\toptions.onClick.call(me, e.native, me.active);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove styling for last active (even if it may still be active)\n\t\t\tif (me.lastActive.length) {\n\t\t\t\tme.updateHoverStyle(me.lastActive, hoverOptions.mode, false);\n\t\t\t}\n\n\t\t\t// Built in hover styling\n\t\t\tif (me.active.length && hoverOptions.mode) {\n\t\t\t\tme.updateHoverStyle(me.active, hoverOptions.mode, true);\n\t\t\t}\n\n\t\t\tchanged = !helpers.arrayEquals(me.active, me.lastActive);\n\n\t\t\t// Remember Last Actives\n\t\t\tme.lastActive = me.active;\n\n\t\t\treturn changed;\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.controller.js\n// module id = 591\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tvar arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n\n\t/**\n\t * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n\t * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n\t * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.\n\t */\n\tfunction listenArrayEvents(array, listener) {\n\t\tif (array._chartjs) {\n\t\t\tarray._chartjs.listeners.push(listener);\n\t\t\treturn;\n\t\t}\n\n\t\tObject.defineProperty(array, '_chartjs', {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\tvalue: {\n\t\t\t\tlisteners: [listener]\n\t\t\t}\n\t\t});\n\n\t\tarrayEvents.forEach(function(key) {\n\t\t\tvar method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);\n\t\t\tvar base = array[key];\n\n\t\t\tObject.defineProperty(array, key, {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tvalue: function() {\n\t\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\t\tvar res = base.apply(this, args);\n\n\t\t\t\t\thelpers.each(array._chartjs.listeners, function(object) {\n\t\t\t\t\t\tif (typeof object[method] === 'function') {\n\t\t\t\t\t\t\tobject[method].apply(object, args);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Removes the given array event listener and cleanup extra attached properties (such as\n\t * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n\t */\n\tfunction unlistenArrayEvents(array, listener) {\n\t\tvar stub = array._chartjs;\n\t\tif (!stub) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar listeners = stub.listeners;\n\t\tvar index = listeners.indexOf(listener);\n\t\tif (index !== -1) {\n\t\t\tlisteners.splice(index, 1);\n\t\t}\n\n\t\tif (listeners.length > 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tarrayEvents.forEach(function(key) {\n\t\t\tdelete array[key];\n\t\t});\n\n\t\tdelete array._chartjs;\n\t}\n\n\t// Base class for all dataset controllers (line, bar, etc)\n\tChart.DatasetController = function(chart, datasetIndex) {\n\t\tthis.initialize(chart, datasetIndex);\n\t};\n\n\thelpers.extend(Chart.DatasetController.prototype, {\n\n\t\t/**\n\t\t * Element type used to generate a meta dataset (e.g. Chart.element.Line).\n\t\t * @type {Chart.core.element}\n\t\t */\n\t\tdatasetElementType: null,\n\n\t\t/**\n\t\t * Element type used to generate a meta data (e.g. Chart.element.Point).\n\t\t * @type {Chart.core.element}\n\t\t */\n\t\tdataElementType: null,\n\n\t\tinitialize: function(chart, datasetIndex) {\n\t\t\tvar me = this;\n\t\t\tme.chart = chart;\n\t\t\tme.index = datasetIndex;\n\t\t\tme.linkScales();\n\t\t\tme.addElements();\n\t\t},\n\n\t\tupdateIndex: function(datasetIndex) {\n\t\t\tthis.index = datasetIndex;\n\t\t},\n\n\t\tlinkScales: function() {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar dataset = me.getDataset();\n\n\t\t\tif (meta.xAxisID === null) {\n\t\t\t\tmeta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;\n\t\t\t}\n\t\t\tif (meta.yAxisID === null) {\n\t\t\t\tmeta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;\n\t\t\t}\n\t\t},\n\n\t\tgetDataset: function() {\n\t\t\treturn this.chart.data.datasets[this.index];\n\t\t},\n\n\t\tgetMeta: function() {\n\t\t\treturn this.chart.getDatasetMeta(this.index);\n\t\t},\n\n\t\tgetScaleForId: function(scaleID) {\n\t\t\treturn this.chart.scales[scaleID];\n\t\t},\n\n\t\treset: function() {\n\t\t\tthis.update(true);\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tdestroy: function() {\n\t\t\tif (this._data) {\n\t\t\t\tunlistenArrayEvents(this._data, this);\n\t\t\t}\n\t\t},\n\n\t\tcreateMetaDataset: function() {\n\t\t\tvar me = this;\n\t\t\tvar type = me.datasetElementType;\n\t\t\treturn type && new type({\n\t\t\t\t_chart: me.chart.chart,\n\t\t\t\t_datasetIndex: me.index\n\t\t\t});\n\t\t},\n\n\t\tcreateMetaData: function(index) {\n\t\t\tvar me = this;\n\t\t\tvar type = me.dataElementType;\n\t\t\treturn type && new type({\n\t\t\t\t_chart: me.chart.chart,\n\t\t\t\t_datasetIndex: me.index,\n\t\t\t\t_index: index\n\t\t\t});\n\t\t},\n\n\t\taddElements: function() {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar data = me.getDataset().data || [];\n\t\t\tvar metaData = meta.data;\n\t\t\tvar i, ilen;\n\n\t\t\tfor (i=0, ilen=data.length; i<ilen; ++i) {\n\t\t\t\tmetaData[i] = metaData[i] || me.createMetaData(i);\n\t\t\t}\n\n\t\t\tmeta.dataset = meta.dataset || me.createMetaDataset();\n\t\t},\n\n\t\taddElementAndReset: function(index) {\n\t\t\tvar element = this.createMetaData(index);\n\t\t\tthis.getMeta().data.splice(index, 0, element);\n\t\t\tthis.updateElement(element, index, true);\n\t\t},\n\n\t\tbuildOrUpdateElements: function() {\n\t\t\tvar me = this;\n\t\t\tvar dataset = me.getDataset();\n\t\t\tvar data = dataset.data || (dataset.data = []);\n\n\t\t\t// In order to correctly handle data addition/deletion animation (an thus simulate\n\t\t\t// real-time charts), we need to monitor these data modifications and synchronize\n\t\t\t// the internal meta data accordingly.\n\t\t\tif (me._data !== data) {\n\t\t\t\tif (me._data) {\n\t\t\t\t\t// This case happens when the user replaced the data array instance.\n\t\t\t\t\tunlistenArrayEvents(me._data, me);\n\t\t\t\t}\n\n\t\t\t\tlistenArrayEvents(data, me);\n\t\t\t\tme._data = data;\n\t\t\t}\n\n\t\t\t// Re-sync meta data in case the user replaced the data array or if we missed\n\t\t\t// any updates and so make sure that we handle number of datapoints changing.\n\t\t\tme.resyncElements();\n\t\t},\n\n\t\tupdate: helpers.noop,\n\n\t\tdraw: function(ease) {\n\t\t\tvar easingDecimal = ease || 1;\n\t\t\tvar i, len;\n\t\t\tvar metaData = this.getMeta().data;\n\t\t\tfor (i = 0, len = metaData.length; i < len; ++i) {\n\t\t\t\tmetaData[i].transition(easingDecimal).draw();\n\t\t\t}\n\t\t},\n\n\t\tremoveHoverStyle: function(element, elementOpts) {\n\t\t\tvar dataset = this.chart.data.datasets[element._datasetIndex],\n\t\t\t\tindex = element._index,\n\t\t\t\tcustom = element.custom || {},\n\t\t\t\tvalueOrDefault = helpers.getValueAtIndexOrDefault,\n\t\t\t\tmodel = element._model;\n\n\t\t\tmodel.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);\n\t\t\tmodel.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);\n\t\t\tmodel.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);\n\t\t},\n\n\t\tsetHoverStyle: function(element) {\n\t\t\tvar dataset = this.chart.data.datasets[element._datasetIndex],\n\t\t\t\tindex = element._index,\n\t\t\t\tcustom = element.custom || {},\n\t\t\t\tvalueOrDefault = helpers.getValueAtIndexOrDefault,\n\t\t\t\tgetHoverColor = helpers.getHoverColor,\n\t\t\t\tmodel = element._model;\n\n\t\t\tmodel.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));\n\t\t\tmodel.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));\n\t\t\tmodel.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tresyncElements: function() {\n\t\t\tvar me = this;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar data = me.getDataset().data;\n\t\t\tvar numMeta = meta.data.length;\n\t\t\tvar numData = data.length;\n\n\t\t\tif (numData < numMeta) {\n\t\t\t\tmeta.data.splice(numData, numMeta - numData);\n\t\t\t} else if (numData > numMeta) {\n\t\t\t\tme.insertElements(numMeta, numData - numMeta);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tinsertElements: function(start, count) {\n\t\t\tfor (var i=0; i<count; ++i) {\n\t\t\t\tthis.addElementAndReset(start + i);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tonDataPush: function() {\n\t\t\tthis.insertElements(this.getDataset().data.length-1, arguments.length);\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tonDataPop: function() {\n\t\t\tthis.getMeta().data.pop();\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tonDataShift: function() {\n\t\t\tthis.getMeta().data.shift();\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tonDataSplice: function(start, count) {\n\t\t\tthis.getMeta().data.splice(start, count);\n\t\t\tthis.insertElements(start, arguments.length - 2);\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tonDataUnshift: function() {\n\t\t\tthis.insertElements(0, arguments.length);\n\t\t}\n\t});\n\n\tChart.DatasetController.extend = helpers.inherits;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.datasetController.js\n// module id = 592\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tChart.elements = {};\n\n\tChart.Element = function(configuration) {\n\t\thelpers.extend(this, configuration);\n\t\tthis.initialize.apply(this, arguments);\n\t};\n\n\thelpers.extend(Chart.Element.prototype, {\n\n\t\tinitialize: function() {\n\t\t\tthis.hidden = false;\n\t\t},\n\n\t\tpivot: function() {\n\t\t\tvar me = this;\n\t\t\tif (!me._view) {\n\t\t\t\tme._view = helpers.clone(me._model);\n\t\t\t}\n\t\t\tme._start = helpers.clone(me._view);\n\t\t\treturn me;\n\t\t},\n\n\t\ttransition: function(ease) {\n\t\t\tvar me = this;\n\n\t\t\tif (!me._view) {\n\t\t\t\tme._view = helpers.clone(me._model);\n\t\t\t}\n\n\t\t\t// No animation -> No Transition\n\t\t\tif (ease === 1) {\n\t\t\t\tme._view = me._model;\n\t\t\t\tme._start = null;\n\t\t\t\treturn me;\n\t\t\t}\n\n\t\t\tif (!me._start) {\n\t\t\t\tme.pivot();\n\t\t\t}\n\n\t\t\thelpers.each(me._model, function(value, key) {\n\n\t\t\t\tif (key[0] === '_') {\n\t\t\t\t\t// Only non-underscored properties\n\t\t\t\t// Init if doesn't exist\n\t\t\t\t} else if (!me._view.hasOwnProperty(key)) {\n\t\t\t\t\tif (typeof value === 'number' && !isNaN(me._view[key])) {\n\t\t\t\t\t\tme._view[key] = value * ease;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tme._view[key] = value;\n\t\t\t\t\t}\n\t\t\t\t// No unnecessary computations\n\t\t\t\t} else if (value === me._view[key]) {\n\t\t\t\t\t// It's the same! Woohoo!\n\t\t\t\t// Color transitions if possible\n\t\t\t\t} else if (typeof value === 'string') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar color = helpers.color(me._model[key]).mix(helpers.color(me._start[key]), ease);\n\t\t\t\t\t\tme._view[key] = color.rgbString();\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tme._view[key] = value;\n\t\t\t\t\t}\n\t\t\t\t// Number transitions\n\t\t\t\t} else if (typeof value === 'number') {\n\t\t\t\t\tvar startVal = me._start[key] !== undefined && isNaN(me._start[key]) === false ? me._start[key] : 0;\n\t\t\t\t\tme._view[key] = ((me._model[key] - startVal) * ease) + startVal;\n\t\t\t\t// Everything else\n\t\t\t\t} else {\n\t\t\t\t\tme._view[key] = value;\n\t\t\t\t}\n\t\t\t}, me);\n\n\t\t\treturn me;\n\t\t},\n\n\t\ttooltipPosition: function() {\n\t\t\treturn {\n\t\t\t\tx: this._model.x,\n\t\t\t\ty: this._model.y\n\t\t\t};\n\t\t},\n\n\t\thasValue: function() {\n\t\t\treturn helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);\n\t\t}\n\t});\n\n\tChart.Element.extend = helpers.inherits;\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.element.js\n// module id = 593\n// module chunks = 0","/* global window: false */\n/* global document: false */\n'use strict';\n\nvar color = require('chartjs-color');\n\nmodule.exports = function(Chart) {\n\t// Global Chart helpers object for utility methods and classes\n\tvar helpers = Chart.helpers = {};\n\n\t// -- Basic js utility methods\n\thelpers.each = function(loopable, callback, self, reverse) {\n\t\t// Check to see if null or undefined firstly.\n\t\tvar i, len;\n\t\tif (helpers.isArray(loopable)) {\n\t\t\tlen = loopable.length;\n\t\t\tif (reverse) {\n\t\t\t\tfor (i = len - 1; i >= 0; i--) {\n\t\t\t\t\tcallback.call(self, loopable[i], i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\tcallback.call(self, loopable[i], i);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (typeof loopable === 'object') {\n\t\t\tvar keys = Object.keys(loopable);\n\t\t\tlen = keys.length;\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tcallback.call(self, loopable[keys[i]], keys[i]);\n\t\t\t}\n\t\t}\n\t};\n\thelpers.clone = function(obj) {\n\t\tvar objClone = {};\n\t\thelpers.each(obj, function(value, key) {\n\t\t\tif (helpers.isArray(value)) {\n\t\t\t\tobjClone[key] = value.slice(0);\n\t\t\t} else if (typeof value === 'object' && value !== null) {\n\t\t\t\tobjClone[key] = helpers.clone(value);\n\t\t\t} else {\n\t\t\t\tobjClone[key] = value;\n\t\t\t}\n\t\t});\n\t\treturn objClone;\n\t};\n\thelpers.extend = function(base) {\n\t\tvar setFn = function(value, key) {\n\t\t\tbase[key] = value;\n\t\t};\n\t\tfor (var i = 1, ilen = arguments.length; i < ilen; i++) {\n\t\t\thelpers.each(arguments[i], setFn);\n\t\t}\n\t\treturn base;\n\t};\n\t// Need a special merge function to chart configs since they are now grouped\n\thelpers.configMerge = function(_base) {\n\t\tvar base = helpers.clone(_base);\n\t\thelpers.each(Array.prototype.slice.call(arguments, 1), function(extension) {\n\t\t\thelpers.each(extension, function(value, key) {\n\t\t\t\tvar baseHasProperty = base.hasOwnProperty(key);\n\t\t\t\tvar baseVal = baseHasProperty ? base[key] : {};\n\n\t\t\t\tif (key === 'scales') {\n\t\t\t\t\t// Scale config merging is complex. Add our own function here for that\n\t\t\t\t\tbase[key] = helpers.scaleMerge(baseVal, value);\n\t\t\t\t} else if (key === 'scale') {\n\t\t\t\t\t// Used in polar area & radar charts since there is only one scale\n\t\t\t\t\tbase[key] = helpers.configMerge(baseVal, Chart.scaleService.getScaleDefaults(value.type), value);\n\t\t\t\t} else if (baseHasProperty\n\t\t\t\t\t\t&& typeof baseVal === 'object'\n\t\t\t\t\t\t&& !helpers.isArray(baseVal)\n\t\t\t\t\t\t&& baseVal !== null\n\t\t\t\t\t\t&& typeof value === 'object'\n\t\t\t\t\t\t&& !helpers.isArray(value)) {\n\t\t\t\t\t// If we are overwriting an object with an object, do a merge of the properties.\n\t\t\t\t\tbase[key] = helpers.configMerge(baseVal, value);\n\t\t\t\t} else {\n\t\t\t\t\t// can just overwrite the value in this case\n\t\t\t\t\tbase[key] = value;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn base;\n\t};\n\thelpers.scaleMerge = function(_base, extension) {\n\t\tvar base = helpers.clone(_base);\n\n\t\thelpers.each(extension, function(value, key) {\n\t\t\tif (key === 'xAxes' || key === 'yAxes') {\n\t\t\t\t// These properties are arrays of items\n\t\t\t\tif (base.hasOwnProperty(key)) {\n\t\t\t\t\thelpers.each(value, function(valueObj, index) {\n\t\t\t\t\t\tvar axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');\n\t\t\t\t\t\tvar axisDefaults = Chart.scaleService.getScaleDefaults(axisType);\n\t\t\t\t\t\tif (index >= base[key].length || !base[key][index].type) {\n\t\t\t\t\t\t\tbase[key].push(helpers.configMerge(axisDefaults, valueObj));\n\t\t\t\t\t\t} else if (valueObj.type && valueObj.type !== base[key][index].type) {\n\t\t\t\t\t\t\t// Type changed. Bring in the new defaults before we bring in valueObj so that valueObj can override the correct scale defaults\n\t\t\t\t\t\t\tbase[key][index] = helpers.configMerge(base[key][index], axisDefaults, valueObj);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Type is the same\n\t\t\t\t\t\t\tbase[key][index] = helpers.configMerge(base[key][index], valueObj);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tbase[key] = [];\n\t\t\t\t\thelpers.each(value, function(valueObj) {\n\t\t\t\t\t\tvar axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');\n\t\t\t\t\t\tbase[key].push(helpers.configMerge(Chart.scaleService.getScaleDefaults(axisType), valueObj));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (base.hasOwnProperty(key) && typeof base[key] === 'object' && base[key] !== null && typeof value === 'object') {\n\t\t\t\t// If we are overwriting an object with an object, do a merge of the properties.\n\t\t\t\tbase[key] = helpers.configMerge(base[key], value);\n\n\t\t\t} else {\n\t\t\t\t// can just overwrite the value in this case\n\t\t\t\tbase[key] = value;\n\t\t\t}\n\t\t});\n\n\t\treturn base;\n\t};\n\thelpers.getValueAtIndexOrDefault = function(value, index, defaultValue) {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn defaultValue;\n\t\t}\n\n\t\tif (helpers.isArray(value)) {\n\t\t\treturn index < value.length ? value[index] : defaultValue;\n\t\t}\n\n\t\treturn value;\n\t};\n\thelpers.getValueOrDefault = function(value, defaultValue) {\n\t\treturn value === undefined ? defaultValue : value;\n\t};\n\thelpers.indexOf = Array.prototype.indexOf?\n\t\tfunction(array, item) {\n\t\t\treturn array.indexOf(item);\n\t\t}:\n\t\tfunction(array, item) {\n\t\t\tfor (var i = 0, ilen = array.length; i < ilen; ++i) {\n\t\t\t\tif (array[i] === item) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t};\n\thelpers.where = function(collection, filterCallback) {\n\t\tif (helpers.isArray(collection) && Array.prototype.filter) {\n\t\t\treturn collection.filter(filterCallback);\n\t\t}\n\t\tvar filtered = [];\n\n\t\thelpers.each(collection, function(item) {\n\t\t\tif (filterCallback(item)) {\n\t\t\t\tfiltered.push(item);\n\t\t\t}\n\t\t});\n\n\t\treturn filtered;\n\t};\n\thelpers.findIndex = Array.prototype.findIndex?\n\t\tfunction(array, callback, scope) {\n\t\t\treturn array.findIndex(callback, scope);\n\t\t} :\n\t\tfunction(array, callback, scope) {\n\t\t\tscope = scope === undefined? array : scope;\n\t\t\tfor (var i = 0, ilen = array.length; i < ilen; ++i) {\n\t\t\t\tif (callback.call(scope, array[i], i, array)) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t};\n\thelpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {\n\t\t// Default to start of the array\n\t\tif (startIndex === undefined || startIndex === null) {\n\t\t\tstartIndex = -1;\n\t\t}\n\t\tfor (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\tif (filterCallback(currentItem)) {\n\t\t\t\treturn currentItem;\n\t\t\t}\n\t\t}\n\t};\n\thelpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {\n\t\t// Default to end of the array\n\t\tif (startIndex === undefined || startIndex === null) {\n\t\t\tstartIndex = arrayToSearch.length;\n\t\t}\n\t\tfor (var i = startIndex - 1; i >= 0; i--) {\n\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\tif (filterCallback(currentItem)) {\n\t\t\t\treturn currentItem;\n\t\t\t}\n\t\t}\n\t};\n\thelpers.inherits = function(extensions) {\n\t\t// Basic javascript inheritance based on the model created in Backbone.js\n\t\tvar me = this;\n\t\tvar ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {\n\t\t\treturn me.apply(this, arguments);\n\t\t};\n\n\t\tvar Surrogate = function() {\n\t\t\tthis.constructor = ChartElement;\n\t\t};\n\t\tSurrogate.prototype = me.prototype;\n\t\tChartElement.prototype = new Surrogate();\n\n\t\tChartElement.extend = helpers.inherits;\n\n\t\tif (extensions) {\n\t\t\thelpers.extend(ChartElement.prototype, extensions);\n\t\t}\n\n\t\tChartElement.__super__ = me.prototype;\n\n\t\treturn ChartElement;\n\t};\n\thelpers.noop = function() {};\n\thelpers.uid = (function() {\n\t\tvar id = 0;\n\t\treturn function() {\n\t\t\treturn id++;\n\t\t};\n\t}());\n\t// -- Math methods\n\thelpers.isNumber = function(n) {\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\n\t};\n\thelpers.almostEquals = function(x, y, epsilon) {\n\t\treturn Math.abs(x - y) < epsilon;\n\t};\n\thelpers.almostWhole = function(x, epsilon) {\n\t\tvar rounded = Math.round(x);\n\t\treturn (((rounded - epsilon) < x) && ((rounded + epsilon) > x));\n\t};\n\thelpers.max = function(array) {\n\t\treturn array.reduce(function(max, value) {\n\t\t\tif (!isNaN(value)) {\n\t\t\t\treturn Math.max(max, value);\n\t\t\t}\n\t\t\treturn max;\n\t\t}, Number.NEGATIVE_INFINITY);\n\t};\n\thelpers.min = function(array) {\n\t\treturn array.reduce(function(min, value) {\n\t\t\tif (!isNaN(value)) {\n\t\t\t\treturn Math.min(min, value);\n\t\t\t}\n\t\t\treturn min;\n\t\t}, Number.POSITIVE_INFINITY);\n\t};\n\thelpers.sign = Math.sign?\n\t\tfunction(x) {\n\t\t\treturn Math.sign(x);\n\t\t} :\n\t\tfunction(x) {\n\t\t\tx = +x; // convert to a number\n\t\t\tif (x === 0 || isNaN(x)) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\treturn x > 0 ? 1 : -1;\n\t\t};\n\thelpers.log10 = Math.log10?\n\t\tfunction(x) {\n\t\t\treturn Math.log10(x);\n\t\t} :\n\t\tfunction(x) {\n\t\t\treturn Math.log(x) / Math.LN10;\n\t\t};\n\thelpers.toRadians = function(degrees) {\n\t\treturn degrees * (Math.PI / 180);\n\t};\n\thelpers.toDegrees = function(radians) {\n\t\treturn radians * (180 / Math.PI);\n\t};\n\t// Gets the angle from vertical upright to the point about a centre.\n\thelpers.getAngleFromPoint = function(centrePoint, anglePoint) {\n\t\tvar distanceFromXCenter = anglePoint.x - centrePoint.x,\n\t\t\tdistanceFromYCenter = anglePoint.y - centrePoint.y,\n\t\t\tradialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n\n\t\tvar angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n\t\tif (angle < (-0.5 * Math.PI)) {\n\t\t\tangle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n\t\t}\n\n\t\treturn {\n\t\t\tangle: angle,\n\t\t\tdistance: radialDistanceFromCenter\n\t\t};\n\t};\n\thelpers.distanceBetweenPoints = function(pt1, pt2) {\n\t\treturn Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n\t};\n\thelpers.aliasPixel = function(pixelWidth) {\n\t\treturn (pixelWidth % 2 === 0) ? 0 : 0.5;\n\t};\n\thelpers.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {\n\t\t// Props to Rob Spencer at scaled innovation for his post on splining between points\n\t\t// http://scaledinnovation.com/analytics/splines/aboutSplines.html\n\n\t\t// This function must also respect \"skipped\" points\n\n\t\tvar previous = firstPoint.skip ? middlePoint : firstPoint,\n\t\t\tcurrent = middlePoint,\n\t\t\tnext = afterPoint.skip ? middlePoint : afterPoint;\n\n\t\tvar d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));\n\t\tvar d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));\n\n\t\tvar s01 = d01 / (d01 + d12);\n\t\tvar s12 = d12 / (d01 + d12);\n\n\t\t// If all points are the same, s01 & s02 will be inf\n\t\ts01 = isNaN(s01) ? 0 : s01;\n\t\ts12 = isNaN(s12) ? 0 : s12;\n\n\t\tvar fa = t * s01; // scaling factor for triangle Ta\n\t\tvar fb = t * s12;\n\n\t\treturn {\n\t\t\tprevious: {\n\t\t\t\tx: current.x - fa * (next.x - previous.x),\n\t\t\t\ty: current.y - fa * (next.y - previous.y)\n\t\t\t},\n\t\t\tnext: {\n\t\t\t\tx: current.x + fb * (next.x - previous.x),\n\t\t\t\ty: current.y + fb * (next.y - previous.y)\n\t\t\t}\n\t\t};\n\t};\n\thelpers.EPSILON = Number.EPSILON || 1e-14;\n\thelpers.splineCurveMonotone = function(points) {\n\t\t// This function calculates Bézier control points in a similar way than |splineCurve|,\n\t\t// but preserves monotonicity of the provided data and ensures no local extremums are added\n\t\t// between the dataset discrete points due to the interpolation.\n\t\t// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n\n\t\tvar pointsWithTangents = (points || []).map(function(point) {\n\t\t\treturn {\n\t\t\t\tmodel: point._model,\n\t\t\t\tdeltaK: 0,\n\t\t\t\tmK: 0\n\t\t\t};\n\t\t});\n\n\t\t// Calculate slopes (deltaK) and initialize tangents (mK)\n\t\tvar pointsLen = pointsWithTangents.length;\n\t\tvar i, pointBefore, pointCurrent, pointAfter;\n\t\tfor (i = 0; i < pointsLen; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tif (pointCurrent.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tpointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n\t\t\tpointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\t\t\tif (pointAfter && !pointAfter.model.skip) {\n\t\t\t\tvar slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);\n\n\t\t\t\t// In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n\t\t\t\tpointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;\n\t\t\t}\n\n\t\t\tif (!pointBefore || pointBefore.model.skip) {\n\t\t\t\tpointCurrent.mK = pointCurrent.deltaK;\n\t\t\t} else if (!pointAfter || pointAfter.model.skip) {\n\t\t\t\tpointCurrent.mK = pointBefore.deltaK;\n\t\t\t} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {\n\t\t\t\tpointCurrent.mK = 0;\n\t\t\t} else {\n\t\t\t\tpointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;\n\t\t\t}\n\t\t}\n\n\t\t// Adjust tangents to ensure monotonic properties\n\t\tvar alphaK, betaK, tauK, squaredMagnitude;\n\t\tfor (i = 0; i < pointsLen - 1; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tpointAfter = pointsWithTangents[i + 1];\n\t\t\tif (pointCurrent.model.skip || pointAfter.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {\n\t\t\t\tpointCurrent.mK = pointAfter.mK = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\talphaK = pointCurrent.mK / pointCurrent.deltaK;\n\t\t\tbetaK = pointAfter.mK / pointCurrent.deltaK;\n\t\t\tsquaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\t\t\tif (squaredMagnitude <= 9) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttauK = 3 / Math.sqrt(squaredMagnitude);\n\t\t\tpointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;\n\t\t\tpointAfter.mK = betaK * tauK * pointCurrent.deltaK;\n\t\t}\n\n\t\t// Compute control points\n\t\tvar deltaX;\n\t\tfor (i = 0; i < pointsLen; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tif (pointCurrent.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tpointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n\t\t\tpointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\t\t\tif (pointBefore && !pointBefore.model.skip) {\n\t\t\t\tdeltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;\n\t\t\t\tpointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;\n\t\t\t\tpointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;\n\t\t\t}\n\t\t\tif (pointAfter && !pointAfter.model.skip) {\n\t\t\t\tdeltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;\n\t\t\t\tpointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;\n\t\t\t\tpointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;\n\t\t\t}\n\t\t}\n\t};\n\thelpers.nextItem = function(collection, index, loop) {\n\t\tif (loop) {\n\t\t\treturn index >= collection.length - 1 ? collection[0] : collection[index + 1];\n\t\t}\n\t\treturn index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];\n\t};\n\thelpers.previousItem = function(collection, index, loop) {\n\t\tif (loop) {\n\t\t\treturn index <= 0 ? collection[collection.length - 1] : collection[index - 1];\n\t\t}\n\t\treturn index <= 0 ? collection[0] : collection[index - 1];\n\t};\n\t// Implementation of the nice number algorithm used in determining where axis labels will go\n\thelpers.niceNum = function(range, round) {\n\t\tvar exponent = Math.floor(helpers.log10(range));\n\t\tvar fraction = range / Math.pow(10, exponent);\n\t\tvar niceFraction;\n\n\t\tif (round) {\n\t\t\tif (fraction < 1.5) {\n\t\t\t\tniceFraction = 1;\n\t\t\t} else if (fraction < 3) {\n\t\t\t\tniceFraction = 2;\n\t\t\t} else if (fraction < 7) {\n\t\t\t\tniceFraction = 5;\n\t\t\t} else {\n\t\t\t\tniceFraction = 10;\n\t\t\t}\n\t\t} else if (fraction <= 1.0) {\n\t\t\tniceFraction = 1;\n\t\t} else if (fraction <= 2) {\n\t\t\tniceFraction = 2;\n\t\t} else if (fraction <= 5) {\n\t\t\tniceFraction = 5;\n\t\t} else {\n\t\t\tniceFraction = 10;\n\t\t}\n\n\t\treturn niceFraction * Math.pow(10, exponent);\n\t};\n\t// Easing functions adapted from Robert Penner's easing equations\n\t// http://www.robertpenner.com/easing/\n\tvar easingEffects = helpers.easingEffects = {\n\t\tlinear: function(t) {\n\t\t\treturn t;\n\t\t},\n\t\teaseInQuad: function(t) {\n\t\t\treturn t * t;\n\t\t},\n\t\teaseOutQuad: function(t) {\n\t\t\treturn -1 * t * (t - 2);\n\t\t},\n\t\teaseInOutQuad: function(t) {\n\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\treturn 1 / 2 * t * t;\n\t\t\t}\n\t\t\treturn -1 / 2 * ((--t) * (t - 2) - 1);\n\t\t},\n\t\teaseInCubic: function(t) {\n\t\t\treturn t * t * t;\n\t\t},\n\t\teaseOutCubic: function(t) {\n\t\t\treturn 1 * ((t = t / 1 - 1) * t * t + 1);\n\t\t},\n\t\teaseInOutCubic: function(t) {\n\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\treturn 1 / 2 * t * t * t;\n\t\t\t}\n\t\t\treturn 1 / 2 * ((t -= 2) * t * t + 2);\n\t\t},\n\t\teaseInQuart: function(t) {\n\t\t\treturn t * t * t * t;\n\t\t},\n\t\teaseOutQuart: function(t) {\n\t\t\treturn -1 * ((t = t / 1 - 1) * t * t * t - 1);\n\t\t},\n\t\teaseInOutQuart: function(t) {\n\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\treturn 1 / 2 * t * t * t * t;\n\t\t\t}\n\t\t\treturn -1 / 2 * ((t -= 2) * t * t * t - 2);\n\t\t},\n\t\teaseInQuint: function(t) {\n\t\t\treturn 1 * (t /= 1) * t * t * t * t;\n\t\t},\n\t\teaseOutQuint: function(t) {\n\t\t\treturn 1 * ((t = t / 1 - 1) * t * t * t * t + 1);\n\t\t},\n\t\teaseInOutQuint: function(t) {\n\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\treturn 1 / 2 * t * t * t * t * t;\n\t\t\t}\n\t\t\treturn 1 / 2 * ((t -= 2) * t * t * t * t + 2);\n\t\t},\n\t\teaseInSine: function(t) {\n\t\t\treturn -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;\n\t\t},\n\t\teaseOutSine: function(t) {\n\t\t\treturn 1 * Math.sin(t / 1 * (Math.PI / 2));\n\t\t},\n\t\teaseInOutSine: function(t) {\n\t\t\treturn -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);\n\t\t},\n\t\teaseInExpo: function(t) {\n\t\t\treturn (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));\n\t\t},\n\t\teaseOutExpo: function(t) {\n\t\t\treturn (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);\n\t\t},\n\t\teaseInOutExpo: function(t) {\n\t\t\tif (t === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (t === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\treturn 1 / 2 * Math.pow(2, 10 * (t - 1));\n\t\t\t}\n\t\t\treturn 1 / 2 * (-Math.pow(2, -10 * --t) + 2);\n\t\t},\n\t\teaseInCirc: function(t) {\n\t\t\tif (t >= 1) {\n\t\t\t\treturn t;\n\t\t\t}\n\t\t\treturn -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);\n\t\t},\n\t\teaseOutCirc: function(t) {\n\t\t\treturn 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);\n\t\t},\n\t\teaseInOutCirc: function(t) {\n\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\treturn -1 / 2 * (Math.sqrt(1 - t * t) - 1);\n\t\t\t}\n\t\t\treturn 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n\t\t},\n\t\teaseInElastic: function(t) {\n\t\t\tvar s = 1.70158;\n\t\t\tvar p = 0;\n\t\t\tvar a = 1;\n\t\t\tif (t === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif ((t /= 1) === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (!p) {\n\t\t\t\tp = 1 * 0.3;\n\t\t\t}\n\t\t\tif (a < Math.abs(1)) {\n\t\t\t\ta = 1;\n\t\t\t\ts = p / 4;\n\t\t\t} else {\n\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t}\n\t\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));\n\t\t},\n\t\teaseOutElastic: function(t) {\n\t\t\tvar s = 1.70158;\n\t\t\tvar p = 0;\n\t\t\tvar a = 1;\n\t\t\tif (t === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif ((t /= 1) === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (!p) {\n\t\t\t\tp = 1 * 0.3;\n\t\t\t}\n\t\t\tif (a < Math.abs(1)) {\n\t\t\t\ta = 1;\n\t\t\t\ts = p / 4;\n\t\t\t} else {\n\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t}\n\t\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;\n\t\t},\n\t\teaseInOutElastic: function(t) {\n\t\t\tvar s = 1.70158;\n\t\t\tvar p = 0;\n\t\t\tvar a = 1;\n\t\t\tif (t === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif ((t /= 1 / 2) === 2) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (!p) {\n\t\t\t\tp = 1 * (0.3 * 1.5);\n\t\t\t}\n\t\t\tif (a < Math.abs(1)) {\n\t\t\t\ta = 1;\n\t\t\t\ts = p / 4;\n\t\t\t} else {\n\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t}\n\t\t\tif (t < 1) {\n\t\t\t\treturn -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));\n\t\t\t}\n\t\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\t\t},\n\t\teaseInBack: function(t) {\n\t\t\tvar s = 1.70158;\n\t\t\treturn 1 * (t /= 1) * t * ((s + 1) * t - s);\n\t\t},\n\t\teaseOutBack: function(t) {\n\t\t\tvar s = 1.70158;\n\t\t\treturn 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);\n\t\t},\n\t\teaseInOutBack: function(t) {\n\t\t\tvar s = 1.70158;\n\t\t\tif ((t /= 1 / 2) < 1) {\n\t\t\t\treturn 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));\n\t\t\t}\n\t\t\treturn 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n\t\t},\n\t\teaseInBounce: function(t) {\n\t\t\treturn 1 - easingEffects.easeOutBounce(1 - t);\n\t\t},\n\t\teaseOutBounce: function(t) {\n\t\t\tif ((t /= 1) < (1 / 2.75)) {\n\t\t\t\treturn 1 * (7.5625 * t * t);\n\t\t\t} else if (t < (2 / 2.75)) {\n\t\t\t\treturn 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);\n\t\t\t} else if (t < (2.5 / 2.75)) {\n\t\t\t\treturn 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);\n\t\t\t}\n\t\t\treturn 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);\n\t\t},\n\t\teaseInOutBounce: function(t) {\n\t\t\tif (t < 1 / 2) {\n\t\t\t\treturn easingEffects.easeInBounce(t * 2) * 0.5;\n\t\t\t}\n\t\t\treturn easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;\n\t\t}\n\t};\n\t// Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\thelpers.requestAnimFrame = (function() {\n\t\treturn window.requestAnimationFrame ||\n\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\twindow.oRequestAnimationFrame ||\n\t\t\twindow.msRequestAnimationFrame ||\n\t\t\tfunction(callback) {\n\t\t\t\treturn window.setTimeout(callback, 1000 / 60);\n\t\t\t};\n\t}());\n\t// -- DOM methods\n\thelpers.getRelativePosition = function(evt, chart) {\n\t\tvar mouseX, mouseY;\n\t\tvar e = evt.originalEvent || evt,\n\t\t\tcanvas = evt.currentTarget || evt.srcElement,\n\t\t\tboundingRect = canvas.getBoundingClientRect();\n\n\t\tvar touches = e.touches;\n\t\tif (touches && touches.length > 0) {\n\t\t\tmouseX = touches[0].clientX;\n\t\t\tmouseY = touches[0].clientY;\n\n\t\t} else {\n\t\t\tmouseX = e.clientX;\n\t\t\tmouseY = e.clientY;\n\t\t}\n\n\t\t// Scale mouse coordinates into canvas coordinates\n\t\t// by following the pattern laid out by 'jerryj' in the comments of\n\t\t// http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\n\t\tvar paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));\n\t\tvar paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));\n\t\tvar paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));\n\t\tvar paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));\n\t\tvar width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;\n\t\tvar height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;\n\n\t\t// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However\n\t\t// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here\n\t\tmouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);\n\t\tmouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);\n\n\t\treturn {\n\t\t\tx: mouseX,\n\t\t\ty: mouseY\n\t\t};\n\n\t};\n\thelpers.addEvent = function(node, eventType, method) {\n\t\tif (node.addEventListener) {\n\t\t\tnode.addEventListener(eventType, method);\n\t\t} else if (node.attachEvent) {\n\t\t\tnode.attachEvent('on' + eventType, method);\n\t\t} else {\n\t\t\tnode['on' + eventType] = method;\n\t\t}\n\t};\n\thelpers.removeEvent = function(node, eventType, handler) {\n\t\tif (node.removeEventListener) {\n\t\t\tnode.removeEventListener(eventType, handler, false);\n\t\t} else if (node.detachEvent) {\n\t\t\tnode.detachEvent('on' + eventType, handler);\n\t\t} else {\n\t\t\tnode['on' + eventType] = helpers.noop;\n\t\t}\n\t};\n\n\t// Private helper function to convert max-width/max-height values that may be percentages into a number\n\tfunction parseMaxStyle(styleValue, node, parentProperty) {\n\t\tvar valueInPixels;\n\t\tif (typeof(styleValue) === 'string') {\n\t\t\tvalueInPixels = parseInt(styleValue, 10);\n\n\t\t\tif (styleValue.indexOf('%') !== -1) {\n\t\t\t\t// percentage * size in dimension\n\t\t\t\tvalueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n\t\t\t}\n\t\t} else {\n\t\t\tvalueInPixels = styleValue;\n\t\t}\n\n\t\treturn valueInPixels;\n\t}\n\n\t/**\n\t * Returns if the given value contains an effective constraint.\n\t * @private\n\t */\n\tfunction isConstrainedValue(value) {\n\t\treturn value !== undefined && value !== null && value !== 'none';\n\t}\n\n\t// Private helper to get a constraint dimension\n\t// @param domNode : the node to check the constraint on\n\t// @param maxStyle : the style that defines the maximum for the direction we are using (maxWidth / maxHeight)\n\t// @param percentageProperty : property of parent to use when calculating width as a percentage\n\t// @see http://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser\n\tfunction getConstraintDimension(domNode, maxStyle, percentageProperty) {\n\t\tvar view = document.defaultView;\n\t\tvar parentNode = domNode.parentNode;\n\t\tvar constrainedNode = view.getComputedStyle(domNode)[maxStyle];\n\t\tvar constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];\n\t\tvar hasCNode = isConstrainedValue(constrainedNode);\n\t\tvar hasCContainer = isConstrainedValue(constrainedContainer);\n\t\tvar infinity = Number.POSITIVE_INFINITY;\n\n\t\tif (hasCNode || hasCContainer) {\n\t\t\treturn Math.min(\n\t\t\t\thasCNode? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,\n\t\t\t\thasCContainer? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);\n\t\t}\n\n\t\treturn 'none';\n\t}\n\t// returns Number or undefined if no constraint\n\thelpers.getConstraintWidth = function(domNode) {\n\t\treturn getConstraintDimension(domNode, 'max-width', 'clientWidth');\n\t};\n\t// returns Number or undefined if no constraint\n\thelpers.getConstraintHeight = function(domNode) {\n\t\treturn getConstraintDimension(domNode, 'max-height', 'clientHeight');\n\t};\n\thelpers.getMaximumWidth = function(domNode) {\n\t\tvar container = domNode.parentNode;\n\t\tvar paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);\n\t\tvar paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);\n\t\tvar w = container.clientWidth - paddingLeft - paddingRight;\n\t\tvar cw = helpers.getConstraintWidth(domNode);\n\t\treturn isNaN(cw)? w : Math.min(w, cw);\n\t};\n\thelpers.getMaximumHeight = function(domNode) {\n\t\tvar container = domNode.parentNode;\n\t\tvar paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);\n\t\tvar paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);\n\t\tvar h = container.clientHeight - paddingTop - paddingBottom;\n\t\tvar ch = helpers.getConstraintHeight(domNode);\n\t\treturn isNaN(ch)? h : Math.min(h, ch);\n\t};\n\thelpers.getStyle = function(el, property) {\n\t\treturn el.currentStyle ?\n\t\t\tel.currentStyle[property] :\n\t\t\tdocument.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n\t};\n\thelpers.retinaScale = function(chart) {\n\t\tvar pixelRatio = chart.currentDevicePixelRatio = window.devicePixelRatio || 1;\n\t\tif (pixelRatio === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar canvas = chart.canvas;\n\t\tvar height = chart.height;\n\t\tvar width = chart.width;\n\n\t\tcanvas.height = height * pixelRatio;\n\t\tcanvas.width = width * pixelRatio;\n\t\tchart.ctx.scale(pixelRatio, pixelRatio);\n\n\t\t// If no style has been set on the canvas, the render size is used as display size,\n\t\t// making the chart visually bigger, so let's enforce it to the \"correct\" values.\n\t\t// See https://github.com/chartjs/Chart.js/issues/3575\n\t\tcanvas.style.height = height + 'px';\n\t\tcanvas.style.width = width + 'px';\n\t};\n\t// -- Canvas methods\n\thelpers.clear = function(chart) {\n\t\tchart.ctx.clearRect(0, 0, chart.width, chart.height);\n\t};\n\thelpers.fontString = function(pixelSize, fontStyle, fontFamily) {\n\t\treturn fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n\t};\n\thelpers.longestText = function(ctx, font, arrayOfThings, cache) {\n\t\tcache = cache || {};\n\t\tvar data = cache.data = cache.data || {};\n\t\tvar gc = cache.garbageCollect = cache.garbageCollect || [];\n\n\t\tif (cache.font !== font) {\n\t\t\tdata = cache.data = {};\n\t\t\tgc = cache.garbageCollect = [];\n\t\t\tcache.font = font;\n\t\t}\n\n\t\tctx.font = font;\n\t\tvar longest = 0;\n\t\thelpers.each(arrayOfThings, function(thing) {\n\t\t\t// Undefined strings and arrays should not be measured\n\t\t\tif (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {\n\t\t\t\tlongest = helpers.measureText(ctx, data, gc, longest, thing);\n\t\t\t} else if (helpers.isArray(thing)) {\n\t\t\t\t// if it is an array lets measure each element\n\t\t\t\t// to do maybe simplify this function a bit so we can do this more recursively?\n\t\t\t\thelpers.each(thing, function(nestedThing) {\n\t\t\t\t\t// Undefined strings and arrays should not be measured\n\t\t\t\t\tif (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {\n\t\t\t\t\t\tlongest = helpers.measureText(ctx, data, gc, longest, nestedThing);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tvar gcLen = gc.length / 2;\n\t\tif (gcLen > arrayOfThings.length) {\n\t\t\tfor (var i = 0; i < gcLen; i++) {\n\t\t\t\tdelete data[gc[i]];\n\t\t\t}\n\t\t\tgc.splice(0, gcLen);\n\t\t}\n\t\treturn longest;\n\t};\n\thelpers.measureText = function(ctx, data, gc, longest, string) {\n\t\tvar textWidth = data[string];\n\t\tif (!textWidth) {\n\t\t\ttextWidth = data[string] = ctx.measureText(string).width;\n\t\t\tgc.push(string);\n\t\t}\n\t\tif (textWidth > longest) {\n\t\t\tlongest = textWidth;\n\t\t}\n\t\treturn longest;\n\t};\n\thelpers.numberOfLabelLines = function(arrayOfThings) {\n\t\tvar numberOfLines = 1;\n\t\thelpers.each(arrayOfThings, function(thing) {\n\t\t\tif (helpers.isArray(thing)) {\n\t\t\t\tif (thing.length > numberOfLines) {\n\t\t\t\t\tnumberOfLines = thing.length;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn numberOfLines;\n\t};\n\thelpers.drawRoundedRectangle = function(ctx, x, y, width, height, radius) {\n\t\tctx.beginPath();\n\t\tctx.moveTo(x + radius, y);\n\t\tctx.lineTo(x + width - radius, y);\n\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\t\tctx.lineTo(x + width, y + height - radius);\n\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\t\tctx.lineTo(x + radius, y + height);\n\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\t\tctx.lineTo(x, y + radius);\n\t\tctx.quadraticCurveTo(x, y, x + radius, y);\n\t\tctx.closePath();\n\t};\n\thelpers.color = function(c) {\n\t\tif (!color) {\n\t\t\tconsole.error('Color.js not found!');\n\t\t\treturn c;\n\t\t}\n\n\t\t/* global CanvasGradient */\n\t\tif (c instanceof CanvasGradient) {\n\t\t\treturn color(Chart.defaults.global.defaultColor);\n\t\t}\n\n\t\treturn color(c);\n\t};\n\thelpers.isArray = Array.isArray?\n\t\tfunction(obj) {\n\t\t\treturn Array.isArray(obj);\n\t\t} :\n\t\tfunction(obj) {\n\t\t\treturn Object.prototype.toString.call(obj) === '[object Array]';\n\t\t};\n\t// ! @see http://stackoverflow.com/a/14853974\n\thelpers.arrayEquals = function(a0, a1) {\n\t\tvar i, ilen, v0, v1;\n\n\t\tif (!a0 || !a1 || a0.length !== a1.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (i = 0, ilen=a0.length; i < ilen; ++i) {\n\t\t\tv0 = a0[i];\n\t\t\tv1 = a1[i];\n\n\t\t\tif (v0 instanceof Array && v1 instanceof Array) {\n\t\t\t\tif (!helpers.arrayEquals(v0, v1)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (v0 !== v1) {\n\t\t\t\t// NOTE: two different object instances will never be equal: {x:20} != {x:20}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t};\n\thelpers.callCallback = function(fn, args, _tArg) {\n\t\tif (fn && typeof fn.call === 'function') {\n\t\t\tfn.apply(_tArg, args);\n\t\t}\n\t};\n\thelpers.getHoverColor = function(colorValue) {\n\t\t/* global CanvasPattern */\n\t\treturn (colorValue instanceof CanvasPattern) ?\n\t\t\tcolorValue :\n\t\t\thelpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();\n\t};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.helpers.js\n// module id = 594\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\tvar helpers = Chart.helpers;\n\n\t/**\n\t * Helper function to get relative position for an event\n\t * @param {Event|IEvent} event - The event to get the position for\n\t * @param {Chart} chart - The chart\n\t * @returns {Point} the event position\n\t */\n\tfunction getRelativePosition(e, chart) {\n\t\tif (e.native) {\n\t\t\treturn {\n\t\t\t\tx: e.x,\n\t\t\t\ty: e.y\n\t\t\t};\n\t\t}\n\n\t\treturn helpers.getRelativePosition(e, chart);\n\t}\n\n\t/**\n\t * Helper function to traverse all of the visible elements in the chart\n\t * @param chart {chart} the chart\n\t * @param handler {Function} the callback to execute for each visible item\n\t */\n\tfunction parseVisibleItems(chart, handler) {\n\t\tvar datasets = chart.data.datasets;\n\t\tvar meta, i, j, ilen, jlen;\n\n\t\tfor (i = 0, ilen = datasets.length; i < ilen; ++i) {\n\t\t\tif (!chart.isDatasetVisible(i)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\tfor (j = 0, jlen = meta.data.length; j < jlen; ++j) {\n\t\t\t\tvar element = meta.data[j];\n\t\t\t\tif (!element._view.skip) {\n\t\t\t\t\thandler(element);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper function to get the items that intersect the event position\n\t * @param items {ChartElement[]} elements to filter\n\t * @param position {Point} the point to be nearest to\n\t * @return {ChartElement[]} the nearest items\n\t */\n\tfunction getIntersectItems(chart, position) {\n\t\tvar elements = [];\n\n\t\tparseVisibleItems(chart, function(element) {\n\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\telements.push(element);\n\t\t\t}\n\t\t});\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Helper function to get the items nearest to the event position considering all visible items in teh chart\n\t * @param chart {Chart} the chart to look at elements from\n\t * @param position {Point} the point to be nearest to\n\t * @param intersect {Boolean} if true, only consider items that intersect the position\n\t * @param distanceMetric {Function} Optional function to provide the distance between\n\t * @return {ChartElement[]} the nearest items\n\t */\n\tfunction getNearestItems(chart, position, intersect, distanceMetric) {\n\t\tvar minDistance = Number.POSITIVE_INFINITY;\n\t\tvar nearestItems = [];\n\n\t\tif (!distanceMetric) {\n\t\t\tdistanceMetric = helpers.distanceBetweenPoints;\n\t\t}\n\n\t\tparseVisibleItems(chart, function(element) {\n\t\t\tif (intersect && !element.inRange(position.x, position.y)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar center = element.getCenterPoint();\n\t\t\tvar distance = distanceMetric(position, center);\n\n\t\t\tif (distance < minDistance) {\n\t\t\t\tnearestItems = [element];\n\t\t\t\tminDistance = distance;\n\t\t\t} else if (distance === minDistance) {\n\t\t\t\t// Can have multiple items at the same distance in which case we sort by size\n\t\t\t\tnearestItems.push(element);\n\t\t\t}\n\t\t});\n\n\t\treturn nearestItems;\n\t}\n\n\tfunction indexMode(chart, e, options) {\n\t\tvar position = getRelativePosition(e, chart.chart);\n\t\tvar distanceMetric = function(pt1, pt2) {\n\t\t\treturn Math.abs(pt1.x - pt2.x);\n\t\t};\n\t\tvar items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\t\tvar elements = [];\n\n\t\tif (!items.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\tchart.data.datasets.forEach(function(dataset, datasetIndex) {\n\t\t\tif (chart.isDatasetVisible(datasetIndex)) {\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex),\n\t\t\t\t\telement = meta.data[items[0]._index];\n\n\t\t\t\t// don't count items that are skipped (null data)\n\t\t\t\tif (element && !element._view.skip) {\n\t\t\t\t\telements.push(element);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * @interface IInteractionOptions\n\t */\n\t/**\n\t * If true, only consider items that intersect the point\n\t * @name IInterfaceOptions#boolean\n\t * @type Boolean\n\t */\n\n\t/**\n\t * Contains interaction related functions\n\t * @namespace Chart.Interaction\n\t */\n\tChart.Interaction = {\n\t\t// Helper function for different modes\n\t\tmodes: {\n\t\t\tsingle: function(chart, e) {\n\t\t\t\tvar position = getRelativePosition(e, chart.chart);\n\t\t\t\tvar elements = [];\n\n\t\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\t\telements.push(element);\n\t\t\t\t\t\treturn elements;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn elements.slice(0, 1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @function Chart.Interaction.modes.label\n\t\t\t * @deprecated since version 2.4.0\n\t\t\t */\n\t\t\tlabel: indexMode,\n\n\t\t\t/**\n\t\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t\t * @function Chart.Interaction.modes.index\n\t\t\t * @since v2.4.0\n\t\t\t * @param chart {chart} the chart we are returning items from\n\t\t\t * @param e {Event} the event we are find things at\n\t\t\t * @param options {IInteractionOptions} options to use during interaction\n\t\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t\t */\n\t\t\tindex: indexMode,\n\n\t\t\t/**\n\t\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t\t * @function Chart.Interaction.modes.dataset\n\t\t\t * @param chart {chart} the chart we are returning items from\n\t\t\t * @param e {Event} the event we are find things at\n\t\t\t * @param options {IInteractionOptions} options to use during interaction\n\t\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t\t */\n\t\t\tdataset: function(chart, e, options) {\n\t\t\t\tvar position = getRelativePosition(e, chart.chart);\n\t\t\t\tvar items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false);\n\n\t\t\t\tif (items.length > 0) {\n\t\t\t\t\titems = chart.getDatasetMeta(items[0]._datasetIndex).data;\n\t\t\t\t}\n\n\t\t\t\treturn items;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @function Chart.Interaction.modes.x-axis\n\t\t\t * @deprecated since version 2.4.0. Use index mode and intersect == true\n\t\t\t */\n\t\t\t'x-axis': function(chart, e) {\n\t\t\t\treturn indexMode(chart, e, true);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Point mode returns all elements that hit test based on the event position\n\t\t\t * of the event\n\t\t\t * @function Chart.Interaction.modes.intersect\n\t\t\t * @param chart {chart} the chart we are returning items from\n\t\t\t * @param e {Event} the event we are find things at\n\t\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t\t */\n\t\t\tpoint: function(chart, e) {\n\t\t\t\tvar position = getRelativePosition(e, chart.chart);\n\t\t\t\treturn getIntersectItems(chart, position);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * nearest mode returns the element closest to the point\n\t\t\t * @function Chart.Interaction.modes.intersect\n\t\t\t * @param chart {chart} the chart we are returning items from\n\t\t\t * @param e {Event} the event we are find things at\n\t\t\t * @param options {IInteractionOptions} options to use\n\t\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t\t */\n\t\t\tnearest: function(chart, e, options) {\n\t\t\t\tvar position = getRelativePosition(e, chart.chart);\n\t\t\t\tvar nearestItems = getNearestItems(chart, position, options.intersect);\n\n\t\t\t\t// We have multiple items at the same distance from the event. Now sort by smallest\n\t\t\t\tif (nearestItems.length > 1) {\n\t\t\t\t\tnearestItems.sort(function(a, b) {\n\t\t\t\t\t\tvar sizeA = a.getArea();\n\t\t\t\t\t\tvar sizeB = b.getArea();\n\t\t\t\t\t\tvar ret = sizeA - sizeB;\n\n\t\t\t\t\t\tif (ret === 0) {\n\t\t\t\t\t\t\t// if equal sort by dataset index\n\t\t\t\t\t\t\tret = a._datasetIndex - b._datasetIndex;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Return only 1 item\n\t\t\t\treturn nearestItems.slice(0, 1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t\t * @function Chart.Interaction.modes.x\n\t\t\t * @param chart {chart} the chart we are returning items from\n\t\t\t * @param e {Event} the event we are find things at\n\t\t\t * @param options {IInteractionOptions} options to use\n\t\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t\t */\n\t\t\tx: function(chart, e, options) {\n\t\t\t\tvar position = getRelativePosition(e, chart.chart);\n\t\t\t\tvar items = [];\n\t\t\t\tvar intersectsItem = false;\n\n\t\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\t\tif (element.inXRange(position.x)) {\n\t\t\t\t\t\titems.push(element);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\t\tintersectsItem = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// If we want to trigger on an intersect and we don't have any items\n\t\t\t\t// that intersect the position, return nothing\n\t\t\t\tif (options.intersect && !intersectsItem) {\n\t\t\t\t\titems = [];\n\t\t\t\t}\n\t\t\t\treturn items;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t\t * @function Chart.Interaction.modes.y\n\t\t\t * @param chart {chart} the chart we are returning items from\n\t\t\t * @param e {Event} the event we are find things at\n\t\t\t * @param options {IInteractionOptions} options to use\n\t\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t\t */\n\t\t\ty: function(chart, e, options) {\n\t\t\t\tvar position = getRelativePosition(e, chart.chart);\n\t\t\t\tvar items = [];\n\t\t\t\tvar intersectsItem = false;\n\n\t\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\t\tif (element.inYRange(position.y)) {\n\t\t\t\t\t\titems.push(element);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\t\tintersectsItem = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// If we want to trigger on an intersect and we don't have any items\n\t\t\t\t// that intersect the position, return nothing\n\t\t\t\tif (options.intersect && !intersectsItem) {\n\t\t\t\t\titems = [];\n\t\t\t\t}\n\t\t\t\treturn items;\n\t\t\t}\n\t\t}\n\t};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.interaction.js\n// module id = 595\n// module chunks = 0","'use strict';\n\nmodule.exports = function() {\n\n\t// Occupy the global variable of Chart, and create a simple base class\n\tvar Chart = function(item, config) {\n\t\tthis.controller = new Chart.Controller(item, config, this);\n\t\treturn this.controller;\n\t};\n\n\t// Globally expose the defaults to allow for user updating/changing\n\tChart.defaults = {\n\t\tglobal: {\n\t\t\tresponsive: true,\n\t\t\tresponsiveAnimationDuration: 0,\n\t\t\tmaintainAspectRatio: true,\n\t\t\tevents: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],\n\t\t\thover: {\n\t\t\t\tonHover: null,\n\t\t\t\tmode: 'nearest',\n\t\t\t\tintersect: true,\n\t\t\t\tanimationDuration: 400\n\t\t\t},\n\t\t\tonClick: null,\n\t\t\tdefaultColor: 'rgba(0,0,0,0.1)',\n\t\t\tdefaultFontColor: '#666',\n\t\t\tdefaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\t\t\tdefaultFontSize: 12,\n\t\t\tdefaultFontStyle: 'normal',\n\t\t\tshowLines: true,\n\n\t\t\t// Element defaults defined in element extensions\n\t\t\telements: {},\n\n\t\t\t// Legend callback string\n\t\t\tlegendCallback: function(chart) {\n\t\t\t\tvar text = [];\n\t\t\t\ttext.push('<ul class=\"' + chart.id + '-legend\">');\n\t\t\t\tfor (var i = 0; i < chart.data.datasets.length; i++) {\n\t\t\t\t\ttext.push('<li><span style=\"background-color:' + chart.data.datasets[i].backgroundColor + '\"></span>');\n\t\t\t\t\tif (chart.data.datasets[i].label) {\n\t\t\t\t\t\ttext.push(chart.data.datasets[i].label);\n\t\t\t\t\t}\n\t\t\t\t\ttext.push('</li>');\n\t\t\t\t}\n\t\t\t\ttext.push('</ul>');\n\n\t\t\t\treturn text.join('');\n\t\t\t}\n\t\t}\n\t};\n\n\tChart.Chart = Chart;\n\n\treturn Chart;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.js\n// module id = 596\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\t// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n\t// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n\t// It is this service's responsibility of carrying out that layout.\n\tChart.layoutService = {\n\t\tdefaults: {},\n\n\t\t// Register a box to a chartInstance. A box is simply a reference to an object that requires layout. eg. Scales, Legend, Plugins.\n\t\taddBox: function(chartInstance, box) {\n\t\t\tif (!chartInstance.boxes) {\n\t\t\t\tchartInstance.boxes = [];\n\t\t\t}\n\t\t\tchartInstance.boxes.push(box);\n\t\t},\n\n\t\tremoveBox: function(chartInstance, box) {\n\t\t\tif (!chartInstance.boxes) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tchartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);\n\t\t},\n\n\t\t// The most important function\n\t\tupdate: function(chartInstance, width, height) {\n\n\t\t\tif (!chartInstance) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar layoutOptions = chartInstance.options.layout;\n\t\t\tvar padding = layoutOptions ? layoutOptions.padding : null;\n\n\t\t\tvar leftPadding = 0;\n\t\t\tvar rightPadding = 0;\n\t\t\tvar topPadding = 0;\n\t\t\tvar bottomPadding = 0;\n\n\t\t\tif (!isNaN(padding)) {\n\t\t\t\t// options.layout.padding is a number. assign to all\n\t\t\t\tleftPadding = padding;\n\t\t\t\trightPadding = padding;\n\t\t\t\ttopPadding = padding;\n\t\t\t\tbottomPadding = padding;\n\t\t\t} else {\n\t\t\t\tleftPadding = padding.left || 0;\n\t\t\t\trightPadding = padding.right || 0;\n\t\t\t\ttopPadding = padding.top || 0;\n\t\t\t\tbottomPadding = padding.bottom || 0;\n\t\t\t}\n\n\t\t\tvar leftBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'left';\n\t\t\t});\n\t\t\tvar rightBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'right';\n\t\t\t});\n\t\t\tvar topBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'top';\n\t\t\t});\n\t\t\tvar bottomBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'bottom';\n\t\t\t});\n\n\t\t\t// Boxes that overlay the chartarea such as the radialLinear scale\n\t\t\tvar chartAreaBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'chartArea';\n\t\t\t});\n\n\t\t\t// Ensure that full width boxes are at the very top / bottom\n\t\t\ttopBoxes.sort(function(a, b) {\n\t\t\t\treturn (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);\n\t\t\t});\n\t\t\tbottomBoxes.sort(function(a, b) {\n\t\t\t\treturn (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);\n\t\t\t});\n\n\t\t\t// Essentially we now have any number of boxes on each of the 4 sides.\n\t\t\t// Our canvas looks like the following.\n\t\t\t// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n\t\t\t// B1 is the bottom axis\n\t\t\t// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n\t\t\t// These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n\t\t\t// an error will be thrown.\n\t\t\t//\n\t\t\t// |----------------------------------------------------|\n\t\t\t// |                  T1 (Full Width)                   |\n\t\t\t// |----------------------------------------------------|\n\t\t\t// |    |    |                 T2                  |    |\n\t\t\t// |    |----|-------------------------------------|----|\n\t\t\t// |    |    | C1 |                           | C2 |    |\n\t\t\t// |    |    |----|                           |----|    |\n\t\t\t// |    |    |                                     |    |\n\t\t\t// | L1 | L2 |           ChartArea (C0)            | R1 |\n\t\t\t// |    |    |                                     |    |\n\t\t\t// |    |    |----|                           |----|    |\n\t\t\t// |    |    | C3 |                           | C4 |    |\n\t\t\t// |    |----|-------------------------------------|----|\n\t\t\t// |    |    |                 B1                  |    |\n\t\t\t// |----------------------------------------------------|\n\t\t\t// |                  B2 (Full Width)                   |\n\t\t\t// |----------------------------------------------------|\n\t\t\t//\n\t\t\t// What we do to find the best sizing, we do the following\n\t\t\t// 1. Determine the minimum size of the chart area.\n\t\t\t// 2. Split the remaining width equally between each vertical axis\n\t\t\t// 3. Split the remaining height equally between each horizontal axis\n\t\t\t// 4. Give each layout the maximum size it can be. The layout will return it's minimum size\n\t\t\t// 5. Adjust the sizes of each axis based on it's minimum reported size.\n\t\t\t// 6. Refit each axis\n\t\t\t// 7. Position each axis in the final location\n\t\t\t// 8. Tell the chart the final location of the chart area\n\t\t\t// 9. Tell any axes that overlay the chart area the positions of the chart area\n\n\t\t\t// Step 1\n\t\t\tvar chartWidth = width - leftPadding - rightPadding;\n\t\t\tvar chartHeight = height - topPadding - bottomPadding;\n\t\t\tvar chartAreaWidth = chartWidth / 2; // min 50%\n\t\t\tvar chartAreaHeight = chartHeight / 2; // min 50%\n\n\t\t\t// Step 2\n\t\t\tvar verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);\n\n\t\t\t// Step 3\n\t\t\tvar horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);\n\n\t\t\t// Step 4\n\t\t\tvar maxChartAreaWidth = chartWidth;\n\t\t\tvar maxChartAreaHeight = chartHeight;\n\t\t\tvar minBoxSizes = [];\n\n\t\t\tfunction getMinimumBoxSize(box) {\n\t\t\t\tvar minSize;\n\t\t\t\tvar isHorizontal = box.isHorizontal();\n\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\tminSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);\n\t\t\t\t\tmaxChartAreaHeight -= minSize.height;\n\t\t\t\t} else {\n\t\t\t\t\tminSize = box.update(verticalBoxWidth, chartAreaHeight);\n\t\t\t\t\tmaxChartAreaWidth -= minSize.width;\n\t\t\t\t}\n\n\t\t\t\tminBoxSizes.push({\n\t\t\t\t\thorizontal: isHorizontal,\n\t\t\t\t\tminSize: minSize,\n\t\t\t\t\tbox: box,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\thelpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);\n\n\t\t\t// If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)\n\t\t\tvar maxHorizontalLeftPadding = 0;\n\t\t\tvar maxHorizontalRightPadding = 0;\n\t\t\tvar maxVerticalTopPadding = 0;\n\t\t\tvar maxVerticalBottomPadding = 0;\n\n\t\t\thelpers.each(topBoxes.concat(bottomBoxes), function(horizontalBox) {\n\t\t\t\tif (horizontalBox.getPadding) {\n\t\t\t\t\tvar boxPadding = horizontalBox.getPadding();\n\t\t\t\t\tmaxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);\n\t\t\t\t\tmaxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\thelpers.each(leftBoxes.concat(rightBoxes), function(verticalBox) {\n\t\t\t\tif (verticalBox.getPadding) {\n\t\t\t\t\tvar boxPadding = verticalBox.getPadding();\n\t\t\t\t\tmaxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);\n\t\t\t\t\tmaxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could\n\t\t\t// be if the axes are drawn at their minimum sizes.\n\t\t\t// Steps 5 & 6\n\t\t\tvar totalLeftBoxesWidth = leftPadding;\n\t\t\tvar totalRightBoxesWidth = rightPadding;\n\t\t\tvar totalTopBoxesHeight = topPadding;\n\t\t\tvar totalBottomBoxesHeight = bottomPadding;\n\n\t\t\t// Function to fit a box\n\t\t\tfunction fitBox(box) {\n\t\t\t\tvar minBoxSize = helpers.findNextWhere(minBoxSizes, function(minBox) {\n\t\t\t\t\treturn minBox.box === box;\n\t\t\t\t});\n\n\t\t\t\tif (minBoxSize) {\n\t\t\t\t\tif (box.isHorizontal()) {\n\t\t\t\t\t\tvar scaleMargin = {\n\t\t\t\t\t\t\tleft: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),\n\t\t\t\t\t\t\tright: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),\n\t\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\t\tbottom: 0\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends\n\t\t\t\t\t\t// on the margin. Sometimes they need to increase in size slightly\n\t\t\t\t\t\tbox.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbox.update(minBoxSize.minSize.width, maxChartAreaHeight);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update, and calculate the left and right margins for the horizontal boxes\n\t\t\thelpers.each(leftBoxes.concat(rightBoxes), fitBox);\n\n\t\t\thelpers.each(leftBoxes, function(box) {\n\t\t\t\ttotalLeftBoxesWidth += box.width;\n\t\t\t});\n\n\t\t\thelpers.each(rightBoxes, function(box) {\n\t\t\t\ttotalRightBoxesWidth += box.width;\n\t\t\t});\n\n\t\t\t// Set the Left and Right margins for the horizontal boxes\n\t\t\thelpers.each(topBoxes.concat(bottomBoxes), fitBox);\n\n\t\t\t// Figure out how much margin is on the top and bottom of the vertical boxes\n\t\t\thelpers.each(topBoxes, function(box) {\n\t\t\t\ttotalTopBoxesHeight += box.height;\n\t\t\t});\n\n\t\t\thelpers.each(bottomBoxes, function(box) {\n\t\t\t\ttotalBottomBoxesHeight += box.height;\n\t\t\t});\n\n\t\t\tfunction finalFitVerticalBox(box) {\n\t\t\t\tvar minBoxSize = helpers.findNextWhere(minBoxSizes, function(minSize) {\n\t\t\t\t\treturn minSize.box === box;\n\t\t\t\t});\n\n\t\t\t\tvar scaleMargin = {\n\t\t\t\t\tleft: 0,\n\t\t\t\t\tright: 0,\n\t\t\t\t\ttop: totalTopBoxesHeight,\n\t\t\t\t\tbottom: totalBottomBoxesHeight\n\t\t\t\t};\n\n\t\t\t\tif (minBoxSize) {\n\t\t\t\t\tbox.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Let the left layout know the final margin\n\t\t\thelpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);\n\n\t\t\t// Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)\n\t\t\ttotalLeftBoxesWidth = leftPadding;\n\t\t\ttotalRightBoxesWidth = rightPadding;\n\t\t\ttotalTopBoxesHeight = topPadding;\n\t\t\ttotalBottomBoxesHeight = bottomPadding;\n\n\t\t\thelpers.each(leftBoxes, function(box) {\n\t\t\t\ttotalLeftBoxesWidth += box.width;\n\t\t\t});\n\n\t\t\thelpers.each(rightBoxes, function(box) {\n\t\t\t\ttotalRightBoxesWidth += box.width;\n\t\t\t});\n\n\t\t\thelpers.each(topBoxes, function(box) {\n\t\t\t\ttotalTopBoxesHeight += box.height;\n\t\t\t});\n\t\t\thelpers.each(bottomBoxes, function(box) {\n\t\t\t\ttotalBottomBoxesHeight += box.height;\n\t\t\t});\n\n\t\t\t// We may be adding some padding to account for rotated x axis labels\n\t\t\tvar leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);\n\t\t\ttotalLeftBoxesWidth += leftPaddingAddition;\n\t\t\ttotalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);\n\n\t\t\tvar topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);\n\t\t\ttotalTopBoxesHeight += topPaddingAddition;\n\t\t\ttotalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0);\n\n\t\t\t// Figure out if our chart area changed. This would occur if the dataset layout label rotation\n\t\t\t// changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do\n\t\t\t// without calling `fit` again\n\t\t\tvar newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;\n\t\t\tvar newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;\n\n\t\t\tif (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {\n\t\t\t\thelpers.each(leftBoxes, function(box) {\n\t\t\t\t\tbox.height = newMaxChartAreaHeight;\n\t\t\t\t});\n\n\t\t\t\thelpers.each(rightBoxes, function(box) {\n\t\t\t\t\tbox.height = newMaxChartAreaHeight;\n\t\t\t\t});\n\n\t\t\t\thelpers.each(topBoxes, function(box) {\n\t\t\t\t\tif (!box.options.fullWidth) {\n\t\t\t\t\t\tbox.width = newMaxChartAreaWidth;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\thelpers.each(bottomBoxes, function(box) {\n\t\t\t\t\tif (!box.options.fullWidth) {\n\t\t\t\t\t\tbox.width = newMaxChartAreaWidth;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmaxChartAreaHeight = newMaxChartAreaHeight;\n\t\t\t\tmaxChartAreaWidth = newMaxChartAreaWidth;\n\t\t\t}\n\n\t\t\t// Step 7 - Position the boxes\n\t\t\tvar left = leftPadding + leftPaddingAddition;\n\t\t\tvar top = topPadding + topPaddingAddition;\n\n\t\t\tfunction placeBox(box) {\n\t\t\t\tif (box.isHorizontal()) {\n\t\t\t\t\tbox.left = box.options.fullWidth ? leftPadding : totalLeftBoxesWidth;\n\t\t\t\t\tbox.right = box.options.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;\n\t\t\t\t\tbox.top = top;\n\t\t\t\t\tbox.bottom = top + box.height;\n\n\t\t\t\t\t// Move to next point\n\t\t\t\t\ttop = box.bottom;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbox.left = left;\n\t\t\t\t\tbox.right = left + box.width;\n\t\t\t\t\tbox.top = totalTopBoxesHeight;\n\t\t\t\t\tbox.bottom = totalTopBoxesHeight + maxChartAreaHeight;\n\n\t\t\t\t\t// Move to next point\n\t\t\t\t\tleft = box.right;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thelpers.each(leftBoxes.concat(topBoxes), placeBox);\n\n\t\t\t// Account for chart width and height\n\t\t\tleft += maxChartAreaWidth;\n\t\t\ttop += maxChartAreaHeight;\n\n\t\t\thelpers.each(rightBoxes, placeBox);\n\t\t\thelpers.each(bottomBoxes, placeBox);\n\n\t\t\t// Step 8\n\t\t\tchartInstance.chartArea = {\n\t\t\t\tleft: totalLeftBoxesWidth,\n\t\t\t\ttop: totalTopBoxesHeight,\n\t\t\t\tright: totalLeftBoxesWidth + maxChartAreaWidth,\n\t\t\t\tbottom: totalTopBoxesHeight + maxChartAreaHeight\n\t\t\t};\n\n\t\t\t// Step 9\n\t\t\thelpers.each(chartAreaBoxes, function(box) {\n\t\t\t\tbox.left = chartInstance.chartArea.left;\n\t\t\t\tbox.top = chartInstance.chartArea.top;\n\t\t\t\tbox.right = chartInstance.chartArea.right;\n\t\t\t\tbox.bottom = chartInstance.chartArea.bottom;\n\n\t\t\t\tbox.update(maxChartAreaWidth, maxChartAreaHeight);\n\t\t\t});\n\t\t}\n\t};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.layoutService.js\n// module id = 597\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\tvar noop = helpers.noop;\n\n\tChart.defaults.global.legend = {\n\n\t\tdisplay: true,\n\t\tposition: 'top',\n\t\tfullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)\n\t\treverse: false,\n\n\t\t// a callback that will handle\n\t\tonClick: function(e, legendItem) {\n\t\t\tvar index = legendItem.datasetIndex;\n\t\t\tvar ci = this.chart;\n\t\t\tvar meta = ci.getDatasetMeta(index);\n\n\t\t\t// See controller.isDatasetVisible comment\n\t\t\tmeta.hidden = meta.hidden === null? !ci.data.datasets[index].hidden : null;\n\n\t\t\t// We hid a dataset ... rerender the chart\n\t\t\tci.update();\n\t\t},\n\n\t\tonHover: null,\n\n\t\tlabels: {\n\t\t\tboxWidth: 40,\n\t\t\tpadding: 10,\n\t\t\t// Generates labels shown in the legend\n\t\t\t// Valid properties to return:\n\t\t\t// text : text to display\n\t\t\t// fillStyle : fill of coloured box\n\t\t\t// strokeStyle: stroke of coloured box\n\t\t\t// hidden : if this legend item refers to a hidden item\n\t\t\t// lineCap : cap style for line\n\t\t\t// lineDash\n\t\t\t// lineDashOffset :\n\t\t\t// lineJoin :\n\t\t\t// lineWidth :\n\t\t\tgenerateLabels: function(chart) {\n\t\t\t\tvar data = chart.data;\n\t\t\t\treturn helpers.isArray(data.datasets) ? data.datasets.map(function(dataset, i) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttext: dataset.label,\n\t\t\t\t\t\tfillStyle: (!helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0]),\n\t\t\t\t\t\thidden: !chart.isDatasetVisible(i),\n\t\t\t\t\t\tlineCap: dataset.borderCapStyle,\n\t\t\t\t\t\tlineDash: dataset.borderDash,\n\t\t\t\t\t\tlineDashOffset: dataset.borderDashOffset,\n\t\t\t\t\t\tlineJoin: dataset.borderJoinStyle,\n\t\t\t\t\t\tlineWidth: dataset.borderWidth,\n\t\t\t\t\t\tstrokeStyle: dataset.borderColor,\n\t\t\t\t\t\tpointStyle: dataset.pointStyle,\n\n\t\t\t\t\t\t// Below is extra data used for toggling the datasets\n\t\t\t\t\t\tdatasetIndex: i\n\t\t\t\t\t};\n\t\t\t\t}, this) : [];\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Helper function to get the box width based on the usePointStyle option\n\t * @param labelopts {Object} the label options on the legend\n\t * @param fontSize {Number} the label font size\n\t * @return {Number} width of the color box area\n\t */\n\tfunction getBoxWidth(labelOpts, fontSize) {\n\t\treturn labelOpts.usePointStyle ?\n\t\t\tfontSize * Math.SQRT2 :\n\t\t\tlabelOpts.boxWidth;\n\t}\n\n\tChart.Legend = Chart.Element.extend({\n\n\t\tinitialize: function(config) {\n\t\t\thelpers.extend(this, config);\n\n\t\t\t// Contains hit boxes for each dataset (in dataset order)\n\t\t\tthis.legendHitBoxes = [];\n\n\t\t\t// Are we in doughnut mode which has a different data type\n\t\t\tthis.doughnutMode = false;\n\t\t},\n\n\t\t// These methods are ordered by lifecycle. Utilities then follow.\n\t\t// Any function defined here is inherited by all legend types.\n\t\t// Any function can be extended by the legend type\n\n\t\tbeforeUpdate: noop,\n\t\tupdate: function(maxWidth, maxHeight, margins) {\n\t\t\tvar me = this;\n\n\t\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\t\tme.beforeUpdate();\n\n\t\t\t// Absorb the master measurements\n\t\t\tme.maxWidth = maxWidth;\n\t\t\tme.maxHeight = maxHeight;\n\t\t\tme.margins = margins;\n\n\t\t\t// Dimensions\n\t\t\tme.beforeSetDimensions();\n\t\t\tme.setDimensions();\n\t\t\tme.afterSetDimensions();\n\t\t\t// Labels\n\t\t\tme.beforeBuildLabels();\n\t\t\tme.buildLabels();\n\t\t\tme.afterBuildLabels();\n\n\t\t\t// Fit\n\t\t\tme.beforeFit();\n\t\t\tme.fit();\n\t\t\tme.afterFit();\n\t\t\t//\n\t\t\tme.afterUpdate();\n\n\t\t\treturn me.minSize;\n\t\t},\n\t\tafterUpdate: noop,\n\n\t\t//\n\n\t\tbeforeSetDimensions: noop,\n\t\tsetDimensions: function() {\n\t\t\tvar me = this;\n\t\t\t// Set the unconstrained dimension before label rotation\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\t// Reset position before calculating rotation\n\t\t\t\tme.width = me.maxWidth;\n\t\t\t\tme.left = 0;\n\t\t\t\tme.right = me.width;\n\t\t\t} else {\n\t\t\t\tme.height = me.maxHeight;\n\n\t\t\t\t// Reset position before calculating rotation\n\t\t\t\tme.top = 0;\n\t\t\t\tme.bottom = me.height;\n\t\t\t}\n\n\t\t\t// Reset padding\n\t\t\tme.paddingLeft = 0;\n\t\t\tme.paddingTop = 0;\n\t\t\tme.paddingRight = 0;\n\t\t\tme.paddingBottom = 0;\n\n\t\t\t// Reset minSize\n\t\t\tme.minSize = {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t};\n\t\t},\n\t\tafterSetDimensions: noop,\n\n\t\t//\n\n\t\tbeforeBuildLabels: noop,\n\t\tbuildLabels: function() {\n\t\t\tvar me = this;\n\t\t\tvar labelOpts = me.options.labels;\n\t\t\tvar legendItems = labelOpts.generateLabels.call(me, me.chart);\n\n\t\t\tif (labelOpts.filter) {\n\t\t\t\tlegendItems = legendItems.filter(function(item) {\n\t\t\t\t\treturn labelOpts.filter(item, me.chart.data);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (me.options.reverse) {\n\t\t\t\tlegendItems.reverse();\n\t\t\t}\n\n\t\t\tme.legendItems = legendItems;\n\t\t},\n\t\tafterBuildLabels: noop,\n\n\t\t//\n\n\t\tbeforeFit: noop,\n\t\tfit: function() {\n\t\t\tvar me = this;\n\t\t\tvar opts = me.options;\n\t\t\tvar labelOpts = opts.labels;\n\t\t\tvar display = opts.display;\n\n\t\t\tvar ctx = me.ctx;\n\n\t\t\tvar globalDefault = Chart.defaults.global,\n\t\t\t\titemOrDefault = helpers.getValueOrDefault,\n\t\t\t\tfontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),\n\t\t\t\tfontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),\n\t\t\t\tfontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),\n\t\t\t\tlabelFont = helpers.fontString(fontSize, fontStyle, fontFamily);\n\n\t\t\t// Reset hit boxes\n\t\t\tvar hitboxes = me.legendHitBoxes = [];\n\n\t\t\tvar minSize = me.minSize;\n\t\t\tvar isHorizontal = me.isHorizontal();\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tminSize.width = me.maxWidth; // fill all the width\n\t\t\t\tminSize.height = display ? 10 : 0;\n\t\t\t} else {\n\t\t\t\tminSize.width = display ? 10 : 0;\n\t\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t\t}\n\n\t\t\t// Increase sizes here\n\t\t\tif (display) {\n\t\t\t\tctx.font = labelFont;\n\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t// Labels\n\n\t\t\t\t\t// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n\t\t\t\t\tvar lineWidths = me.lineWidths = [0];\n\t\t\t\t\tvar totalHeight = me.legendItems.length ? fontSize + (labelOpts.padding) : 0;\n\n\t\t\t\t\tctx.textAlign = 'left';\n\t\t\t\t\tctx.textBaseline = 'top';\n\n\t\t\t\t\thelpers.each(me.legendItems, function(legendItem, i) {\n\t\t\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\t\t\t\tvar width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n\t\t\t\t\t\tif (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {\n\t\t\t\t\t\t\ttotalHeight += fontSize + (labelOpts.padding);\n\t\t\t\t\t\t\tlineWidths[lineWidths.length] = me.left;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Store the hitbox width and height here. Final position will be updated in `draw`\n\t\t\t\t\t\thitboxes[i] = {\n\t\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\t\twidth: width,\n\t\t\t\t\t\t\theight: fontSize\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tlineWidths[lineWidths.length - 1] += width + labelOpts.padding;\n\t\t\t\t\t});\n\n\t\t\t\t\tminSize.height += totalHeight;\n\n\t\t\t\t} else {\n\t\t\t\t\tvar vPadding = labelOpts.padding;\n\t\t\t\t\tvar columnWidths = me.columnWidths = [];\n\t\t\t\t\tvar totalWidth = labelOpts.padding;\n\t\t\t\t\tvar currentColWidth = 0;\n\t\t\t\t\tvar currentColHeight = 0;\n\t\t\t\t\tvar itemHeight = fontSize + vPadding;\n\n\t\t\t\t\thelpers.each(me.legendItems, function(legendItem, i) {\n\t\t\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\t\t\t\tvar itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n\t\t\t\t\t\t// If too tall, go to new column\n\t\t\t\t\t\tif (currentColHeight + itemHeight > minSize.height) {\n\t\t\t\t\t\t\ttotalWidth += currentColWidth + labelOpts.padding;\n\t\t\t\t\t\t\tcolumnWidths.push(currentColWidth); // previous column width\n\n\t\t\t\t\t\t\tcurrentColWidth = 0;\n\t\t\t\t\t\t\tcurrentColHeight = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Get max width\n\t\t\t\t\t\tcurrentColWidth = Math.max(currentColWidth, itemWidth);\n\t\t\t\t\t\tcurrentColHeight += itemHeight;\n\n\t\t\t\t\t\t// Store the hitbox width and height here. Final position will be updated in `draw`\n\t\t\t\t\t\thitboxes[i] = {\n\t\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\t\twidth: itemWidth,\n\t\t\t\t\t\t\theight: fontSize\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\n\t\t\t\t\ttotalWidth += currentColWidth;\n\t\t\t\t\tcolumnWidths.push(currentColWidth);\n\t\t\t\t\tminSize.width += totalWidth;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tme.width = minSize.width;\n\t\t\tme.height = minSize.height;\n\t\t},\n\t\tafterFit: noop,\n\n\t\t// Shared Methods\n\t\tisHorizontal: function() {\n\t\t\treturn this.options.position === 'top' || this.options.position === 'bottom';\n\t\t},\n\n\t\t// Actually draw the legend on the canvas\n\t\tdraw: function() {\n\t\t\tvar me = this;\n\t\t\tvar opts = me.options;\n\t\t\tvar labelOpts = opts.labels;\n\t\t\tvar globalDefault = Chart.defaults.global,\n\t\t\t\tlineDefault = globalDefault.elements.line,\n\t\t\t\tlegendWidth = me.width,\n\t\t\t\tlineWidths = me.lineWidths;\n\n\t\t\tif (opts.display) {\n\t\t\t\tvar ctx = me.ctx,\n\t\t\t\t\tcursor,\n\t\t\t\t\titemOrDefault = helpers.getValueOrDefault,\n\t\t\t\t\tfontColor = itemOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor),\n\t\t\t\t\tfontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),\n\t\t\t\t\tfontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),\n\t\t\t\t\tfontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),\n\t\t\t\t\tlabelFont = helpers.fontString(fontSize, fontStyle, fontFamily);\n\n\t\t\t\t// Canvas setup\n\t\t\t\tctx.textAlign = 'left';\n\t\t\t\tctx.textBaseline = 'top';\n\t\t\t\tctx.lineWidth = 0.5;\n\t\t\t\tctx.strokeStyle = fontColor; // for strikethrough effect\n\t\t\t\tctx.fillStyle = fontColor; // render in correct colour\n\t\t\t\tctx.font = labelFont;\n\n\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize),\n\t\t\t\t\thitboxes = me.legendHitBoxes;\n\n\t\t\t\t// current position\n\t\t\t\tvar drawLegendBox = function(x, y, legendItem) {\n\t\t\t\t\tif (isNaN(boxWidth) || boxWidth <= 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set the ctx for the box\n\t\t\t\t\tctx.save();\n\n\t\t\t\t\tctx.fillStyle = itemOrDefault(legendItem.fillStyle, globalDefault.defaultColor);\n\t\t\t\t\tctx.lineCap = itemOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);\n\t\t\t\t\tctx.lineDashOffset = itemOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);\n\t\t\t\t\tctx.lineJoin = itemOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);\n\t\t\t\t\tctx.lineWidth = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth);\n\t\t\t\t\tctx.strokeStyle = itemOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);\n\t\t\t\t\tvar isLineWidthZero = (itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0);\n\n\t\t\t\t\tif (ctx.setLineDash) {\n\t\t\t\t\t\t// IE 9 and 10 do not support line dash\n\t\t\t\t\t\tctx.setLineDash(itemOrDefault(legendItem.lineDash, lineDefault.borderDash));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (opts.labels && opts.labels.usePointStyle) {\n\t\t\t\t\t\t// Recalculate x and y for drawPoint() because its expecting\n\t\t\t\t\t\t// x and y to be center of figure (instead of top left)\n\t\t\t\t\t\tvar radius = fontSize * Math.SQRT2 / 2;\n\t\t\t\t\t\tvar offSet = radius / Math.SQRT2;\n\t\t\t\t\t\tvar centerX = x + offSet;\n\t\t\t\t\t\tvar centerY = y + offSet;\n\n\t\t\t\t\t\t// Draw pointStyle as legend symbol\n\t\t\t\t\t\tChart.canvasHelpers.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Draw box as legend symbol\n\t\t\t\t\t\tif (!isLineWidthZero) {\n\t\t\t\t\t\t\tctx.strokeRect(x, y, boxWidth, fontSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tctx.fillRect(x, y, boxWidth, fontSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.restore();\n\t\t\t\t};\n\t\t\t\tvar fillText = function(x, y, legendItem, textWidth) {\n\t\t\t\t\tctx.fillText(legendItem.text, boxWidth + (fontSize / 2) + x, y);\n\n\t\t\t\t\tif (legendItem.hidden) {\n\t\t\t\t\t\t// Strikethrough the text if hidden\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.lineWidth = 2;\n\t\t\t\t\t\tctx.moveTo(boxWidth + (fontSize / 2) + x, y + (fontSize / 2));\n\t\t\t\t\t\tctx.lineTo(boxWidth + (fontSize / 2) + x + textWidth, y + (fontSize / 2));\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Horizontal\n\t\t\t\tvar isHorizontal = me.isHorizontal();\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\tcursor = {\n\t\t\t\t\t\tx: me.left + ((legendWidth - lineWidths[0]) / 2),\n\t\t\t\t\t\ty: me.top + labelOpts.padding,\n\t\t\t\t\t\tline: 0\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tcursor = {\n\t\t\t\t\t\tx: me.left + labelOpts.padding,\n\t\t\t\t\t\ty: me.top + labelOpts.padding,\n\t\t\t\t\t\tline: 0\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tvar itemHeight = fontSize + labelOpts.padding;\n\t\t\t\thelpers.each(me.legendItems, function(legendItem, i) {\n\t\t\t\t\tvar textWidth = ctx.measureText(legendItem.text).width,\n\t\t\t\t\t\twidth = boxWidth + (fontSize / 2) + textWidth,\n\t\t\t\t\t\tx = cursor.x,\n\t\t\t\t\t\ty = cursor.y;\n\n\t\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t\tif (x + width >= legendWidth) {\n\t\t\t\t\t\t\ty = cursor.y += itemHeight;\n\t\t\t\t\t\t\tcursor.line++;\n\t\t\t\t\t\t\tx = cursor.x = me.left + ((legendWidth - lineWidths[cursor.line]) / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (y + itemHeight > me.bottom) {\n\t\t\t\t\t\tx = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;\n\t\t\t\t\t\ty = cursor.y = me.top + labelOpts.padding;\n\t\t\t\t\t\tcursor.line++;\n\t\t\t\t\t}\n\n\t\t\t\t\tdrawLegendBox(x, y, legendItem);\n\n\t\t\t\t\thitboxes[i].left = x;\n\t\t\t\t\thitboxes[i].top = y;\n\n\t\t\t\t\t// Fill the actual label\n\t\t\t\t\tfillText(x, y, legendItem, textWidth);\n\n\t\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t\tcursor.x += width + (labelOpts.padding);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcursor.y += itemHeight;\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Handle an event\n\t\t * @private\n\t\t * @param {IEvent} event - The event to handle\n\t\t * @return {Boolean} true if a change occured\n\t\t */\n\t\thandleEvent: function(e) {\n\t\t\tvar me = this;\n\t\t\tvar opts = me.options;\n\t\t\tvar type = e.type === 'mouseup' ? 'click' : e.type;\n\t\t\tvar changed = false;\n\n\t\t\tif (type === 'mousemove') {\n\t\t\t\tif (!opts.onHover) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else if (type === 'click') {\n\t\t\t\tif (!opts.onClick) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Chart event already has relative position in it\n\t\t\tvar x = e.x,\n\t\t\t\ty = e.y;\n\n\t\t\tif (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n\t\t\t\t// See if we are touching one of the dataset boxes\n\t\t\t\tvar lh = me.legendHitBoxes;\n\t\t\t\tfor (var i = 0; i < lh.length; ++i) {\n\t\t\t\t\tvar hitBox = lh[i];\n\n\t\t\t\t\tif (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n\t\t\t\t\t\t// Touching an element\n\t\t\t\t\t\tif (type === 'click') {\n\t\t\t\t\t\t\t// use e.native for backwards compatibility\n\t\t\t\t\t\t\topts.onClick.call(me, e.native, me.legendItems[i]);\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if (type === 'mousemove') {\n\t\t\t\t\t\t\t// use e.native for backwards compatibility\n\t\t\t\t\t\t\topts.onHover.call(me, e.native, me.legendItems[i]);\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn changed;\n\t\t}\n\t});\n\n\tfunction createNewLegendAndAttach(chartInstance, legendOpts) {\n\t\tvar legend = new Chart.Legend({\n\t\t\tctx: chartInstance.chart.ctx,\n\t\t\toptions: legendOpts,\n\t\t\tchart: chartInstance\n\t\t});\n\t\tchartInstance.legend = legend;\n\t\tChart.layoutService.addBox(chartInstance, legend);\n\t}\n\n\t// Register the legend plugin\n\tChart.plugins.register({\n\t\tbeforeInit: function(chartInstance) {\n\t\t\tvar legendOpts = chartInstance.options.legend;\n\n\t\t\tif (legendOpts) {\n\t\t\t\tcreateNewLegendAndAttach(chartInstance, legendOpts);\n\t\t\t}\n\t\t},\n\t\tbeforeUpdate: function(chartInstance) {\n\t\t\tvar legendOpts = chartInstance.options.legend;\n\n\t\t\tif (legendOpts) {\n\t\t\t\tlegendOpts = helpers.configMerge(Chart.defaults.global.legend, legendOpts);\n\n\t\t\t\tif (chartInstance.legend) {\n\t\t\t\t\tchartInstance.legend.options = legendOpts;\n\t\t\t\t} else {\n\t\t\t\t\tcreateNewLegendAndAttach(chartInstance, legendOpts);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tChart.layoutService.removeBox(chartInstance, chartInstance.legend);\n\t\t\t\tdelete chartInstance.legend;\n\t\t\t}\n\t\t},\n\t\tafterEvent: function(chartInstance, e) {\n\t\t\tvar legend = chartInstance.legend;\n\t\t\tif (legend) {\n\t\t\t\tlegend.handleEvent(e);\n\t\t\t}\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.legend.js\n// module id = 598\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tChart.defaults.global.plugins = {};\n\n\t/**\n\t * The plugin service singleton\n\t * @namespace Chart.plugins\n\t * @since 2.1.0\n\t */\n\tChart.plugins = {\n\t\t/**\n\t\t * Globally registered plugins.\n\t\t * @private\n\t\t */\n\t\t_plugins: [],\n\n\t\t/**\n\t\t * This identifier is used to invalidate the descriptors cache attached to each chart\n\t\t * when a global plugin is registered or unregistered. In this case, the cache ID is\n\t\t * incremented and descriptors are regenerated during following API calls.\n\t\t * @private\n\t\t */\n\t\t_cacheId: 0,\n\n\t\t/**\n\t\t * Registers the given plugin(s) if not already registered.\n\t\t * @param {Array|Object} plugins plugin instance(s).\n\t\t */\n\t\tregister: function(plugins) {\n\t\t\tvar p = this._plugins;\n\t\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\t\tif (p.indexOf(plugin) === -1) {\n\t\t\t\t\tp.push(plugin);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._cacheId++;\n\t\t},\n\n\t\t/**\n\t\t * Unregisters the given plugin(s) only if registered.\n\t\t * @param {Array|Object} plugins plugin instance(s).\n\t\t */\n\t\tunregister: function(plugins) {\n\t\t\tvar p = this._plugins;\n\t\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\t\tvar idx = p.indexOf(plugin);\n\t\t\t\tif (idx !== -1) {\n\t\t\t\t\tp.splice(idx, 1);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._cacheId++;\n\t\t},\n\n\t\t/**\n\t\t * Remove all registered plugins.\n\t\t * @since 2.1.5\n\t\t */\n\t\tclear: function() {\n\t\t\tthis._plugins = [];\n\t\t\tthis._cacheId++;\n\t\t},\n\n\t\t/**\n\t\t * Returns the number of registered plugins?\n\t\t * @returns {Number}\n\t\t * @since 2.1.5\n\t\t */\n\t\tcount: function() {\n\t\t\treturn this._plugins.length;\n\t\t},\n\n\t\t/**\n\t\t * Returns all registered plugin instances.\n\t\t * @returns {Array} array of plugin objects.\n\t\t * @since 2.1.5\n\t\t */\n\t\tgetAll: function() {\n\t\t\treturn this._plugins;\n\t\t},\n\n\t\t/**\n\t\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t\t * returned value can be used, for instance, to interrupt the current action.\n\t\t * @param {Object} chart - The chart instance for which plugins should be called.\n\t\t * @param {String} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t\t * @param {Array} [args] - Extra arguments to apply to the hook call.\n\t\t * @returns {Boolean} false if any of the plugins return false, else returns true.\n\t\t */\n\t\tnotify: function(chart, hook, args) {\n\t\t\tvar descriptors = this.descriptors(chart);\n\t\t\tvar ilen = descriptors.length;\n\t\t\tvar i, descriptor, plugin, params, method;\n\n\t\t\tfor (i=0; i<ilen; ++i) {\n\t\t\t\tdescriptor = descriptors[i];\n\t\t\t\tplugin = descriptor.plugin;\n\t\t\t\tmethod = plugin[hook];\n\t\t\t\tif (typeof method === 'function') {\n\t\t\t\t\tparams = [chart].concat(args || []);\n\t\t\t\t\tparams.push(descriptor.options);\n\t\t\t\t\tif (method.apply(plugin, params) === false) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t/**\n\t\t * Returns descriptors of enabled plugins for the given chart.\n\t\t * @returns {Array} [{ plugin, options }]\n\t\t * @private\n\t\t */\n\t\tdescriptors: function(chart) {\n\t\t\tvar cache = chart._plugins || (chart._plugins = {});\n\t\t\tif (cache.id === this._cacheId) {\n\t\t\t\treturn cache.descriptors;\n\t\t\t}\n\n\t\t\tvar plugins = [];\n\t\t\tvar descriptors = [];\n\t\t\tvar config = (chart && chart.config) || {};\n\t\t\tvar defaults = Chart.defaults.global.plugins;\n\t\t\tvar options = (config.options && config.options.plugins) || {};\n\n\t\t\tthis._plugins.concat(config.plugins || []).forEach(function(plugin) {\n\t\t\t\tvar idx = plugins.indexOf(plugin);\n\t\t\t\tif (idx !== -1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar id = plugin.id;\n\t\t\t\tvar opts = options[id];\n\t\t\t\tif (opts === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opts === true) {\n\t\t\t\t\topts = helpers.clone(defaults[id]);\n\t\t\t\t}\n\n\t\t\t\tplugins.push(plugin);\n\t\t\t\tdescriptors.push({\n\t\t\t\t\tplugin: plugin,\n\t\t\t\t\toptions: opts || {}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tcache.descriptors = descriptors;\n\t\t\tcache.id = this._cacheId;\n\t\t\treturn descriptors;\n\t\t}\n\t};\n\n\t/**\n\t * Plugin extension hooks.\n\t * @interface IPlugin\n\t * @since 2.1.0\n\t */\n\t/**\n\t * @method IPlugin#beforeInit\n\t * @desc Called before initializing `chart`.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#afterInit\n\t * @desc Called after `chart` has been initialized and before the first update.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#beforeUpdate\n\t * @desc Called before updating `chart`. If any plugin returns `false`, the update\n\t * is cancelled (and thus subsequent render(s)) until another `update` is triggered.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t * @returns {Boolean} `false` to cancel the chart update.\n\t */\n\t/**\n\t * @method IPlugin#afterUpdate\n\t * @desc Called after `chart` has been updated and before rendering. Note that this\n\t * hook will not be called if the chart update has been previously cancelled.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#beforeDatasetsUpdate\n \t * @desc Called before updating the `chart` datasets. If any plugin returns `false`,\n\t * the datasets update is cancelled until another `update` is triggered.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t * @returns {Boolean} false to cancel the datasets update.\n\t * @since version 2.1.5\n\t */\n\t/**\n\t * @method IPlugin#afterDatasetsUpdate\n\t * @desc Called after the `chart` datasets have been updated. Note that this hook\n\t * will not be called if the datasets update has been previously cancelled.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t * @since version 2.1.5\n\t */\n\t/**\n\t * @method IPlugin#beforeLayout\n\t * @desc Called before laying out `chart`. If any plugin returns `false`,\n\t * the layout update is cancelled until another `update` is triggered.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t * @returns {Boolean} `false` to cancel the chart layout.\n\t */\n\t/**\n\t * @method IPlugin#afterLayout\n\t * @desc Called after the `chart` has been layed out. Note that this hook will not\n\t * be called if the layout update has been previously cancelled.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#beforeRender\n\t * @desc Called before rendering `chart`. If any plugin returns `false`,\n\t * the rendering is cancelled until another `render` is triggered.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t * @returns {Boolean} `false` to cancel the chart rendering.\n\t */\n\t/**\n\t * @method IPlugin#afterRender\n\t * @desc Called after the `chart` has been fully rendered (and animation completed). Note\n\t * that this hook will not be called if the rendering has been previously cancelled.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#beforeDraw\n\t * @desc Called before drawing `chart` at every animation frame specified by the given\n\t * easing value. If any plugin returns `false`, the frame drawing is cancelled until\n\t * another `render` is triggered.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n\t * @param {Object} options - The plugin options.\n\t * @returns {Boolean} `false` to cancel the chart drawing.\n\t */\n\t/**\n\t * @method IPlugin#afterDraw\n\t * @desc Called after the `chart` has been drawn for the specific easing value. Note\n\t * that this hook will not be called if the drawing has been previously cancelled.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#beforeDatasetsDraw\n \t * @desc Called before drawing the `chart` datasets. If any plugin returns `false`,\n\t * the datasets drawing is cancelled until another `render` is triggered.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n\t * @param {Object} options - The plugin options.\n\t * @returns {Boolean} `false` to cancel the chart datasets drawing.\n\t */\n\t/**\n\t * @method IPlugin#afterDatasetsDraw\n\t * @desc Called after the `chart` datasets have been drawn. Note that this hook\n\t * will not be called if the datasets drawing has been previously cancelled.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#beforeEvent\n \t * @desc Called before processing the specified `event`. If any plugin returns `false`,\n\t * the event will be discarded.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {IEvent} event - The event object.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#afterEvent\n\t * @desc Called after the `event` has been consumed. Note that this hook\n\t * will not be called if the `event` has been previously discarded.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {IEvent} event - The event object.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#resize\n\t * @desc Called after the chart as been resized.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Number} size - The new canvas display size (eq. canvas.style width & height).\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#destroy\n\t * @desc Called after the chart as been destroyed.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t */\n\n\t/**\n\t * Provided for backward compatibility, use Chart.plugins instead\n\t * @namespace Chart.pluginService\n\t * @deprecated since version 2.1.5\n\t * @todo remove at version 3\n\t * @private\n\t */\n\tChart.pluginService = Chart.plugins;\n\n\t/**\n\t * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n\t * effect, instead simply create/register plugins via plain JavaScript objects.\n\t * @interface Chart.PluginBase\n\t * @deprecated since version 2.5.0\n\t * @todo remove at version 3\n\t * @private\n\t */\n\tChart.PluginBase = helpers.inherits({});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.plugin.js\n// module id = 599\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tChart.defaults.scale = {\n\t\tdisplay: true,\n\t\tposition: 'left',\n\n\t\t// grid line settings\n\t\tgridLines: {\n\t\t\tdisplay: true,\n\t\t\tcolor: 'rgba(0, 0, 0, 0.1)',\n\t\t\tlineWidth: 1,\n\t\t\tdrawBorder: true,\n\t\t\tdrawOnChartArea: true,\n\t\t\tdrawTicks: true,\n\t\t\ttickMarkLength: 10,\n\t\t\tzeroLineWidth: 1,\n\t\t\tzeroLineColor: 'rgba(0,0,0,0.25)',\n\t\t\toffsetGridLines: false,\n\t\t\tborderDash: [],\n\t\t\tborderDashOffset: 0.0\n\t\t},\n\n\t\t// scale label\n\t\tscaleLabel: {\n\t\t\t// actual label\n\t\t\tlabelString: '',\n\n\t\t\t// display property\n\t\t\tdisplay: false\n\t\t},\n\n\t\t// label settings\n\t\tticks: {\n\t\t\tbeginAtZero: false,\n\t\t\tminRotation: 0,\n\t\t\tmaxRotation: 50,\n\t\t\tmirror: false,\n\t\t\tpadding: 0,\n\t\t\treverse: false,\n\t\t\tdisplay: true,\n\t\t\tautoSkip: true,\n\t\t\tautoSkipPadding: 0,\n\t\t\tlabelOffset: 0,\n\t\t\t// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n\t\t\tcallback: Chart.Ticks.formatters.values\n\t\t}\n\t};\n\n\tfunction computeTextSize(context, tick, font) {\n\t\treturn helpers.isArray(tick) ?\n\t\t\thelpers.longestText(context, font, tick) :\n\t\t\tcontext.measureText(tick).width;\n\t}\n\n\tfunction parseFontOptions(options) {\n\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\t\tvar globalDefaults = Chart.defaults.global;\n\t\tvar size = getValueOrDefault(options.fontSize, globalDefaults.defaultFontSize);\n\t\tvar style = getValueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);\n\t\tvar family = getValueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);\n\n\t\treturn {\n\t\t\tsize: size,\n\t\t\tstyle: style,\n\t\t\tfamily: family,\n\t\t\tfont: helpers.fontString(size, style, family)\n\t\t};\n\t}\n\n\tChart.Scale = Chart.Element.extend({\n\t\t/**\n\t\t * Get the padding needed for the scale\n\t\t * @method getPadding\n\t\t * @private\n\t\t * @returns {Padding} the necessary padding\n\t\t */\n\t\tgetPadding: function() {\n\t\t\tvar me = this;\n\t\t\treturn {\n\t\t\t\tleft: me.paddingLeft || 0,\n\t\t\t\ttop: me.paddingTop || 0,\n\t\t\t\tright: me.paddingRight || 0,\n\t\t\t\tbottom: me.paddingBottom || 0\n\t\t\t};\n\t\t},\n\n\t\t// These methods are ordered by lifecyle. Utilities then follow.\n\t\t// Any function defined here is inherited by all scale types.\n\t\t// Any function can be extended by the scale type\n\n\t\tbeforeUpdate: function() {\n\t\t\thelpers.callCallback(this.options.beforeUpdate, [this]);\n\t\t},\n\t\tupdate: function(maxWidth, maxHeight, margins) {\n\t\t\tvar me = this;\n\n\t\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\t\tme.beforeUpdate();\n\n\t\t\t// Absorb the master measurements\n\t\t\tme.maxWidth = maxWidth;\n\t\t\tme.maxHeight = maxHeight;\n\t\t\tme.margins = helpers.extend({\n\t\t\t\tleft: 0,\n\t\t\t\tright: 0,\n\t\t\t\ttop: 0,\n\t\t\t\tbottom: 0\n\t\t\t}, margins);\n\t\t\tme.longestTextCache = me.longestTextCache || {};\n\n\t\t\t// Dimensions\n\t\t\tme.beforeSetDimensions();\n\t\t\tme.setDimensions();\n\t\t\tme.afterSetDimensions();\n\n\t\t\t// Data min/max\n\t\t\tme.beforeDataLimits();\n\t\t\tme.determineDataLimits();\n\t\t\tme.afterDataLimits();\n\n\t\t\t// Ticks\n\t\t\tme.beforeBuildTicks();\n\t\t\tme.buildTicks();\n\t\t\tme.afterBuildTicks();\n\n\t\t\tme.beforeTickToLabelConversion();\n\t\t\tme.convertTicksToLabels();\n\t\t\tme.afterTickToLabelConversion();\n\n\t\t\t// Tick Rotation\n\t\t\tme.beforeCalculateTickRotation();\n\t\t\tme.calculateTickRotation();\n\t\t\tme.afterCalculateTickRotation();\n\t\t\t// Fit\n\t\t\tme.beforeFit();\n\t\t\tme.fit();\n\t\t\tme.afterFit();\n\t\t\t//\n\t\t\tme.afterUpdate();\n\n\t\t\treturn me.minSize;\n\n\t\t},\n\t\tafterUpdate: function() {\n\t\t\thelpers.callCallback(this.options.afterUpdate, [this]);\n\t\t},\n\n\t\t//\n\n\t\tbeforeSetDimensions: function() {\n\t\t\thelpers.callCallback(this.options.beforeSetDimensions, [this]);\n\t\t},\n\t\tsetDimensions: function() {\n\t\t\tvar me = this;\n\t\t\t// Set the unconstrained dimension before label rotation\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\t// Reset position before calculating rotation\n\t\t\t\tme.width = me.maxWidth;\n\t\t\t\tme.left = 0;\n\t\t\t\tme.right = me.width;\n\t\t\t} else {\n\t\t\t\tme.height = me.maxHeight;\n\n\t\t\t\t// Reset position before calculating rotation\n\t\t\t\tme.top = 0;\n\t\t\t\tme.bottom = me.height;\n\t\t\t}\n\n\t\t\t// Reset padding\n\t\t\tme.paddingLeft = 0;\n\t\t\tme.paddingTop = 0;\n\t\t\tme.paddingRight = 0;\n\t\t\tme.paddingBottom = 0;\n\t\t},\n\t\tafterSetDimensions: function() {\n\t\t\thelpers.callCallback(this.options.afterSetDimensions, [this]);\n\t\t},\n\n\t\t// Data limits\n\t\tbeforeDataLimits: function() {\n\t\t\thelpers.callCallback(this.options.beforeDataLimits, [this]);\n\t\t},\n\t\tdetermineDataLimits: helpers.noop,\n\t\tafterDataLimits: function() {\n\t\t\thelpers.callCallback(this.options.afterDataLimits, [this]);\n\t\t},\n\n\t\t//\n\t\tbeforeBuildTicks: function() {\n\t\t\thelpers.callCallback(this.options.beforeBuildTicks, [this]);\n\t\t},\n\t\tbuildTicks: helpers.noop,\n\t\tafterBuildTicks: function() {\n\t\t\thelpers.callCallback(this.options.afterBuildTicks, [this]);\n\t\t},\n\n\t\tbeforeTickToLabelConversion: function() {\n\t\t\thelpers.callCallback(this.options.beforeTickToLabelConversion, [this]);\n\t\t},\n\t\tconvertTicksToLabels: function() {\n\t\t\tvar me = this;\n\t\t\t// Convert ticks to strings\n\t\t\tvar tickOpts = me.options.ticks;\n\t\t\tme.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback);\n\t\t},\n\t\tafterTickToLabelConversion: function() {\n\t\t\thelpers.callCallback(this.options.afterTickToLabelConversion, [this]);\n\t\t},\n\n\t\t//\n\n\t\tbeforeCalculateTickRotation: function() {\n\t\t\thelpers.callCallback(this.options.beforeCalculateTickRotation, [this]);\n\t\t},\n\t\tcalculateTickRotation: function() {\n\t\t\tvar me = this;\n\t\t\tvar context = me.ctx;\n\t\t\tvar tickOpts = me.options.ticks;\n\n\t\t\t// Get the width of each grid by calculating the difference\n\t\t\t// between x offsets between 0 and 1.\n\t\t\tvar tickFont = parseFontOptions(tickOpts);\n\t\t\tcontext.font = tickFont.font;\n\n\t\t\tvar labelRotation = tickOpts.minRotation || 0;\n\n\t\t\tif (me.options.display && me.isHorizontal()) {\n\t\t\t\tvar originalLabelWidth = helpers.longestText(context, tickFont.font, me.ticks, me.longestTextCache);\n\t\t\t\tvar labelWidth = originalLabelWidth;\n\t\t\t\tvar cosRotation;\n\t\t\t\tvar sinRotation;\n\n\t\t\t\t// Allow 3 pixels x2 padding either side for label readability\n\t\t\t\tvar tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;\n\n\t\t\t\t// Max label rotation can be set or default to 90 - also act as a loop counter\n\t\t\t\twhile (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {\n\t\t\t\t\tvar angleRadians = helpers.toRadians(labelRotation);\n\t\t\t\t\tcosRotation = Math.cos(angleRadians);\n\t\t\t\t\tsinRotation = Math.sin(angleRadians);\n\n\t\t\t\t\tif (sinRotation * originalLabelWidth > me.maxHeight) {\n\t\t\t\t\t\t// go back one step\n\t\t\t\t\t\tlabelRotation--;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tlabelRotation++;\n\t\t\t\t\tlabelWidth = cosRotation * originalLabelWidth;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tme.labelRotation = labelRotation;\n\t\t},\n\t\tafterCalculateTickRotation: function() {\n\t\t\thelpers.callCallback(this.options.afterCalculateTickRotation, [this]);\n\t\t},\n\n\t\t//\n\n\t\tbeforeFit: function() {\n\t\t\thelpers.callCallback(this.options.beforeFit, [this]);\n\t\t},\n\t\tfit: function() {\n\t\t\tvar me = this;\n\t\t\t// Reset\n\t\t\tvar minSize = me.minSize = {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t};\n\n\t\t\tvar opts = me.options;\n\t\t\tvar tickOpts = opts.ticks;\n\t\t\tvar scaleLabelOpts = opts.scaleLabel;\n\t\t\tvar gridLineOpts = opts.gridLines;\n\t\t\tvar display = opts.display;\n\t\t\tvar isHorizontal = me.isHorizontal();\n\n\t\t\tvar tickFont = parseFontOptions(tickOpts);\n\t\t\tvar scaleLabelFontSize = parseFontOptions(scaleLabelOpts).size * 1.5;\n\t\t\tvar tickMarkLength = opts.gridLines.tickMarkLength;\n\n\t\t\t// Width\n\t\t\tif (isHorizontal) {\n\t\t\t\t// subtract the margins to line up with the chartArea if we are a full width scale\n\t\t\t\tminSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;\n\t\t\t} else {\n\t\t\t\tminSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n\t\t\t}\n\n\t\t\t// height\n\t\t\tif (isHorizontal) {\n\t\t\t\tminSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n\t\t\t} else {\n\t\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t\t}\n\n\t\t\t// Are we showing a title for the scale?\n\t\t\tif (scaleLabelOpts.display && display) {\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\tminSize.height += scaleLabelFontSize;\n\t\t\t\t} else {\n\t\t\t\t\tminSize.width += scaleLabelFontSize;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Don't bother fitting the ticks if we are not showing them\n\t\t\tif (tickOpts.display && display) {\n\t\t\t\tvar largestTextWidth = helpers.longestText(me.ctx, tickFont.font, me.ticks, me.longestTextCache);\n\t\t\t\tvar tallestLabelHeightInLines = helpers.numberOfLabelLines(me.ticks);\n\t\t\t\tvar lineSpace = tickFont.size * 0.5;\n\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\t// A horizontal axis is more constrained by the height.\n\t\t\t\t\tme.longestLabelWidth = largestTextWidth;\n\n\t\t\t\t\tvar angleRadians = helpers.toRadians(me.labelRotation);\n\t\t\t\t\tvar cosRotation = Math.cos(angleRadians);\n\t\t\t\t\tvar sinRotation = Math.sin(angleRadians);\n\n\t\t\t\t\t// TODO - improve this calculation\n\t\t\t\t\tvar labelHeight = (sinRotation * largestTextWidth)\n\t\t\t\t\t\t+ (tickFont.size * tallestLabelHeightInLines)\n\t\t\t\t\t\t+ (lineSpace * tallestLabelHeightInLines);\n\n\t\t\t\t\tminSize.height = Math.min(me.maxHeight, minSize.height + labelHeight);\n\t\t\t\t\tme.ctx.font = tickFont.font;\n\n\t\t\t\t\tvar firstTick = me.ticks[0];\n\t\t\t\t\tvar firstLabelWidth = computeTextSize(me.ctx, firstTick, tickFont.font);\n\n\t\t\t\t\tvar lastTick = me.ticks[me.ticks.length - 1];\n\t\t\t\t\tvar lastLabelWidth = computeTextSize(me.ctx, lastTick, tickFont.font);\n\n\t\t\t\t\t// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned which means that the right padding is dominated\n\t\t\t\t\t// by the font height\n\t\t\t\t\tif (me.labelRotation !== 0) {\n\t\t\t\t\t\tme.paddingLeft = opts.position === 'bottom'? (cosRotation * firstLabelWidth) + 3: (cosRotation * lineSpace) + 3; // add 3 px to move away from canvas edges\n\t\t\t\t\t\tme.paddingRight = opts.position === 'bottom'? (cosRotation * lineSpace) + 3: (cosRotation * lastLabelWidth) + 3;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tme.paddingLeft = firstLabelWidth / 2 + 3; // add 3 px to move away from canvas edges\n\t\t\t\t\t\tme.paddingRight = lastLabelWidth / 2 + 3;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// A vertical axis is more constrained by the width. Labels are the dominant factor here, so get that length first\n\t\t\t\t\t// Account for padding\n\n\t\t\t\t\tif (tickOpts.mirror) {\n\t\t\t\t\t\tlargestTextWidth = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlargestTextWidth += me.options.ticks.padding;\n\t\t\t\t\t}\n\t\t\t\t\tminSize.width += largestTextWidth;\n\t\t\t\t\tme.paddingTop = tickFont.size / 2;\n\t\t\t\t\tme.paddingBottom = tickFont.size / 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tme.handleMargins();\n\n\t\t\tme.width = minSize.width;\n\t\t\tme.height = minSize.height;\n\t\t},\n\n\t\t/**\n\t\t * Handle margins and padding interactions\n\t\t * @private\n\t\t */\n\t\thandleMargins: function() {\n\t\t\tvar me = this;\n\t\t\tif (me.margins) {\n\t\t\t\tme.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);\n\t\t\t\tme.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);\n\t\t\t\tme.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);\n\t\t\t\tme.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);\n\t\t\t}\n\t\t},\n\n\t\tafterFit: function() {\n\t\t\thelpers.callCallback(this.options.afterFit, [this]);\n\t\t},\n\n\t\t// Shared Methods\n\t\tisHorizontal: function() {\n\t\t\treturn this.options.position === 'top' || this.options.position === 'bottom';\n\t\t},\n\t\tisFullWidth: function() {\n\t\t\treturn (this.options.fullWidth);\n\t\t},\n\n\t\t// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not\n\t\tgetRightValue: function(rawValue) {\n\t\t\t// Null and undefined values first\n\t\t\tif (rawValue === null || typeof(rawValue) === 'undefined') {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\t// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values\n\t\t\tif (typeof(rawValue) === 'number' && !isFinite(rawValue)) {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\t// If it is in fact an object, dive in one more level\n\t\t\tif (typeof(rawValue) === 'object') {\n\t\t\t\tif ((rawValue instanceof Date) || (rawValue.isValid)) {\n\t\t\t\t\treturn rawValue;\n\t\t\t\t}\n\t\t\t\treturn this.getRightValue(this.isHorizontal() ? rawValue.x : rawValue.y);\n\t\t\t}\n\n\t\t\t// Value is good, return it\n\t\t\treturn rawValue;\n\t\t},\n\n\t\t// Used to get the value to display in the tooltip for the data at the given index\n\t\t// function getLabelForIndex(index, datasetIndex)\n\t\tgetLabelForIndex: helpers.noop,\n\n\t\t// Used to get data value locations.  Value can either be an index or a numerical value\n\t\tgetPixelForValue: helpers.noop,\n\n\t\t// Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t\tgetValueForPixel: helpers.noop,\n\n\t\t// Used for tick location, should\n\t\tgetPixelForTick: function(index, includeOffset) {\n\t\t\tvar me = this;\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\tvar innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n\t\t\t\tvar tickWidth = innerWidth / Math.max((me.ticks.length - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);\n\t\t\t\tvar pixel = (tickWidth * index) + me.paddingLeft;\n\n\t\t\t\tif (includeOffset) {\n\t\t\t\t\tpixel += tickWidth / 2;\n\t\t\t\t}\n\n\t\t\t\tvar finalVal = me.left + Math.round(pixel);\n\t\t\t\tfinalVal += me.isFullWidth() ? me.margins.left : 0;\n\t\t\t\treturn finalVal;\n\t\t\t}\n\t\t\tvar innerHeight = me.height - (me.paddingTop + me.paddingBottom);\n\t\t\treturn me.top + (index * (innerHeight / (me.ticks.length - 1)));\n\t\t},\n\n\t\t// Utility for getting the pixel location of a percentage of scale\n\t\tgetPixelForDecimal: function(decimal /* , includeOffset*/) {\n\t\t\tvar me = this;\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\tvar innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n\t\t\t\tvar valueOffset = (innerWidth * decimal) + me.paddingLeft;\n\n\t\t\t\tvar finalVal = me.left + Math.round(valueOffset);\n\t\t\t\tfinalVal += me.isFullWidth() ? me.margins.left : 0;\n\t\t\t\treturn finalVal;\n\t\t\t}\n\t\t\treturn me.top + (decimal * me.height);\n\t\t},\n\n\t\tgetBasePixel: function() {\n\t\t\treturn this.getPixelForValue(this.getBaseValue());\n\t\t},\n\n\t\tgetBaseValue: function() {\n\t\t\tvar me = this;\n\t\t\tvar min = me.min;\n\t\t\tvar max = me.max;\n\n\t\t\treturn me.beginAtZero ? 0:\n\t\t\t\tmin < 0 && max < 0? max :\n\t\t\t\tmin > 0 && max > 0? min :\n\t\t\t\t0;\n\t\t},\n\n\t\t// Actually draw the scale on the canvas\n\t\t// @param {rectangle} chartArea : the area of the chart to draw full grid lines on\n\t\tdraw: function(chartArea) {\n\t\t\tvar me = this;\n\t\t\tvar options = me.options;\n\t\t\tif (!options.display) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar context = me.ctx;\n\t\t\tvar globalDefaults = Chart.defaults.global;\n\t\t\tvar optionTicks = options.ticks;\n\t\t\tvar gridLines = options.gridLines;\n\t\t\tvar scaleLabel = options.scaleLabel;\n\n\t\t\tvar isRotated = me.labelRotation !== 0;\n\t\t\tvar skipRatio;\n\t\t\tvar useAutoskipper = optionTicks.autoSkip;\n\t\t\tvar isHorizontal = me.isHorizontal();\n\n\t\t\t// figure out the maximum number of gridlines to show\n\t\t\tvar maxTicks;\n\t\t\tif (optionTicks.maxTicksLimit) {\n\t\t\t\tmaxTicks = optionTicks.maxTicksLimit;\n\t\t\t}\n\n\t\t\tvar tickFontColor = helpers.getValueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);\n\t\t\tvar tickFont = parseFontOptions(optionTicks);\n\n\t\t\tvar tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;\n\t\t\tvar borderDash = helpers.getValueOrDefault(gridLines.borderDash, globalDefaults.borderDash);\n\t\t\tvar borderDashOffset = helpers.getValueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);\n\n\t\t\tvar scaleLabelFontColor = helpers.getValueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);\n\t\t\tvar scaleLabelFont = parseFontOptions(scaleLabel);\n\n\t\t\tvar labelRotationRadians = helpers.toRadians(me.labelRotation);\n\t\t\tvar cosRotation = Math.cos(labelRotationRadians);\n\t\t\tvar longestRotatedLabel = me.longestLabelWidth * cosRotation;\n\n\t\t\t// Make sure we draw text in the correct color and font\n\t\t\tcontext.fillStyle = tickFontColor;\n\n\t\t\tvar itemsToDraw = [];\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tskipRatio = false;\n\n\t\t\t\t// Only calculate the skip ratio with the half width of longestRotateLabel if we got an actual rotation\n\t\t\t\t// See #2584\n\t\t\t\tif (isRotated) {\n\t\t\t\t\tlongestRotatedLabel /= 2;\n\t\t\t\t}\n\n\t\t\t\tif ((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length > (me.width - (me.paddingLeft + me.paddingRight))) {\n\t\t\t\t\tskipRatio = 1 + Math.floor(((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length) / (me.width - (me.paddingLeft + me.paddingRight)));\n\t\t\t\t}\n\n\t\t\t\t// if they defined a max number of optionTicks,\n\t\t\t\t// increase skipRatio until that number is met\n\t\t\t\tif (maxTicks && me.ticks.length > maxTicks) {\n\t\t\t\t\twhile (!skipRatio || me.ticks.length / (skipRatio || 1) > maxTicks) {\n\t\t\t\t\t\tif (!skipRatio) {\n\t\t\t\t\t\t\tskipRatio = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tskipRatio += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!useAutoskipper) {\n\t\t\t\t\tskipRatio = false;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tvar xTickStart = options.position === 'right' ? me.left : me.right - tl;\n\t\t\tvar xTickEnd = options.position === 'right' ? me.left + tl : me.right;\n\t\t\tvar yTickStart = options.position === 'bottom' ? me.top : me.bottom - tl;\n\t\t\tvar yTickEnd = options.position === 'bottom' ? me.top + tl : me.bottom;\n\n\t\t\thelpers.each(me.ticks, function(label, index) {\n\t\t\t\t// If the callback returned a null or undefined value, do not draw this line\n\t\t\t\tif (label === undefined || label === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar isLastTick = me.ticks.length === index + 1;\n\n\t\t\t\t// Since we always show the last tick,we need may need to hide the last shown one before\n\t\t\t\tvar shouldSkip = (skipRatio > 1 && index % skipRatio > 0) || (index % skipRatio === 0 && index + skipRatio >= me.ticks.length);\n\t\t\t\tif (shouldSkip && !isLastTick || (label === undefined || label === null)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar lineWidth, lineColor;\n\t\t\t\tif (index === (typeof me.zeroLineIndex !== 'undefined' ? me.zeroLineIndex : 0)) {\n\t\t\t\t\t// Draw the first index specially\n\t\t\t\t\tlineWidth = gridLines.zeroLineWidth;\n\t\t\t\t\tlineColor = gridLines.zeroLineColor;\n\t\t\t\t} else {\n\t\t\t\t\tlineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, index);\n\t\t\t\t\tlineColor = helpers.getValueAtIndexOrDefault(gridLines.color, index);\n\t\t\t\t}\n\n\t\t\t\t// Common properties\n\t\t\t\tvar tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;\n\t\t\t\tvar textAlign = 'middle';\n\t\t\t\tvar textBaseline = 'middle';\n\n\t\t\t\tif (isHorizontal) {\n\n\t\t\t\t\tif (options.position === 'bottom') {\n\t\t\t\t\t\t// bottom\n\t\t\t\t\t\ttextBaseline = !isRotated? 'top':'middle';\n\t\t\t\t\t\ttextAlign = !isRotated? 'center': 'right';\n\t\t\t\t\t\tlabelY = me.top + tl;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// top\n\t\t\t\t\t\ttextBaseline = !isRotated? 'bottom':'middle';\n\t\t\t\t\t\ttextAlign = !isRotated? 'center': 'left';\n\t\t\t\t\t\tlabelY = me.bottom - tl;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar xLineValue = me.getPixelForTick(index) + helpers.aliasPixel(lineWidth); // xvalues for grid lines\n\t\t\t\t\tlabelX = me.getPixelForTick(index, gridLines.offsetGridLines) + optionTicks.labelOffset; // x values for optionTicks (need to consider offsetLabel option)\n\n\t\t\t\t\ttx1 = tx2 = x1 = x2 = xLineValue;\n\t\t\t\t\tty1 = yTickStart;\n\t\t\t\t\tty2 = yTickEnd;\n\t\t\t\t\ty1 = chartArea.top;\n\t\t\t\t\ty2 = chartArea.bottom;\n\t\t\t\t} else {\n\t\t\t\t\tvar isLeft = options.position === 'left';\n\t\t\t\t\tvar tickPadding = optionTicks.padding;\n\t\t\t\t\tvar labelXOffset;\n\n\t\t\t\t\tif (optionTicks.mirror) {\n\t\t\t\t\t\ttextAlign = isLeft ? 'left' : 'right';\n\t\t\t\t\t\tlabelXOffset = tickPadding;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttextAlign = isLeft ? 'right' : 'left';\n\t\t\t\t\t\tlabelXOffset = tl + tickPadding;\n\t\t\t\t\t}\n\n\t\t\t\t\tlabelX = isLeft ? me.right - labelXOffset : me.left + labelXOffset;\n\n\t\t\t\t\tvar yLineValue = me.getPixelForTick(index); // xvalues for grid lines\n\t\t\t\t\tyLineValue += helpers.aliasPixel(lineWidth);\n\t\t\t\t\tlabelY = me.getPixelForTick(index, gridLines.offsetGridLines);\n\n\t\t\t\t\ttx1 = xTickStart;\n\t\t\t\t\ttx2 = xTickEnd;\n\t\t\t\t\tx1 = chartArea.left;\n\t\t\t\t\tx2 = chartArea.right;\n\t\t\t\t\tty1 = ty2 = y1 = y2 = yLineValue;\n\t\t\t\t}\n\n\t\t\t\titemsToDraw.push({\n\t\t\t\t\ttx1: tx1,\n\t\t\t\t\tty1: ty1,\n\t\t\t\t\ttx2: tx2,\n\t\t\t\t\tty2: ty2,\n\t\t\t\t\tx1: x1,\n\t\t\t\t\ty1: y1,\n\t\t\t\t\tx2: x2,\n\t\t\t\t\ty2: y2,\n\t\t\t\t\tlabelX: labelX,\n\t\t\t\t\tlabelY: labelY,\n\t\t\t\t\tglWidth: lineWidth,\n\t\t\t\t\tglColor: lineColor,\n\t\t\t\t\tglBorderDash: borderDash,\n\t\t\t\t\tglBorderDashOffset: borderDashOffset,\n\t\t\t\t\trotation: -1 * labelRotationRadians,\n\t\t\t\t\tlabel: label,\n\t\t\t\t\ttextBaseline: textBaseline,\n\t\t\t\t\ttextAlign: textAlign\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Draw all of the tick labels, tick marks, and grid lines at the correct places\n\t\t\thelpers.each(itemsToDraw, function(itemToDraw) {\n\t\t\t\tif (gridLines.display) {\n\t\t\t\t\tcontext.save();\n\t\t\t\t\tcontext.lineWidth = itemToDraw.glWidth;\n\t\t\t\t\tcontext.strokeStyle = itemToDraw.glColor;\n\t\t\t\t\tif (context.setLineDash) {\n\t\t\t\t\t\tcontext.setLineDash(itemToDraw.glBorderDash);\n\t\t\t\t\t\tcontext.lineDashOffset = itemToDraw.glBorderDashOffset;\n\t\t\t\t\t}\n\n\t\t\t\t\tcontext.beginPath();\n\n\t\t\t\t\tif (gridLines.drawTicks) {\n\t\t\t\t\t\tcontext.moveTo(itemToDraw.tx1, itemToDraw.ty1);\n\t\t\t\t\t\tcontext.lineTo(itemToDraw.tx2, itemToDraw.ty2);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (gridLines.drawOnChartArea) {\n\t\t\t\t\t\tcontext.moveTo(itemToDraw.x1, itemToDraw.y1);\n\t\t\t\t\t\tcontext.lineTo(itemToDraw.x2, itemToDraw.y2);\n\t\t\t\t\t}\n\n\t\t\t\t\tcontext.stroke();\n\t\t\t\t\tcontext.restore();\n\t\t\t\t}\n\n\t\t\t\tif (optionTicks.display) {\n\t\t\t\t\tcontext.save();\n\t\t\t\t\tcontext.translate(itemToDraw.labelX, itemToDraw.labelY);\n\t\t\t\t\tcontext.rotate(itemToDraw.rotation);\n\t\t\t\t\tcontext.font = tickFont.font;\n\t\t\t\t\tcontext.textBaseline = itemToDraw.textBaseline;\n\t\t\t\t\tcontext.textAlign = itemToDraw.textAlign;\n\n\t\t\t\t\tvar label = itemToDraw.label;\n\t\t\t\t\tif (helpers.isArray(label)) {\n\t\t\t\t\t\tfor (var i = 0, y = 0; i < label.length; ++i) {\n\t\t\t\t\t\t\t// We just make sure the multiline element is a string here..\n\t\t\t\t\t\t\tcontext.fillText('' + label[i], 0, y);\n\t\t\t\t\t\t\t// apply same lineSpacing as calculated @ L#320\n\t\t\t\t\t\t\ty += (tickFont.size * 1.5);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.fillText(label, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t\tcontext.restore();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (scaleLabel.display) {\n\t\t\t\t// Draw the scale label\n\t\t\t\tvar scaleLabelX;\n\t\t\t\tvar scaleLabelY;\n\t\t\t\tvar rotation = 0;\n\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\tscaleLabelX = me.left + ((me.right - me.left) / 2); // midpoint of the width\n\t\t\t\t\tscaleLabelY = options.position === 'bottom' ? me.bottom - (scaleLabelFont.size / 2) : me.top + (scaleLabelFont.size / 2);\n\t\t\t\t} else {\n\t\t\t\t\tvar isLeft = options.position === 'left';\n\t\t\t\t\tscaleLabelX = isLeft ? me.left + (scaleLabelFont.size / 2) : me.right - (scaleLabelFont.size / 2);\n\t\t\t\t\tscaleLabelY = me.top + ((me.bottom - me.top) / 2);\n\t\t\t\t\trotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;\n\t\t\t\t}\n\n\t\t\t\tcontext.save();\n\t\t\t\tcontext.translate(scaleLabelX, scaleLabelY);\n\t\t\t\tcontext.rotate(rotation);\n\t\t\t\tcontext.textAlign = 'center';\n\t\t\t\tcontext.textBaseline = 'middle';\n\t\t\t\tcontext.fillStyle = scaleLabelFontColor; // render in correct colour\n\t\t\t\tcontext.font = scaleLabelFont.font;\n\t\t\t\tcontext.fillText(scaleLabel.labelString, 0, 0);\n\t\t\t\tcontext.restore();\n\t\t\t}\n\n\t\t\tif (gridLines.drawBorder) {\n\t\t\t\t// Draw the line at the edge of the axis\n\t\t\t\tcontext.lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, 0);\n\t\t\t\tcontext.strokeStyle = helpers.getValueAtIndexOrDefault(gridLines.color, 0);\n\t\t\t\tvar x1 = me.left,\n\t\t\t\t\tx2 = me.right,\n\t\t\t\t\ty1 = me.top,\n\t\t\t\t\ty2 = me.bottom;\n\n\t\t\t\tvar aliasPixel = helpers.aliasPixel(context.lineWidth);\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\ty1 = y2 = options.position === 'top' ? me.bottom : me.top;\n\t\t\t\t\ty1 += aliasPixel;\n\t\t\t\t\ty2 += aliasPixel;\n\t\t\t\t} else {\n\t\t\t\t\tx1 = x2 = options.position === 'left' ? me.right : me.left;\n\t\t\t\t\tx1 += aliasPixel;\n\t\t\t\t\tx2 += aliasPixel;\n\t\t\t\t}\n\n\t\t\t\tcontext.beginPath();\n\t\t\t\tcontext.moveTo(x1, y1);\n\t\t\t\tcontext.lineTo(x2, y2);\n\t\t\t\tcontext.stroke();\n\t\t\t}\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.scale.js\n// module id = 600\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tChart.scaleService = {\n\t\t// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n\t\t// use the new chart options to grab the correct scale\n\t\tconstructors: {},\n\t\t// Use a registration function so that we can move to an ES6 map when we no longer need to support\n\t\t// old browsers\n\n\t\t// Scale config defaults\n\t\tdefaults: {},\n\t\tregisterScaleType: function(type, scaleConstructor, defaults) {\n\t\t\tthis.constructors[type] = scaleConstructor;\n\t\t\tthis.defaults[type] = helpers.clone(defaults);\n\t\t},\n\t\tgetScaleConstructor: function(type) {\n\t\t\treturn this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n\t\t},\n\t\tgetScaleDefaults: function(type) {\n\t\t\t// Return the scale defaults merged with the global settings so that we always use the latest ones\n\t\t\treturn this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};\n\t\t},\n\t\tupdateScaleDefaults: function(type, additions) {\n\t\t\tvar defaults = this.defaults;\n\t\t\tif (defaults.hasOwnProperty(type)) {\n\t\t\t\tdefaults[type] = helpers.extend(defaults[type], additions);\n\t\t\t}\n\t\t},\n\t\taddScalesToLayout: function(chartInstance) {\n\t\t\t// Adds each scale to the chart.boxes array to be sized accordingly\n\t\t\thelpers.each(chartInstance.scales, function(scale) {\n\t\t\t\tChart.layoutService.addBox(chartInstance, scale);\n\t\t\t});\n\t\t}\n\t};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.scaleService.js\n// module id = 601\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\t/**\n\t * Namespace to hold static tick generation functions\n\t * @namespace Chart.Ticks\n\t */\n\tChart.Ticks = {\n\t\t/**\n\t\t * Namespace to hold generators for different types of ticks\n\t\t * @namespace Chart.Ticks.generators\n\t\t */\n\t\tgenerators: {\n\t\t\t/**\n\t\t\t * Interface for the options provided to the numeric tick generator\n\t\t\t * @interface INumericTickGenerationOptions\n\t\t\t */\n\t\t\t/**\n\t\t\t * The maximum number of ticks to display\n\t\t\t * @name INumericTickGenerationOptions#maxTicks\n\t\t\t * @type Number\n\t\t\t */\n\t\t\t/**\n\t\t\t * The distance between each tick.\n\t\t\t * @name INumericTickGenerationOptions#stepSize\n\t\t\t * @type Number\n\t\t\t * @optional\n\t\t\t */\n\t\t\t/**\n\t\t\t * Forced minimum for the ticks. If not specified, the minimum of the data range is used to calculate the tick minimum\n\t\t\t * @name INumericTickGenerationOptions#min\n\t\t\t * @type Number\n\t\t\t * @optional\n\t\t\t */\n\t\t\t/**\n\t\t\t * The maximum value of the ticks. If not specified, the maximum of the data range is used to calculate the tick maximum\n\t\t\t * @name INumericTickGenerationOptions#max\n\t\t\t * @type Number\n\t\t\t * @optional\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Generate a set of linear ticks\n\t\t\t * @method Chart.Ticks.generators.linear\n\t\t\t * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks\n\t\t\t * @param dataRange {IRange} the range of the data\n\t\t\t * @returns {Array<Number>} array of tick values\n\t\t\t */\n\t\t\tlinear: function(generationOptions, dataRange) {\n\t\t\t\tvar ticks = [];\n\t\t\t\t// To get a \"nice\" value for the tick spacing, we will use the appropriately named\n\t\t\t\t// \"nice number\" algorithm. See http://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n\t\t\t\t// for details.\n\n\t\t\t\tvar spacing;\n\t\t\t\tif (generationOptions.stepSize && generationOptions.stepSize > 0) {\n\t\t\t\t\tspacing = generationOptions.stepSize;\n\t\t\t\t} else {\n\t\t\t\t\tvar niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);\n\t\t\t\t\tspacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);\n\t\t\t\t}\n\t\t\t\tvar niceMin = Math.floor(dataRange.min / spacing) * spacing;\n\t\t\t\tvar niceMax = Math.ceil(dataRange.max / spacing) * spacing;\n\n\t\t\t\t// If min, max and stepSize is set and they make an evenly spaced scale use it.\n\t\t\t\tif (generationOptions.min && generationOptions.max && generationOptions.stepSize) {\n\t\t\t\t\t// If very close to our whole number, use it.\n\t\t\t\t\tif (helpers.almostWhole((generationOptions.max - generationOptions.min) / generationOptions.stepSize, spacing / 1000)) {\n\t\t\t\t\t\tniceMin = generationOptions.min;\n\t\t\t\t\t\tniceMax = generationOptions.max;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar numSpaces = (niceMax - niceMin) / spacing;\n\t\t\t\t// If very close to our rounded value, use it.\n\t\t\t\tif (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n\t\t\t\t\tnumSpaces = Math.round(numSpaces);\n\t\t\t\t} else {\n\t\t\t\t\tnumSpaces = Math.ceil(numSpaces);\n\t\t\t\t}\n\n\t\t\t\t// Put the values into the ticks array\n\t\t\t\tticks.push(generationOptions.min !== undefined ? generationOptions.min : niceMin);\n\t\t\t\tfor (var j = 1; j < numSpaces; ++j) {\n\t\t\t\t\tticks.push(niceMin + (j * spacing));\n\t\t\t\t}\n\t\t\t\tticks.push(generationOptions.max !== undefined ? generationOptions.max : niceMax);\n\n\t\t\t\treturn ticks;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Generate a set of logarithmic ticks\n\t\t\t * @method Chart.Ticks.generators.logarithmic\n\t\t\t * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks\n\t\t\t * @param dataRange {IRange} the range of the data\n\t\t\t * @returns {Array<Number>} array of tick values\n\t\t\t */\n\t\t\tlogarithmic: function(generationOptions, dataRange) {\n\t\t\t\tvar ticks = [];\n\t\t\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\n\t\t\t\t// Figure out what the max number of ticks we can support it is based on the size of\n\t\t\t\t// the axis area. For now, we say that the minimum tick spacing in pixels must be 50\n\t\t\t\t// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n\t\t\t\t// the graph\n\t\t\t\tvar tickVal = getValueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));\n\n\t\t\t\tvar endExp = Math.floor(helpers.log10(dataRange.max));\n\t\t\t\tvar endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n\t\t\t\tvar exp;\n\t\t\t\tvar significand;\n\n\t\t\t\tif (tickVal === 0) {\n\t\t\t\t\texp = Math.floor(helpers.log10(dataRange.minNotZero));\n\t\t\t\t\tsignificand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));\n\n\t\t\t\t\tticks.push(tickVal);\n\t\t\t\t\ttickVal = significand * Math.pow(10, exp);\n\t\t\t\t} else {\n\t\t\t\t\texp = Math.floor(helpers.log10(tickVal));\n\t\t\t\t\tsignificand = Math.floor(tickVal / Math.pow(10, exp));\n\t\t\t\t}\n\n\t\t\t\tdo {\n\t\t\t\t\tticks.push(tickVal);\n\n\t\t\t\t\t++significand;\n\t\t\t\t\tif (significand === 10) {\n\t\t\t\t\t\tsignificand = 1;\n\t\t\t\t\t\t++exp;\n\t\t\t\t\t}\n\n\t\t\t\t\ttickVal = significand * Math.pow(10, exp);\n\t\t\t\t} while (exp < endExp || (exp === endExp && significand < endSignificand));\n\n\t\t\t\tvar lastTick = getValueOrDefault(generationOptions.max, tickVal);\n\t\t\t\tticks.push(lastTick);\n\n\t\t\t\treturn ticks;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Namespace to hold formatters for different types of ticks\n\t\t * @namespace Chart.Ticks.formatters\n\t\t */\n\t\tformatters: {\n\t\t\t/**\n\t\t\t * Formatter for value labels\n\t\t\t * @method Chart.Ticks.formatters.values\n\t\t\t * @param value the value to display\n\t\t\t * @return {String|Array} the label to display\n\t\t\t */\n\t\t\tvalues: function(value) {\n\t\t\t\treturn helpers.isArray(value) ? value : '' + value;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Formatter for linear numeric ticks\n\t\t\t * @method Chart.Ticks.formatters.linear\n\t\t\t * @param tickValue {Number} the value to be formatted\n\t\t\t * @param index {Number} the position of the tickValue parameter in the ticks array\n\t\t\t * @param ticks {Array<Number>} the list of ticks being converted\n\t\t\t * @return {String} string representation of the tickValue parameter\n\t\t\t */\n\t\t\tlinear: function(tickValue, index, ticks) {\n\t\t\t\t// If we have lots of ticks, don't use the ones\n\t\t\t\tvar delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];\n\n\t\t\t\t// If we have a number like 2.5 as the delta, figure out how many decimal places we need\n\t\t\t\tif (Math.abs(delta) > 1) {\n\t\t\t\t\tif (tickValue !== Math.floor(tickValue)) {\n\t\t\t\t\t\t// not an integer\n\t\t\t\t\t\tdelta = tickValue - Math.floor(tickValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar logDelta = helpers.log10(Math.abs(delta));\n\t\t\t\tvar tickString = '';\n\n\t\t\t\tif (tickValue !== 0) {\n\t\t\t\t\tvar numDecimal = -1 * Math.floor(logDelta);\n\t\t\t\t\tnumDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places\n\t\t\t\t\ttickString = tickValue.toFixed(numDecimal);\n\t\t\t\t} else {\n\t\t\t\t\ttickString = '0'; // never show decimal places for 0\n\t\t\t\t}\n\n\t\t\t\treturn tickString;\n\t\t\t},\n\n\t\t\tlogarithmic: function(tickValue, index, ticks) {\n\t\t\t\tvar remain = tickValue / (Math.pow(10, Math.floor(helpers.log10(tickValue))));\n\n\t\t\t\tif (tickValue === 0) {\n\t\t\t\t\treturn '0';\n\t\t\t\t} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {\n\t\t\t\t\treturn tickValue.toExponential();\n\t\t\t\t}\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\t};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.ticks.js\n// module id = 602\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tChart.defaults.global.title = {\n\t\tdisplay: false,\n\t\tposition: 'top',\n\t\tfullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)\n\n\t\tfontStyle: 'bold',\n\t\tpadding: 10,\n\n\t\t// actual title\n\t\ttext: ''\n\t};\n\n\tvar noop = helpers.noop;\n\tChart.Title = Chart.Element.extend({\n\n\t\tinitialize: function(config) {\n\t\t\tvar me = this;\n\t\t\thelpers.extend(me, config);\n\n\t\t\t// Contains hit boxes for each dataset (in dataset order)\n\t\t\tme.legendHitBoxes = [];\n\t\t},\n\n\t\t// These methods are ordered by lifecycle. Utilities then follow.\n\n\t\tbeforeUpdate: noop,\n\t\tupdate: function(maxWidth, maxHeight, margins) {\n\t\t\tvar me = this;\n\n\t\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\t\tme.beforeUpdate();\n\n\t\t\t// Absorb the master measurements\n\t\t\tme.maxWidth = maxWidth;\n\t\t\tme.maxHeight = maxHeight;\n\t\t\tme.margins = margins;\n\n\t\t\t// Dimensions\n\t\t\tme.beforeSetDimensions();\n\t\t\tme.setDimensions();\n\t\t\tme.afterSetDimensions();\n\t\t\t// Labels\n\t\t\tme.beforeBuildLabels();\n\t\t\tme.buildLabels();\n\t\t\tme.afterBuildLabels();\n\n\t\t\t// Fit\n\t\t\tme.beforeFit();\n\t\t\tme.fit();\n\t\t\tme.afterFit();\n\t\t\t//\n\t\t\tme.afterUpdate();\n\n\t\t\treturn me.minSize;\n\n\t\t},\n\t\tafterUpdate: noop,\n\n\t\t//\n\n\t\tbeforeSetDimensions: noop,\n\t\tsetDimensions: function() {\n\t\t\tvar me = this;\n\t\t\t// Set the unconstrained dimension before label rotation\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\t// Reset position before calculating rotation\n\t\t\t\tme.width = me.maxWidth;\n\t\t\t\tme.left = 0;\n\t\t\t\tme.right = me.width;\n\t\t\t} else {\n\t\t\t\tme.height = me.maxHeight;\n\n\t\t\t\t// Reset position before calculating rotation\n\t\t\t\tme.top = 0;\n\t\t\t\tme.bottom = me.height;\n\t\t\t}\n\n\t\t\t// Reset padding\n\t\t\tme.paddingLeft = 0;\n\t\t\tme.paddingTop = 0;\n\t\t\tme.paddingRight = 0;\n\t\t\tme.paddingBottom = 0;\n\n\t\t\t// Reset minSize\n\t\t\tme.minSize = {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t};\n\t\t},\n\t\tafterSetDimensions: noop,\n\n\t\t//\n\n\t\tbeforeBuildLabels: noop,\n\t\tbuildLabels: noop,\n\t\tafterBuildLabels: noop,\n\n\t\t//\n\n\t\tbeforeFit: noop,\n\t\tfit: function() {\n\t\t\tvar me = this,\n\t\t\t\tvalueOrDefault = helpers.getValueOrDefault,\n\t\t\t\topts = me.options,\n\t\t\t\tglobalDefaults = Chart.defaults.global,\n\t\t\t\tdisplay = opts.display,\n\t\t\t\tfontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),\n\t\t\t\tminSize = me.minSize;\n\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\tminSize.width = me.maxWidth; // fill all the width\n\t\t\t\tminSize.height = display ? fontSize + (opts.padding * 2) : 0;\n\t\t\t} else {\n\t\t\t\tminSize.width = display ? fontSize + (opts.padding * 2) : 0;\n\t\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t\t}\n\n\t\t\tme.width = minSize.width;\n\t\t\tme.height = minSize.height;\n\n\t\t},\n\t\tafterFit: noop,\n\n\t\t// Shared Methods\n\t\tisHorizontal: function() {\n\t\t\tvar pos = this.options.position;\n\t\t\treturn pos === 'top' || pos === 'bottom';\n\t\t},\n\n\t\t// Actually draw the title block on the canvas\n\t\tdraw: function() {\n\t\t\tvar me = this,\n\t\t\t\tctx = me.ctx,\n\t\t\t\tvalueOrDefault = helpers.getValueOrDefault,\n\t\t\t\topts = me.options,\n\t\t\t\tglobalDefaults = Chart.defaults.global;\n\n\t\t\tif (opts.display) {\n\t\t\t\tvar fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),\n\t\t\t\t\tfontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle),\n\t\t\t\t\tfontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily),\n\t\t\t\t\ttitleFont = helpers.fontString(fontSize, fontStyle, fontFamily),\n\t\t\t\t\trotation = 0,\n\t\t\t\t\ttitleX,\n\t\t\t\t\ttitleY,\n\t\t\t\t\ttop = me.top,\n\t\t\t\t\tleft = me.left,\n\t\t\t\t\tbottom = me.bottom,\n\t\t\t\t\tright = me.right,\n\t\t\t\t\tmaxWidth;\n\n\t\t\t\tctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor); // render in correct colour\n\t\t\t\tctx.font = titleFont;\n\n\t\t\t\t// Horizontal\n\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\ttitleX = left + ((right - left) / 2); // midpoint of the width\n\t\t\t\t\ttitleY = top + ((bottom - top) / 2); // midpoint of the height\n\t\t\t\t\tmaxWidth = right - left;\n\t\t\t\t} else {\n\t\t\t\t\ttitleX = opts.position === 'left' ? left + (fontSize / 2) : right - (fontSize / 2);\n\t\t\t\t\ttitleY = top + ((bottom - top) / 2);\n\t\t\t\t\tmaxWidth = bottom - top;\n\t\t\t\t\trotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);\n\t\t\t\t}\n\n\t\t\t\tctx.save();\n\t\t\t\tctx.translate(titleX, titleY);\n\t\t\t\tctx.rotate(rotation);\n\t\t\t\tctx.textAlign = 'center';\n\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\tctx.fillText(opts.text, 0, 0, maxWidth);\n\t\t\t\tctx.restore();\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction createNewTitleBlockAndAttach(chartInstance, titleOpts) {\n\t\tvar title = new Chart.Title({\n\t\t\tctx: chartInstance.chart.ctx,\n\t\t\toptions: titleOpts,\n\t\t\tchart: chartInstance\n\t\t});\n\t\tchartInstance.titleBlock = title;\n\t\tChart.layoutService.addBox(chartInstance, title);\n\t}\n\n\t// Register the title plugin\n\tChart.plugins.register({\n\t\tbeforeInit: function(chartInstance) {\n\t\t\tvar titleOpts = chartInstance.options.title;\n\n\t\t\tif (titleOpts) {\n\t\t\t\tcreateNewTitleBlockAndAttach(chartInstance, titleOpts);\n\t\t\t}\n\t\t},\n\t\tbeforeUpdate: function(chartInstance) {\n\t\t\tvar titleOpts = chartInstance.options.title;\n\n\t\t\tif (titleOpts) {\n\t\t\t\ttitleOpts = helpers.configMerge(Chart.defaults.global.title, titleOpts);\n\n\t\t\t\tif (chartInstance.titleBlock) {\n\t\t\t\t\tchartInstance.titleBlock.options = titleOpts;\n\t\t\t\t} else {\n\t\t\t\t\tcreateNewTitleBlockAndAttach(chartInstance, titleOpts);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tChart.layoutService.removeBox(chartInstance, chartInstance.titleBlock);\n\t\t\t\tdelete chartInstance.titleBlock;\n\t\t\t}\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.title.js\n// module id = 603\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\t/**\n \t * Helper method to merge the opacity into a color\n \t */\n\tfunction mergeOpacity(colorString, opacity) {\n\t\tvar color = helpers.color(colorString);\n\t\treturn color.alpha(opacity * color.alpha()).rgbaString();\n\t}\n\n\tChart.defaults.global.tooltips = {\n\t\tenabled: true,\n\t\tcustom: null,\n\t\tmode: 'nearest',\n\t\tposition: 'average',\n\t\tintersect: true,\n\t\tbackgroundColor: 'rgba(0,0,0,0.8)',\n\t\ttitleFontStyle: 'bold',\n\t\ttitleSpacing: 2,\n\t\ttitleMarginBottom: 6,\n\t\ttitleFontColor: '#fff',\n\t\ttitleAlign: 'left',\n\t\tbodySpacing: 2,\n\t\tbodyFontColor: '#fff',\n\t\tbodyAlign: 'left',\n\t\tfooterFontStyle: 'bold',\n\t\tfooterSpacing: 2,\n\t\tfooterMarginTop: 6,\n\t\tfooterFontColor: '#fff',\n\t\tfooterAlign: 'left',\n\t\tyPadding: 6,\n\t\txPadding: 6,\n\t\tcaretSize: 5,\n\t\tcornerRadius: 6,\n\t\tmultiKeyBackground: '#fff',\n\t\tdisplayColors: true,\n\t\tcallbacks: {\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeTitle: helpers.noop,\n\t\t\ttitle: function(tooltipItems, data) {\n\t\t\t\t// Pick first xLabel for now\n\t\t\t\tvar title = '';\n\t\t\t\tvar labels = data.labels;\n\t\t\t\tvar labelCount = labels ? labels.length : 0;\n\n\t\t\t\tif (tooltipItems.length > 0) {\n\t\t\t\t\tvar item = tooltipItems[0];\n\n\t\t\t\t\tif (item.xLabel) {\n\t\t\t\t\t\ttitle = item.xLabel;\n\t\t\t\t\t} else if (labelCount > 0 && item.index < labelCount) {\n\t\t\t\t\t\ttitle = labels[item.index];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn title;\n\t\t\t},\n\t\t\tafterTitle: helpers.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeBody: helpers.noop,\n\n\t\t\t// Args are: (tooltipItem, data)\n\t\t\tbeforeLabel: helpers.noop,\n\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\tvar datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';\n\t\t\t\treturn datasetLabel + ': ' + tooltipItem.yLabel;\n\t\t\t},\n\t\t\tlabelColor: function(tooltipItem, chartInstance) {\n\t\t\t\tvar meta = chartInstance.getDatasetMeta(tooltipItem.datasetIndex);\n\t\t\t\tvar activeElement = meta.data[tooltipItem.index];\n\t\t\t\tvar view = activeElement._view;\n\t\t\t\treturn {\n\t\t\t\t\tborderColor: view.borderColor,\n\t\t\t\t\tbackgroundColor: view.backgroundColor\n\t\t\t\t};\n\t\t\t},\n\t\t\tafterLabel: helpers.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tafterBody: helpers.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeFooter: helpers.noop,\n\t\t\tfooter: helpers.noop,\n\t\t\tafterFooter: helpers.noop\n\t\t}\n\t};\n\n\t// Helper to push or concat based on if the 2nd parameter is an array or not\n\tfunction pushOrConcat(base, toPush) {\n\t\tif (toPush) {\n\t\t\tif (helpers.isArray(toPush)) {\n\t\t\t\t// base = base.concat(toPush);\n\t\t\t\tArray.prototype.push.apply(base, toPush);\n\t\t\t} else {\n\t\t\t\tbase.push(toPush);\n\t\t\t}\n\t\t}\n\n\t\treturn base;\n\t}\n\n\t// Private helper to create a tooltip item model\n\t// @param element : the chart element (point, arc, bar) to create the tooltip item for\n\t// @return : new tooltip item\n\tfunction createTooltipItem(element) {\n\t\tvar xScale = element._xScale;\n\t\tvar yScale = element._yScale || element._scale; // handle radar || polarArea charts\n\t\tvar index = element._index,\n\t\t\tdatasetIndex = element._datasetIndex;\n\n\t\treturn {\n\t\t\txLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',\n\t\t\tyLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',\n\t\t\tindex: index,\n\t\t\tdatasetIndex: datasetIndex,\n\t\t\tx: element._model.x,\n\t\t\ty: element._model.y\n\t\t};\n\t}\n\n\t/**\n\t * Helper to get the reset model for the tooltip\n\t * @param tooltipOpts {Object} the tooltip options\n\t */\n\tfunction getBaseModel(tooltipOpts) {\n\t\tvar globalDefaults = Chart.defaults.global;\n\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\n\t\treturn {\n\t\t\t// Positioning\n\t\t\txPadding: tooltipOpts.xPadding,\n\t\t\tyPadding: tooltipOpts.yPadding,\n\t\t\txAlign: tooltipOpts.xAlign,\n\t\t\tyAlign: tooltipOpts.yAlign,\n\n\t\t\t// Body\n\t\t\tbodyFontColor: tooltipOpts.bodyFontColor,\n\t\t\t_bodyFontFamily: getValueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),\n\t\t\t_bodyFontStyle: getValueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),\n\t\t\t_bodyAlign: tooltipOpts.bodyAlign,\n\t\t\tbodyFontSize: getValueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),\n\t\t\tbodySpacing: tooltipOpts.bodySpacing,\n\n\t\t\t// Title\n\t\t\ttitleFontColor: tooltipOpts.titleFontColor,\n\t\t\t_titleFontFamily: getValueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),\n\t\t\t_titleFontStyle: getValueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),\n\t\t\ttitleFontSize: getValueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),\n\t\t\t_titleAlign: tooltipOpts.titleAlign,\n\t\t\ttitleSpacing: tooltipOpts.titleSpacing,\n\t\t\ttitleMarginBottom: tooltipOpts.titleMarginBottom,\n\n\t\t\t// Footer\n\t\t\tfooterFontColor: tooltipOpts.footerFontColor,\n\t\t\t_footerFontFamily: getValueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),\n\t\t\t_footerFontStyle: getValueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),\n\t\t\tfooterFontSize: getValueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),\n\t\t\t_footerAlign: tooltipOpts.footerAlign,\n\t\t\tfooterSpacing: tooltipOpts.footerSpacing,\n\t\t\tfooterMarginTop: tooltipOpts.footerMarginTop,\n\n\t\t\t// Appearance\n\t\t\tcaretSize: tooltipOpts.caretSize,\n\t\t\tcornerRadius: tooltipOpts.cornerRadius,\n\t\t\tbackgroundColor: tooltipOpts.backgroundColor,\n\t\t\topacity: 0,\n\t\t\tlegendColorBackground: tooltipOpts.multiKeyBackground,\n\t\t\tdisplayColors: tooltipOpts.displayColors\n\t\t};\n\t}\n\n\t/**\n\t * Get the size of the tooltip\n\t */\n\tfunction getTooltipSize(tooltip, model) {\n\t\tvar ctx = tooltip._chart.ctx;\n\n\t\tvar height = model.yPadding * 2; // Tooltip Padding\n\t\tvar width = 0;\n\n\t\t// Count of all lines in the body\n\t\tvar body = model.body;\n\t\tvar combinedBodyLength = body.reduce(function(count, bodyItem) {\n\t\t\treturn count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n\t\t}, 0);\n\t\tcombinedBodyLength += model.beforeBody.length + model.afterBody.length;\n\n\t\tvar titleLineCount = model.title.length;\n\t\tvar footerLineCount = model.footer.length;\n\t\tvar titleFontSize = model.titleFontSize,\n\t\t\tbodyFontSize = model.bodyFontSize,\n\t\t\tfooterFontSize = model.footerFontSize;\n\n\t\theight += titleLineCount * titleFontSize; // Title Lines\n\t\theight += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing\n\t\theight += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin\n\t\theight += combinedBodyLength * bodyFontSize; // Body Lines\n\t\theight += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing\n\t\theight += footerLineCount ? model.footerMarginTop : 0; // Footer Margin\n\t\theight += footerLineCount * (footerFontSize); // Footer Lines\n\t\theight += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing\n\n\t\t// Title width\n\t\tvar widthPadding = 0;\n\t\tvar maxLineWidth = function(line) {\n\t\t\twidth = Math.max(width, ctx.measureText(line).width + widthPadding);\n\t\t};\n\n\t\tctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);\n\t\thelpers.each(model.title, maxLineWidth);\n\n\t\t// Body width\n\t\tctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);\n\t\thelpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth);\n\n\t\t// Body lines may include some extra width due to the color box\n\t\twidthPadding = model.displayColors ? (bodyFontSize + 2) : 0;\n\t\thelpers.each(body, function(bodyItem) {\n\t\t\thelpers.each(bodyItem.before, maxLineWidth);\n\t\t\thelpers.each(bodyItem.lines, maxLineWidth);\n\t\t\thelpers.each(bodyItem.after, maxLineWidth);\n\t\t});\n\n\t\t// Reset back to 0\n\t\twidthPadding = 0;\n\n\t\t// Footer width\n\t\tctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);\n\t\thelpers.each(model.footer, maxLineWidth);\n\n\t\t// Add padding\n\t\twidth += 2 * model.xPadding;\n\n\t\treturn {\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t}\n\n\t/**\n\t * Helper to get the alignment of a tooltip given the size\n\t */\n\tfunction determineAlignment(tooltip, size) {\n\t\tvar model = tooltip._model;\n\t\tvar chart = tooltip._chart;\n\t\tvar chartArea = tooltip._chartInstance.chartArea;\n\t\tvar xAlign = 'center';\n\t\tvar yAlign = 'center';\n\n\t\tif (model.y < size.height) {\n\t\t\tyAlign = 'top';\n\t\t} else if (model.y > (chart.height - size.height)) {\n\t\t\tyAlign = 'bottom';\n\t\t}\n\n\t\tvar lf, rf; // functions to determine left, right alignment\n\t\tvar olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart\n\t\tvar yf; // function to get the y alignment if the tooltip goes outside of the left or right edges\n\t\tvar midX = (chartArea.left + chartArea.right) / 2;\n\t\tvar midY = (chartArea.top + chartArea.bottom) / 2;\n\n\t\tif (yAlign === 'center') {\n\t\t\tlf = function(x) {\n\t\t\t\treturn x <= midX;\n\t\t\t};\n\t\t\trf = function(x) {\n\t\t\t\treturn x > midX;\n\t\t\t};\n\t\t} else {\n\t\t\tlf = function(x) {\n\t\t\t\treturn x <= (size.width / 2);\n\t\t\t};\n\t\t\trf = function(x) {\n\t\t\t\treturn x >= (chart.width - (size.width / 2));\n\t\t\t};\n\t\t}\n\n\t\tolf = function(x) {\n\t\t\treturn x + size.width > chart.width;\n\t\t};\n\t\torf = function(x) {\n\t\t\treturn x - size.width < 0;\n\t\t};\n\t\tyf = function(y) {\n\t\t\treturn y <= midY ? 'top' : 'bottom';\n\t\t};\n\n\t\tif (lf(model.x)) {\n\t\t\txAlign = 'left';\n\n\t\t\t// Is tooltip too wide and goes over the right side of the chart.?\n\t\t\tif (olf(model.x)) {\n\t\t\t\txAlign = 'center';\n\t\t\t\tyAlign = yf(model.y);\n\t\t\t}\n\t\t} else if (rf(model.x)) {\n\t\t\txAlign = 'right';\n\n\t\t\t// Is tooltip too wide and goes outside left edge of canvas?\n\t\t\tif (orf(model.x)) {\n\t\t\t\txAlign = 'center';\n\t\t\t\tyAlign = yf(model.y);\n\t\t\t}\n\t\t}\n\n\t\tvar opts = tooltip._options;\n\t\treturn {\n\t\t\txAlign: opts.xAlign ? opts.xAlign : xAlign,\n\t\t\tyAlign: opts.yAlign ? opts.yAlign : yAlign\n\t\t};\n\t}\n\n\t/**\n\t * @Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n\t */\n\tfunction getBackgroundPoint(vm, size, alignment) {\n\t\t// Background Position\n\t\tvar x = vm.x;\n\t\tvar y = vm.y;\n\n\t\tvar caretSize = vm.caretSize,\n\t\t\tcaretPadding = vm.caretPadding,\n\t\t\tcornerRadius = vm.cornerRadius,\n\t\t\txAlign = alignment.xAlign,\n\t\t\tyAlign = alignment.yAlign,\n\t\t\tpaddingAndSize = caretSize + caretPadding,\n\t\t\tradiusAndPadding = cornerRadius + caretPadding;\n\n\t\tif (xAlign === 'right') {\n\t\t\tx -= size.width;\n\t\t} else if (xAlign === 'center') {\n\t\t\tx -= (size.width / 2);\n\t\t}\n\n\t\tif (yAlign === 'top') {\n\t\t\ty += paddingAndSize;\n\t\t} else if (yAlign === 'bottom') {\n\t\t\ty -= size.height + paddingAndSize;\n\t\t} else {\n\t\t\ty -= (size.height / 2);\n\t\t}\n\n\t\tif (yAlign === 'center') {\n\t\t\tif (xAlign === 'left') {\n\t\t\t\tx += paddingAndSize;\n\t\t\t} else if (xAlign === 'right') {\n\t\t\t\tx -= paddingAndSize;\n\t\t\t}\n\t\t} else if (xAlign === 'left') {\n\t\t\tx -= radiusAndPadding;\n\t\t} else if (xAlign === 'right') {\n\t\t\tx += radiusAndPadding;\n\t\t}\n\n\t\treturn {\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\t}\n\n\tChart.Tooltip = Chart.Element.extend({\n\t\tinitialize: function() {\n\t\t\tthis._model = getBaseModel(this._options);\n\t\t},\n\n\t\t// Get the title\n\t\t// Args are: (tooltipItem, data)\n\t\tgetTitle: function() {\n\t\t\tvar me = this;\n\t\t\tvar opts = me._options;\n\t\t\tvar callbacks = opts.callbacks;\n\n\t\t\tvar beforeTitle = callbacks.beforeTitle.apply(me, arguments),\n\t\t\t\ttitle = callbacks.title.apply(me, arguments),\n\t\t\t\tafterTitle = callbacks.afterTitle.apply(me, arguments);\n\n\t\t\tvar lines = [];\n\t\t\tlines = pushOrConcat(lines, beforeTitle);\n\t\t\tlines = pushOrConcat(lines, title);\n\t\t\tlines = pushOrConcat(lines, afterTitle);\n\n\t\t\treturn lines;\n\t\t},\n\n\t\t// Args are: (tooltipItem, data)\n\t\tgetBeforeBody: function() {\n\t\t\tvar lines = this._options.callbacks.beforeBody.apply(this, arguments);\n\t\t\treturn helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];\n\t\t},\n\n\t\t// Args are: (tooltipItem, data)\n\t\tgetBody: function(tooltipItems, data) {\n\t\t\tvar me = this;\n\t\t\tvar callbacks = me._options.callbacks;\n\t\t\tvar bodyItems = [];\n\n\t\t\thelpers.each(tooltipItems, function(tooltipItem) {\n\t\t\t\tvar bodyItem = {\n\t\t\t\t\tbefore: [],\n\t\t\t\t\tlines: [],\n\t\t\t\t\tafter: []\n\t\t\t\t};\n\t\t\t\tpushOrConcat(bodyItem.before, callbacks.beforeLabel.call(me, tooltipItem, data));\n\t\t\t\tpushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));\n\t\t\t\tpushOrConcat(bodyItem.after, callbacks.afterLabel.call(me, tooltipItem, data));\n\n\t\t\t\tbodyItems.push(bodyItem);\n\t\t\t});\n\n\t\t\treturn bodyItems;\n\t\t},\n\n\t\t// Args are: (tooltipItem, data)\n\t\tgetAfterBody: function() {\n\t\t\tvar lines = this._options.callbacks.afterBody.apply(this, arguments);\n\t\t\treturn helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];\n\t\t},\n\n\t\t// Get the footer and beforeFooter and afterFooter lines\n\t\t// Args are: (tooltipItem, data)\n\t\tgetFooter: function() {\n\t\t\tvar me = this;\n\t\t\tvar callbacks = me._options.callbacks;\n\n\t\t\tvar beforeFooter = callbacks.beforeFooter.apply(me, arguments);\n\t\t\tvar footer = callbacks.footer.apply(me, arguments);\n\t\t\tvar afterFooter = callbacks.afterFooter.apply(me, arguments);\n\n\t\t\tvar lines = [];\n\t\t\tlines = pushOrConcat(lines, beforeFooter);\n\t\t\tlines = pushOrConcat(lines, footer);\n\t\t\tlines = pushOrConcat(lines, afterFooter);\n\n\t\t\treturn lines;\n\t\t},\n\n\t\tupdate: function(changed) {\n\t\t\tvar me = this;\n\t\t\tvar opts = me._options;\n\n\t\t\t// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition\n\t\t\t// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time\n\t\t\t// which breaks any animations.\n\t\t\tvar existingModel = me._model;\n\t\t\tvar model = me._model = getBaseModel(opts);\n\t\t\tvar active = me._active;\n\n\t\t\tvar data = me._data;\n\t\t\tvar chartInstance = me._chartInstance;\n\n\t\t\t// In the case where active.length === 0 we need to keep these at existing values for good animations\n\t\t\tvar alignment = {\n\t\t\t\txAlign: existingModel.xAlign,\n\t\t\t\tyAlign: existingModel.yAlign\n\t\t\t};\n\t\t\tvar backgroundPoint = {\n\t\t\t\tx: existingModel.x,\n\t\t\t\ty: existingModel.y\n\t\t\t};\n\t\t\tvar tooltipSize = {\n\t\t\t\twidth: existingModel.width,\n\t\t\t\theight: existingModel.height\n\t\t\t};\n\t\t\tvar tooltipPosition = {\n\t\t\t\tx: existingModel.caretX,\n\t\t\t\ty: existingModel.caretY\n\t\t\t};\n\n\t\t\tvar i, len;\n\n\t\t\tif (active.length) {\n\t\t\t\tmodel.opacity = 1;\n\n\t\t\t\tvar labelColors = [];\n\t\t\t\ttooltipPosition = Chart.Tooltip.positioners[opts.position](active, me._eventPosition);\n\n\t\t\t\tvar tooltipItems = [];\n\t\t\t\tfor (i = 0, len = active.length; i < len; ++i) {\n\t\t\t\t\ttooltipItems.push(createTooltipItem(active[i]));\n\t\t\t\t}\n\n\t\t\t\t// If the user provided a filter function, use it to modify the tooltip items\n\t\t\t\tif (opts.filter) {\n\t\t\t\t\ttooltipItems = tooltipItems.filter(function(a) {\n\t\t\t\t\t\treturn opts.filter(a, data);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// If the user provided a sorting function, use it to modify the tooltip items\n\t\t\t\tif (opts.itemSort) {\n\t\t\t\t\ttooltipItems = tooltipItems.sort(function(a, b) {\n\t\t\t\t\t\treturn opts.itemSort(a, b, data);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Determine colors for boxes\n\t\t\t\thelpers.each(tooltipItems, function(tooltipItem) {\n\t\t\t\t\tlabelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, chartInstance));\n\t\t\t\t});\n\n\t\t\t\t// Build the Text Lines\n\t\t\t\tmodel.title = me.getTitle(tooltipItems, data);\n\t\t\t\tmodel.beforeBody = me.getBeforeBody(tooltipItems, data);\n\t\t\t\tmodel.body = me.getBody(tooltipItems, data);\n\t\t\t\tmodel.afterBody = me.getAfterBody(tooltipItems, data);\n\t\t\t\tmodel.footer = me.getFooter(tooltipItems, data);\n\n\t\t\t\t// Initial positioning and colors\n\t\t\t\tmodel.x = Math.round(tooltipPosition.x);\n\t\t\t\tmodel.y = Math.round(tooltipPosition.y);\n\t\t\t\tmodel.caretPadding = helpers.getValueOrDefault(tooltipPosition.padding, 2);\n\t\t\t\tmodel.labelColors = labelColors;\n\n\t\t\t\t// data points\n\t\t\t\tmodel.dataPoints = tooltipItems;\n\n\t\t\t\t// We need to determine alignment of the tooltip\n\t\t\t\ttooltipSize = getTooltipSize(this, model);\n\t\t\t\talignment = determineAlignment(this, tooltipSize);\n\t\t\t\t// Final Size and Position\n\t\t\t\tbackgroundPoint = getBackgroundPoint(model, tooltipSize, alignment);\n\t\t\t} else {\n\t\t\t\tmodel.opacity = 0;\n\t\t\t}\n\n\t\t\tmodel.xAlign = alignment.xAlign;\n\t\t\tmodel.yAlign = alignment.yAlign;\n\t\t\tmodel.x = backgroundPoint.x;\n\t\t\tmodel.y = backgroundPoint.y;\n\t\t\tmodel.width = tooltipSize.width;\n\t\t\tmodel.height = tooltipSize.height;\n\n\t\t\t// Point where the caret on the tooltip points to\n\t\t\tmodel.caretX = tooltipPosition.x;\n\t\t\tmodel.caretY = tooltipPosition.y;\n\n\t\t\tme._model = model;\n\n\t\t\tif (changed && opts.custom) {\n\t\t\t\topts.custom.call(me, model);\n\t\t\t}\n\n\t\t\treturn me;\n\t\t},\n\t\tdrawCaret: function(tooltipPoint, size, opacity) {\n\t\t\tvar vm = this._view;\n\t\t\tvar ctx = this._chart.ctx;\n\t\t\tvar x1, x2, x3;\n\t\t\tvar y1, y2, y3;\n\t\t\tvar caretSize = vm.caretSize;\n\t\t\tvar cornerRadius = vm.cornerRadius;\n\t\t\tvar xAlign = vm.xAlign,\n\t\t\t\tyAlign = vm.yAlign;\n\t\t\tvar ptX = tooltipPoint.x,\n\t\t\t\tptY = tooltipPoint.y;\n\t\t\tvar width = size.width,\n\t\t\t\theight = size.height;\n\n\t\t\tif (yAlign === 'center') {\n\t\t\t\t// Left or right side\n\t\t\t\tif (xAlign === 'left') {\n\t\t\t\t\tx1 = ptX;\n\t\t\t\t\tx2 = x1 - caretSize;\n\t\t\t\t\tx3 = x1;\n\t\t\t\t} else {\n\t\t\t\t\tx1 = ptX + width;\n\t\t\t\t\tx2 = x1 + caretSize;\n\t\t\t\t\tx3 = x1;\n\t\t\t\t}\n\n\t\t\t\ty2 = ptY + (height / 2);\n\t\t\t\ty1 = y2 - caretSize;\n\t\t\t\ty3 = y2 + caretSize;\n\t\t\t} else {\n\t\t\t\tif (xAlign === 'left') {\n\t\t\t\t\tx1 = ptX + cornerRadius;\n\t\t\t\t\tx2 = x1 + caretSize;\n\t\t\t\t\tx3 = x2 + caretSize;\n\t\t\t\t} else if (xAlign === 'right') {\n\t\t\t\t\tx1 = ptX + width - cornerRadius;\n\t\t\t\t\tx2 = x1 - caretSize;\n\t\t\t\t\tx3 = x2 - caretSize;\n\t\t\t\t} else {\n\t\t\t\t\tx2 = ptX + (width / 2);\n\t\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\t\tx3 = x2 + caretSize;\n\t\t\t\t}\n\n\t\t\t\tif (yAlign === 'top') {\n\t\t\t\t\ty1 = ptY;\n\t\t\t\t\ty2 = y1 - caretSize;\n\t\t\t\t\ty3 = y1;\n\t\t\t\t} else {\n\t\t\t\t\ty1 = ptY + height;\n\t\t\t\t\ty2 = y1 + caretSize;\n\t\t\t\t\ty3 = y1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x1, y1);\n\t\t\tctx.lineTo(x2, y2);\n\t\t\tctx.lineTo(x3, y3);\n\t\t\tctx.closePath();\n\t\t\tctx.fill();\n\t\t},\n\t\tdrawTitle: function(pt, vm, ctx, opacity) {\n\t\t\tvar title = vm.title;\n\n\t\t\tif (title.length) {\n\t\t\t\tctx.textAlign = vm._titleAlign;\n\t\t\t\tctx.textBaseline = 'top';\n\n\t\t\t\tvar titleFontSize = vm.titleFontSize,\n\t\t\t\t\ttitleSpacing = vm.titleSpacing;\n\n\t\t\t\tctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);\n\t\t\t\tctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);\n\n\t\t\t\tvar i, len;\n\t\t\t\tfor (i = 0, len = title.length; i < len; ++i) {\n\t\t\t\t\tctx.fillText(title[i], pt.x, pt.y);\n\t\t\t\t\tpt.y += titleFontSize + titleSpacing; // Line Height and spacing\n\n\t\t\t\t\tif (i + 1 === title.length) {\n\t\t\t\t\t\tpt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tdrawBody: function(pt, vm, ctx, opacity) {\n\t\t\tvar bodyFontSize = vm.bodyFontSize;\n\t\t\tvar bodySpacing = vm.bodySpacing;\n\t\t\tvar body = vm.body;\n\n\t\t\tctx.textAlign = vm._bodyAlign;\n\t\t\tctx.textBaseline = 'top';\n\n\t\t\tvar textColor = mergeOpacity(vm.bodyFontColor, opacity);\n\t\t\tctx.fillStyle = textColor;\n\t\t\tctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);\n\n\t\t\t// Before Body\n\t\t\tvar xLinePadding = 0;\n\t\t\tvar fillLineOfText = function(line) {\n\t\t\t\tctx.fillText(line, pt.x + xLinePadding, pt.y);\n\t\t\t\tpt.y += bodyFontSize + bodySpacing;\n\t\t\t};\n\n\t\t\t// Before body lines\n\t\t\thelpers.each(vm.beforeBody, fillLineOfText);\n\n\t\t\tvar drawColorBoxes = vm.displayColors;\n\t\t\txLinePadding = drawColorBoxes ? (bodyFontSize + 2) : 0;\n\n\t\t\t// Draw body lines now\n\t\t\thelpers.each(body, function(bodyItem, i) {\n\t\t\t\thelpers.each(bodyItem.before, fillLineOfText);\n\n\t\t\t\thelpers.each(bodyItem.lines, function(line) {\n\t\t\t\t\t// Draw Legend-like boxes if needed\n\t\t\t\t\tif (drawColorBoxes) {\n\t\t\t\t\t\t// Fill a white rect so that colours merge nicely if the opacity is < 1\n\t\t\t\t\t\tctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);\n\t\t\t\t\t\tctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize);\n\n\t\t\t\t\t\t// Border\n\t\t\t\t\t\tctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);\n\t\t\t\t\t\tctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize);\n\n\t\t\t\t\t\t// Inner square\n\t\t\t\t\t\tctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);\n\t\t\t\t\t\tctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);\n\n\t\t\t\t\t\tctx.fillStyle = textColor;\n\t\t\t\t\t}\n\n\t\t\t\t\tfillLineOfText(line);\n\t\t\t\t});\n\n\t\t\t\thelpers.each(bodyItem.after, fillLineOfText);\n\t\t\t});\n\n\t\t\t// Reset back to 0 for after body\n\t\t\txLinePadding = 0;\n\n\t\t\t// After body lines\n\t\t\thelpers.each(vm.afterBody, fillLineOfText);\n\t\t\tpt.y -= bodySpacing; // Remove last body spacing\n\t\t},\n\t\tdrawFooter: function(pt, vm, ctx, opacity) {\n\t\t\tvar footer = vm.footer;\n\n\t\t\tif (footer.length) {\n\t\t\t\tpt.y += vm.footerMarginTop;\n\n\t\t\t\tctx.textAlign = vm._footerAlign;\n\t\t\t\tctx.textBaseline = 'top';\n\n\t\t\t\tctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);\n\t\t\t\tctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);\n\n\t\t\t\thelpers.each(footer, function(line) {\n\t\t\t\t\tctx.fillText(line, pt.x, pt.y);\n\t\t\t\t\tpt.y += vm.footerFontSize + vm.footerSpacing;\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tdrawBackground: function(pt, vm, ctx, tooltipSize, opacity) {\n\t\t\tctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);\n\t\t\thelpers.drawRoundedRectangle(ctx, pt.x, pt.y, tooltipSize.width, tooltipSize.height, vm.cornerRadius);\n\t\t\tctx.fill();\n\t\t},\n\t\tdraw: function() {\n\t\t\tvar ctx = this._chart.ctx;\n\t\t\tvar vm = this._view;\n\n\t\t\tif (vm.opacity === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar tooltipSize = {\n\t\t\t\twidth: vm.width,\n\t\t\t\theight: vm.height\n\t\t\t};\n\t\t\tvar pt = {\n\t\t\t\tx: vm.x,\n\t\t\t\ty: vm.y\n\t\t\t};\n\n\t\t\t// IE11/Edge does not like very small opacities, so snap to 0\n\t\t\tvar opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;\n\n\t\t\tif (this._options.enabled) {\n\t\t\t\t// Draw Background\n\t\t\t\tthis.drawBackground(pt, vm, ctx, tooltipSize, opacity);\n\n\t\t\t\t// Draw Caret\n\t\t\t\tthis.drawCaret(pt, tooltipSize, opacity);\n\n\t\t\t\t// Draw Title, Body, and Footer\n\t\t\t\tpt.x += vm.xPadding;\n\t\t\t\tpt.y += vm.yPadding;\n\n\t\t\t\t// Titles\n\t\t\t\tthis.drawTitle(pt, vm, ctx, opacity);\n\n\t\t\t\t// Body\n\t\t\t\tthis.drawBody(pt, vm, ctx, opacity);\n\n\t\t\t\t// Footer\n\t\t\t\tthis.drawFooter(pt, vm, ctx, opacity);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Handle an event\n\t\t * @private\n\t\t * @param {IEvent} event - The event to handle\n\t\t * @returns {Boolean} true if the tooltip changed\n\t\t */\n\t\thandleEvent: function(e) {\n\t\t\tvar me = this;\n\t\t\tvar options = me._options;\n\t\t\tvar changed = false;\n\n\t\t\tme._lastActive = me._lastActive || [];\n\n\t\t\t// Find Active Elements for tooltips\n\t\t\tif (e.type === 'mouseout') {\n\t\t\t\tme._active = [];\n\t\t\t} else {\n\t\t\t\tme._active = me._chartInstance.getElementsAtEventForMode(e, options.mode, options);\n\t\t\t}\n\n\t\t\t// Remember Last Actives\n\t\t\tchanged = !helpers.arrayEquals(me._active, me._lastActive);\n\t\t\tme._lastActive = me._active;\n\n\t\t\tif (options.enabled || options.custom) {\n\t\t\t\tme._eventPosition = {\n\t\t\t\t\tx: e.x,\n\t\t\t\t\ty: e.y\n\t\t\t\t};\n\n\t\t\t\tvar model = me._model;\n\t\t\t\tme.update(true);\n\t\t\t\tme.pivot();\n\n\t\t\t\t// See if our tooltip position changed\n\t\t\t\tchanged |= (model.x !== me._model.x) || (model.y !== me._model.y);\n\t\t\t}\n\n\t\t\treturn changed;\n\t\t}\n\t});\n\n\t/**\n\t * @namespace Chart.Tooltip.positioners\n\t */\n\tChart.Tooltip.positioners = {\n\t\t/**\n\t\t * Average mode places the tooltip at the average position of the elements shown\n\t\t * @function Chart.Tooltip.positioners.average\n\t\t * @param elements {ChartElement[]} the elements being displayed in the tooltip\n\t\t * @returns {Point} tooltip position\n\t\t */\n\t\taverage: function(elements) {\n\t\t\tif (!elements.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar i, len;\n\t\t\tvar x = 0;\n\t\t\tvar y = 0;\n\t\t\tvar count = 0;\n\n\t\t\tfor (i = 0, len = elements.length; i < len; ++i) {\n\t\t\t\tvar el = elements[i];\n\t\t\t\tif (el && el.hasValue()) {\n\t\t\t\t\tvar pos = el.tooltipPosition();\n\t\t\t\t\tx += pos.x;\n\t\t\t\t\ty += pos.y;\n\t\t\t\t\t++count;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tx: Math.round(x / count),\n\t\t\t\ty: Math.round(y / count)\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Gets the tooltip position nearest of the item nearest to the event position\n\t\t * @function Chart.Tooltip.positioners.nearest\n\t\t * @param elements {Chart.Element[]} the tooltip elements\n\t\t * @param eventPosition {Point} the position of the event in canvas coordinates\n\t\t * @returns {Point} the tooltip position\n\t\t */\n\t\tnearest: function(elements, eventPosition) {\n\t\t\tvar x = eventPosition.x;\n\t\t\tvar y = eventPosition.y;\n\n\t\t\tvar nearestElement;\n\t\t\tvar minDistance = Number.POSITIVE_INFINITY;\n\t\t\tvar i, len;\n\t\t\tfor (i = 0, len = elements.length; i < len; ++i) {\n\t\t\t\tvar el = elements[i];\n\t\t\t\tif (el && el.hasValue()) {\n\t\t\t\t\tvar center = el.getCenterPoint();\n\t\t\t\t\tvar d = helpers.distanceBetweenPoints(eventPosition, center);\n\n\t\t\t\t\tif (d < minDistance) {\n\t\t\t\t\t\tminDistance = d;\n\t\t\t\t\t\tnearestElement = el;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (nearestElement) {\n\t\t\t\tvar tp = nearestElement.tooltipPosition();\n\t\t\t\tx = tp.x;\n\t\t\t\ty = tp.y;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: y\n\t\t\t};\n\t\t}\n\t};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/core/core.tooltip.js\n// module id = 604\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers,\n\t\tglobalOpts = Chart.defaults.global;\n\n\tglobalOpts.elements.arc = {\n\t\tbackgroundColor: globalOpts.defaultColor,\n\t\tborderColor: '#fff',\n\t\tborderWidth: 2\n\t};\n\n\tChart.elements.Arc = Chart.Element.extend({\n\t\tinLabelRange: function(mouseX) {\n\t\t\tvar vm = this._view;\n\n\t\t\tif (vm) {\n\t\t\t\treturn (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tinRange: function(chartX, chartY) {\n\t\t\tvar vm = this._view;\n\n\t\t\tif (vm) {\n\t\t\t\tvar pointRelativePosition = helpers.getAngleFromPoint(vm, {\n\t\t\t\t\t\tx: chartX,\n\t\t\t\t\t\ty: chartY\n\t\t\t\t\t}),\n\t\t\t\t\tangle = pointRelativePosition.angle,\n\t\t\t\t\tdistance = pointRelativePosition.distance;\n\n\t\t\t\t// Sanitise angle range\n\t\t\t\tvar startAngle = vm.startAngle;\n\t\t\t\tvar endAngle = vm.endAngle;\n\t\t\t\twhile (endAngle < startAngle) {\n\t\t\t\t\tendAngle += 2.0 * Math.PI;\n\t\t\t\t}\n\t\t\t\twhile (angle > endAngle) {\n\t\t\t\t\tangle -= 2.0 * Math.PI;\n\t\t\t\t}\n\t\t\t\twhile (angle < startAngle) {\n\t\t\t\t\tangle += 2.0 * Math.PI;\n\t\t\t\t}\n\n\t\t\t\t// Check if within the range of the open/close angle\n\t\t\t\tvar betweenAngles = (angle >= startAngle && angle <= endAngle),\n\t\t\t\t\twithinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);\n\n\t\t\t\treturn (betweenAngles && withinRadius);\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tgetCenterPoint: function() {\n\t\t\tvar vm = this._view;\n\t\t\tvar halfAngle = (vm.startAngle + vm.endAngle) / 2;\n\t\t\tvar halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n\t\t\treturn {\n\t\t\t\tx: vm.x + Math.cos(halfAngle) * halfRadius,\n\t\t\t\ty: vm.y + Math.sin(halfAngle) * halfRadius\n\t\t\t};\n\t\t},\n\t\tgetArea: function() {\n\t\t\tvar vm = this._view;\n\t\t\treturn Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n\t\t},\n\t\ttooltipPosition: function() {\n\t\t\tvar vm = this._view;\n\n\t\t\tvar centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2),\n\t\t\t\trangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n\t\t\treturn {\n\t\t\t\tx: vm.x + (Math.cos(centreAngle) * rangeFromCentre),\n\t\t\t\ty: vm.y + (Math.sin(centreAngle) * rangeFromCentre)\n\t\t\t};\n\t\t},\n\t\tdraw: function() {\n\n\t\t\tvar ctx = this._chart.ctx,\n\t\t\t\tvm = this._view,\n\t\t\t\tsA = vm.startAngle,\n\t\t\t\teA = vm.endAngle;\n\n\t\t\tctx.beginPath();\n\n\t\t\tctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);\n\t\t\tctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n\n\t\t\tctx.closePath();\n\t\t\tctx.strokeStyle = vm.borderColor;\n\t\t\tctx.lineWidth = vm.borderWidth;\n\n\t\t\tctx.fillStyle = vm.backgroundColor;\n\n\t\t\tctx.fill();\n\t\t\tctx.lineJoin = 'bevel';\n\n\t\t\tif (vm.borderWidth) {\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/elements/element.arc.js\n// module id = 605\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\tvar globalDefaults = Chart.defaults.global;\n\n\tChart.defaults.global.elements.line = {\n\t\ttension: 0.4,\n\t\tbackgroundColor: globalDefaults.defaultColor,\n\t\tborderWidth: 3,\n\t\tborderColor: globalDefaults.defaultColor,\n\t\tborderCapStyle: 'butt',\n\t\tborderDash: [],\n\t\tborderDashOffset: 0.0,\n\t\tborderJoinStyle: 'miter',\n\t\tcapBezierPoints: true,\n\t\tfill: true, // do we fill in the area between the line and its base axis\n\t};\n\n\tChart.elements.Line = Chart.Element.extend({\n\t\tdraw: function() {\n\t\t\tvar me = this;\n\t\t\tvar vm = me._view;\n\t\t\tvar spanGaps = vm.spanGaps;\n\t\t\tvar fillPoint = vm.scaleZero;\n\t\t\tvar loop = me._loop;\n\n\t\t\t// Handle different fill modes for cartesian lines\n\t\t\tif (!loop) {\n\t\t\t\tif (vm.fill === 'top') {\n\t\t\t\t\tfillPoint = vm.scaleTop;\n\t\t\t\t} else if (vm.fill === 'bottom') {\n\t\t\t\t\tfillPoint = vm.scaleBottom;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar ctx = me._chart.ctx;\n\t\t\tctx.save();\n\n\t\t\t// Helper function to draw a line to a point\n\t\t\tfunction lineToPoint(previousPoint, point) {\n\t\t\t\tvar pointVM = point._view;\n\t\t\t\tif (point._view.steppedLine === true) {\n\t\t\t\t\tctx.lineTo(pointVM.x, previousPoint._view.y);\n\t\t\t\t\tctx.lineTo(pointVM.x, pointVM.y);\n\t\t\t\t} else if (point._view.tension === 0) {\n\t\t\t\t\tctx.lineTo(pointVM.x, pointVM.y);\n\t\t\t\t} else {\n\t\t\t\t\tctx.bezierCurveTo(\n\t\t\t\t\t\tpreviousPoint._view.controlPointNextX,\n\t\t\t\t\t\tpreviousPoint._view.controlPointNextY,\n\t\t\t\t\t\tpointVM.controlPointPreviousX,\n\t\t\t\t\t\tpointVM.controlPointPreviousY,\n\t\t\t\t\t\tpointVM.x,\n\t\t\t\t\t\tpointVM.y\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar points = me._children.slice(); // clone array\n\t\t\tvar lastDrawnIndex = -1;\n\n\t\t\t// If we are looping, adding the first point again\n\t\t\tif (loop && points.length) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\tvar index, current, previous, currentVM;\n\n\t\t\t// Fill Line\n\t\t\tif (points.length && vm.fill) {\n\t\t\t\tctx.beginPath();\n\n\t\t\t\tfor (index = 0; index < points.length; ++index) {\n\t\t\t\t\tcurrent = points[index];\n\t\t\t\t\tprevious = helpers.previousItem(points, index);\n\t\t\t\t\tcurrentVM = current._view;\n\n\t\t\t\t\t// First point moves to it's starting position no matter what\n\t\t\t\t\tif (index === 0) {\n\t\t\t\t\t\tif (loop) {\n\t\t\t\t\t\t\tctx.moveTo(fillPoint.x, fillPoint.y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.moveTo(currentVM.x, fillPoint);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!currentVM.skip) {\n\t\t\t\t\t\t\tlastDrawnIndex = index;\n\t\t\t\t\t\t\tctx.lineTo(currentVM.x, currentVM.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprevious = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];\n\n\t\t\t\t\t\tif (currentVM.skip) {\n\t\t\t\t\t\t\t// Only do this if this is the first point that is skipped\n\t\t\t\t\t\t\tif (!spanGaps && lastDrawnIndex === (index - 1)) {\n\t\t\t\t\t\t\t\tif (loop) {\n\t\t\t\t\t\t\t\t\tctx.lineTo(fillPoint.x, fillPoint.y);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tctx.lineTo(previous._view.x, fillPoint);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (lastDrawnIndex !== (index - 1)) {\n\t\t\t\t\t\t\t\t// There was a gap and this is the first point after the gap. If we've never drawn a point, this is a special case.\n\t\t\t\t\t\t\t\t// If the first data point is NaN, then there is no real gap to skip\n\t\t\t\t\t\t\t\tif (spanGaps && lastDrawnIndex !== -1) {\n\t\t\t\t\t\t\t\t\t// We are spanning the gap, so simple draw a line to this point\n\t\t\t\t\t\t\t\t\tlineToPoint(previous, current);\n\t\t\t\t\t\t\t\t} else if (loop) {\n\t\t\t\t\t\t\t\t\tctx.lineTo(currentVM.x, currentVM.y);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tctx.lineTo(currentVM.x, fillPoint);\n\t\t\t\t\t\t\t\t\tctx.lineTo(currentVM.x, currentVM.y);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Line to next point\n\t\t\t\t\t\t\t\tlineToPoint(previous, current);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlastDrawnIndex = index;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!loop && lastDrawnIndex !== -1) {\n\t\t\t\t\tctx.lineTo(points[lastDrawnIndex]._view.x, fillPoint);\n\t\t\t\t}\n\n\t\t\t\tctx.fillStyle = vm.backgroundColor || globalDefaults.defaultColor;\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.fill();\n\t\t\t}\n\n\t\t\t// Stroke Line Options\n\t\t\tvar globalOptionLineElements = globalDefaults.elements.line;\n\t\t\tctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;\n\n\t\t\t// IE 9 and 10 do not support line dash\n\t\t\tif (ctx.setLineDash) {\n\t\t\t\tctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);\n\t\t\t}\n\n\t\t\tctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;\n\t\t\tctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;\n\t\t\tctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;\n\t\t\tctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;\n\n\t\t\t// Stroke Line\n\t\t\tctx.beginPath();\n\t\t\tlastDrawnIndex = -1;\n\n\t\t\tfor (index = 0; index < points.length; ++index) {\n\t\t\t\tcurrent = points[index];\n\t\t\t\tprevious = helpers.previousItem(points, index);\n\t\t\t\tcurrentVM = current._view;\n\n\t\t\t\t// First point moves to it's starting position no matter what\n\t\t\t\tif (index === 0) {\n\t\t\t\t\tif (!currentVM.skip) {\n\t\t\t\t\t\tctx.moveTo(currentVM.x, currentVM.y);\n\t\t\t\t\t\tlastDrawnIndex = index;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tprevious = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];\n\n\t\t\t\t\tif (!currentVM.skip) {\n\t\t\t\t\t\tif ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {\n\t\t\t\t\t\t\t// There was a gap and this is the first point after the gap\n\t\t\t\t\t\t\tctx.moveTo(currentVM.x, currentVM.y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Line to next point\n\t\t\t\t\t\t\tlineToPoint(previous, current);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastDrawnIndex = index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tctx.stroke();\n\t\t\tctx.restore();\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/elements/element.line.js\n// module id = 606\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers,\n\t\tglobalOpts = Chart.defaults.global,\n\t\tdefaultColor = globalOpts.defaultColor;\n\n\tglobalOpts.elements.point = {\n\t\tradius: 3,\n\t\tpointStyle: 'circle',\n\t\tbackgroundColor: defaultColor,\n\t\tborderWidth: 1,\n\t\tborderColor: defaultColor,\n\t\t// Hover\n\t\thitRadius: 1,\n\t\thoverRadius: 4,\n\t\thoverBorderWidth: 1\n\t};\n\n\tfunction xRange(mouseX) {\n\t\tvar vm = this._view;\n\t\treturn vm ? (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hitRadius, 2)) : false;\n\t}\n\n\tfunction yRange(mouseY) {\n\t\tvar vm = this._view;\n\t\treturn vm ? (Math.pow(mouseY - vm.y, 2) < Math.pow(vm.radius + vm.hitRadius, 2)) : false;\n\t}\n\n\tChart.elements.Point = Chart.Element.extend({\n\t\tinRange: function(mouseX, mouseY) {\n\t\t\tvar vm = this._view;\n\t\t\treturn vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;\n\t\t},\n\n\t\tinLabelRange: xRange,\n\t\tinXRange: xRange,\n\t\tinYRange: yRange,\n\n\t\tgetCenterPoint: function() {\n\t\t\tvar vm = this._view;\n\t\t\treturn {\n\t\t\t\tx: vm.x,\n\t\t\t\ty: vm.y\n\t\t\t};\n\t\t},\n\t\tgetArea: function() {\n\t\t\treturn Math.PI * Math.pow(this._view.radius, 2);\n\t\t},\n\t\ttooltipPosition: function() {\n\t\t\tvar vm = this._view;\n\t\t\treturn {\n\t\t\t\tx: vm.x,\n\t\t\t\ty: vm.y,\n\t\t\t\tpadding: vm.radius + vm.borderWidth\n\t\t\t};\n\t\t},\n\t\tdraw: function(chartArea) {\n\t\t\tvar vm = this._view;\n\t\t\tvar model = this._model;\n\t\t\tvar ctx = this._chart.ctx;\n\t\t\tvar pointStyle = vm.pointStyle;\n\t\t\tvar radius = vm.radius;\n\t\t\tvar x = vm.x;\n\t\t\tvar y = vm.y;\n\t\t\tvar color = Chart.helpers.color;\n\t\t\tvar errMargin = 1.01; // 1.01 is margin for Accumulated error. (Especially Edge, IE.)\n\t\t\tvar ratio = 0;\n\n\t\t\tif (vm.skip) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tctx.strokeStyle = vm.borderColor || defaultColor;\n\t\t\tctx.lineWidth = helpers.getValueOrDefault(vm.borderWidth, globalOpts.elements.point.borderWidth);\n\t\t\tctx.fillStyle = vm.backgroundColor || defaultColor;\n\n\t\t\t// Cliping for Points.\n\t\t\t// going out from inner charArea?\n\t\t\tif ((chartArea !== undefined) && ((model.x < chartArea.left) || (chartArea.right*errMargin < model.x) || (model.y < chartArea.top) || (chartArea.bottom*errMargin < model.y))) {\n\t\t\t\t// Point fade out\n\t\t\t\tif (model.x < chartArea.left) {\n\t\t\t\t\tratio = (x - model.x) / (chartArea.left - model.x);\n\t\t\t\t} else if (chartArea.right*errMargin < model.x) {\n\t\t\t\t\tratio = (model.x - x) / (model.x - chartArea.right);\n\t\t\t\t} else if (model.y < chartArea.top) {\n\t\t\t\t\tratio = (y - model.y) / (chartArea.top - model.y);\n\t\t\t\t} else if (chartArea.bottom*errMargin < model.y) {\n\t\t\t\t\tratio = (model.y - y) / (model.y - chartArea.bottom);\n\t\t\t\t}\n\t\t\t\tratio = Math.round(ratio*100) / 100;\n\t\t\t\tctx.strokeStyle = color(ctx.strokeStyle).alpha(ratio).rgbString();\n\t\t\t\tctx.fillStyle = color(ctx.fillStyle).alpha(ratio).rgbString();\n\t\t\t}\n\n\t\t\tChart.canvasHelpers.drawPoint(ctx, pointStyle, radius, x, y);\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/elements/element.point.js\n// module id = 607\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar globalOpts = Chart.defaults.global;\n\n\tglobalOpts.elements.rectangle = {\n\t\tbackgroundColor: globalOpts.defaultColor,\n\t\tborderWidth: 0,\n\t\tborderColor: globalOpts.defaultColor,\n\t\tborderSkipped: 'bottom'\n\t};\n\n\tfunction isVertical(bar) {\n\t\treturn bar._view.width !== undefined;\n\t}\n\n\t/**\n\t * Helper function to get the bounds of the bar regardless of the orientation\n\t * @private\n\t * @param bar {Chart.Element.Rectangle} the bar\n\t * @return {Bounds} bounds of the bar\n\t */\n\tfunction getBarBounds(bar) {\n\t\tvar vm = bar._view;\n\t\tvar x1, x2, y1, y2;\n\n\t\tif (isVertical(bar)) {\n\t\t\t// vertical\n\t\t\tvar halfWidth = vm.width / 2;\n\t\t\tx1 = vm.x - halfWidth;\n\t\t\tx2 = vm.x + halfWidth;\n\t\t\ty1 = Math.min(vm.y, vm.base);\n\t\t\ty2 = Math.max(vm.y, vm.base);\n\t\t} else {\n\t\t\t// horizontal bar\n\t\t\tvar halfHeight = vm.height / 2;\n\t\t\tx1 = Math.min(vm.x, vm.base);\n\t\t\tx2 = Math.max(vm.x, vm.base);\n\t\t\ty1 = vm.y - halfHeight;\n\t\t\ty2 = vm.y + halfHeight;\n\t\t}\n\n\t\treturn {\n\t\t\tleft: x1,\n\t\t\ttop: y1,\n\t\t\tright: x2,\n\t\t\tbottom: y2\n\t\t};\n\t}\n\n\tChart.elements.Rectangle = Chart.Element.extend({\n\t\tdraw: function() {\n\t\t\tvar ctx = this._chart.ctx;\n\t\t\tvar vm = this._view;\n\t\t\tvar left, right, top, bottom, signX, signY, borderSkipped;\n\t\t\tvar borderWidth = vm.borderWidth;\n\n\t\t\tif (!vm.horizontal) {\n\t\t\t\t// bar\n\t\t\t\tleft = vm.x - vm.width / 2;\n\t\t\t\tright = vm.x + vm.width / 2;\n\t\t\t\ttop = vm.y;\n\t\t\t\tbottom = vm.base;\n\t\t\t\tsignX = 1;\n\t\t\t\tsignY = bottom > top? 1: -1;\n\t\t\t\tborderSkipped = vm.borderSkipped || 'bottom';\n\t\t\t} else {\n\t\t\t\t// horizontal bar\n\t\t\t\tleft = vm.base;\n\t\t\t\tright = vm.x;\n\t\t\t\ttop = vm.y - vm.height / 2;\n\t\t\t\tbottom = vm.y + vm.height / 2;\n\t\t\t\tsignX = right > left? 1: -1;\n\t\t\t\tsignY = 1;\n\t\t\t\tborderSkipped = vm.borderSkipped || 'left';\n\t\t\t}\n\n\t\t\t// Canvas doesn't allow us to stroke inside the width so we can\n\t\t\t// adjust the sizes to fit if we're setting a stroke on the line\n\t\t\tif (borderWidth) {\n\t\t\t\t// borderWidth shold be less than bar width and bar height.\n\t\t\t\tvar barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\n\t\t\t\tborderWidth = borderWidth > barSize? barSize: borderWidth;\n\t\t\t\tvar halfStroke = borderWidth / 2;\n\t\t\t\t// Adjust borderWidth when bar top position is near vm.base(zero).\n\t\t\t\tvar borderLeft = left + (borderSkipped !== 'left'? halfStroke * signX: 0);\n\t\t\t\tvar borderRight = right + (borderSkipped !== 'right'? -halfStroke * signX: 0);\n\t\t\t\tvar borderTop = top + (borderSkipped !== 'top'? halfStroke * signY: 0);\n\t\t\t\tvar borderBottom = bottom + (borderSkipped !== 'bottom'? -halfStroke * signY: 0);\n\t\t\t\t// not become a vertical line?\n\t\t\t\tif (borderLeft !== borderRight) {\n\t\t\t\t\ttop = borderTop;\n\t\t\t\t\tbottom = borderBottom;\n\t\t\t\t}\n\t\t\t\t// not become a horizontal line?\n\t\t\t\tif (borderTop !== borderBottom) {\n\t\t\t\t\tleft = borderLeft;\n\t\t\t\t\tright = borderRight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tctx.beginPath();\n\t\t\tctx.fillStyle = vm.backgroundColor;\n\t\t\tctx.strokeStyle = vm.borderColor;\n\t\t\tctx.lineWidth = borderWidth;\n\n\t\t\t// Corner points, from bottom-left to bottom-right clockwise\n\t\t\t// | 1 2 |\n\t\t\t// | 0 3 |\n\t\t\tvar corners = [\n\t\t\t\t[left, bottom],\n\t\t\t\t[left, top],\n\t\t\t\t[right, top],\n\t\t\t\t[right, bottom]\n\t\t\t];\n\n\t\t\t// Find first (starting) corner with fallback to 'bottom'\n\t\t\tvar borders = ['bottom', 'left', 'top', 'right'];\n\t\t\tvar startCorner = borders.indexOf(borderSkipped, 0);\n\t\t\tif (startCorner === -1) {\n\t\t\t\tstartCorner = 0;\n\t\t\t}\n\n\t\t\tfunction cornerAt(index) {\n\t\t\t\treturn corners[(startCorner + index) % 4];\n\t\t\t}\n\n\t\t\t// Draw rectangle from 'startCorner'\n\t\t\tvar corner = cornerAt(0);\n\t\t\tctx.moveTo(corner[0], corner[1]);\n\n\t\t\tfor (var i = 1; i < 4; i++) {\n\t\t\t\tcorner = cornerAt(i);\n\t\t\t\tctx.lineTo(corner[0], corner[1]);\n\t\t\t}\n\n\t\t\tctx.fill();\n\t\t\tif (borderWidth) {\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t},\n\t\theight: function() {\n\t\t\tvar vm = this._view;\n\t\t\treturn vm.base - vm.y;\n\t\t},\n\t\tinRange: function(mouseX, mouseY) {\n\t\t\tvar inRange = false;\n\n\t\t\tif (this._view) {\n\t\t\t\tvar bounds = getBarBounds(this);\n\t\t\t\tinRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;\n\t\t\t}\n\n\t\t\treturn inRange;\n\t\t},\n\t\tinLabelRange: function(mouseX, mouseY) {\n\t\t\tvar me = this;\n\t\t\tif (!me._view) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar inRange = false;\n\t\t\tvar bounds = getBarBounds(me);\n\n\t\t\tif (isVertical(me)) {\n\t\t\t\tinRange = mouseX >= bounds.left && mouseX <= bounds.right;\n\t\t\t} else {\n\t\t\t\tinRange = mouseY >= bounds.top && mouseY <= bounds.bottom;\n\t\t\t}\n\n\t\t\treturn inRange;\n\t\t},\n\t\tinXRange: function(mouseX) {\n\t\t\tvar bounds = getBarBounds(this);\n\t\t\treturn mouseX >= bounds.left && mouseX <= bounds.right;\n\t\t},\n\t\tinYRange: function(mouseY) {\n\t\t\tvar bounds = getBarBounds(this);\n\t\t\treturn mouseY >= bounds.top && mouseY <= bounds.bottom;\n\t\t},\n\t\tgetCenterPoint: function() {\n\t\t\tvar vm = this._view;\n\t\t\tvar x, y;\n\t\t\tif (isVertical(this)) {\n\t\t\t\tx = vm.x;\n\t\t\t\ty = (vm.y + vm.base) / 2;\n\t\t\t} else {\n\t\t\t\tx = (vm.x + vm.base) / 2;\n\t\t\t\ty = vm.y;\n\t\t\t}\n\n\t\t\treturn {x: x, y: y};\n\t\t},\n\t\tgetArea: function() {\n\t\t\tvar vm = this._view;\n\t\t\treturn vm.width * Math.abs(vm.y - vm.base);\n\t\t},\n\t\ttooltipPosition: function() {\n\t\t\tvar vm = this._view;\n\t\t\treturn {\n\t\t\t\tx: vm.x,\n\t\t\t\ty: vm.y\n\t\t\t};\n\t\t}\n\t});\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/elements/element.rectangle.js\n// module id = 608\n// module chunks = 0","'use strict';\n\n// Chart.Platform implementation for targeting a web browser\nmodule.exports = function(Chart) {\n\tvar helpers = Chart.helpers;\n\n\t// DOM event types -> Chart.js event types.\n\t// Note: only events with different types are mapped.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events\n\tvar eventTypeMap = {\n\t\t// Touch events\n\t\ttouchstart: 'mousedown',\n\t\ttouchmove: 'mousemove',\n\t\ttouchend: 'mouseup',\n\n\t\t// Pointer events\n\t\tpointerenter: 'mouseenter',\n\t\tpointerdown: 'mousedown',\n\t\tpointermove: 'mousemove',\n\t\tpointerup: 'mouseup',\n\t\tpointerleave: 'mouseout',\n\t\tpointerout: 'mouseout'\n\t};\n\n\t/**\n\t * The \"used\" size is the final value of a dimension property after all calculations have\n\t * been performed. This method uses the computed style of `element` but returns undefined\n\t * if the computed style is not expressed in pixels. That can happen in some cases where\n\t * `element` has a size relative to its parent and this last one is not yet displayed,\n\t * for example because of `display: none` on a parent node.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n\t * @returns {Number} Size in pixels or undefined if unknown.\n\t */\n\tfunction readUsedSize(element, property) {\n\t\tvar value = helpers.getStyle(element, property);\n\t\tvar matches = value && value.match(/(\\d+)px/);\n\t\treturn matches? Number(matches[1]) : undefined;\n\t}\n\n\t/**\n\t * Initializes the canvas style and render size without modifying the canvas display size,\n\t * since responsiveness is handled by the controller.resize() method. The config is used\n\t * to determine the aspect ratio to apply in case no explicit height has been specified.\n\t */\n\tfunction initCanvas(canvas, config) {\n\t\tvar style = canvas.style;\n\n\t\t// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n\t\t// returns null or '' if no explicit value has been set to the canvas attribute.\n\t\tvar renderHeight = canvas.getAttribute('height');\n\t\tvar renderWidth = canvas.getAttribute('width');\n\n\t\t// Chart.js modifies some canvas values that we want to restore on destroy\n\t\tcanvas._chartjs = {\n\t\t\tinitial: {\n\t\t\t\theight: renderHeight,\n\t\t\t\twidth: renderWidth,\n\t\t\t\tstyle: {\n\t\t\t\t\tdisplay: style.display,\n\t\t\t\t\theight: style.height,\n\t\t\t\t\twidth: style.width\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Force canvas to display as block to avoid extra space caused by inline\n\t\t// elements, which would interfere with the responsive resize process.\n\t\t// https://github.com/chartjs/Chart.js/issues/2538\n\t\tstyle.display = style.display || 'block';\n\n\t\tif (renderWidth === null || renderWidth === '') {\n\t\t\tvar displayWidth = readUsedSize(canvas, 'width');\n\t\t\tif (displayWidth !== undefined) {\n\t\t\t\tcanvas.width = displayWidth;\n\t\t\t}\n\t\t}\n\n\t\tif (renderHeight === null || renderHeight === '') {\n\t\t\tif (canvas.style.height === '') {\n\t\t\t\t// If no explicit render height and style height, let's apply the aspect ratio,\n\t\t\t\t// which one can be specified by the user but also by charts as default option\n\t\t\t\t// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n\t\t\t\tcanvas.height = canvas.width / (config.options.aspectRatio || 2);\n\t\t\t} else {\n\t\t\t\tvar displayHeight = readUsedSize(canvas, 'height');\n\t\t\t\tif (displayWidth !== undefined) {\n\t\t\t\t\tcanvas.height = displayHeight;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn canvas;\n\t}\n\n\tfunction createEvent(type, chart, x, y, native) {\n\t\treturn {\n\t\t\ttype: type,\n\t\t\tchart: chart,\n\t\t\tnative: native || null,\n\t\t\tx: x !== undefined? x : null,\n\t\t\ty: y !== undefined? y : null,\n\t\t};\n\t}\n\n\tfunction fromNativeEvent(event, chart) {\n\t\tvar type = eventTypeMap[event.type] || event.type;\n\t\tvar pos = helpers.getRelativePosition(event, chart);\n\t\treturn createEvent(type, chart, pos.x, pos.y, event);\n\t}\n\n\tfunction createResizer(handler) {\n\t\tvar iframe = document.createElement('iframe');\n\t\tiframe.className = 'chartjs-hidden-iframe';\n\t\tiframe.style.cssText =\n\t\t\t'display:block;'+\n\t\t\t'overflow:hidden;'+\n\t\t\t'border:0;'+\n\t\t\t'margin:0;'+\n\t\t\t'top:0;'+\n\t\t\t'left:0;'+\n\t\t\t'bottom:0;'+\n\t\t\t'right:0;'+\n\t\t\t'height:100%;'+\n\t\t\t'width:100%;'+\n\t\t\t'position:absolute;'+\n\t\t\t'pointer-events:none;'+\n\t\t\t'z-index:-1;';\n\n\t\t// Prevent the iframe to gain focus on tab.\n\t\t// https://github.com/chartjs/Chart.js/issues/3090\n\t\tiframe.tabIndex = -1;\n\n\t\t// If the iframe is re-attached to the DOM, the resize listener is removed because the\n\t\t// content is reloaded, so make sure to install the handler after the iframe is loaded.\n\t\t// https://github.com/chartjs/Chart.js/issues/3521\n\t\thelpers.addEvent(iframe, 'load', function() {\n\t\t\thelpers.addEvent(iframe.contentWindow || iframe, 'resize', handler);\n\n\t\t\t// The iframe size might have changed while loading, which can also\n\t\t\t// happen if the size has been changed while detached from the DOM.\n\t\t\thandler();\n\t\t});\n\n\t\treturn iframe;\n\t}\n\n\tfunction addResizeListener(node, listener, chart) {\n\t\tvar stub = node._chartjs = {\n\t\t\tticking: false\n\t\t};\n\n\t\t// Throttle the callback notification until the next animation frame.\n\t\tvar notify = function() {\n\t\t\tif (!stub.ticking) {\n\t\t\t\tstub.ticking = true;\n\t\t\t\thelpers.requestAnimFrame.call(window, function() {\n\t\t\t\t\tif (stub.resizer) {\n\t\t\t\t\t\tstub.ticking = false;\n\t\t\t\t\t\treturn listener(createEvent('resize', chart));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\t// Let's keep track of this added iframe and thus avoid DOM query when removing it.\n\t\tstub.resizer = createResizer(notify);\n\n\t\tnode.insertBefore(stub.resizer, node.firstChild);\n\t}\n\n\tfunction removeResizeListener(node) {\n\t\tif (!node || !node._chartjs) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar resizer = node._chartjs.resizer;\n\t\tif (resizer) {\n\t\t\tresizer.parentNode.removeChild(resizer);\n\t\t\tnode._chartjs.resizer = null;\n\t\t}\n\n\t\tdelete node._chartjs;\n\t}\n\n\treturn {\n\t\tacquireContext: function(item, config) {\n\t\t\tif (typeof item === 'string') {\n\t\t\t\titem = document.getElementById(item);\n\t\t\t} else if (item.length) {\n\t\t\t\t// Support for array based queries (such as jQuery)\n\t\t\t\titem = item[0];\n\t\t\t}\n\n\t\t\tif (item && item.canvas) {\n\t\t\t\t// Support for any object associated to a canvas (including a context2d)\n\t\t\t\titem = item.canvas;\n\t\t\t}\n\n\t\t\tif (item instanceof HTMLCanvasElement) {\n\t\t\t\t// To prevent canvas fingerprinting, some add-ons undefine the getContext\n\t\t\t\t// method, for example: https://github.com/kkapsner/CanvasBlocker\n\t\t\t\t// https://github.com/chartjs/Chart.js/issues/2807\n\t\t\t\tvar context = item.getContext && item.getContext('2d');\n\t\t\t\tif (context instanceof CanvasRenderingContext2D) {\n\t\t\t\t\tinitCanvas(item, config);\n\t\t\t\t\treturn context;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\n\t\treleaseContext: function(context) {\n\t\t\tvar canvas = context.canvas;\n\t\t\tif (!canvas._chartjs) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar initial = canvas._chartjs.initial;\n\t\t\t['height', 'width'].forEach(function(prop) {\n\t\t\t\tvar value = initial[prop];\n\t\t\t\tif (value === undefined || value === null) {\n\t\t\t\t\tcanvas.removeAttribute(prop);\n\t\t\t\t} else {\n\t\t\t\t\tcanvas.setAttribute(prop, value);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\thelpers.each(initial.style || {}, function(value, key) {\n\t\t\t\tcanvas.style[key] = value;\n\t\t\t});\n\n\t\t\t// The canvas render size might have been changed (and thus the state stack discarded),\n\t\t\t// we can't use save() and restore() to restore the initial state. So make sure that at\n\t\t\t// least the canvas context is reset to the default state by setting the canvas width.\n\t\t\t// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n\t\t\tcanvas.width = canvas.width;\n\n\t\t\tdelete canvas._chartjs;\n\t\t},\n\n\t\taddEventListener: function(chart, type, listener) {\n\t\t\tvar canvas = chart.chart.canvas;\n\t\t\tif (type === 'resize') {\n\t\t\t\t// Note: the resize event is not supported on all browsers.\n\t\t\t\taddResizeListener(canvas.parentNode, listener, chart.chart);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar stub = listener._chartjs || (listener._chartjs = {});\n\t\t\tvar proxies = stub.proxies || (stub.proxies = {});\n\t\t\tvar proxy = proxies[chart.id + '_' + type] = function(event) {\n\t\t\t\tlistener(fromNativeEvent(event, chart.chart));\n\t\t\t};\n\n\t\t\thelpers.addEvent(canvas, type, proxy);\n\t\t},\n\n\t\tremoveEventListener: function(chart, type, listener) {\n\t\t\tvar canvas = chart.chart.canvas;\n\t\t\tif (type === 'resize') {\n\t\t\t\t// Note: the resize event is not supported on all browsers.\n\t\t\t\tremoveResizeListener(canvas.parentNode, listener);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar stub = listener._chartjs || {};\n\t\t\tvar proxies = stub.proxies || {};\n\t\t\tvar proxy = proxies[chart.id + '_' + type];\n\t\t\tif (!proxy) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\thelpers.removeEvent(canvas, type, proxy);\n\t\t}\n\t};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/platforms/platform.dom.js\n// module id = 609\n// module chunks = 0","'use strict';\n\n// By default, select the browser (DOM) platform.\n// @TODO Make possible to select another platform at build time.\nvar implementation = require('./platform.dom.js');\n\nmodule.exports = function(Chart) {\n\t/**\n\t * @namespace Chart.platform\n\t * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n\t * @since 2.4.0\n\t */\n\tChart.platform = {\n\t\t/**\n\t\t * Called at chart construction time, returns a context2d instance implementing\n\t\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t\t * @param {*} item - The native item from which to acquire context (platform specific)\n\t\t * @param {Object} options - The chart options\n\t\t * @returns {CanvasRenderingContext2D} context2d instance\n\t\t */\n\t\tacquireContext: function() {},\n\n\t\t/**\n\t\t * Called at chart destruction time, releases any resources associated to the context\n\t\t * previously returned by the acquireContext() method.\n\t\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t\t * @returns {Boolean} true if the method succeeded, else false\n\t\t */\n\t\treleaseContext: function() {},\n\n\t\t/**\n\t\t * Registers the specified listener on the given chart.\n\t\t * @param {Chart} chart - Chart from which to listen for event\n\t\t * @param {String} type - The ({@link IEvent}) type to listen for\n\t\t * @param {Function} listener - Receives a notification (an object that implements\n\t\t * the {@link IEvent} interface) when an event of the specified type occurs.\n\t\t */\n\t\taddEventListener: function() {},\n\n\t\t/**\n\t\t * Removes the specified listener previously registered with addEventListener.\n\t\t * @param {Chart} chart -Chart from which to remove the listener\n\t\t * @param {String} type - The ({@link IEvent}) type to remove\n\t\t * @param {Function} listener - The listener function to remove from the event target.\n\t\t */\n\t\tremoveEventListener: function() {}\n\t};\n\n\t/**\n\t * @interface IPlatform\n\t * Allows abstracting platform dependencies away from the chart\n\t * @borrows Chart.platform.acquireContext as acquireContext\n\t * @borrows Chart.platform.releaseContext as releaseContext\n\t * @borrows Chart.platform.addEventListener as addEventListener\n\t * @borrows Chart.platform.removeEventListener as removeEventListener\n\t */\n\n\t/**\n\t * @interface IEvent\n\t * @prop {String} type - The event type name, possible values are:\n\t * 'contextmenu', 'mouseenter', 'mousedown', 'mousemove', 'mouseup', 'mouseout',\n\t * 'click', 'dblclick', 'keydown', 'keypress', 'keyup' and 'resize'\n\t * @prop {*} native - The original native event (null for emulated events, e.g. 'resize')\n\t * @prop {Number} x - The mouse x position, relative to the canvas (null for incompatible events)\n\t * @prop {Number} y - The mouse y position, relative to the canvas (null for incompatible events)\n\t */\n\n\tChart.helpers.extend(Chart.platform, implementation(Chart));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/platforms/platform.js\n// module id = 610\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\t// Default config for a category scale\n\tvar defaultConfig = {\n\t\tposition: 'bottom'\n\t};\n\n\tvar DatasetScale = Chart.Scale.extend({\n\t\t/**\n\t\t* Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those\n\t\t* else fall back to data.labels\n\t\t* @private\n\t\t*/\n\t\tgetLabels: function() {\n\t\t\tvar data = this.chart.data;\n\t\t\treturn (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;\n\t\t},\n\t\t// Implement this so that\n\t\tdetermineDataLimits: function() {\n\t\t\tvar me = this;\n\t\t\tvar labels = me.getLabels();\n\t\t\tme.minIndex = 0;\n\t\t\tme.maxIndex = labels.length - 1;\n\t\t\tvar findIndex;\n\n\t\t\tif (me.options.ticks.min !== undefined) {\n\t\t\t\t// user specified min value\n\t\t\t\tfindIndex = helpers.indexOf(labels, me.options.ticks.min);\n\t\t\t\tme.minIndex = findIndex !== -1 ? findIndex : me.minIndex;\n\t\t\t}\n\n\t\t\tif (me.options.ticks.max !== undefined) {\n\t\t\t\t// user specified max value\n\t\t\t\tfindIndex = helpers.indexOf(labels, me.options.ticks.max);\n\t\t\t\tme.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;\n\t\t\t}\n\n\t\t\tme.min = labels[me.minIndex];\n\t\t\tme.max = labels[me.maxIndex];\n\t\t},\n\n\t\tbuildTicks: function() {\n\t\t\tvar me = this;\n\t\t\tvar labels = me.getLabels();\n\t\t\t// If we are viewing some subset of labels, slice the original array\n\t\t\tme.ticks = (me.minIndex === 0 && me.maxIndex === labels.length - 1) ? labels : labels.slice(me.minIndex, me.maxIndex + 1);\n\t\t},\n\n\t\tgetLabelForIndex: function(index, datasetIndex) {\n\t\t\tvar me = this;\n\t\t\tvar data = me.chart.data;\n\t\t\tvar isHorizontal = me.isHorizontal();\n\n\t\t\tif (data.yLabels && !isHorizontal) {\n\t\t\t\treturn me.getRightValue(data.datasets[datasetIndex].data[index]);\n\t\t\t}\n\t\t\treturn me.ticks[index - me.minIndex];\n\t\t},\n\n\t\t// Used to get data value locations.  Value can either be an index or a numerical value\n\t\tgetPixelForValue: function(value, index, datasetIndex, includeOffset) {\n\t\t\tvar me = this;\n\t\t\t// 1 is added because we need the length but we have the indexes\n\t\t\tvar offsetAmt = Math.max((me.maxIndex + 1 - me.minIndex - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);\n\n\t\t\tif (value !== undefined && isNaN(index)) {\n\t\t\t\tvar labels = me.getLabels();\n\t\t\t\tvar idx = labels.indexOf(value);\n\t\t\t\tindex = idx !== -1 ? idx : index;\n\t\t\t}\n\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\tvar valueWidth = me.width / offsetAmt;\n\t\t\t\tvar widthOffset = (valueWidth * (index - me.minIndex));\n\n\t\t\t\tif (me.options.gridLines.offsetGridLines && includeOffset || me.maxIndex === me.minIndex && includeOffset) {\n\t\t\t\t\twidthOffset += (valueWidth / 2);\n\t\t\t\t}\n\n\t\t\t\treturn me.left + Math.round(widthOffset);\n\t\t\t}\n\t\t\tvar valueHeight = me.height / offsetAmt;\n\t\t\tvar heightOffset = (valueHeight * (index - me.minIndex));\n\n\t\t\tif (me.options.gridLines.offsetGridLines && includeOffset) {\n\t\t\t\theightOffset += (valueHeight / 2);\n\t\t\t}\n\n\t\t\treturn me.top + Math.round(heightOffset);\n\t\t},\n\t\tgetPixelForTick: function(index, includeOffset) {\n\t\t\treturn this.getPixelForValue(this.ticks[index], index + this.minIndex, null, includeOffset);\n\t\t},\n\t\tgetValueForPixel: function(pixel) {\n\t\t\tvar me = this;\n\t\t\tvar value;\n\t\t\tvar offsetAmt = Math.max((me.ticks.length - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);\n\t\t\tvar horz = me.isHorizontal();\n\t\t\tvar valueDimension = (horz ? me.width : me.height) / offsetAmt;\n\n\t\t\tpixel -= horz ? me.left : me.top;\n\n\t\t\tif (me.options.gridLines.offsetGridLines) {\n\t\t\t\tpixel -= (valueDimension / 2);\n\t\t\t}\n\n\t\t\tif (pixel <= 0) {\n\t\t\t\tvalue = 0;\n\t\t\t} else {\n\t\t\t\tvalue = Math.round(pixel / valueDimension);\n\t\t\t}\n\n\t\t\treturn value;\n\t\t},\n\t\tgetBasePixel: function() {\n\t\t\treturn this.bottom;\n\t\t}\n\t});\n\n\tChart.scaleService.registerScaleType('category', DatasetScale, defaultConfig);\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/scales/scale.category.js\n// module id = 611\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tvar defaultConfig = {\n\t\tposition: 'left',\n\t\tticks: {\n\t\t\tcallback: Chart.Ticks.formatters.linear\n\t\t}\n\t};\n\n\tvar LinearScale = Chart.LinearScaleBase.extend({\n\t\tdetermineDataLimits: function() {\n\t\t\tvar me = this;\n\t\t\tvar opts = me.options;\n\t\t\tvar chart = me.chart;\n\t\t\tvar data = chart.data;\n\t\t\tvar datasets = data.datasets;\n\t\t\tvar isHorizontal = me.isHorizontal();\n\n\t\t\tfunction IDMatches(meta) {\n\t\t\t\treturn isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n\t\t\t}\n\n\t\t\t// First Calculate the range\n\t\t\tme.min = null;\n\t\t\tme.max = null;\n\n\t\t\tvar hasStacks = opts.stacked;\n\t\t\tif (hasStacks === undefined) {\n\t\t\t\thelpers.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tif (hasStacks) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&\n\t\t\t\t\t\tmeta.stack !== undefined) {\n\t\t\t\t\t\thasStacks = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (opts.stacked || hasStacks) {\n\t\t\t\tvar valuesPerStack = {};\n\n\t\t\t\thelpers.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\tvar key = [\n\t\t\t\t\t\tmeta.type,\n\t\t\t\t\t\t// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n\t\t\t\t\t\t((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),\n\t\t\t\t\t\tmeta.stack\n\t\t\t\t\t].join('.');\n\n\t\t\t\t\tif (valuesPerStack[key] === undefined) {\n\t\t\t\t\t\tvaluesPerStack[key] = {\n\t\t\t\t\t\t\tpositiveValues: [],\n\t\t\t\t\t\t\tnegativeValues: []\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Store these per type\n\t\t\t\t\tvar positiveValues = valuesPerStack[key].positiveValues;\n\t\t\t\t\tvar negativeValues = valuesPerStack[key].negativeValues;\n\n\t\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\t\thelpers.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tpositiveValues[index] = positiveValues[index] || 0;\n\t\t\t\t\t\t\tnegativeValues[index] = negativeValues[index] || 0;\n\n\t\t\t\t\t\t\tif (opts.relativePoints) {\n\t\t\t\t\t\t\t\tpositiveValues[index] = 100;\n\t\t\t\t\t\t\t} else if (value < 0) {\n\t\t\t\t\t\t\t\tnegativeValues[index] += value;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpositiveValues[index] += value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\thelpers.each(valuesPerStack, function(valuesForType) {\n\t\t\t\t\tvar values = valuesForType.positiveValues.concat(valuesForType.negativeValues);\n\t\t\t\t\tvar minVal = helpers.min(values);\n\t\t\t\t\tvar maxVal = helpers.max(values);\n\t\t\t\t\tme.min = me.min === null ? minVal : Math.min(me.min, minVal);\n\t\t\t\t\tme.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n\t\t\t\t});\n\n\t\t\t} else {\n\t\t\t\thelpers.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\t\thelpers.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (me.min === null) {\n\t\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t\t} else if (value < me.min) {\n\t\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (me.max === null) {\n\t\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t\t} else if (value > me.max) {\n\t\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\t\t\tthis.handleTickRangeOptions();\n\t\t},\n\t\tgetTickLimit: function() {\n\t\t\tvar maxTicks;\n\t\t\tvar me = this;\n\t\t\tvar tickOpts = me.options.ticks;\n\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\tmaxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));\n\t\t\t} else {\n\t\t\t\t// The factor of 2 used to scale the font size has been experimentally determined.\n\t\t\t\tvar tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, Chart.defaults.global.defaultFontSize);\n\t\t\t\tmaxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));\n\t\t\t}\n\n\t\t\treturn maxTicks;\n\t\t},\n\t\t// Called after the ticks are built. We need\n\t\thandleDirectionalChanges: function() {\n\t\t\tif (!this.isHorizontal()) {\n\t\t\t\t// We are in a vertical orientation. The top value is the highest. So reverse the array\n\t\t\t\tthis.ticks.reverse();\n\t\t\t}\n\t\t},\n\t\tgetLabelForIndex: function(index, datasetIndex) {\n\t\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t\t},\n\t\t// Utils\n\t\tgetPixelForValue: function(value) {\n\t\t\t// This must be called after fit has been run so that\n\t\t\t// this.left, this.top, this.right, and this.bottom have been defined\n\t\t\tvar me = this;\n\t\t\tvar start = me.start;\n\n\t\t\tvar rightValue = +me.getRightValue(value);\n\t\t\tvar pixel;\n\t\t\tvar range = me.end - start;\n\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\tpixel = me.left + (me.width / range * (rightValue - start));\n\t\t\t\treturn Math.round(pixel);\n\t\t\t}\n\n\t\t\tpixel = me.bottom - (me.height / range * (rightValue - start));\n\t\t\treturn Math.round(pixel);\n\t\t},\n\t\tgetValueForPixel: function(pixel) {\n\t\t\tvar me = this;\n\t\t\tvar isHorizontal = me.isHorizontal();\n\t\t\tvar innerDimension = isHorizontal ? me.width : me.height;\n\t\t\tvar offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;\n\t\t\treturn me.start + ((me.end - me.start) * offset);\n\t\t},\n\t\tgetPixelForTick: function(index) {\n\t\t\treturn this.getPixelForValue(this.ticksAsNumbers[index]);\n\t\t}\n\t});\n\tChart.scaleService.registerScaleType('linear', LinearScale, defaultConfig);\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/scales/scale.linear.js\n// module id = 612\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers,\n\t\tnoop = helpers.noop;\n\n\tChart.LinearScaleBase = Chart.Scale.extend({\n\t\thandleTickRangeOptions: function() {\n\t\t\tvar me = this;\n\t\t\tvar opts = me.options;\n\t\t\tvar tickOpts = opts.ticks;\n\n\t\t\t// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,\n\t\t\t// do nothing since that would make the chart weird. If the user really wants a weird chart\n\t\t\t// axis, they can manually override it\n\t\t\tif (tickOpts.beginAtZero) {\n\t\t\t\tvar minSign = helpers.sign(me.min);\n\t\t\t\tvar maxSign = helpers.sign(me.max);\n\n\t\t\t\tif (minSign < 0 && maxSign < 0) {\n\t\t\t\t\t// move the top up to 0\n\t\t\t\t\tme.max = 0;\n\t\t\t\t} else if (minSign > 0 && maxSign > 0) {\n\t\t\t\t\t// move the bottom down to 0\n\t\t\t\t\tme.min = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tickOpts.min !== undefined) {\n\t\t\t\tme.min = tickOpts.min;\n\t\t\t} else if (tickOpts.suggestedMin !== undefined) {\n\t\t\t\tme.min = Math.min(me.min, tickOpts.suggestedMin);\n\t\t\t}\n\n\t\t\tif (tickOpts.max !== undefined) {\n\t\t\t\tme.max = tickOpts.max;\n\t\t\t} else if (tickOpts.suggestedMax !== undefined) {\n\t\t\t\tme.max = Math.max(me.max, tickOpts.suggestedMax);\n\t\t\t}\n\n\t\t\tif (me.min === me.max) {\n\t\t\t\tme.max++;\n\n\t\t\t\tif (!tickOpts.beginAtZero) {\n\t\t\t\t\tme.min--;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tgetTickLimit: noop,\n\t\thandleDirectionalChanges: noop,\n\n\t\tbuildTicks: function() {\n\t\t\tvar me = this;\n\t\t\tvar opts = me.options;\n\t\t\tvar tickOpts = opts.ticks;\n\n\t\t\t// Figure out what the max number of ticks we can support it is based on the size of\n\t\t\t// the axis area. For now, we say that the minimum tick spacing in pixels must be 50\n\t\t\t// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n\t\t\t// the graph. Make sure we always have at least 2 ticks\n\t\t\tvar maxTicks = me.getTickLimit();\n\t\t\tmaxTicks = Math.max(2, maxTicks);\n\n\t\t\tvar numericGeneratorOptions = {\n\t\t\t\tmaxTicks: maxTicks,\n\t\t\t\tmin: tickOpts.min,\n\t\t\t\tmax: tickOpts.max,\n\t\t\t\tstepSize: helpers.getValueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)\n\t\t\t};\n\t\t\tvar ticks = me.ticks = Chart.Ticks.generators.linear(numericGeneratorOptions, me);\n\n\t\t\tme.handleDirectionalChanges();\n\n\t\t\t// At this point, we need to update our max and min given the tick values since we have expanded the\n\t\t\t// range of the scale\n\t\t\tme.max = helpers.max(ticks);\n\t\t\tme.min = helpers.min(ticks);\n\n\t\t\tif (tickOpts.reverse) {\n\t\t\t\tticks.reverse();\n\n\t\t\t\tme.start = me.max;\n\t\t\t\tme.end = me.min;\n\t\t\t} else {\n\t\t\t\tme.start = me.min;\n\t\t\t\tme.end = me.max;\n\t\t\t}\n\t\t},\n\t\tconvertTicksToLabels: function() {\n\t\t\tvar me = this;\n\t\t\tme.ticksAsNumbers = me.ticks.slice();\n\t\t\tme.zeroLineIndex = me.ticks.indexOf(0);\n\n\t\t\tChart.Scale.prototype.convertTicksToLabels.call(me);\n\t\t}\n\t});\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/scales/scale.linearbase.js\n// module id = 613\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tvar defaultConfig = {\n\t\tposition: 'left',\n\n\t\t// label settings\n\t\tticks: {\n\t\t\tcallback: Chart.Ticks.formatters.logarithmic\n\t\t}\n\t};\n\n\tvar LogarithmicScale = Chart.Scale.extend({\n\t\tdetermineDataLimits: function() {\n\t\t\tvar me = this;\n\t\t\tvar opts = me.options;\n\t\t\tvar tickOpts = opts.ticks;\n\t\t\tvar chart = me.chart;\n\t\t\tvar data = chart.data;\n\t\t\tvar datasets = data.datasets;\n\t\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\t\t\tvar isHorizontal = me.isHorizontal();\n\t\t\tfunction IDMatches(meta) {\n\t\t\t\treturn isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n\t\t\t}\n\n\t\t\t// Calculate Range\n\t\t\tme.min = null;\n\t\t\tme.max = null;\n\t\t\tme.minNotZero = null;\n\n\t\t\tvar hasStacks = opts.stacked;\n\t\t\tif (hasStacks === undefined) {\n\t\t\t\thelpers.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tif (hasStacks) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&\n\t\t\t\t\t\tmeta.stack !== undefined) {\n\t\t\t\t\t\thasStacks = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (opts.stacked || hasStacks) {\n\t\t\t\tvar valuesPerStack = {};\n\n\t\t\t\thelpers.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\tvar key = [\n\t\t\t\t\t\tmeta.type,\n\t\t\t\t\t\t// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n\t\t\t\t\t\t((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),\n\t\t\t\t\t\tmeta.stack\n\t\t\t\t\t].join('.');\n\n\t\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\t\tif (valuesPerStack[key] === undefined) {\n\t\t\t\t\t\t\tvaluesPerStack[key] = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\thelpers.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\t\tvar values = valuesPerStack[key];\n\t\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvalues[index] = values[index] || 0;\n\n\t\t\t\t\t\t\tif (opts.relativePoints) {\n\t\t\t\t\t\t\t\tvalues[index] = 100;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Don't need to split positive and negative since the log scale can't handle a 0 crossing\n\t\t\t\t\t\t\t\tvalues[index] += value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\thelpers.each(valuesPerStack, function(valuesForType) {\n\t\t\t\t\tvar minVal = helpers.min(valuesForType);\n\t\t\t\t\tvar maxVal = helpers.max(valuesForType);\n\t\t\t\t\tme.min = me.min === null ? minVal : Math.min(me.min, minVal);\n\t\t\t\t\tme.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n\t\t\t\t});\n\n\t\t\t} else {\n\t\t\t\thelpers.each(datasets, function(dataset, datasetIndex) {\n\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\t\thelpers.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (me.min === null) {\n\t\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t\t} else if (value < me.min) {\n\t\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (me.max === null) {\n\t\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t\t} else if (value > me.max) {\n\t\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {\n\t\t\t\t\t\t\t\tme.minNotZero = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tme.min = getValueOrDefault(tickOpts.min, me.min);\n\t\t\tme.max = getValueOrDefault(tickOpts.max, me.max);\n\n\t\t\tif (me.min === me.max) {\n\t\t\t\tif (me.min !== 0 && me.min !== null) {\n\t\t\t\t\tme.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);\n\t\t\t\t\tme.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);\n\t\t\t\t} else {\n\t\t\t\t\tme.min = 1;\n\t\t\t\t\tme.max = 10;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tbuildTicks: function() {\n\t\t\tvar me = this;\n\t\t\tvar opts = me.options;\n\t\t\tvar tickOpts = opts.ticks;\n\n\t\t\tvar generationOptions = {\n\t\t\t\tmin: tickOpts.min,\n\t\t\t\tmax: tickOpts.max\n\t\t\t};\n\t\t\tvar ticks = me.ticks = Chart.Ticks.generators.logarithmic(generationOptions, me);\n\n\t\t\tif (!me.isHorizontal()) {\n\t\t\t\t// We are in a vertical orientation. The top value is the highest. So reverse the array\n\t\t\t\tticks.reverse();\n\t\t\t}\n\n\t\t\t// At this point, we need to update our max and min given the tick values since we have expanded the\n\t\t\t// range of the scale\n\t\t\tme.max = helpers.max(ticks);\n\t\t\tme.min = helpers.min(ticks);\n\n\t\t\tif (tickOpts.reverse) {\n\t\t\t\tticks.reverse();\n\n\t\t\t\tme.start = me.max;\n\t\t\t\tme.end = me.min;\n\t\t\t} else {\n\t\t\t\tme.start = me.min;\n\t\t\t\tme.end = me.max;\n\t\t\t}\n\t\t},\n\t\tconvertTicksToLabels: function() {\n\t\t\tthis.tickValues = this.ticks.slice();\n\n\t\t\tChart.Scale.prototype.convertTicksToLabels.call(this);\n\t\t},\n\t\t// Get the correct tooltip label\n\t\tgetLabelForIndex: function(index, datasetIndex) {\n\t\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t\t},\n\t\tgetPixelForTick: function(index) {\n\t\t\treturn this.getPixelForValue(this.tickValues[index]);\n\t\t},\n\t\tgetPixelForValue: function(value) {\n\t\t\tvar me = this;\n\t\t\tvar innerDimension;\n\t\t\tvar pixel;\n\n\t\t\tvar start = me.start;\n\t\t\tvar newVal = +me.getRightValue(value);\n\t\t\tvar range;\n\t\t\tvar opts = me.options;\n\t\t\tvar tickOpts = opts.ticks;\n\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\trange = helpers.log10(me.end) - helpers.log10(start); // todo: if start === 0\n\t\t\t\tif (newVal === 0) {\n\t\t\t\t\tpixel = me.left;\n\t\t\t\t} else {\n\t\t\t\t\tinnerDimension = me.width;\n\t\t\t\t\tpixel = me.left + (innerDimension / range * (helpers.log10(newVal) - helpers.log10(start)));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Bottom - top since pixels increase downward on a screen\n\t\t\t\tinnerDimension = me.height;\n\t\t\t\tif (start === 0 && !tickOpts.reverse) {\n\t\t\t\t\trange = helpers.log10(me.end) - helpers.log10(me.minNotZero);\n\t\t\t\t\tif (newVal === start) {\n\t\t\t\t\t\tpixel = me.bottom;\n\t\t\t\t\t} else if (newVal === me.minNotZero) {\n\t\t\t\t\t\tpixel = me.bottom - innerDimension * 0.02;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpixel = me.bottom - innerDimension * 0.02 - (innerDimension * 0.98/ range * (helpers.log10(newVal)-helpers.log10(me.minNotZero)));\n\t\t\t\t\t}\n\t\t\t\t} else if (me.end === 0 && tickOpts.reverse) {\n\t\t\t\t\trange = helpers.log10(me.start) - helpers.log10(me.minNotZero);\n\t\t\t\t\tif (newVal === me.end) {\n\t\t\t\t\t\tpixel = me.top;\n\t\t\t\t\t} else if (newVal === me.minNotZero) {\n\t\t\t\t\t\tpixel = me.top + innerDimension * 0.02;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpixel = me.top + innerDimension * 0.02 + (innerDimension * 0.98/ range * (helpers.log10(newVal)-helpers.log10(me.minNotZero)));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trange = helpers.log10(me.end) - helpers.log10(start);\n\t\t\t\t\tinnerDimension = me.height;\n\t\t\t\t\tpixel = me.bottom - (innerDimension / range * (helpers.log10(newVal) - helpers.log10(start)));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn pixel;\n\t\t},\n\t\tgetValueForPixel: function(pixel) {\n\t\t\tvar me = this;\n\t\t\tvar range = helpers.log10(me.end) - helpers.log10(me.start);\n\t\t\tvar value, innerDimension;\n\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\tinnerDimension = me.width;\n\t\t\t\tvalue = me.start * Math.pow(10, (pixel - me.left) * range / innerDimension);\n\t\t\t} else {  // todo: if start === 0\n\t\t\t\tinnerDimension = me.height;\n\t\t\t\tvalue = Math.pow(10, (me.bottom - pixel) * range / innerDimension) / me.start;\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t});\n\tChart.scaleService.registerScaleType('logarithmic', LogarithmicScale, defaultConfig);\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/scales/scale.logarithmic.js\n// module id = 614\n// module chunks = 0","'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\tvar globalDefaults = Chart.defaults.global;\n\n\tvar defaultConfig = {\n\t\tdisplay: true,\n\n\t\t// Boolean - Whether to animate scaling the chart from the centre\n\t\tanimate: true,\n\t\tlineArc: false,\n\t\tposition: 'chartArea',\n\n\t\tangleLines: {\n\t\t\tdisplay: true,\n\t\t\tcolor: 'rgba(0, 0, 0, 0.1)',\n\t\t\tlineWidth: 1\n\t\t},\n\n\t\t// label settings\n\t\tticks: {\n\t\t\t// Boolean - Show a backdrop to the scale label\n\t\t\tshowLabelBackdrop: true,\n\n\t\t\t// String - The colour of the label backdrop\n\t\t\tbackdropColor: 'rgba(255,255,255,0.75)',\n\n\t\t\t// Number - The backdrop padding above & below the label in pixels\n\t\t\tbackdropPaddingY: 2,\n\n\t\t\t// Number - The backdrop padding to the side of the label in pixels\n\t\t\tbackdropPaddingX: 2,\n\n\t\t\tcallback: Chart.Ticks.formatters.linear\n\t\t},\n\n\t\tpointLabels: {\n\t\t\t// Number - Point label font size in pixels\n\t\t\tfontSize: 10,\n\n\t\t\t// Function - Used to convert point labels\n\t\t\tcallback: function(label) {\n\t\t\t\treturn label;\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction getValueCount(scale) {\n\t\treturn !scale.options.lineArc ? scale.chart.data.labels.length : 0;\n\t}\n\n\tfunction getPointLabelFontOptions(scale) {\n\t\tvar pointLabelOptions = scale.options.pointLabels;\n\t\tvar fontSize = helpers.getValueOrDefault(pointLabelOptions.fontSize, globalDefaults.defaultFontSize);\n\t\tvar fontStyle = helpers.getValueOrDefault(pointLabelOptions.fontStyle, globalDefaults.defaultFontStyle);\n\t\tvar fontFamily = helpers.getValueOrDefault(pointLabelOptions.fontFamily, globalDefaults.defaultFontFamily);\n\t\tvar font = helpers.fontString(fontSize, fontStyle, fontFamily);\n\n\t\treturn {\n\t\t\tsize: fontSize,\n\t\t\tstyle: fontStyle,\n\t\t\tfamily: fontFamily,\n\t\t\tfont: font\n\t\t};\n\t}\n\n\tfunction measureLabelSize(ctx, fontSize, label) {\n\t\tif (helpers.isArray(label)) {\n\t\t\treturn {\n\t\t\t\tw: helpers.longestText(ctx, ctx.font, label),\n\t\t\t\th: (label.length * fontSize) + ((label.length - 1) * 1.5 * fontSize)\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tw: ctx.measureText(label).width,\n\t\t\th: fontSize\n\t\t};\n\t}\n\n\tfunction determineLimits(angle, pos, size, min, max) {\n\t\tif (angle === min || angle === max) {\n\t\t\treturn {\n\t\t\t\tstart: pos - (size / 2),\n\t\t\t\tend: pos + (size / 2)\n\t\t\t};\n\t\t} else if (angle < min || angle > max) {\n\t\t\treturn {\n\t\t\t\tstart: pos - size - 5,\n\t\t\t\tend: pos\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tstart: pos,\n\t\t\tend: pos + size + 5\n\t\t};\n\t}\n\n\t/**\n\t * Helper function to fit a radial linear scale with point labels\n\t */\n\tfunction fitWithPointLabels(scale) {\n\t\t/*\n\t\t * Right, this is really confusing and there is a lot of maths going on here\n\t\t * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n\t\t *\n\t\t * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n\t\t *\n\t\t * Solution:\n\t\t *\n\t\t * We assume the radius of the polygon is half the size of the canvas at first\n\t\t * at each index we check if the text overlaps.\n\t\t *\n\t\t * Where it does, we store that angle and that index.\n\t\t *\n\t\t * After finding the largest index and angle we calculate how much we need to remove\n\t\t * from the shape radius to move the point inwards by that x.\n\t\t *\n\t\t * We average the left and right distances to get the maximum shape radius that can fit in the box\n\t\t * along with labels.\n\t\t *\n\t\t * Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n\t\t * on each side, removing that from the size, halving it and adding the left x protrusion width.\n\t\t *\n\t\t * This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n\t\t * and position it in the most space efficient manner\n\t\t *\n\t\t * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\t\t */\n\n\t\tvar plFont = getPointLabelFontOptions(scale);\n\n\t\t// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n\t\t// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\t\tvar largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);\n\t\tvar furthestLimits = {\n\t\t\tl: scale.width,\n\t\t\tr: 0,\n\t\t\tt: scale.height,\n\t\t\tb: 0\n\t\t};\n\t\tvar furthestAngles = {};\n\t\tvar i;\n\t\tvar textSize;\n\t\tvar pointPosition;\n\n\t\tscale.ctx.font = plFont.font;\n\t\tscale._pointLabelSizes = [];\n\n\t\tvar valueCount = getValueCount(scale);\n\t\tfor (i = 0; i < valueCount; i++) {\n\t\t\tpointPosition = scale.getPointPosition(i, largestPossibleRadius);\n\t\t\ttextSize = measureLabelSize(scale.ctx, plFont.size, scale.pointLabels[i] || '');\n\t\t\tscale._pointLabelSizes[i] = textSize;\n\n\t\t\t// Add quarter circle to make degree 0 mean top of circle\n\t\t\tvar angleRadians = scale.getIndexAngle(i);\n\t\t\tvar angle = helpers.toDegrees(angleRadians) % 360;\n\t\t\tvar hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n\t\t\tvar vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n\n\t\t\tif (hLimits.start < furthestLimits.l) {\n\t\t\t\tfurthestLimits.l = hLimits.start;\n\t\t\t\tfurthestAngles.l = angleRadians;\n\t\t\t}\n\n\t\t\tif (hLimits.end > furthestLimits.r) {\n\t\t\t\tfurthestLimits.r = hLimits.end;\n\t\t\t\tfurthestAngles.r = angleRadians;\n\t\t\t}\n\n\t\t\tif (vLimits.start < furthestLimits.t) {\n\t\t\t\tfurthestLimits.t = vLimits.start;\n\t\t\t\tfurthestAngles.t = angleRadians;\n\t\t\t}\n\n\t\t\tif (vLimits.end > furthestLimits.b) {\n\t\t\t\tfurthestLimits.b = vLimits.end;\n\t\t\t\tfurthestAngles.b = angleRadians;\n\t\t\t}\n\t\t}\n\n\t\tscale.setReductions(largestPossibleRadius, furthestLimits, furthestAngles);\n\t}\n\n\t/**\n\t * Helper function to fit a radial linear scale with no point labels\n\t */\n\tfunction fit(scale) {\n\t\tvar largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);\n\t\tscale.drawingArea = Math.round(largestPossibleRadius);\n\t\tscale.setCenterPoint(0, 0, 0, 0);\n\t}\n\n\tfunction getTextAlignForAngle(angle) {\n\t\tif (angle === 0 || angle === 180) {\n\t\t\treturn 'center';\n\t\t} else if (angle < 180) {\n\t\t\treturn 'left';\n\t\t}\n\n\t\treturn 'right';\n\t}\n\n\tfunction fillText(ctx, text, position, fontSize) {\n\t\tif (helpers.isArray(text)) {\n\t\t\tvar y = position.y;\n\t\t\tvar spacing = 1.5 * fontSize;\n\n\t\t\tfor (var i = 0; i < text.length; ++i) {\n\t\t\t\tctx.fillText(text[i], position.x, y);\n\t\t\t\ty+= spacing;\n\t\t\t}\n\t\t} else {\n\t\t\tctx.fillText(text, position.x, position.y);\n\t\t}\n\t}\n\n\tfunction adjustPointPositionForLabelHeight(angle, textSize, position) {\n\t\tif (angle === 90 || angle === 270) {\n\t\t\tposition.y -= (textSize.h / 2);\n\t\t} else if (angle > 270 || angle < 90) {\n\t\t\tposition.y -= textSize.h;\n\t\t}\n\t}\n\n\tfunction drawPointLabels(scale) {\n\t\tvar ctx = scale.ctx;\n\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\t\tvar opts = scale.options;\n\t\tvar angleLineOpts = opts.angleLines;\n\t\tvar pointLabelOpts = opts.pointLabels;\n\n\t\tctx.lineWidth = angleLineOpts.lineWidth;\n\t\tctx.strokeStyle = angleLineOpts.color;\n\n\t\tvar outerDistance = scale.getDistanceFromCenterForValue(opts.reverse ? scale.min : scale.max);\n\n\t\t// Point Label Font\n\t\tvar plFont = getPointLabelFontOptions(scale);\n\n\t\tctx.textBaseline = 'top';\n\n\t\tfor (var i = getValueCount(scale) - 1; i >= 0; i--) {\n\t\t\tif (angleLineOpts.display) {\n\t\t\t\tvar outerPosition = scale.getPointPosition(i, outerDistance);\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(scale.xCenter, scale.yCenter);\n\t\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);\n\t\t\t\tctx.stroke();\n\t\t\t\tctx.closePath();\n\t\t\t}\n\t\t\t// Extra 3px out for some label spacing\n\t\t\tvar pointLabelPosition = scale.getPointPosition(i, outerDistance + 5);\n\n\t\t\t// Keep this in loop since we may support array properties here\n\t\t\tvar pointLabelFontColor = getValueOrDefault(pointLabelOpts.fontColor, globalDefaults.defaultFontColor);\n\t\t\tctx.font = plFont.font;\n\t\t\tctx.fillStyle = pointLabelFontColor;\n\n\t\t\tvar angleRadians = scale.getIndexAngle(i);\n\t\t\tvar angle = helpers.toDegrees(angleRadians);\n\t\t\tctx.textAlign = getTextAlignForAngle(angle);\n\t\t\tadjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);\n\t\t\tfillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.size);\n\t\t}\n\t}\n\n\tfunction drawRadiusLine(scale, gridLineOpts, radius, index) {\n\t\tvar ctx = scale.ctx;\n\t\tctx.strokeStyle = helpers.getValueAtIndexOrDefault(gridLineOpts.color, index - 1);\n\t\tctx.lineWidth = helpers.getValueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);\n\n\t\tif (scale.options.lineArc) {\n\t\t\t// Draw circular arcs between the points\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);\n\t\t\tctx.closePath();\n\t\t\tctx.stroke();\n\t\t} else {\n\t\t\t// Draw straight lines connecting each index\n\t\t\tvar valueCount = getValueCount(scale);\n\n\t\t\tif (valueCount === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tctx.beginPath();\n\t\t\tvar pointPosition = scale.getPointPosition(0, radius);\n\t\t\tctx.moveTo(pointPosition.x, pointPosition.y);\n\n\t\t\tfor (var i = 1; i < valueCount; i++) {\n\t\t\t\tpointPosition = scale.getPointPosition(i, radius);\n\t\t\t\tctx.lineTo(pointPosition.x, pointPosition.y);\n\t\t\t}\n\n\t\t\tctx.closePath();\n\t\t\tctx.stroke();\n\t\t}\n\t}\n\n\tfunction numberOrZero(param) {\n\t\treturn helpers.isNumber(param) ? param : 0;\n\t}\n\n\tvar LinearRadialScale = Chart.LinearScaleBase.extend({\n\t\tsetDimensions: function() {\n\t\t\tvar me = this;\n\t\t\tvar opts = me.options;\n\t\t\tvar tickOpts = opts.ticks;\n\t\t\t// Set the unconstrained dimension before label rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.height = me.maxHeight;\n\t\t\tme.xCenter = Math.round(me.width / 2);\n\t\t\tme.yCenter = Math.round(me.height / 2);\n\n\t\t\tvar minSize = helpers.min([me.height, me.width]);\n\t\t\tvar tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);\n\t\t\tme.drawingArea = opts.display ? (minSize / 2) - (tickFontSize / 2 + tickOpts.backdropPaddingY) : (minSize / 2);\n\t\t},\n\t\tdetermineDataLimits: function() {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart;\n\t\t\tvar min = Number.POSITIVE_INFINITY;\n\t\t\tvar max = Number.NEGATIVE_INFINITY;\n\n\t\t\thelpers.each(chart.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex)) {\n\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\n\t\t\t\t\thelpers.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmin = Math.min(value, min);\n\t\t\t\t\t\tmax = Math.max(value, max);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tme.min = (min === Number.POSITIVE_INFINITY ? 0 : min);\n\t\t\tme.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);\n\n\t\t\t// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\t\t\tme.handleTickRangeOptions();\n\t\t},\n\t\tgetTickLimit: function() {\n\t\t\tvar tickOpts = this.options.ticks;\n\t\t\tvar tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);\n\t\t\treturn Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));\n\t\t},\n\t\tconvertTicksToLabels: function() {\n\t\t\tvar me = this;\n\t\t\tChart.LinearScaleBase.prototype.convertTicksToLabels.call(me);\n\n\t\t\t// Point labels\n\t\t\tme.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);\n\t\t},\n\t\tgetLabelForIndex: function(index, datasetIndex) {\n\t\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t\t},\n\t\tfit: function() {\n\t\t\tif (this.options.lineArc) {\n\t\t\t\tfit(this);\n\t\t\t} else {\n\t\t\t\tfitWithPointLabels(this);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Set radius reductions and determine new radius and center point\n\t\t * @private\n\t\t */\n\t\tsetReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {\n\t\t\tvar me = this;\n\t\t\tvar radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n\t\t\tvar radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n\t\t\tvar radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n\t\t\tvar radiusReductionBottom = -Math.max(furthestLimits.b - me.height, 0) / Math.cos(furthestAngles.b);\n\n\t\t\tradiusReductionLeft = numberOrZero(radiusReductionLeft);\n\t\t\tradiusReductionRight = numberOrZero(radiusReductionRight);\n\t\t\tradiusReductionTop = numberOrZero(radiusReductionTop);\n\t\t\tradiusReductionBottom = numberOrZero(radiusReductionBottom);\n\n\t\t\tme.drawingArea = Math.min(\n\t\t\t\tMath.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),\n\t\t\t\tMath.round(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));\n\t\t\tme.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n\t\t},\n\t\tsetCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {\n\t\t\tvar me = this;\n\t\t\tvar maxRight = me.width - rightMovement - me.drawingArea,\n\t\t\t\tmaxLeft = leftMovement + me.drawingArea,\n\t\t\t\tmaxTop = topMovement + me.drawingArea,\n\t\t\t\tmaxBottom = me.height - bottomMovement - me.drawingArea;\n\n\t\t\tme.xCenter = Math.round(((maxLeft + maxRight) / 2) + me.left);\n\t\t\tme.yCenter = Math.round(((maxTop + maxBottom) / 2) + me.top);\n\t\t},\n\n\t\tgetIndexAngle: function(index) {\n\t\t\tvar angleMultiplier = (Math.PI * 2) / getValueCount(this);\n\t\t\tvar startAngle = this.chart.options && this.chart.options.startAngle ?\n\t\t\t\tthis.chart.options.startAngle :\n\t\t\t\t0;\n\n\t\t\tvar startAngleRadians = startAngle * Math.PI * 2 / 360;\n\n\t\t\t// Start from the top instead of right, so remove a quarter of the circle\n\t\t\treturn index * angleMultiplier + startAngleRadians;\n\t\t},\n\t\tgetDistanceFromCenterForValue: function(value) {\n\t\t\tvar me = this;\n\n\t\t\tif (value === null) {\n\t\t\t\treturn 0; // null always in center\n\t\t\t}\n\n\t\t\t// Take into account half font size + the yPadding of the top value\n\t\t\tvar scalingFactor = me.drawingArea / (me.max - me.min);\n\t\t\tif (me.options.reverse) {\n\t\t\t\treturn (me.max - value) * scalingFactor;\n\t\t\t}\n\t\t\treturn (value - me.min) * scalingFactor;\n\t\t},\n\t\tgetPointPosition: function(index, distanceFromCenter) {\n\t\t\tvar me = this;\n\t\t\tvar thisAngle = me.getIndexAngle(index) - (Math.PI / 2);\n\t\t\treturn {\n\t\t\t\tx: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,\n\t\t\t\ty: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter\n\t\t\t};\n\t\t},\n\t\tgetPointPositionForValue: function(index, value) {\n\t\t\treturn this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n\t\t},\n\n\t\tgetBasePosition: function() {\n\t\t\tvar me = this;\n\t\t\tvar min = me.min;\n\t\t\tvar max = me.max;\n\n\t\t\treturn me.getPointPositionForValue(0,\n\t\t\t\tme.beginAtZero? 0:\n\t\t\t\tmin < 0 && max < 0? max :\n\t\t\t\tmin > 0 && max > 0? min :\n\t\t\t\t0);\n\t\t},\n\n\t\tdraw: function() {\n\t\t\tvar me = this;\n\t\t\tvar opts = me.options;\n\t\t\tvar gridLineOpts = opts.gridLines;\n\t\t\tvar tickOpts = opts.ticks;\n\t\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\n\t\t\tif (opts.display) {\n\t\t\t\tvar ctx = me.ctx;\n\n\t\t\t\t// Tick Font\n\t\t\t\tvar tickFontSize = getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);\n\t\t\t\tvar tickFontStyle = getValueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);\n\t\t\t\tvar tickFontFamily = getValueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);\n\t\t\t\tvar tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);\n\n\t\t\t\thelpers.each(me.ticks, function(label, index) {\n\t\t\t\t\t// Don't draw a centre value (if it is minimum)\n\t\t\t\t\tif (index > 0 || opts.reverse) {\n\t\t\t\t\t\tvar yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);\n\t\t\t\t\t\tvar yHeight = me.yCenter - yCenterOffset;\n\n\t\t\t\t\t\t// Draw circular lines around the scale\n\t\t\t\t\t\tif (gridLineOpts.display && index !== 0) {\n\t\t\t\t\t\t\tdrawRadiusLine(me, gridLineOpts, yCenterOffset, index);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (tickOpts.display) {\n\t\t\t\t\t\t\tvar tickFontColor = getValueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);\n\t\t\t\t\t\t\tctx.font = tickLabelFont;\n\n\t\t\t\t\t\t\tif (tickOpts.showLabelBackdrop) {\n\t\t\t\t\t\t\t\tvar labelWidth = ctx.measureText(label).width;\n\t\t\t\t\t\t\t\tctx.fillStyle = tickOpts.backdropColor;\n\t\t\t\t\t\t\t\tctx.fillRect(\n\t\t\t\t\t\t\t\t\tme.xCenter - labelWidth / 2 - tickOpts.backdropPaddingX,\n\t\t\t\t\t\t\t\t\tyHeight - tickFontSize / 2 - tickOpts.backdropPaddingY,\n\t\t\t\t\t\t\t\t\tlabelWidth + tickOpts.backdropPaddingX * 2,\n\t\t\t\t\t\t\t\t\ttickFontSize + tickOpts.backdropPaddingY * 2\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\t\t\tctx.fillStyle = tickFontColor;\n\t\t\t\t\t\t\tctx.fillText(label, me.xCenter, yHeight);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (!opts.lineArc) {\n\t\t\t\t\tdrawPointLabels(me);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tChart.scaleService.registerScaleType('radialLinear', LinearRadialScale, defaultConfig);\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/scales/scale.radialLinear.js\n// module id = 615\n// module chunks = 0","/* global window: false */\n'use strict';\n\nvar moment = require('moment');\nmoment = typeof(moment) === 'function' ? moment : window.moment;\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\tvar time = {\n\t\tunits: [{\n\t\t\tname: 'millisecond',\n\t\t\tsteps: [1, 2, 5, 10, 20, 50, 100, 250, 500]\n\t\t}, {\n\t\t\tname: 'second',\n\t\t\tsteps: [1, 2, 5, 10, 30]\n\t\t}, {\n\t\t\tname: 'minute',\n\t\t\tsteps: [1, 2, 5, 10, 30]\n\t\t}, {\n\t\t\tname: 'hour',\n\t\t\tsteps: [1, 2, 3, 6, 12]\n\t\t}, {\n\t\t\tname: 'day',\n\t\t\tsteps: [1, 2, 5]\n\t\t}, {\n\t\t\tname: 'week',\n\t\t\tmaxStep: 4\n\t\t}, {\n\t\t\tname: 'month',\n\t\t\tmaxStep: 3\n\t\t}, {\n\t\t\tname: 'quarter',\n\t\t\tmaxStep: 4\n\t\t}, {\n\t\t\tname: 'year',\n\t\t\tmaxStep: false\n\t\t}]\n\t};\n\n\tvar defaultConfig = {\n\t\tposition: 'bottom',\n\n\t\ttime: {\n\t\t\tparser: false, // false == a pattern string from http://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment\n\t\t\tformat: false, // DEPRECATED false == date objects, moment object, callback or a pattern string from http://momentjs.com/docs/#/parsing/string-format/\n\t\t\tunit: false, // false == automatic or override with week, month, year, etc.\n\t\t\tround: false, // none, or override with week, month, year, etc.\n\t\t\tdisplayFormat: false, // DEPRECATED\n\t\t\tisoWeekday: false, // override week start day - see http://momentjs.com/docs/#/get-set/iso-weekday/\n\t\t\tminUnit: 'millisecond',\n\n\t\t\t// defaults to unit's corresponding unitFormat below or override using pattern string from http://momentjs.com/docs/#/displaying/format/\n\t\t\tdisplayFormats: {\n\t\t\t\tmillisecond: 'h:mm:ss.SSS a', // 11:20:01.123 AM,\n\t\t\t\tsecond: 'h:mm:ss a', // 11:20:01 AM\n\t\t\t\tminute: 'h:mm:ss a', // 11:20:01 AM\n\t\t\t\thour: 'MMM D, hA', // Sept 4, 5PM\n\t\t\t\tday: 'll', // Sep 4 2015\n\t\t\t\tweek: 'll', // Week 46, or maybe \"[W]WW - YYYY\" ?\n\t\t\t\tmonth: 'MMM YYYY', // Sept 2015\n\t\t\t\tquarter: '[Q]Q - YYYY', // Q3\n\t\t\t\tyear: 'YYYY' // 2015\n\t\t\t}\n\t\t},\n\t\tticks: {\n\t\t\tautoSkip: false\n\t\t}\n\t};\n\n\tvar TimeScale = Chart.Scale.extend({\n\t\tinitialize: function() {\n\t\t\tif (!moment) {\n\t\t\t\tthrow new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');\n\t\t\t}\n\n\t\t\tChart.Scale.prototype.initialize.call(this);\n\t\t},\n\t\tgetLabelMoment: function(datasetIndex, index) {\n\t\t\tif (datasetIndex === null || index === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (typeof this.labelMoments[datasetIndex] !== 'undefined') {\n\t\t\t\treturn this.labelMoments[datasetIndex][index];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\tgetLabelDiff: function(datasetIndex, index) {\n\t\t\tvar me = this;\n\t\t\tif (datasetIndex === null || index === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (me.labelDiffs === undefined) {\n\t\t\t\tme.buildLabelDiffs();\n\t\t\t}\n\n\t\t\tif (typeof me.labelDiffs[datasetIndex] !== 'undefined') {\n\t\t\t\treturn me.labelDiffs[datasetIndex][index];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\tgetMomentStartOf: function(tick) {\n\t\t\tvar me = this;\n\t\t\tif (me.options.time.unit === 'week' && me.options.time.isoWeekday !== false) {\n\t\t\t\treturn tick.clone().startOf('isoWeek').isoWeekday(me.options.time.isoWeekday);\n\t\t\t}\n\t\t\treturn tick.clone().startOf(me.tickUnit);\n\t\t},\n\t\tdetermineDataLimits: function() {\n\t\t\tvar me = this;\n\t\t\tme.labelMoments = [];\n\n\t\t\t// Only parse these once. If the dataset does not have data as x,y pairs, we will use\n\t\t\t// these\n\t\t\tvar scaleLabelMoments = [];\n\t\t\tif (me.chart.data.labels && me.chart.data.labels.length > 0) {\n\t\t\t\thelpers.each(me.chart.data.labels, function(label) {\n\t\t\t\t\tvar labelMoment = me.parseTime(label);\n\n\t\t\t\t\tif (labelMoment.isValid()) {\n\t\t\t\t\t\tif (me.options.time.round) {\n\t\t\t\t\t\t\tlabelMoment.startOf(me.options.time.round);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tscaleLabelMoments.push(labelMoment);\n\t\t\t\t\t}\n\t\t\t\t}, me);\n\n\t\t\t\tme.firstTick = moment.min.call(me, scaleLabelMoments);\n\t\t\t\tme.lastTick = moment.max.call(me, scaleLabelMoments);\n\t\t\t} else {\n\t\t\t\tme.firstTick = null;\n\t\t\t\tme.lastTick = null;\n\t\t\t}\n\n\t\t\thelpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\tvar momentsForDataset = [];\n\t\t\t\tvar datasetVisible = me.chart.isDatasetVisible(datasetIndex);\n\n\t\t\t\tif (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {\n\t\t\t\t\thelpers.each(dataset.data, function(value) {\n\t\t\t\t\t\tvar labelMoment = me.parseTime(me.getRightValue(value));\n\n\t\t\t\t\t\tif (labelMoment.isValid()) {\n\t\t\t\t\t\t\tif (me.options.time.round) {\n\t\t\t\t\t\t\t\tlabelMoment.startOf(me.options.time.round);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmomentsForDataset.push(labelMoment);\n\n\t\t\t\t\t\t\tif (datasetVisible) {\n\t\t\t\t\t\t\t\t// May have gone outside the scale ranges, make sure we keep the first and last ticks updated\n\t\t\t\t\t\t\t\tme.firstTick = me.firstTick !== null ? moment.min(me.firstTick, labelMoment) : labelMoment;\n\t\t\t\t\t\t\t\tme.lastTick = me.lastTick !== null ? moment.max(me.lastTick, labelMoment) : labelMoment;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, me);\n\t\t\t\t} else {\n\t\t\t\t\t// We have no labels. Use the ones from the scale\n\t\t\t\t\tmomentsForDataset = scaleLabelMoments;\n\t\t\t\t}\n\n\t\t\t\tme.labelMoments.push(momentsForDataset);\n\t\t\t}, me);\n\n\t\t\t// Set these after we've done all the data\n\t\t\tif (me.options.time.min) {\n\t\t\t\tme.firstTick = me.parseTime(me.options.time.min);\n\t\t\t}\n\n\t\t\tif (me.options.time.max) {\n\t\t\t\tme.lastTick = me.parseTime(me.options.time.max);\n\t\t\t}\n\n\t\t\t// We will modify these, so clone for later\n\t\t\tme.firstTick = (me.firstTick || moment()).clone();\n\t\t\tme.lastTick = (me.lastTick || moment()).clone();\n\t\t},\n\t\tbuildLabelDiffs: function() {\n\t\t\tvar me = this;\n\t\t\tme.labelDiffs = [];\n\t\t\tvar scaleLabelDiffs = [];\n\t\t\t// Parse common labels once\n\t\t\tif (me.chart.data.labels && me.chart.data.labels.length > 0) {\n\t\t\t\thelpers.each(me.chart.data.labels, function(label) {\n\t\t\t\t\tvar labelMoment = me.parseTime(label);\n\n\t\t\t\t\tif (labelMoment.isValid()) {\n\t\t\t\t\t\tif (me.options.time.round) {\n\t\t\t\t\t\t\tlabelMoment.startOf(me.options.time.round);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tscaleLabelDiffs.push(labelMoment.diff(me.firstTick, me.tickUnit, true));\n\t\t\t\t\t}\n\t\t\t\t}, me);\n\t\t\t}\n\n\t\t\thelpers.each(me.chart.data.datasets, function(dataset) {\n\t\t\t\tvar diffsForDataset = [];\n\n\t\t\t\tif (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {\n\t\t\t\t\thelpers.each(dataset.data, function(value) {\n\t\t\t\t\t\tvar labelMoment = me.parseTime(me.getRightValue(value));\n\n\t\t\t\t\t\tif (labelMoment.isValid()) {\n\t\t\t\t\t\t\tif (me.options.time.round) {\n\t\t\t\t\t\t\t\tlabelMoment.startOf(me.options.time.round);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdiffsForDataset.push(labelMoment.diff(me.firstTick, me.tickUnit, true));\n\t\t\t\t\t\t}\n\t\t\t\t\t}, me);\n\t\t\t\t} else {\n\t\t\t\t\t// We have no labels. Use common ones\n\t\t\t\t\tdiffsForDataset = scaleLabelDiffs;\n\t\t\t\t}\n\n\t\t\t\tme.labelDiffs.push(diffsForDataset);\n\t\t\t}, me);\n\t\t},\n\t\tbuildTicks: function() {\n\t\t\tvar me = this;\n\n\t\t\tme.ctx.save();\n\t\t\tvar tickFontSize = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);\n\t\t\tvar tickFontStyle = helpers.getValueOrDefault(me.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);\n\t\t\tvar tickFontFamily = helpers.getValueOrDefault(me.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);\n\t\t\tvar tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);\n\t\t\tme.ctx.font = tickLabelFont;\n\n\t\t\tme.ticks = [];\n\t\t\tme.unitScale = 1; // How much we scale the unit by, ie 2 means 2x unit per step\n\t\t\tme.scaleSizeInUnits = 0; // How large the scale is in the base unit (seconds, minutes, etc)\n\n\t\t\t// Set unit override if applicable\n\t\t\tif (me.options.time.unit) {\n\t\t\t\tme.tickUnit = me.options.time.unit || 'day';\n\t\t\t\tme.displayFormat = me.options.time.displayFormats[me.tickUnit];\n\t\t\t\tme.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);\n\t\t\t\tme.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, 1);\n\t\t\t} else {\n\t\t\t\t// Determine the smallest needed unit of the time\n\t\t\t\tvar innerWidth = me.isHorizontal() ? me.width : me.height;\n\n\t\t\t\t// Crude approximation of what the label length might be\n\t\t\t\tvar tempFirstLabel = me.tickFormatFunction(me.firstTick, 0, []);\n\t\t\t\tvar tickLabelWidth = me.ctx.measureText(tempFirstLabel).width;\n\t\t\t\tvar cosRotation = Math.cos(helpers.toRadians(me.options.ticks.maxRotation));\n\t\t\t\tvar sinRotation = Math.sin(helpers.toRadians(me.options.ticks.maxRotation));\n\t\t\t\ttickLabelWidth = (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation);\n\t\t\t\tvar labelCapacity = innerWidth / (tickLabelWidth);\n\n\t\t\t\t// Start as small as possible\n\t\t\t\tme.tickUnit = me.options.time.minUnit;\n\t\t\t\tme.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);\n\t\t\t\tme.displayFormat = me.options.time.displayFormats[me.tickUnit];\n\n\t\t\t\tvar unitDefinitionIndex = 0;\n\t\t\t\tvar unitDefinition = time.units[unitDefinitionIndex];\n\n\t\t\t\t// While we aren't ideal and we don't have units left\n\t\t\t\twhile (unitDefinitionIndex < time.units.length) {\n\t\t\t\t\t// Can we scale this unit. If `false` we can scale infinitely\n\t\t\t\t\tme.unitScale = 1;\n\n\t\t\t\t\tif (helpers.isArray(unitDefinition.steps) && Math.ceil(me.scaleSizeInUnits / labelCapacity) < helpers.max(unitDefinition.steps)) {\n\t\t\t\t\t\t// Use one of the predefined steps\n\t\t\t\t\t\tfor (var idx = 0; idx < unitDefinition.steps.length; ++idx) {\n\t\t\t\t\t\t\tif (unitDefinition.steps[idx] >= Math.ceil(me.scaleSizeInUnits / labelCapacity)) {\n\t\t\t\t\t\t\t\tme.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, unitDefinition.steps[idx]);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if ((unitDefinition.maxStep === false) || (Math.ceil(me.scaleSizeInUnits / labelCapacity) < unitDefinition.maxStep)) {\n\t\t\t\t\t\t// We have a max step. Scale this unit\n\t\t\t\t\t\tme.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, Math.ceil(me.scaleSizeInUnits / labelCapacity));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Move to the next unit up\n\t\t\t\t\t\t++unitDefinitionIndex;\n\t\t\t\t\t\tunitDefinition = time.units[unitDefinitionIndex];\n\n\t\t\t\t\t\tme.tickUnit = unitDefinition.name;\n\t\t\t\t\t\tvar leadingUnitBuffer = me.firstTick.diff(me.getMomentStartOf(me.firstTick), me.tickUnit, true);\n\t\t\t\t\t\tvar trailingUnitBuffer = me.getMomentStartOf(me.lastTick.clone().add(1, me.tickUnit)).diff(me.lastTick, me.tickUnit, true);\n\t\t\t\t\t\tme.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true) + leadingUnitBuffer + trailingUnitBuffer;\n\t\t\t\t\t\tme.displayFormat = me.options.time.displayFormats[unitDefinition.name];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar roundedStart;\n\n\t\t\t// Only round the first tick if we have no hard minimum\n\t\t\tif (!me.options.time.min) {\n\t\t\t\tme.firstTick = me.getMomentStartOf(me.firstTick);\n\t\t\t\troundedStart = me.firstTick;\n\t\t\t} else {\n\t\t\t\troundedStart = me.getMomentStartOf(me.firstTick);\n\t\t\t}\n\n\t\t\t// Only round the last tick if we have no hard maximum\n\t\t\tif (!me.options.time.max) {\n\t\t\t\tvar roundedEnd = me.getMomentStartOf(me.lastTick);\n\t\t\t\tvar delta = roundedEnd.diff(me.lastTick, me.tickUnit, true);\n\t\t\t\tif (delta < 0) {\n\t\t\t\t\t// Do not use end of because we need me to be in the next time unit\n\t\t\t\t\tme.lastTick = me.getMomentStartOf(me.lastTick.add(1, me.tickUnit));\n\t\t\t\t} else if (delta >= 0) {\n\t\t\t\t\tme.lastTick = roundedEnd;\n\t\t\t\t}\n\n\t\t\t\tme.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);\n\t\t\t}\n\n\t\t\t// Tick displayFormat override\n\t\t\tif (me.options.time.displayFormat) {\n\t\t\t\tme.displayFormat = me.options.time.displayFormat;\n\t\t\t}\n\n\t\t\t// first tick. will have been rounded correctly if options.time.min is not specified\n\t\t\tme.ticks.push(me.firstTick.clone());\n\n\t\t\t// For every unit in between the first and last moment, create a moment and add it to the ticks tick\n\t\t\tfor (var i = me.unitScale; i <= me.scaleSizeInUnits; i += me.unitScale) {\n\t\t\t\tvar newTick = roundedStart.clone().add(i, me.tickUnit);\n\n\t\t\t\t// Are we greater than the max time\n\t\t\t\tif (me.options.time.max && newTick.diff(me.lastTick, me.tickUnit, true) >= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tme.ticks.push(newTick);\n\t\t\t}\n\n\t\t\t// Always show the right tick\n\t\t\tvar diff = me.ticks[me.ticks.length - 1].diff(me.lastTick, me.tickUnit);\n\t\t\tif (diff !== 0 || me.scaleSizeInUnits === 0) {\n\t\t\t\t// this is a weird case. If the <max> option is the same as the end option, we can't just diff the times because the tick was created from the roundedStart\n\t\t\t\t// but the last tick was not rounded.\n\t\t\t\tif (me.options.time.max) {\n\t\t\t\t\tme.ticks.push(me.lastTick.clone());\n\t\t\t\t\tme.scaleSizeInUnits = me.lastTick.diff(me.ticks[0], me.tickUnit, true);\n\t\t\t\t} else {\n\t\t\t\t\tme.ticks.push(me.lastTick.clone());\n\t\t\t\t\tme.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tme.ctx.restore();\n\n\t\t\t// Invalidate label diffs cache\n\t\t\tme.labelDiffs = undefined;\n\t\t},\n\t\t// Get tooltip label\n\t\tgetLabelForIndex: function(index, datasetIndex) {\n\t\t\tvar me = this;\n\t\t\tvar label = me.chart.data.labels && index < me.chart.data.labels.length ? me.chart.data.labels[index] : '';\n\t\t\tvar value = me.chart.data.datasets[datasetIndex].data[index];\n\n\t\t\tif (value !== null && typeof value === 'object') {\n\t\t\t\tlabel = me.getRightValue(value);\n\t\t\t}\n\n\t\t\t// Format nicely\n\t\t\tif (me.options.time.tooltipFormat) {\n\t\t\t\tlabel = me.parseTime(label).format(me.options.time.tooltipFormat);\n\t\t\t}\n\n\t\t\treturn label;\n\t\t},\n\t\t// Function to format an individual tick mark\n\t\ttickFormatFunction: function(tick, index, ticks) {\n\t\t\tvar formattedTick = tick.format(this.displayFormat);\n\t\t\tvar tickOpts = this.options.ticks;\n\t\t\tvar callback = helpers.getValueOrDefault(tickOpts.callback, tickOpts.userCallback);\n\n\t\t\tif (callback) {\n\t\t\t\treturn callback(formattedTick, index, ticks);\n\t\t\t}\n\t\t\treturn formattedTick;\n\t\t},\n\t\tconvertTicksToLabels: function() {\n\t\t\tvar me = this;\n\t\t\tme.tickMoments = me.ticks;\n\t\t\tme.ticks = me.ticks.map(me.tickFormatFunction, me);\n\t\t},\n\t\tgetPixelForValue: function(value, index, datasetIndex) {\n\t\t\tvar me = this;\n\t\t\tvar offset = null;\n\t\t\tif (index !== undefined && datasetIndex !== undefined) {\n\t\t\t\toffset = me.getLabelDiff(datasetIndex, index);\n\t\t\t}\n\n\t\t\tif (offset === null) {\n\t\t\t\tif (!value || !value.isValid) {\n\t\t\t\t\t// not already a moment object\n\t\t\t\t\tvalue = me.parseTime(me.getRightValue(value));\n\t\t\t\t}\n\t\t\t\tif (value && value.isValid && value.isValid()) {\n\t\t\t\t\toffset = value.diff(me.firstTick, me.tickUnit, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (offset !== null) {\n\t\t\t\tvar decimal = offset !== 0 ? offset / me.scaleSizeInUnits : offset;\n\n\t\t\t\tif (me.isHorizontal()) {\n\t\t\t\t\tvar valueOffset = (me.width * decimal);\n\t\t\t\t\treturn me.left + Math.round(valueOffset);\n\t\t\t\t}\n\n\t\t\t\tvar heightOffset = (me.height * decimal);\n\t\t\t\treturn me.top + Math.round(heightOffset);\n\t\t\t}\n\t\t},\n\t\tgetPixelForTick: function(index) {\n\t\t\treturn this.getPixelForValue(this.tickMoments[index], null, null);\n\t\t},\n\t\tgetValueForPixel: function(pixel) {\n\t\t\tvar me = this;\n\t\t\tvar innerDimension = me.isHorizontal() ? me.width : me.height;\n\t\t\tvar offset = (pixel - (me.isHorizontal() ? me.left : me.top)) / innerDimension;\n\t\t\toffset *= me.scaleSizeInUnits;\n\t\t\treturn me.firstTick.clone().add(moment.duration(offset, me.tickUnit).asSeconds(), 'seconds');\n\t\t},\n\t\tparseTime: function(label) {\n\t\t\tvar me = this;\n\t\t\tif (typeof me.options.time.parser === 'string') {\n\t\t\t\treturn moment(label, me.options.time.parser);\n\t\t\t}\n\t\t\tif (typeof me.options.time.parser === 'function') {\n\t\t\t\treturn me.options.time.parser(label);\n\t\t\t}\n\t\t\t// Date objects\n\t\t\tif (typeof label.getMonth === 'function' || typeof label === 'number') {\n\t\t\t\treturn moment(label);\n\t\t\t}\n\t\t\t// Moment support\n\t\t\tif (label.isValid && label.isValid()) {\n\t\t\t\treturn label;\n\t\t\t}\n\t\t\t// Custom parsing (return an instance of moment)\n\t\t\tif (typeof me.options.time.format !== 'string' && me.options.time.format.call) {\n\t\t\t\tconsole.warn('options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale');\n\t\t\t\treturn me.options.time.format(label);\n\t\t\t}\n\t\t\t// Moment format parsing\n\t\t\treturn moment(label, me.options.time.format);\n\t\t}\n\t});\n\tChart.scaleService.registerScaleType('time', TimeScale, defaultConfig);\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chart.js/src/scales/scale.time.js\n// module id = 616\n// module chunks = 0","/* MIT license */\r\nvar colorNames = require('color-name');\r\n\r\nmodule.exports = {\r\n   getRgba: getRgba,\r\n   getHsla: getHsla,\r\n   getRgb: getRgb,\r\n   getHsl: getHsl,\r\n   getHwb: getHwb,\r\n   getAlpha: getAlpha,\r\n\r\n   hexString: hexString,\r\n   rgbString: rgbString,\r\n   rgbaString: rgbaString,\r\n   percentString: percentString,\r\n   percentaString: percentaString,\r\n   hslString: hslString,\r\n   hslaString: hslaString,\r\n   hwbString: hwbString,\r\n   keyword: keyword\r\n}\r\n\r\nfunction getRgba(string) {\r\n   if (!string) {\r\n      return;\r\n   }\r\n   var abbr =  /^#([a-fA-F0-9]{3})$/,\r\n       hex =  /^#([a-fA-F0-9]{6})$/,\r\n       rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/,\r\n       per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/,\r\n       keyword = /(\\w+)/;\r\n\r\n   var rgb = [0, 0, 0],\r\n       a = 1,\r\n       match = string.match(abbr);\r\n   if (match) {\r\n      match = match[1];\r\n      for (var i = 0; i < rgb.length; i++) {\r\n         rgb[i] = parseInt(match[i] + match[i], 16);\r\n      }\r\n   }\r\n   else if (match = string.match(hex)) {\r\n      match = match[1];\r\n      for (var i = 0; i < rgb.length; i++) {\r\n         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);\r\n      }\r\n   }\r\n   else if (match = string.match(rgba)) {\r\n      for (var i = 0; i < rgb.length; i++) {\r\n         rgb[i] = parseInt(match[i + 1]);\r\n      }\r\n      a = parseFloat(match[4]);\r\n   }\r\n   else if (match = string.match(per)) {\r\n      for (var i = 0; i < rgb.length; i++) {\r\n         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\r\n      }\r\n      a = parseFloat(match[4]);\r\n   }\r\n   else if (match = string.match(keyword)) {\r\n      if (match[1] == \"transparent\") {\r\n         return [0, 0, 0, 0];\r\n      }\r\n      rgb = colorNames[match[1]];\r\n      if (!rgb) {\r\n         return;\r\n      }\r\n   }\r\n\r\n   for (var i = 0; i < rgb.length; i++) {\r\n      rgb[i] = scale(rgb[i], 0, 255);\r\n   }\r\n   if (!a && a != 0) {\r\n      a = 1;\r\n   }\r\n   else {\r\n      a = scale(a, 0, 1);\r\n   }\r\n   rgb[3] = a;\r\n   return rgb;\r\n}\r\n\r\nfunction getHsla(string) {\r\n   if (!string) {\r\n      return;\r\n   }\r\n   var hsl = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\r\n   var match = string.match(hsl);\r\n   if (match) {\r\n      var alpha = parseFloat(match[4]);\r\n      var h = scale(parseInt(match[1]), 0, 360),\r\n          s = scale(parseFloat(match[2]), 0, 100),\r\n          l = scale(parseFloat(match[3]), 0, 100),\r\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\r\n      return [h, s, l, a];\r\n   }\r\n}\r\n\r\nfunction getHwb(string) {\r\n   if (!string) {\r\n      return;\r\n   }\r\n   var hwb = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\r\n   var match = string.match(hwb);\r\n   if (match) {\r\n    var alpha = parseFloat(match[4]);\r\n      var h = scale(parseInt(match[1]), 0, 360),\r\n          w = scale(parseFloat(match[2]), 0, 100),\r\n          b = scale(parseFloat(match[3]), 0, 100),\r\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\r\n      return [h, w, b, a];\r\n   }\r\n}\r\n\r\nfunction getRgb(string) {\r\n   var rgba = getRgba(string);\r\n   return rgba && rgba.slice(0, 3);\r\n}\r\n\r\nfunction getHsl(string) {\r\n  var hsla = getHsla(string);\r\n  return hsla && hsla.slice(0, 3);\r\n}\r\n\r\nfunction getAlpha(string) {\r\n   var vals = getRgba(string);\r\n   if (vals) {\r\n      return vals[3];\r\n   }\r\n   else if (vals = getHsla(string)) {\r\n      return vals[3];\r\n   }\r\n   else if (vals = getHwb(string)) {\r\n      return vals[3];\r\n   }\r\n}\r\n\r\n// generators\r\nfunction hexString(rgb) {\r\n   return \"#\" + hexDouble(rgb[0]) + hexDouble(rgb[1])\r\n              + hexDouble(rgb[2]);\r\n}\r\n\r\nfunction rgbString(rgba, alpha) {\r\n   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\r\n      return rgbaString(rgba, alpha);\r\n   }\r\n   return \"rgb(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \")\";\r\n}\r\n\r\nfunction rgbaString(rgba, alpha) {\r\n   if (alpha === undefined) {\r\n      alpha = (rgba[3] !== undefined ? rgba[3] : 1);\r\n   }\r\n   return \"rgba(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2]\r\n           + \", \" + alpha + \")\";\r\n}\r\n\r\nfunction percentString(rgba, alpha) {\r\n   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\r\n      return percentaString(rgba, alpha);\r\n   }\r\n   var r = Math.round(rgba[0]/255 * 100),\r\n       g = Math.round(rgba[1]/255 * 100),\r\n       b = Math.round(rgba[2]/255 * 100);\r\n\r\n   return \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\";\r\n}\r\n\r\nfunction percentaString(rgba, alpha) {\r\n   var r = Math.round(rgba[0]/255 * 100),\r\n       g = Math.round(rgba[1]/255 * 100),\r\n       b = Math.round(rgba[2]/255 * 100);\r\n   return \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + (alpha || rgba[3] || 1) + \")\";\r\n}\r\n\r\nfunction hslString(hsla, alpha) {\r\n   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {\r\n      return hslaString(hsla, alpha);\r\n   }\r\n   return \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\";\r\n}\r\n\r\nfunction hslaString(hsla, alpha) {\r\n   if (alpha === undefined) {\r\n      alpha = (hsla[3] !== undefined ? hsla[3] : 1);\r\n   }\r\n   return \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \"\r\n           + alpha + \")\";\r\n}\r\n\r\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\r\n// (hwb have alpha optional & 1 is default value)\r\nfunction hwbString(hwb, alpha) {\r\n   if (alpha === undefined) {\r\n      alpha = (hwb[3] !== undefined ? hwb[3] : 1);\r\n   }\r\n   return \"hwb(\" + hwb[0] + \", \" + hwb[1] + \"%, \" + hwb[2] + \"%\"\r\n           + (alpha !== undefined && alpha !== 1 ? \", \" + alpha : \"\") + \")\";\r\n}\r\n\r\nfunction keyword(rgb) {\r\n  return reverseNames[rgb.slice(0, 3)];\r\n}\r\n\r\n// helpers\r\nfunction scale(num, min, max) {\r\n   return Math.min(Math.max(min, num), max);\r\n}\r\n\r\nfunction hexDouble(num) {\r\n  var str = num.toString(16).toUpperCase();\r\n  return (str.length < 2) ? \"0\" + str : str;\r\n}\r\n\r\n\r\n//create a list of reverse color names\r\nvar reverseNames = {};\r\nfor (var name in colorNames) {\r\n   reverseNames[colorNames[name]] = name;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chartjs-color-string/color-string.js\n// module id = 617\n// module chunks = 0","/* MIT license */\nvar convert = require('color-convert');\nvar string = require('chartjs-color-string');\n\nvar Color = function (obj) {\n\tif (obj instanceof Color) {\n\t\treturn obj;\n\t}\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj);\n\t}\n\n\tthis.valid = false;\n\tthis.values = {\n\t\trgb: [0, 0, 0],\n\t\thsl: [0, 0, 0],\n\t\thsv: [0, 0, 0],\n\t\thwb: [0, 0, 0],\n\t\tcmyk: [0, 0, 0, 0],\n\t\talpha: 1\n\t};\n\n\t// parse Color() argument\n\tvar vals;\n\tif (typeof obj === 'string') {\n\t\tvals = string.getRgba(obj);\n\t\tif (vals) {\n\t\t\tthis.setValues('rgb', vals);\n\t\t} else if (vals = string.getHsla(obj)) {\n\t\t\tthis.setValues('hsl', vals);\n\t\t} else if (vals = string.getHwb(obj)) {\n\t\t\tthis.setValues('hwb', vals);\n\t\t}\n\t} else if (typeof obj === 'object') {\n\t\tvals = obj;\n\t\tif (vals.r !== undefined || vals.red !== undefined) {\n\t\t\tthis.setValues('rgb', vals);\n\t\t} else if (vals.l !== undefined || vals.lightness !== undefined) {\n\t\t\tthis.setValues('hsl', vals);\n\t\t} else if (vals.v !== undefined || vals.value !== undefined) {\n\t\t\tthis.setValues('hsv', vals);\n\t\t} else if (vals.w !== undefined || vals.whiteness !== undefined) {\n\t\t\tthis.setValues('hwb', vals);\n\t\t} else if (vals.c !== undefined || vals.cyan !== undefined) {\n\t\t\tthis.setValues('cmyk', vals);\n\t\t}\n\t}\n};\n\nColor.prototype = {\n\tisValid: function () {\n\t\treturn this.valid;\n\t},\n\trgb: function () {\n\t\treturn this.setSpace('rgb', arguments);\n\t},\n\thsl: function () {\n\t\treturn this.setSpace('hsl', arguments);\n\t},\n\thsv: function () {\n\t\treturn this.setSpace('hsv', arguments);\n\t},\n\thwb: function () {\n\t\treturn this.setSpace('hwb', arguments);\n\t},\n\tcmyk: function () {\n\t\treturn this.setSpace('cmyk', arguments);\n\t},\n\n\trgbArray: function () {\n\t\treturn this.values.rgb;\n\t},\n\thslArray: function () {\n\t\treturn this.values.hsl;\n\t},\n\thsvArray: function () {\n\t\treturn this.values.hsv;\n\t},\n\thwbArray: function () {\n\t\tvar values = this.values;\n\t\tif (values.alpha !== 1) {\n\t\t\treturn values.hwb.concat([values.alpha]);\n\t\t}\n\t\treturn values.hwb;\n\t},\n\tcmykArray: function () {\n\t\treturn this.values.cmyk;\n\t},\n\trgbaArray: function () {\n\t\tvar values = this.values;\n\t\treturn values.rgb.concat([values.alpha]);\n\t},\n\thslaArray: function () {\n\t\tvar values = this.values;\n\t\treturn values.hsl.concat([values.alpha]);\n\t},\n\talpha: function (val) {\n\t\tif (val === undefined) {\n\t\t\treturn this.values.alpha;\n\t\t}\n\t\tthis.setValues('alpha', val);\n\t\treturn this;\n\t},\n\n\tred: function (val) {\n\t\treturn this.setChannel('rgb', 0, val);\n\t},\n\tgreen: function (val) {\n\t\treturn this.setChannel('rgb', 1, val);\n\t},\n\tblue: function (val) {\n\t\treturn this.setChannel('rgb', 2, val);\n\t},\n\thue: function (val) {\n\t\tif (val) {\n\t\t\tval %= 360;\n\t\t\tval = val < 0 ? 360 + val : val;\n\t\t}\n\t\treturn this.setChannel('hsl', 0, val);\n\t},\n\tsaturation: function (val) {\n\t\treturn this.setChannel('hsl', 1, val);\n\t},\n\tlightness: function (val) {\n\t\treturn this.setChannel('hsl', 2, val);\n\t},\n\tsaturationv: function (val) {\n\t\treturn this.setChannel('hsv', 1, val);\n\t},\n\twhiteness: function (val) {\n\t\treturn this.setChannel('hwb', 1, val);\n\t},\n\tblackness: function (val) {\n\t\treturn this.setChannel('hwb', 2, val);\n\t},\n\tvalue: function (val) {\n\t\treturn this.setChannel('hsv', 2, val);\n\t},\n\tcyan: function (val) {\n\t\treturn this.setChannel('cmyk', 0, val);\n\t},\n\tmagenta: function (val) {\n\t\treturn this.setChannel('cmyk', 1, val);\n\t},\n\tyellow: function (val) {\n\t\treturn this.setChannel('cmyk', 2, val);\n\t},\n\tblack: function (val) {\n\t\treturn this.setChannel('cmyk', 3, val);\n\t},\n\n\thexString: function () {\n\t\treturn string.hexString(this.values.rgb);\n\t},\n\trgbString: function () {\n\t\treturn string.rgbString(this.values.rgb, this.values.alpha);\n\t},\n\trgbaString: function () {\n\t\treturn string.rgbaString(this.values.rgb, this.values.alpha);\n\t},\n\tpercentString: function () {\n\t\treturn string.percentString(this.values.rgb, this.values.alpha);\n\t},\n\thslString: function () {\n\t\treturn string.hslString(this.values.hsl, this.values.alpha);\n\t},\n\thslaString: function () {\n\t\treturn string.hslaString(this.values.hsl, this.values.alpha);\n\t},\n\thwbString: function () {\n\t\treturn string.hwbString(this.values.hwb, this.values.alpha);\n\t},\n\tkeyword: function () {\n\t\treturn string.keyword(this.values.rgb, this.values.alpha);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.values.rgb;\n\t\treturn (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.values.rgb;\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tdark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.values.rgb;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tlight: function () {\n\t\treturn !this.dark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = [];\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb[i] = 255 - this.values.rgb[i];\n\t\t}\n\t\tthis.setValues('rgb', rgb);\n\t\treturn this;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[2] += hsl[2] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[2] -= hsl[2] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[1] += hsl[1] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[1] -= hsl[1] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.values.hwb;\n\t\thwb[1] += hwb[1] * ratio;\n\t\tthis.setValues('hwb', hwb);\n\t\treturn this;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.values.hwb;\n\t\thwb[2] += hwb[2] * ratio;\n\t\tthis.setValues('hwb', hwb);\n\t\treturn this;\n\t},\n\n\tgreyscale: function () {\n\t\tvar rgb = this.values.rgb;\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\tthis.setValues('rgb', [val, val, val]);\n\t\treturn this;\n\t},\n\n\tclearer: function (ratio) {\n\t\tvar alpha = this.values.alpha;\n\t\tthis.setValues('alpha', alpha - (alpha * ratio));\n\t\treturn this;\n\t},\n\n\topaquer: function (ratio) {\n\t\tvar alpha = this.values.alpha;\n\t\tthis.setValues('alpha', alpha + (alpha * ratio));\n\t\treturn this;\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.values.hsl;\n\t\tvar hue = (hsl[0] + degrees) % 360;\n\t\thsl[0] = hue < 0 ? 360 + hue : hue;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\t/**\n\t * Ported from sass implementation in C\n\t * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t */\n\tmix: function (mixinColor, weight) {\n\t\tvar color1 = this;\n\t\tvar color2 = mixinColor;\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn this\n\t\t\t.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue()\n\t\t\t)\n\t\t\t.alpha(color1.alpha() * p + color2.alpha() * (1 - p));\n\t},\n\n\ttoJSON: function () {\n\t\treturn this.rgb();\n\t},\n\n\tclone: function () {\n\t\t// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,\n\t\t// making the final build way to big to embed in Chart.js. So let's do it manually,\n\t\t// assuming that values to clone are 1 dimension arrays containing only numbers,\n\t\t// except 'alpha' which is a number.\n\t\tvar result = new Color();\n\t\tvar source = this.values;\n\t\tvar target = result.values;\n\t\tvar value, type;\n\n\t\tfor (var prop in source) {\n\t\t\tif (source.hasOwnProperty(prop)) {\n\t\t\t\tvalue = source[prop];\n\t\t\t\ttype = ({}).toString.call(value);\n\t\t\t\tif (type === '[object Array]') {\n\t\t\t\t\ttarget[prop] = value.slice(0);\n\t\t\t\t} else if (type === '[object Number]') {\n\t\t\t\t\ttarget[prop] = value;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('unexpected color value:', value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\nColor.prototype.spaces = {\n\trgb: ['red', 'green', 'blue'],\n\thsl: ['hue', 'saturation', 'lightness'],\n\thsv: ['hue', 'saturation', 'value'],\n\thwb: ['hue', 'whiteness', 'blackness'],\n\tcmyk: ['cyan', 'magenta', 'yellow', 'black']\n};\n\nColor.prototype.maxes = {\n\trgb: [255, 255, 255],\n\thsl: [360, 100, 100],\n\thsv: [360, 100, 100],\n\thwb: [360, 100, 100],\n\tcmyk: [100, 100, 100, 100]\n};\n\nColor.prototype.getValues = function (space) {\n\tvar values = this.values;\n\tvar vals = {};\n\n\tfor (var i = 0; i < space.length; i++) {\n\t\tvals[space.charAt(i)] = values[space][i];\n\t}\n\n\tif (values.alpha !== 1) {\n\t\tvals.a = values.alpha;\n\t}\n\n\t// {r: 255, g: 255, b: 255, a: 0.4}\n\treturn vals;\n};\n\nColor.prototype.setValues = function (space, vals) {\n\tvar values = this.values;\n\tvar spaces = this.spaces;\n\tvar maxes = this.maxes;\n\tvar alpha = 1;\n\tvar i;\n\n\tthis.valid = true;\n\n\tif (space === 'alpha') {\n\t\talpha = vals;\n\t} else if (vals.length) {\n\t\t// [10, 10, 10]\n\t\tvalues[space] = vals.slice(0, space.length);\n\t\talpha = vals[space.length];\n\t} else if (vals[space.charAt(0)] !== undefined) {\n\t\t// {r: 10, g: 10, b: 10}\n\t\tfor (i = 0; i < space.length; i++) {\n\t\t\tvalues[space][i] = vals[space.charAt(i)];\n\t\t}\n\n\t\talpha = vals.a;\n\t} else if (vals[spaces[space][0]] !== undefined) {\n\t\t// {red: 10, green: 10, blue: 10}\n\t\tvar chans = spaces[space];\n\n\t\tfor (i = 0; i < space.length; i++) {\n\t\t\tvalues[space][i] = vals[chans[i]];\n\t\t}\n\n\t\talpha = vals.alpha;\n\t}\n\n\tvalues.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));\n\n\tif (space === 'alpha') {\n\t\treturn false;\n\t}\n\n\tvar capped;\n\n\t// cap values of the space prior converting all values\n\tfor (i = 0; i < space.length; i++) {\n\t\tcapped = Math.max(0, Math.min(maxes[space][i], values[space][i]));\n\t\tvalues[space][i] = Math.round(capped);\n\t}\n\n\t// convert to all the other color spaces\n\tfor (var sname in spaces) {\n\t\tif (sname !== space) {\n\t\t\tvalues[sname] = convert[space][sname](values[space]);\n\t\t}\n\t}\n\n\treturn true;\n};\n\nColor.prototype.setSpace = function (space, args) {\n\tvar vals = args[0];\n\n\tif (vals === undefined) {\n\t\t// color.rgb()\n\t\treturn this.getValues(space);\n\t}\n\n\t// color.rgb(10, 10, 10)\n\tif (typeof vals === 'number') {\n\t\tvals = Array.prototype.slice.call(args);\n\t}\n\n\tthis.setValues(space, vals);\n\treturn this;\n};\n\nColor.prototype.setChannel = function (space, index, val) {\n\tvar svalues = this.values[space];\n\tif (val === undefined) {\n\t\t// color.red()\n\t\treturn svalues[index];\n\t} else if (val === svalues[index]) {\n\t\t// color.red(color.red())\n\t\treturn this;\n\t}\n\n\t// color.red(100)\n\tsvalues[index] = val;\n\tthis.setValues(space, svalues);\n\n\treturn this;\n};\n\nif (typeof window !== 'undefined') {\n\twindow.Color = Color;\n}\n\nmodule.exports = Color;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chartjs-color/index.js\n// module id = 618\n// module chunks = 0","/* MIT license */\n\nmodule.exports = {\n  rgb2hsl: rgb2hsl,\n  rgb2hsv: rgb2hsv,\n  rgb2hwb: rgb2hwb,\n  rgb2cmyk: rgb2cmyk,\n  rgb2keyword: rgb2keyword,\n  rgb2xyz: rgb2xyz,\n  rgb2lab: rgb2lab,\n  rgb2lch: rgb2lch,\n\n  hsl2rgb: hsl2rgb,\n  hsl2hsv: hsl2hsv,\n  hsl2hwb: hsl2hwb,\n  hsl2cmyk: hsl2cmyk,\n  hsl2keyword: hsl2keyword,\n\n  hsv2rgb: hsv2rgb,\n  hsv2hsl: hsv2hsl,\n  hsv2hwb: hsv2hwb,\n  hsv2cmyk: hsv2cmyk,\n  hsv2keyword: hsv2keyword,\n\n  hwb2rgb: hwb2rgb,\n  hwb2hsl: hwb2hsl,\n  hwb2hsv: hwb2hsv,\n  hwb2cmyk: hwb2cmyk,\n  hwb2keyword: hwb2keyword,\n\n  cmyk2rgb: cmyk2rgb,\n  cmyk2hsl: cmyk2hsl,\n  cmyk2hsv: cmyk2hsv,\n  cmyk2hwb: cmyk2hwb,\n  cmyk2keyword: cmyk2keyword,\n\n  keyword2rgb: keyword2rgb,\n  keyword2hsl: keyword2hsl,\n  keyword2hsv: keyword2hsv,\n  keyword2hwb: keyword2hwb,\n  keyword2cmyk: keyword2cmyk,\n  keyword2lab: keyword2lab,\n  keyword2xyz: keyword2xyz,\n\n  xyz2rgb: xyz2rgb,\n  xyz2lab: xyz2lab,\n  xyz2lch: xyz2lch,\n\n  lab2xyz: lab2xyz,\n  lab2rgb: lab2rgb,\n  lab2lch: lab2lch,\n\n  lch2lab: lch2lab,\n  lch2xyz: lch2xyz,\n  lch2rgb: lch2rgb\n}\n\n\nfunction rgb2hsl(rgb) {\n  var r = rgb[0]/255,\n      g = rgb[1]/255,\n      b = rgb[2]/255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      delta = max - min,\n      h, s, l;\n\n  if (max == min)\n    h = 0;\n  else if (r == max)\n    h = (g - b) / delta;\n  else if (g == max)\n    h = 2 + (b - r) / delta;\n  else if (b == max)\n    h = 4 + (r - g)/ delta;\n\n  h = Math.min(h * 60, 360);\n\n  if (h < 0)\n    h += 360;\n\n  l = (min + max) / 2;\n\n  if (max == min)\n    s = 0;\n  else if (l <= 0.5)\n    s = delta / (max + min);\n  else\n    s = delta / (2 - max - min);\n\n  return [h, s * 100, l * 100];\n}\n\nfunction rgb2hsv(rgb) {\n  var r = rgb[0],\n      g = rgb[1],\n      b = rgb[2],\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      delta = max - min,\n      h, s, v;\n\n  if (max == 0)\n    s = 0;\n  else\n    s = (delta/max * 1000)/10;\n\n  if (max == min)\n    h = 0;\n  else if (r == max)\n    h = (g - b) / delta;\n  else if (g == max)\n    h = 2 + (b - r) / delta;\n  else if (b == max)\n    h = 4 + (r - g) / delta;\n\n  h = Math.min(h * 60, 360);\n\n  if (h < 0)\n    h += 360;\n\n  v = ((max / 255) * 1000) / 10;\n\n  return [h, s, v];\n}\n\nfunction rgb2hwb(rgb) {\n  var r = rgb[0],\n      g = rgb[1],\n      b = rgb[2],\n      h = rgb2hsl(rgb)[0],\n      w = 1/255 * Math.min(r, Math.min(g, b)),\n      b = 1 - 1/255 * Math.max(r, Math.max(g, b));\n\n  return [h, w * 100, b * 100];\n}\n\nfunction rgb2cmyk(rgb) {\n  var r = rgb[0] / 255,\n      g = rgb[1] / 255,\n      b = rgb[2] / 255,\n      c, m, y, k;\n\n  k = Math.min(1 - r, 1 - g, 1 - b);\n  c = (1 - r - k) / (1 - k) || 0;\n  m = (1 - g - k) / (1 - k) || 0;\n  y = (1 - b - k) / (1 - k) || 0;\n  return [c * 100, m * 100, y * 100, k * 100];\n}\n\nfunction rgb2keyword(rgb) {\n  return reverseKeywords[JSON.stringify(rgb)];\n}\n\nfunction rgb2xyz(rgb) {\n  var r = rgb[0] / 255,\n      g = rgb[1] / 255,\n      b = rgb[2] / 255;\n\n  // assume sRGB\n  r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n  g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n  b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n  var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n  var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n  var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n  return [x * 100, y *100, z * 100];\n}\n\nfunction rgb2lab(rgb) {\n  var xyz = rgb2xyz(rgb),\n        x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l, a, b;\n\n  x /= 95.047;\n  y /= 100;\n  z /= 108.883;\n\n  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);\n  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);\n  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);\n\n  l = (116 * y) - 16;\n  a = 500 * (x - y);\n  b = 200 * (y - z);\n\n  return [l, a, b];\n}\n\nfunction rgb2lch(args) {\n  return lab2lch(rgb2lab(args));\n}\n\nfunction hsl2rgb(hsl) {\n  var h = hsl[0] / 360,\n      s = hsl[1] / 100,\n      l = hsl[2] / 100,\n      t1, t2, t3, rgb, val;\n\n  if (s == 0) {\n    val = l * 255;\n    return [val, val, val];\n  }\n\n  if (l < 0.5)\n    t2 = l * (1 + s);\n  else\n    t2 = l + s - l * s;\n  t1 = 2 * l - t2;\n\n  rgb = [0, 0, 0];\n  for (var i = 0; i < 3; i++) {\n    t3 = h + 1 / 3 * - (i - 1);\n    t3 < 0 && t3++;\n    t3 > 1 && t3--;\n\n    if (6 * t3 < 1)\n      val = t1 + (t2 - t1) * 6 * t3;\n    else if (2 * t3 < 1)\n      val = t2;\n    else if (3 * t3 < 2)\n      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n    else\n      val = t1;\n\n    rgb[i] = val * 255;\n  }\n\n  return rgb;\n}\n\nfunction hsl2hsv(hsl) {\n  var h = hsl[0],\n      s = hsl[1] / 100,\n      l = hsl[2] / 100,\n      sv, v;\n\n  if(l === 0) {\n      // no need to do calc on black\n      // also avoids divide by 0 error\n      return [0, 0, 0];\n  }\n\n  l *= 2;\n  s *= (l <= 1) ? l : 2 - l;\n  v = (l + s) / 2;\n  sv = (2 * s) / (l + s);\n  return [h, sv * 100, v * 100];\n}\n\nfunction hsl2hwb(args) {\n  return rgb2hwb(hsl2rgb(args));\n}\n\nfunction hsl2cmyk(args) {\n  return rgb2cmyk(hsl2rgb(args));\n}\n\nfunction hsl2keyword(args) {\n  return rgb2keyword(hsl2rgb(args));\n}\n\n\nfunction hsv2rgb(hsv) {\n  var h = hsv[0] / 60,\n      s = hsv[1] / 100,\n      v = hsv[2] / 100,\n      hi = Math.floor(h) % 6;\n\n  var f = h - Math.floor(h),\n      p = 255 * v * (1 - s),\n      q = 255 * v * (1 - (s * f)),\n      t = 255 * v * (1 - (s * (1 - f))),\n      v = 255 * v;\n\n  switch(hi) {\n    case 0:\n      return [v, t, p];\n    case 1:\n      return [q, v, p];\n    case 2:\n      return [p, v, t];\n    case 3:\n      return [p, q, v];\n    case 4:\n      return [t, p, v];\n    case 5:\n      return [v, p, q];\n  }\n}\n\nfunction hsv2hsl(hsv) {\n  var h = hsv[0],\n      s = hsv[1] / 100,\n      v = hsv[2] / 100,\n      sl, l;\n\n  l = (2 - s) * v;\n  sl = s * v;\n  sl /= (l <= 1) ? l : 2 - l;\n  sl = sl || 0;\n  l /= 2;\n  return [h, sl * 100, l * 100];\n}\n\nfunction hsv2hwb(args) {\n  return rgb2hwb(hsv2rgb(args))\n}\n\nfunction hsv2cmyk(args) {\n  return rgb2cmyk(hsv2rgb(args));\n}\n\nfunction hsv2keyword(args) {\n  return rgb2keyword(hsv2rgb(args));\n}\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nfunction hwb2rgb(hwb) {\n  var h = hwb[0] / 360,\n      wh = hwb[1] / 100,\n      bl = hwb[2] / 100,\n      ratio = wh + bl,\n      i, v, f, n;\n\n  // wh + bl cant be > 1\n  if (ratio > 1) {\n    wh /= ratio;\n    bl /= ratio;\n  }\n\n  i = Math.floor(6 * h);\n  v = 1 - bl;\n  f = 6 * h - i;\n  if ((i & 0x01) != 0) {\n    f = 1 - f;\n  }\n  n = wh + f * (v - wh);  // linear interpolation\n\n  switch (i) {\n    default:\n    case 6:\n    case 0: r = v; g = n; b = wh; break;\n    case 1: r = n; g = v; b = wh; break;\n    case 2: r = wh; g = v; b = n; break;\n    case 3: r = wh; g = n; b = v; break;\n    case 4: r = n; g = wh; b = v; break;\n    case 5: r = v; g = wh; b = n; break;\n  }\n\n  return [r * 255, g * 255, b * 255];\n}\n\nfunction hwb2hsl(args) {\n  return rgb2hsl(hwb2rgb(args));\n}\n\nfunction hwb2hsv(args) {\n  return rgb2hsv(hwb2rgb(args));\n}\n\nfunction hwb2cmyk(args) {\n  return rgb2cmyk(hwb2rgb(args));\n}\n\nfunction hwb2keyword(args) {\n  return rgb2keyword(hwb2rgb(args));\n}\n\nfunction cmyk2rgb(cmyk) {\n  var c = cmyk[0] / 100,\n      m = cmyk[1] / 100,\n      y = cmyk[2] / 100,\n      k = cmyk[3] / 100,\n      r, g, b;\n\n  r = 1 - Math.min(1, c * (1 - k) + k);\n  g = 1 - Math.min(1, m * (1 - k) + k);\n  b = 1 - Math.min(1, y * (1 - k) + k);\n  return [r * 255, g * 255, b * 255];\n}\n\nfunction cmyk2hsl(args) {\n  return rgb2hsl(cmyk2rgb(args));\n}\n\nfunction cmyk2hsv(args) {\n  return rgb2hsv(cmyk2rgb(args));\n}\n\nfunction cmyk2hwb(args) {\n  return rgb2hwb(cmyk2rgb(args));\n}\n\nfunction cmyk2keyword(args) {\n  return rgb2keyword(cmyk2rgb(args));\n}\n\n\nfunction xyz2rgb(xyz) {\n  var x = xyz[0] / 100,\n      y = xyz[1] / 100,\n      z = xyz[2] / 100,\n      r, g, b;\n\n  r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n  g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n  b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n  // assume sRGB\n  r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n    : r = (r * 12.92);\n\n  g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n    : g = (g * 12.92);\n\n  b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n    : b = (b * 12.92);\n\n  r = Math.min(Math.max(0, r), 1);\n  g = Math.min(Math.max(0, g), 1);\n  b = Math.min(Math.max(0, b), 1);\n\n  return [r * 255, g * 255, b * 255];\n}\n\nfunction xyz2lab(xyz) {\n  var x = xyz[0],\n      y = xyz[1],\n      z = xyz[2],\n      l, a, b;\n\n  x /= 95.047;\n  y /= 100;\n  z /= 108.883;\n\n  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);\n  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);\n  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);\n\n  l = (116 * y) - 16;\n  a = 500 * (x - y);\n  b = 200 * (y - z);\n\n  return [l, a, b];\n}\n\nfunction xyz2lch(args) {\n  return lab2lch(xyz2lab(args));\n}\n\nfunction lab2xyz(lab) {\n  var l = lab[0],\n      a = lab[1],\n      b = lab[2],\n      x, y, z, y2;\n\n  if (l <= 8) {\n    y = (l * 100) / 903.3;\n    y2 = (7.787 * (y / 100)) + (16 / 116);\n  } else {\n    y = 100 * Math.pow((l + 16) / 116, 3);\n    y2 = Math.pow(y / 100, 1/3);\n  }\n\n  x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);\n\n  z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);\n\n  return [x, y, z];\n}\n\nfunction lab2lch(lab) {\n  var l = lab[0],\n      a = lab[1],\n      b = lab[2],\n      hr, h, c;\n\n  hr = Math.atan2(b, a);\n  h = hr * 360 / 2 / Math.PI;\n  if (h < 0) {\n    h += 360;\n  }\n  c = Math.sqrt(a * a + b * b);\n  return [l, c, h];\n}\n\nfunction lab2rgb(args) {\n  return xyz2rgb(lab2xyz(args));\n}\n\nfunction lch2lab(lch) {\n  var l = lch[0],\n      c = lch[1],\n      h = lch[2],\n      a, b, hr;\n\n  hr = h / 360 * 2 * Math.PI;\n  a = c * Math.cos(hr);\n  b = c * Math.sin(hr);\n  return [l, a, b];\n}\n\nfunction lch2xyz(args) {\n  return lab2xyz(lch2lab(args));\n}\n\nfunction lch2rgb(args) {\n  return lab2rgb(lch2lab(args));\n}\n\nfunction keyword2rgb(keyword) {\n  return cssKeywords[keyword];\n}\n\nfunction keyword2hsl(args) {\n  return rgb2hsl(keyword2rgb(args));\n}\n\nfunction keyword2hsv(args) {\n  return rgb2hsv(keyword2rgb(args));\n}\n\nfunction keyword2hwb(args) {\n  return rgb2hwb(keyword2rgb(args));\n}\n\nfunction keyword2cmyk(args) {\n  return rgb2cmyk(keyword2rgb(args));\n}\n\nfunction keyword2lab(args) {\n  return rgb2lab(keyword2rgb(args));\n}\n\nfunction keyword2xyz(args) {\n  return rgb2xyz(keyword2rgb(args));\n}\n\nvar cssKeywords = {\n  aliceblue:  [240,248,255],\n  antiquewhite: [250,235,215],\n  aqua: [0,255,255],\n  aquamarine: [127,255,212],\n  azure:  [240,255,255],\n  beige:  [245,245,220],\n  bisque: [255,228,196],\n  black:  [0,0,0],\n  blanchedalmond: [255,235,205],\n  blue: [0,0,255],\n  blueviolet: [138,43,226],\n  brown:  [165,42,42],\n  burlywood:  [222,184,135],\n  cadetblue:  [95,158,160],\n  chartreuse: [127,255,0],\n  chocolate:  [210,105,30],\n  coral:  [255,127,80],\n  cornflowerblue: [100,149,237],\n  cornsilk: [255,248,220],\n  crimson:  [220,20,60],\n  cyan: [0,255,255],\n  darkblue: [0,0,139],\n  darkcyan: [0,139,139],\n  darkgoldenrod:  [184,134,11],\n  darkgray: [169,169,169],\n  darkgreen:  [0,100,0],\n  darkgrey: [169,169,169],\n  darkkhaki:  [189,183,107],\n  darkmagenta:  [139,0,139],\n  darkolivegreen: [85,107,47],\n  darkorange: [255,140,0],\n  darkorchid: [153,50,204],\n  darkred:  [139,0,0],\n  darksalmon: [233,150,122],\n  darkseagreen: [143,188,143],\n  darkslateblue:  [72,61,139],\n  darkslategray:  [47,79,79],\n  darkslategrey:  [47,79,79],\n  darkturquoise:  [0,206,209],\n  darkviolet: [148,0,211],\n  deeppink: [255,20,147],\n  deepskyblue:  [0,191,255],\n  dimgray:  [105,105,105],\n  dimgrey:  [105,105,105],\n  dodgerblue: [30,144,255],\n  firebrick:  [178,34,34],\n  floralwhite:  [255,250,240],\n  forestgreen:  [34,139,34],\n  fuchsia:  [255,0,255],\n  gainsboro:  [220,220,220],\n  ghostwhite: [248,248,255],\n  gold: [255,215,0],\n  goldenrod:  [218,165,32],\n  gray: [128,128,128],\n  green:  [0,128,0],\n  greenyellow:  [173,255,47],\n  grey: [128,128,128],\n  honeydew: [240,255,240],\n  hotpink:  [255,105,180],\n  indianred:  [205,92,92],\n  indigo: [75,0,130],\n  ivory:  [255,255,240],\n  khaki:  [240,230,140],\n  lavender: [230,230,250],\n  lavenderblush:  [255,240,245],\n  lawngreen:  [124,252,0],\n  lemonchiffon: [255,250,205],\n  lightblue:  [173,216,230],\n  lightcoral: [240,128,128],\n  lightcyan:  [224,255,255],\n  lightgoldenrodyellow: [250,250,210],\n  lightgray:  [211,211,211],\n  lightgreen: [144,238,144],\n  lightgrey:  [211,211,211],\n  lightpink:  [255,182,193],\n  lightsalmon:  [255,160,122],\n  lightseagreen:  [32,178,170],\n  lightskyblue: [135,206,250],\n  lightslategray: [119,136,153],\n  lightslategrey: [119,136,153],\n  lightsteelblue: [176,196,222],\n  lightyellow:  [255,255,224],\n  lime: [0,255,0],\n  limegreen:  [50,205,50],\n  linen:  [250,240,230],\n  magenta:  [255,0,255],\n  maroon: [128,0,0],\n  mediumaquamarine: [102,205,170],\n  mediumblue: [0,0,205],\n  mediumorchid: [186,85,211],\n  mediumpurple: [147,112,219],\n  mediumseagreen: [60,179,113],\n  mediumslateblue:  [123,104,238],\n  mediumspringgreen:  [0,250,154],\n  mediumturquoise:  [72,209,204],\n  mediumvioletred:  [199,21,133],\n  midnightblue: [25,25,112],\n  mintcream:  [245,255,250],\n  mistyrose:  [255,228,225],\n  moccasin: [255,228,181],\n  navajowhite:  [255,222,173],\n  navy: [0,0,128],\n  oldlace:  [253,245,230],\n  olive:  [128,128,0],\n  olivedrab:  [107,142,35],\n  orange: [255,165,0],\n  orangered:  [255,69,0],\n  orchid: [218,112,214],\n  palegoldenrod:  [238,232,170],\n  palegreen:  [152,251,152],\n  paleturquoise:  [175,238,238],\n  palevioletred:  [219,112,147],\n  papayawhip: [255,239,213],\n  peachpuff:  [255,218,185],\n  peru: [205,133,63],\n  pink: [255,192,203],\n  plum: [221,160,221],\n  powderblue: [176,224,230],\n  purple: [128,0,128],\n  rebeccapurple: [102, 51, 153],\n  red:  [255,0,0],\n  rosybrown:  [188,143,143],\n  royalblue:  [65,105,225],\n  saddlebrown:  [139,69,19],\n  salmon: [250,128,114],\n  sandybrown: [244,164,96],\n  seagreen: [46,139,87],\n  seashell: [255,245,238],\n  sienna: [160,82,45],\n  silver: [192,192,192],\n  skyblue:  [135,206,235],\n  slateblue:  [106,90,205],\n  slategray:  [112,128,144],\n  slategrey:  [112,128,144],\n  snow: [255,250,250],\n  springgreen:  [0,255,127],\n  steelblue:  [70,130,180],\n  tan:  [210,180,140],\n  teal: [0,128,128],\n  thistle:  [216,191,216],\n  tomato: [255,99,71],\n  turquoise:  [64,224,208],\n  violet: [238,130,238],\n  wheat:  [245,222,179],\n  white:  [255,255,255],\n  whitesmoke: [245,245,245],\n  yellow: [255,255,0],\n  yellowgreen:  [154,205,50]\n};\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n  reverseKeywords[JSON.stringify(cssKeywords[key])] = key;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/color-convert/conversions.js\n// module id = 621\n// module chunks = 0","var conversions = require(\"./conversions\");\n\nvar convert = function() {\n   return new Converter();\n}\n\nfor (var func in conversions) {\n  // export Raw versions\n  convert[func + \"Raw\"] =  (function(func) {\n    // accept array or plain args\n    return function(arg) {\n      if (typeof arg == \"number\")\n        arg = Array.prototype.slice.call(arguments);\n      return conversions[func](arg);\n    }\n  })(func);\n\n  var pair = /(\\w+)2(\\w+)/.exec(func),\n      from = pair[1],\n      to = pair[2];\n\n  // export rgb2hsl and [\"rgb\"][\"hsl\"]\n  convert[from] = convert[from] || {};\n\n  convert[from][to] = convert[func] = (function(func) { \n    return function(arg) {\n      if (typeof arg == \"number\")\n        arg = Array.prototype.slice.call(arguments);\n      \n      var val = conversions[func](arg);\n      if (typeof val == \"string\" || val === undefined)\n        return val; // keyword\n\n      for (var i = 0; i < val.length; i++)\n        val[i] = Math.round(val[i]);\n      return val;\n    }\n  })(func);\n}\n\n\n/* Converter does lazy conversion and caching */\nvar Converter = function() {\n   this.convs = {};\n};\n\n/* Either get the values for a space or\n  set the values for a space, depending on args */\nConverter.prototype.routeSpace = function(space, args) {\n   var values = args[0];\n   if (values === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n   }\n   // color.rgb(10, 10, 10)\n   if (typeof values == \"number\") {\n      values = Array.prototype.slice.call(args);        \n   }\n\n   return this.setValues(space, values);\n};\n  \n/* Set the values for a space, invalidating cache */\nConverter.prototype.setValues = function(space, values) {\n   this.space = space;\n   this.convs = {};\n   this.convs[space] = values;\n   return this;\n};\n\n/* Get the values for a space. If there's already\n  a conversion for the space, fetch it, otherwise\n  compute it */\nConverter.prototype.getValues = function(space) {\n   var vals = this.convs[space];\n   if (!vals) {\n      var fspace = this.space,\n          from = this.convs[fspace];\n      vals = convert[fspace][space](from);\n\n      this.convs[space] = vals;\n   }\n  return vals;\n};\n\n[\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function(space) {\n   Converter.prototype[space] = function(vals) {\n      return this.routeSpace(space, arguments);\n   }\n});\n\nmodule.exports = convert;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/color-convert/index.js\n// module id = 622\n// module chunks = 0","module.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/color-name/index.js\n// module id = 623\n// module chunks = 0","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.isequal/index.js\n// module id = 736\n// module chunks = 0"],"sourceRoot":""}