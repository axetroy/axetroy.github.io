{"version":3,"sources":["webpack:///static/js/2.1cf92dbc.chunk.js","webpack:///./~/github-calendar/lib/index.js","webpack:///./~/add-subtract-date/lib/index.js","webpack:///./~/days/index.js","webpack:///./~/elly/lib/index.js","webpack:///./~/fillo/lib/index.js","webpack:///./~/formatoid/lib/index.js","webpack:///./~/github-calendar-legend/lib/index.js","webpack:///./~/github-calendar-parser/lib/index.js","webpack:///./~/iterate-object/lib/index.js","webpack:///./~/months/index.js","webpack:///./~/parse-it/lib/index.js","webpack:///./~/regex-escape/lib/index.js","webpack:///./~/sliced/index.js"],"names":["webpackJsonp","245","module","exports","__webpack_require__","parse","$","addSubtractDate","formatoid","DATE_FORMAT1","DATE_FORMAT2","container","username","options","summary_text","global_stats","style","minHeight","proxy","url","fetchCalendar","fetch","then","response","text","body","div","document","createElement","innerHTML","cal","querySelector","setTimeout","parsed","outerHTML","currentStreakInfo","current_streak","current_streak_range","last_contributed","longestStreakInfo","longest_streak","longest_streak_range","firstCol","class","html","last_year","subtract","Date","secondCol","thirdCol","appendChild","catch","e","console","error","447","gen","add","_","d","count","what","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","Error","661","en","abbr","short","fr","675","input","contextOrAttributes","charAt","slice","iterateObj","value","name","textContent","setAttribute","sliced","$$","selector","context","querySelectorAll","718","size","ch","toString","howMany","length","repeat","719","months","days","fillo","ParseIt","Parser","parser","YYYY","i","YY","MMMM","MMM","MM","M","dddd","getDay","ddd","dd","DD","D","A","a","hh","h","HH","H","mm","m","ss","s","f","run","720","721","githubCalendarLegend","data","weeks","lastWeek","updateLongestStreak","split","map","c","trim","forEach","startsWith","push","fill","match","date","obj","level","indexOf","728","iterateObject","fn","keys","Array","isArray","Object","791","792","_classCallCheck","instance","Constructor","TypeError","parseIt","format","args","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","regexEscape","this","re","RegExp","join","result","arr","field","apply","substring","1001","RegexEscape","replace","proto","escape","1006","sliceEnd","ret","len","start","Math","max","undefined"],"mappings":"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","file":"static/js/2.1cf92dbc.chunk.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 245:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar parse = __webpack_require__(721),\n\t    $ = __webpack_require__(675),\n\t    addSubtractDate = __webpack_require__(447),\n\t    formatoid = __webpack_require__(719);\n\t\n\tvar DATE_FORMAT1 = \"MMM D, YYYY\",\n\t    DATE_FORMAT2 = \"MMMM D\";\n\t\n\t/**\n\t * GitHubCalendar\n\t * Brings the contributions calendar from GitHub (provided username) into your page.\n\t *\n\t * @name GitHubCalendar\n\t * @function\n\t * @param {String|HTMLElement} container The calendar container (query selector or the element itself).\n\t * @param {String} username The GitHub username.\n\t * @param {Object} options An object containing the following fields:\n\t *\n\t *  - `summary_text` (String): The text that appears under the calendar (defaults to: `\"Summary of\n\t *    pull requests, issues opened, and commits made by <username>\"`).\n\t *  - `proxy` (Function): A function that receives as argument an url (string) and should return the proxied url.\n\t *    The default is using [@izuzak](https://github.com/izuzak)'s [`urlreq`](https://github.com/izuzak/urlreq).\n\t *  - `global_stats` (Boolean): If `false`, the global stats (total, longest and current streaks) will not be calculated and displayed. By default this is enabled.\n\t *\n\t * @return {Promise} A promise returned by the `fetch()` call.\n\t */\n\tmodule.exports = function GitHubCalendar(container, username, options) {\n\t\n\t    container = $(container);\n\t\n\t    options = options || {};\n\t    options.summary_text = options.summary_text || \"Summary of pull requests, issues opened, and commits made by <a href=\\\"https://github.com/\" + username + \"\\\" target=\\\"blank\\\">@\" + username + \"</a>\";\n\t\n\t    if (options.global_stats === false) {\n\t        container.style.minHeight = \"175px\";\n\t    }\n\t\n\t    // We need a proxy for CORS\n\t    // Thanks, @izuzak (https://github.com/izuzak/urlreq)\n\t    options.proxy = options.proxy || function (url) {\n\t        return \"https://urlreq.appspot.com/req?method=GET&url=\" + url;\n\t    };\n\t\n\t    var fetchCalendar = function fetchCalendar() {\n\t        return fetch(options.proxy(\"https://github.com/\" + username)).then(function (response) {\n\t            return response.text();\n\t        }).then(function (body) {\n\t            var div = document.createElement(\"div\");\n\t            div.innerHTML = body;\n\t            var cal = div.querySelector(\".js-contribution-graph\");\n\t            cal.querySelector(\".float-left.text-gray\").innerHTML = options.summary_text;\n\t\n\t            // If 'include-fragment' with spinner img loads instead of the svg, fetchCalendar again\n\t            if (cal.querySelector(\"include-fragment\")) {\n\t                setTimeout(fetchCalendar, 500);\n\t            } else {\n\t                if (options.global_stats !== false) {\n\t                    var parsed = parse($(\"svg\", cal).outerHTML),\n\t                        currentStreakInfo = parsed.current_streak ? formatoid(parsed.current_streak_range[0], DATE_FORMAT2) + \" \\u2013 \" + formatoid(parsed.current_streak_range[1], DATE_FORMAT2) : parsed.last_contributed ? \"Last contributed in \" + formatoid(parsed.last_contributed, DATE_FORMAT2) + \".\" : \"Rock - Hard Place\",\n\t                        longestStreakInfo = parsed.longest_streak ? formatoid(parsed.longest_streak_range[0], DATE_FORMAT2) + \" \\u2013 \" + formatoid(parsed.longest_streak_range[1], DATE_FORMAT2) : parsed.last_contributed ? \"Last contributed in \" + formatoid(parsed.last_contributed, DATE_FORMAT2) + \".\" : \"Rock - Hard Place\",\n\t                        firstCol = $(\"<div>\", {\n\t                        \"class\": \"contrib-column contrib-column-first table-column\",\n\t                        html: \"<span class=\\\"text-muted\\\">Contributions in the last year</span>\\n                               <span class=\\\"contrib-number\\\">\" + parsed.last_year + \" total</span>\\n                               <span class=\\\"text-muted\\\">\" + formatoid(addSubtractDate.subtract(new Date(), 1, \"year\"), DATE_FORMAT1) + \" \\u2013 \" + formatoid(new Date(), DATE_FORMAT1) + \"</span>\"\n\t                    }),\n\t                        secondCol = $(\"<div>\", {\n\t                        \"class\": \"contrib-column table-column\",\n\t                        html: \"<span class=\\\"text-muted\\\">Longest streak</span>\\n                               <span class=\\\"contrib-number\\\">\" + parsed.longest_streak + \" days</span>\\n                               <span class=\\\"text-muted\\\">\" + longestStreakInfo + \"</span>\"\n\t                    }),\n\t                        thirdCol = $(\"<div>\", {\n\t                        \"class\": \"contrib-column table-column\",\n\t                        html: \"<span class=\\\"text-muted\\\">Current streak</span>\\n                               <span class=\\\"contrib-number\\\">\" + parsed.current_streak + \" days</span>\\n                               <span class=\\\"text-muted\\\">\" + currentStreakInfo + \"</span>\"\n\t                    });\n\t\n\t                    cal.appendChild(firstCol);\n\t                    cal.appendChild(secondCol);\n\t                    cal.appendChild(thirdCol);\n\t                }\n\t\n\t                container.innerHTML = cal.innerHTML;\n\t            }\n\t        }).catch(function (e) {\n\t            return console.error(e);\n\t        });\n\t    };\n\t\n\t    return fetchCalendar();\n\t};\n\n/***/ },\n\n/***/ 447:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tfunction gen(add) {\n\t    return function _(d, count, what) {\n\t        count = add * count;\n\t        switch (what) {\n\t            case \"years\":\n\t            case \"year\":\n\t                d.setFullYear(d.getFullYear() + count);\n\t                break;\n\t            case \"months\":\n\t            case \"month\":\n\t                d.setMonth(d.getMonth() + count);\n\t                break;\n\t            case \"weeks\":\n\t            case \"week\":\n\t                return _(d, count * 7, \"days\");\n\t                break;\n\t            case \"days\":\n\t            case \"day\":\n\t                d.setDate(d.getDate() + count);\n\t                break;\n\t            case \"hours\":\n\t            case \"hour\":\n\t                d.setHours(d.getHours() + count);\n\t                break;\n\t            case \"minutes\":\n\t            case \"minute\":\n\t                d.setMinutes(d.getMinutes() + count);\n\t                break;\n\t            case \"seconds\":\n\t            case \"second\":\n\t                d.setSeconds(d.getSeconds() + count);\n\t                break;\n\t            case \"milliseconds\":\n\t            case \"millisecond\":\n\t                d.setMilliseconds(d.getMilliseconds() + count);\n\t                break;\n\t            default:\n\t                throw new Error(\"Invalid range: \" + what);\n\t        }\n\t        return d;\n\t    };\n\t}\n\t\n\tmodule.exports = {\n\t    add: gen(1),\n\t    subtract: gen(-1)\n\t};\n\n/***/ },\n\n/***/ 661:\n/***/ function(module, exports) {\n\n\t/*!\n\t * days <https://github.com/jonschlinkert/days>\n\t *\n\t * Copyright (c) 2014 Jon Schlinkert, contributors.\n\t * Licensed under the MIT license.\n\t */\n\t\n\t// English\n\tmodule.exports.en = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\tmodule.exports.en.abbr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\tmodule.exports.en.short = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n\t\n\t// French translation\n\tmodule.exports.fr = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'];\n\tmodule.exports.fr.abbr = ['dim', 'lun', 'mar', 'mer', 'jeu', 'ven', 'sam'];\n\tmodule.exports.fr.short = ['di', 'lu', 'ma', 'me', 'je', 've', 'sa'];\n\t\n\t// In order not to break compatibility\n\tmodule.exports = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\tmodule.exports.abbr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\tmodule.exports.short = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n\n\n/***/ },\n\n/***/ 675:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar iterateObj = __webpack_require__(728),\n\t    sliced = __webpack_require__(1006);\n\t\n\t/**\n\t * elly\n\t * Selects the DOM elements based on the provided selector. If there is no\n\t * commonjs/module environment, the `$` global variable will be created.\n\t *\n\t * @name elly\n\t * @function\n\t * @param {String|HTMLElement} input The element selector (e.g.\n\t * `'#my-id > .my-class'`), the element tag you want to create\n\t * (e.g. `'<ul>'`) or the HTML element (will be returned by the function).\n\t * @param {Object|HTMLElement} contextOrAttributes\n\t * @returns {HTMLElement} The HTMLElement that was provided or selected.\n\t */\n\tfunction $(input, contextOrAttributes) {\n\t    if (typeof input === \"string\") {\n\t        if (input.charAt(0) === \"<\") {\n\t            input = document.createElement(input.slice(1, -1));\n\t            iterateObj(contextOrAttributes || {}, function (value, name) {\n\t\n\t                switch (name) {\n\t                    case \"text\":\n\t                        input.textContent = value;\n\t                        return;\n\t                    case \"html\":\n\t                        input.innerHTML = value;\n\t                        return;\n\t                }\n\t\n\t                input.setAttribute(name, value);\n\t            });\n\t            return input;\n\t        } else {\n\t            contextOrAttributes = contextOrAttributes || document;\n\t            return contextOrAttributes.querySelector(input);\n\t        }\n\t    }\n\t    return input;\n\t};\n\t\n\t/**\n\t * elly.$$\n\t * Selects multiple elements. Note that if there is no commonjs/module environment, you will access this function using `$.$$`.\n\t *\n\t * @name elly.$$\n\t * @function\n\t * @param {String} selector The DOM query selector.\n\t * @param {HTMLElement} context The element context/container. Defaults to `document`.\n\t * @returns {Array} The array of elements.\n\t */\n\t$.$$ = function (selector, context) {\n\t    if (typeof selector === \"string\") {\n\t        context = context || document;\n\t        return sliced(context.querySelectorAll(selector));\n\t    }\n\t    return [selector];\n\t};\n\t\n\tmodule.exports = $;\n\n/***/ },\n\n/***/ 718:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\t/**\n\t * fillo\n\t * Fill additional characters at the beginning of the string.\n\t *\n\t * @name fillo\n\t * @function\n\t * @param {String|Number} what The input snippet (number, string or anything that can be stringified).\n\t * @param {Number} size The width of the final string (default: `2`).\n\t * @param {String} ch The character to repeat (default: `\"0\"`).\n\t * @return {String} The input value with filled characters.\n\t */\n\tmodule.exports = function fillo(what, size, ch) {\n\t  size = size || 2;\n\t  ch = ch || \"0\";\n\t  what = what.toString();\n\t  var howMany = size - what.length;\n\t  return (howMany <= 0 ? \"\" : ch.repeat(howMany)) + what;\n\t};\n\n/***/ },\n\n/***/ 719:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar months = __webpack_require__(791),\n\t    days = __webpack_require__(661),\n\t    fillo = __webpack_require__(718),\n\t    ParseIt = __webpack_require__(792).Parser;\n\t\n\tvar parser = new ParseIt({\n\t  // Years\n\t  /// 2015\n\t  \"YYYY\": function YYYY(i) {\n\t    return i.getFullYear();\n\t  }\n\t\n\t  // 15\n\t  , \"YY\": function YY(i) {\n\t    return i.getFullYear() % 100;\n\t  }\n\t\n\t  // Months\n\t  // January\n\t  , \"MMMM\": function MMMM(i) {\n\t    return months[i.getMonth()];\n\t  }\n\t\n\t  // Jan\n\t  , \"MMM\": function MMM(i) {\n\t    return months.abbr[i.getMonth()];\n\t  }\n\t\n\t  // 01\n\t  , \"MM\": function MM(i) {\n\t    return fillo(i.getMonth() + 1);\n\t  }\n\t\n\t  // 1\n\t  , \"M\": function M(i) {\n\t    return i.getMonth() + 1;\n\t  }\n\t\n\t  // Days\n\t  // Sunday\n\t  , \"dddd\": function dddd(i) {\n\t    return days[i.getDay()];\n\t  }\n\t  // Sun\n\t  , \"ddd\": function ddd(i) {\n\t    return days.abbr[i.getDay()];\n\t  }\n\t  // Su\n\t  , \"dd\": function dd(i) {\n\t    return days.short[i.getDay()];\n\t  }\n\t  // 0\n\t  , \"d\": function d(i) {\n\t    return i.getDay();\n\t  }\n\t\n\t  // Dates\n\t  // 06  Day in month\n\t  , \"DD\": function DD(i) {\n\t    return fillo(i.getDate());\n\t  }\n\t  // 6   Day in month\n\t  , \"D\": function D(i) {\n\t    return i.getDate();\n\t  }\n\t\n\t  // AM/PM\n\t  // AM/PM\n\t  , \"A\": function A(i) {\n\t    return i.getHours() >= 12 ? \"PM\" : \"AM\";\n\t  }\n\t  // am/pm\n\t  , \"a\": function a(i) {\n\t    return i.getHours() >= 12 ? \"pm\" : \"am\";\n\t  }\n\t\n\t  // Hours\n\t  // 08 Hour\n\t  , \"hh\": function hh(i) {\n\t    return fillo(i.getHours() % 12 || 12);\n\t  }\n\t  // 8 Hour\n\t  , \"h\": function h(i) {\n\t    return i.getHours() % 12 || 12;\n\t  }\n\t  // (alias)\n\t  , \"HH\": function HH(i) {\n\t    return fillo(i.getHours());\n\t  }\n\t  // (alias)\n\t  , \"H\": function H(i) {\n\t    return i.getHours();\n\t  }\n\t\n\t  // Minutes\n\t  // 09 Minute\n\t  , \"mm\": function mm(i) {\n\t    return fillo(i.getMinutes());\n\t  }\n\t  // 9  Minute\n\t  , \"m\": function m(i) {\n\t    return i.getMinutes();\n\t  }\n\t\n\t  // Seconds\n\t  // 09 Seconds\n\t  , \"ss\": function ss(i) {\n\t    return fillo(i.getSeconds());\n\t  }\n\t\n\t  // 9  Seconds\n\t  , \"s\": function s(i) {\n\t    return i.getSeconds();\n\t  }\n\t});\n\t\n\t/**\n\t * formatoid\n\t * Formats the date into a given format.\n\t *\n\t * Usable format fields:\n\t *\n\t *  - **Years**\n\t *      - `YYYY` (e.g. `\"2015\"`)\n\t *      - `YY` (e.g. `\"15\"`)\n\t *  - **Months**\n\t *      - `MMMM` (e.g. `\"January\"`)\n\t *      - `MMM` (e.g. `\"Jan\"`)\n\t *      - `MM` (e.g. `\"01\"`)\n\t *      - `M` (e.g. `\"1\"`)\n\t *  - **Days**\n\t *      - `dddd` (e.g. `\"Sunday\"`)\n\t *      - `ddd` (e.g. `\"Sun\"`)\n\t *      - `dd` (e.g. `\"Su\"`)\n\t *      - `d` (e.g. `\"Su\"`)\n\t *  - **Dates**\n\t *      - `DD` (e.g. `\"07\"`)\n\t *      - `D` (e.g. `\"7\"`)\n\t *  - **AM/PM**\n\t *      - `A` (e.g. `\"AM\"`)\n\t *      - `a` (e.g. `\"pm\"`)\n\t *  - **Hours**\n\t *      - `hh` (e.g. `\"07\"`)–12 hour format\n\t *      - `h` (e.g. `\"7\"`)\n\t *      - `HH` (e.g. `\"07\"`)–24 hour format\n\t *      - `H` (e.g. `\"7\"`)\n\t *  - **Minutes**\n\t *      - `mm` (e.g. `\"07\"`)\n\t *      - `m` (e.g. `\"7\"`)\n\t *  - **Seconds**\n\t *      - `ss` (e.g. `\"07\"`)\n\t *      - `s` (e.g. `\"7\"`)\n\t *\n\t * @name formatoid\n\t * @function\n\t * @param {Date} i The date object.\n\t * @param {String} f The date format.\n\t * @return {String} The formatted date (as string).\n\t */\n\tmodule.exports = function formatoid(i, f) {\n\t  return parser.run(f, [i]);\n\t};\n\n/***/ },\n\n/***/ 720:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = [\"#eee\", \"#d6e685\", \"#8cc665\", \"#44a340\", \"#1e6823\"];\n\n/***/ },\n\n/***/ 721:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar githubCalendarLegend = __webpack_require__(720);\n\t\n\t/**\n\t * parseGitHubCalendarSvg\n\t * Parses the SVG input (as string).\n\t *\n\t * @name parseGitHubCalendarSvg\n\t * @function\n\t * @param {String} input The SVG code of the contributions calendar.\n\t * @return {Object} An object containing:\n\t *\n\t *  - `last_year` (Number): The total contributions in the last year.\n\t *  - `longest_streak` (Number): The longest streak.\n\t *  - `longest_streak_range` (Array): An array of two date objects representing the date range.\n\t *  - `current_streak` (Number): The current streak.\n\t *  - `current_streak_range` (Array): An array of two date objects representing the date range.\n\t *  - `days` (Array): An array of day objects:\n\t *       - `fill` (String): The hex color.\n\t *       - `date` (Date): The day date.\n\t *       - `count` (Number): The number of commits.\n\t *       - `level` (Number): A number between 0 and 4 (inclusive) representing the contribution level (more commits, higher value).\n\t *  - `weeks` (Array): The day objects grouped by weeks (arrays).\n\t *  - `last_contributed` (Date): The last contribution date.\n\t */\n\tmodule.exports = function parseGitHubCalendarSvg(input) {\n\t\n\t    var data = {\n\t        last_year: 0,\n\t        longest_streak: -1,\n\t        longest_streak_range: [],\n\t        current_streak: 0,\n\t        current_streak_range: [],\n\t        weeks: [],\n\t        days: [],\n\t        last_contributed: null\n\t    },\n\t        lastWeek = [],\n\t        updateLongestStreak = function updateLongestStreak() {\n\t        if (data.current_streak > data.longest_streak) {\n\t            data.longest_streak = data.current_streak;\n\t            data.longest_streak_range[0] = data.current_streak_range[0];\n\t            data.longest_streak_range[1] = data.current_streak_range[1];\n\t        }\n\t    };\n\t\n\t    input.split(\"\\n\").slice(2).map(function (c) {\n\t        return c.trim();\n\t    }).forEach(function (c) {\n\t        if (c.startsWith(\"<g transform\")) {\n\t            return lastWeek.length && data.weeks.push(lastWeek) && (lastWeek = []);\n\t        }\n\t\n\t        var fill = c.match(/fill=\"(#[a-z0-9]+)\"/),\n\t            date = c.match(/data-date=\"([0-9\\-]+)\"/),\n\t            count = c.match(/data-count=\"([0-9]+)\"/),\n\t            level = null;\n\t\n\t        fill = fill && fill[1];\n\t        date = date && date[1];\n\t        count = count && +count[1];\n\t\n\t        if (!fill) {\n\t            return;\n\t        }\n\t\n\t        var obj = {\n\t            fill: fill,\n\t            date: new Date(date),\n\t            count: count,\n\t            level: githubCalendarLegend.indexOf(fill)\n\t        };\n\t\n\t        if (data.current_streak === 0) {\n\t            data.current_streak_range[0] = obj.date;\n\t        }\n\t\n\t        if (obj.count) {\n\t            ++data.current_streak;\n\t            data.last_year += obj.count;\n\t            data.last_contributed = obj.date;\n\t            data.current_streak_range[1] = obj.date;\n\t        } else {\n\t            updateLongestStreak();\n\t            data.current_streak = 0;\n\t        }\n\t\n\t        lastWeek.push(obj);\n\t        data.days.push(obj);\n\t    });\n\t\n\t    updateLongestStreak();\n\t\n\t    return data;\n\t};\n\n/***/ },\n\n/***/ 728:\n/***/ function(module, exports) {\n\n\t/**\n\t * iterateObject\n\t * Iterates an object. Note the object field order may differ.\n\t *\n\t * @name iterateObject\n\t * @function\n\t * @param {Object} obj The input object.\n\t * @param {Function} fn A function that will be called with the current value, field name and provided object.\n\t * @return {Function} The `iterateObject` function.\n\t */\n\tfunction iterateObject(obj, fn) {\n\t    var i = 0\n\t      , keys = []\n\t      ;\n\t\n\t    if (Array.isArray(obj)) {\n\t        for (; i < obj.length; ++i) {\n\t            if (fn(obj[i], i, obj) === false) {\n\t                break;\n\t            }\n\t        }\n\t    } else if (typeof obj === \"object\" && obj !== null) {\n\t        keys = Object.keys(obj);\n\t        for (; i < keys.length; ++i) {\n\t            if (fn(obj[keys[i]], keys[i], obj) === false) {\n\t                break;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tmodule.exports = iterateObject;\n\n\n/***/ },\n\n/***/ 791:\n/***/ function(module, exports) {\n\n\t/*!\n\t * months <https://github.com/jonschlinkert/months>\n\t *\n\t * Copyright (c) 2014 Jon Schlinkert, contributors.\n\t * Licensed under the MIT license.\n\t */\n\t\n\tmodule.exports = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\t\n\tmodule.exports.abbr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n\n/***/ },\n\n/***/ 792:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar regexEscape = __webpack_require__(1001);\n\t\n\tvar ParseIt = function () {\n\t    /**\n\t     * ParseIt\n\t     * The `ParseIt` class. It can be used to use the same data object but with different formats/arguments.\n\t     *\n\t     * @name ParseIt\n\t     * @function\n\t     * @param {Object} obj An object containing the fields to replace.\n\t     */\n\t    function ParseIt(obj) {\n\t        _classCallCheck(this, ParseIt);\n\t\n\t        this.obj = obj || {};\n\t        this.re = new RegExp(\"^(\" + Object.keys(obj).map(regexEscape).join(\"|\") + \")\");\n\t    }\n\t\n\t    /**\n\t     * run\n\t     * Replaces the fields in the format string with data coming from the data object.\n\t     *\n\t     *\n\t     * @name parseIt\n\t     * @function\n\t     * @param {String} format The format input.\n\t     * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n\t     * @return {String} The result as string.\n\t     */\n\t\n\t\n\t    _createClass(ParseIt, [{\n\t        key: \"run\",\n\t        value: function run(format, args) {\n\t            var result = \"\";\n\t            args = args || [];\n\t            do {\n\t                var arr = format.match(this.re),\n\t                    field = arr && arr[1],\n\t                    c = field || format.charAt(0);\n\t\n\t                if (field) {\n\t                    var value = this.obj[field];\n\t                    if (typeof value === \"function\") {\n\t                        value = value.apply(this, args);\n\t                    }\n\t                    result += value;\n\t                } else {\n\t                    result += c;\n\t                }\n\t                format = format.substring(c.length);\n\t            } while (format);\n\t            return result;\n\t        }\n\t    }]);\n\t\n\t    return ParseIt;\n\t}();\n\t\n\t/**\n\t * parseIt\n\t * A wrapper around the `ParseIt` class. The `ParseIt` constructor is accessible using `parseIt.Parser`.\n\t *\n\t * @name parseIt\n\t * @function\n\t * @param {String} format The format input.\n\t * @param {Object} obj An object containing the fields to replace.\n\t * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n\t * @return {String} The result as string.\n\t */\n\t\n\t\n\tfunction parseIt(format, obj, args) {\n\t    return new ParseIt(obj).run(format, args);\n\t}\n\t\n\tparseIt.Parser = ParseIt;\n\t\n\tmodule.exports = parseIt;\n\n/***/ },\n\n/***/ 1001:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\t/**\n\t * RegexEscape\n\t * Escapes a string for using it in a regular expression.\n\t *\n\t * @name RegexEscape\n\t * @function\n\t * @param {String} input The string that must be escaped.\n\t * @return {String} The escaped string.\n\t */\n\tfunction RegexEscape(input) {\n\t  return input.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n\t}\n\t\n\t/**\n\t * proto\n\t * Adds the `RegexEscape` function to `RegExp` class.\n\t *\n\t * @name proto\n\t * @function\n\t * @return {Function} The `RegexEscape` function.\n\t */\n\tRegexEscape.proto = function () {\n\t  RegExp.escape = RegexEscape;\n\t  return RegexEscape;\n\t};\n\t\n\tmodule.exports = RegexEscape;\n\n/***/ },\n\n/***/ 1006:\n/***/ function(module, exports) {\n\n\t\n\t/**\n\t * An Array.prototype.slice.call(arguments) alternative\n\t *\n\t * @param {Object} args something with a length\n\t * @param {Number} slice\n\t * @param {Number} sliceEnd\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (args, slice, sliceEnd) {\n\t  var ret = [];\n\t  var len = args.length;\n\t\n\t  if (0 === len) return ret;\n\t\n\t  var start = slice < 0\n\t    ? Math.max(0, slice + len)\n\t    : slice || 0;\n\t\n\t  if (sliceEnd !== undefined) {\n\t    len = sliceEnd < 0\n\t      ? sliceEnd + len\n\t      : sliceEnd\n\t  }\n\t\n\t  while (len-- > start) {\n\t    ret[len - start] = args[len];\n\t  }\n\t\n\t  return ret;\n\t}\n\t\n\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/2.1cf92dbc.chunk.js","\"use strict\";\n\nvar parse = require(\"github-calendar-parser\"),\n    $ = require(\"elly\"),\n    addSubtractDate = require(\"add-subtract-date\"),\n    formatoid = require(\"formatoid\");\n\nvar DATE_FORMAT1 = \"MMM D, YYYY\",\n    DATE_FORMAT2 = \"MMMM D\";\n\n/**\n * GitHubCalendar\n * Brings the contributions calendar from GitHub (provided username) into your page.\n *\n * @name GitHubCalendar\n * @function\n * @param {String|HTMLElement} container The calendar container (query selector or the element itself).\n * @param {String} username The GitHub username.\n * @param {Object} options An object containing the following fields:\n *\n *  - `summary_text` (String): The text that appears under the calendar (defaults to: `\"Summary of\n *    pull requests, issues opened, and commits made by <username>\"`).\n *  - `proxy` (Function): A function that receives as argument an url (string) and should return the proxied url.\n *    The default is using [@izuzak](https://github.com/izuzak)'s [`urlreq`](https://github.com/izuzak/urlreq).\n *  - `global_stats` (Boolean): If `false`, the global stats (total, longest and current streaks) will not be calculated and displayed. By default this is enabled.\n *\n * @return {Promise} A promise returned by the `fetch()` call.\n */\nmodule.exports = function GitHubCalendar(container, username, options) {\n\n    container = $(container);\n\n    options = options || {};\n    options.summary_text = options.summary_text || \"Summary of pull requests, issues opened, and commits made by <a href=\\\"https://github.com/\" + username + \"\\\" target=\\\"blank\\\">@\" + username + \"</a>\";\n\n    if (options.global_stats === false) {\n        container.style.minHeight = \"175px\";\n    }\n\n    // We need a proxy for CORS\n    // Thanks, @izuzak (https://github.com/izuzak/urlreq)\n    options.proxy = options.proxy || function (url) {\n        return \"https://urlreq.appspot.com/req?method=GET&url=\" + url;\n    };\n\n    var fetchCalendar = function fetchCalendar() {\n        return fetch(options.proxy(\"https://github.com/\" + username)).then(function (response) {\n            return response.text();\n        }).then(function (body) {\n            var div = document.createElement(\"div\");\n            div.innerHTML = body;\n            var cal = div.querySelector(\".js-contribution-graph\");\n            cal.querySelector(\".float-left.text-gray\").innerHTML = options.summary_text;\n\n            // If 'include-fragment' with spinner img loads instead of the svg, fetchCalendar again\n            if (cal.querySelector(\"include-fragment\")) {\n                setTimeout(fetchCalendar, 500);\n            } else {\n                if (options.global_stats !== false) {\n                    var parsed = parse($(\"svg\", cal).outerHTML),\n                        currentStreakInfo = parsed.current_streak ? formatoid(parsed.current_streak_range[0], DATE_FORMAT2) + \" \\u2013 \" + formatoid(parsed.current_streak_range[1], DATE_FORMAT2) : parsed.last_contributed ? \"Last contributed in \" + formatoid(parsed.last_contributed, DATE_FORMAT2) + \".\" : \"Rock - Hard Place\",\n                        longestStreakInfo = parsed.longest_streak ? formatoid(parsed.longest_streak_range[0], DATE_FORMAT2) + \" \\u2013 \" + formatoid(parsed.longest_streak_range[1], DATE_FORMAT2) : parsed.last_contributed ? \"Last contributed in \" + formatoid(parsed.last_contributed, DATE_FORMAT2) + \".\" : \"Rock - Hard Place\",\n                        firstCol = $(\"<div>\", {\n                        \"class\": \"contrib-column contrib-column-first table-column\",\n                        html: \"<span class=\\\"text-muted\\\">Contributions in the last year</span>\\n                               <span class=\\\"contrib-number\\\">\" + parsed.last_year + \" total</span>\\n                               <span class=\\\"text-muted\\\">\" + formatoid(addSubtractDate.subtract(new Date(), 1, \"year\"), DATE_FORMAT1) + \" \\u2013 \" + formatoid(new Date(), DATE_FORMAT1) + \"</span>\"\n                    }),\n                        secondCol = $(\"<div>\", {\n                        \"class\": \"contrib-column table-column\",\n                        html: \"<span class=\\\"text-muted\\\">Longest streak</span>\\n                               <span class=\\\"contrib-number\\\">\" + parsed.longest_streak + \" days</span>\\n                               <span class=\\\"text-muted\\\">\" + longestStreakInfo + \"</span>\"\n                    }),\n                        thirdCol = $(\"<div>\", {\n                        \"class\": \"contrib-column table-column\",\n                        html: \"<span class=\\\"text-muted\\\">Current streak</span>\\n                               <span class=\\\"contrib-number\\\">\" + parsed.current_streak + \" days</span>\\n                               <span class=\\\"text-muted\\\">\" + currentStreakInfo + \"</span>\"\n                    });\n\n                    cal.appendChild(firstCol);\n                    cal.appendChild(secondCol);\n                    cal.appendChild(thirdCol);\n                }\n\n                container.innerHTML = cal.innerHTML;\n            }\n        }).catch(function (e) {\n            return console.error(e);\n        });\n    };\n\n    return fetchCalendar();\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/github-calendar/lib/index.js\n// module id = 245\n// module chunks = 2","\"use strict\";\n\nfunction gen(add) {\n    return function _(d, count, what) {\n        count = add * count;\n        switch (what) {\n            case \"years\":\n            case \"year\":\n                d.setFullYear(d.getFullYear() + count);\n                break;\n            case \"months\":\n            case \"month\":\n                d.setMonth(d.getMonth() + count);\n                break;\n            case \"weeks\":\n            case \"week\":\n                return _(d, count * 7, \"days\");\n                break;\n            case \"days\":\n            case \"day\":\n                d.setDate(d.getDate() + count);\n                break;\n            case \"hours\":\n            case \"hour\":\n                d.setHours(d.getHours() + count);\n                break;\n            case \"minutes\":\n            case \"minute\":\n                d.setMinutes(d.getMinutes() + count);\n                break;\n            case \"seconds\":\n            case \"second\":\n                d.setSeconds(d.getSeconds() + count);\n                break;\n            case \"milliseconds\":\n            case \"millisecond\":\n                d.setMilliseconds(d.getMilliseconds() + count);\n                break;\n            default:\n                throw new Error(\"Invalid range: \" + what);\n        }\n        return d;\n    };\n}\n\nmodule.exports = {\n    add: gen(1),\n    subtract: gen(-1)\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/add-subtract-date/lib/index.js\n// module id = 447\n// module chunks = 2","/*!\n * days <https://github.com/jonschlinkert/days>\n *\n * Copyright (c) 2014 Jon Schlinkert, contributors.\n * Licensed under the MIT license.\n */\n\n// English\nmodule.exports.en = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nmodule.exports.en.abbr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nmodule.exports.en.short = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n\n// French translation\nmodule.exports.fr = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'];\nmodule.exports.fr.abbr = ['dim', 'lun', 'mar', 'mer', 'jeu', 'ven', 'sam'];\nmodule.exports.fr.short = ['di', 'lu', 'ma', 'me', 'je', 've', 'sa'];\n\n// In order not to break compatibility\nmodule.exports = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nmodule.exports.abbr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nmodule.exports.short = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/days/index.js\n// module id = 661\n// module chunks = 2","\"use strict\";\n\nvar iterateObj = require(\"iterate-object\"),\n    sliced = require(\"sliced\");\n\n/**\n * elly\n * Selects the DOM elements based on the provided selector. If there is no\n * commonjs/module environment, the `$` global variable will be created.\n *\n * @name elly\n * @function\n * @param {String|HTMLElement} input The element selector (e.g.\n * `'#my-id > .my-class'`), the element tag you want to create\n * (e.g. `'<ul>'`) or the HTML element (will be returned by the function).\n * @param {Object|HTMLElement} contextOrAttributes\n * @returns {HTMLElement} The HTMLElement that was provided or selected.\n */\nfunction $(input, contextOrAttributes) {\n    if (typeof input === \"string\") {\n        if (input.charAt(0) === \"<\") {\n            input = document.createElement(input.slice(1, -1));\n            iterateObj(contextOrAttributes || {}, function (value, name) {\n\n                switch (name) {\n                    case \"text\":\n                        input.textContent = value;\n                        return;\n                    case \"html\":\n                        input.innerHTML = value;\n                        return;\n                }\n\n                input.setAttribute(name, value);\n            });\n            return input;\n        } else {\n            contextOrAttributes = contextOrAttributes || document;\n            return contextOrAttributes.querySelector(input);\n        }\n    }\n    return input;\n};\n\n/**\n * elly.$$\n * Selects multiple elements. Note that if there is no commonjs/module environment, you will access this function using `$.$$`.\n *\n * @name elly.$$\n * @function\n * @param {String} selector The DOM query selector.\n * @param {HTMLElement} context The element context/container. Defaults to `document`.\n * @returns {Array} The array of elements.\n */\n$.$$ = function (selector, context) {\n    if (typeof selector === \"string\") {\n        context = context || document;\n        return sliced(context.querySelectorAll(selector));\n    }\n    return [selector];\n};\n\nmodule.exports = $;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elly/lib/index.js\n// module id = 675\n// module chunks = 2","\"use strict\";\n\n/**\n * fillo\n * Fill additional characters at the beginning of the string.\n *\n * @name fillo\n * @function\n * @param {String|Number} what The input snippet (number, string or anything that can be stringified).\n * @param {Number} size The width of the final string (default: `2`).\n * @param {String} ch The character to repeat (default: `\"0\"`).\n * @return {String} The input value with filled characters.\n */\nmodule.exports = function fillo(what, size, ch) {\n  size = size || 2;\n  ch = ch || \"0\";\n  what = what.toString();\n  var howMany = size - what.length;\n  return (howMany <= 0 ? \"\" : ch.repeat(howMany)) + what;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/fillo/lib/index.js\n// module id = 718\n// module chunks = 2","\"use strict\";\n\nvar months = require(\"months\"),\n    days = require(\"days\"),\n    fillo = require(\"fillo\"),\n    ParseIt = require(\"parse-it\").Parser;\n\nvar parser = new ParseIt({\n  // Years\n  /// 2015\n  \"YYYY\": function YYYY(i) {\n    return i.getFullYear();\n  }\n\n  // 15\n  , \"YY\": function YY(i) {\n    return i.getFullYear() % 100;\n  }\n\n  // Months\n  // January\n  , \"MMMM\": function MMMM(i) {\n    return months[i.getMonth()];\n  }\n\n  // Jan\n  , \"MMM\": function MMM(i) {\n    return months.abbr[i.getMonth()];\n  }\n\n  // 01\n  , \"MM\": function MM(i) {\n    return fillo(i.getMonth() + 1);\n  }\n\n  // 1\n  , \"M\": function M(i) {\n    return i.getMonth() + 1;\n  }\n\n  // Days\n  // Sunday\n  , \"dddd\": function dddd(i) {\n    return days[i.getDay()];\n  }\n  // Sun\n  , \"ddd\": function ddd(i) {\n    return days.abbr[i.getDay()];\n  }\n  // Su\n  , \"dd\": function dd(i) {\n    return days.short[i.getDay()];\n  }\n  // 0\n  , \"d\": function d(i) {\n    return i.getDay();\n  }\n\n  // Dates\n  // 06  Day in month\n  , \"DD\": function DD(i) {\n    return fillo(i.getDate());\n  }\n  // 6   Day in month\n  , \"D\": function D(i) {\n    return i.getDate();\n  }\n\n  // AM/PM\n  // AM/PM\n  , \"A\": function A(i) {\n    return i.getHours() >= 12 ? \"PM\" : \"AM\";\n  }\n  // am/pm\n  , \"a\": function a(i) {\n    return i.getHours() >= 12 ? \"pm\" : \"am\";\n  }\n\n  // Hours\n  // 08 Hour\n  , \"hh\": function hh(i) {\n    return fillo(i.getHours() % 12 || 12);\n  }\n  // 8 Hour\n  , \"h\": function h(i) {\n    return i.getHours() % 12 || 12;\n  }\n  // (alias)\n  , \"HH\": function HH(i) {\n    return fillo(i.getHours());\n  }\n  // (alias)\n  , \"H\": function H(i) {\n    return i.getHours();\n  }\n\n  // Minutes\n  // 09 Minute\n  , \"mm\": function mm(i) {\n    return fillo(i.getMinutes());\n  }\n  // 9  Minute\n  , \"m\": function m(i) {\n    return i.getMinutes();\n  }\n\n  // Seconds\n  // 09 Seconds\n  , \"ss\": function ss(i) {\n    return fillo(i.getSeconds());\n  }\n\n  // 9  Seconds\n  , \"s\": function s(i) {\n    return i.getSeconds();\n  }\n});\n\n/**\n * formatoid\n * Formats the date into a given format.\n *\n * Usable format fields:\n *\n *  - **Years**\n *      - `YYYY` (e.g. `\"2015\"`)\n *      - `YY` (e.g. `\"15\"`)\n *  - **Months**\n *      - `MMMM` (e.g. `\"January\"`)\n *      - `MMM` (e.g. `\"Jan\"`)\n *      - `MM` (e.g. `\"01\"`)\n *      - `M` (e.g. `\"1\"`)\n *  - **Days**\n *      - `dddd` (e.g. `\"Sunday\"`)\n *      - `ddd` (e.g. `\"Sun\"`)\n *      - `dd` (e.g. `\"Su\"`)\n *      - `d` (e.g. `\"Su\"`)\n *  - **Dates**\n *      - `DD` (e.g. `\"07\"`)\n *      - `D` (e.g. `\"7\"`)\n *  - **AM/PM**\n *      - `A` (e.g. `\"AM\"`)\n *      - `a` (e.g. `\"pm\"`)\n *  - **Hours**\n *      - `hh` (e.g. `\"07\"`)–12 hour format\n *      - `h` (e.g. `\"7\"`)\n *      - `HH` (e.g. `\"07\"`)–24 hour format\n *      - `H` (e.g. `\"7\"`)\n *  - **Minutes**\n *      - `mm` (e.g. `\"07\"`)\n *      - `m` (e.g. `\"7\"`)\n *  - **Seconds**\n *      - `ss` (e.g. `\"07\"`)\n *      - `s` (e.g. `\"7\"`)\n *\n * @name formatoid\n * @function\n * @param {Date} i The date object.\n * @param {String} f The date format.\n * @return {String} The formatted date (as string).\n */\nmodule.exports = function formatoid(i, f) {\n  return parser.run(f, [i]);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/formatoid/lib/index.js\n// module id = 719\n// module chunks = 2","\"use strict\";\n\nmodule.exports = [\"#eee\", \"#d6e685\", \"#8cc665\", \"#44a340\", \"#1e6823\"];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/github-calendar-legend/lib/index.js\n// module id = 720\n// module chunks = 2","\"use strict\";\n\nvar githubCalendarLegend = require(\"github-calendar-legend\");\n\n/**\n * parseGitHubCalendarSvg\n * Parses the SVG input (as string).\n *\n * @name parseGitHubCalendarSvg\n * @function\n * @param {String} input The SVG code of the contributions calendar.\n * @return {Object} An object containing:\n *\n *  - `last_year` (Number): The total contributions in the last year.\n *  - `longest_streak` (Number): The longest streak.\n *  - `longest_streak_range` (Array): An array of two date objects representing the date range.\n *  - `current_streak` (Number): The current streak.\n *  - `current_streak_range` (Array): An array of two date objects representing the date range.\n *  - `days` (Array): An array of day objects:\n *       - `fill` (String): The hex color.\n *       - `date` (Date): The day date.\n *       - `count` (Number): The number of commits.\n *       - `level` (Number): A number between 0 and 4 (inclusive) representing the contribution level (more commits, higher value).\n *  - `weeks` (Array): The day objects grouped by weeks (arrays).\n *  - `last_contributed` (Date): The last contribution date.\n */\nmodule.exports = function parseGitHubCalendarSvg(input) {\n\n    var data = {\n        last_year: 0,\n        longest_streak: -1,\n        longest_streak_range: [],\n        current_streak: 0,\n        current_streak_range: [],\n        weeks: [],\n        days: [],\n        last_contributed: null\n    },\n        lastWeek = [],\n        updateLongestStreak = function updateLongestStreak() {\n        if (data.current_streak > data.longest_streak) {\n            data.longest_streak = data.current_streak;\n            data.longest_streak_range[0] = data.current_streak_range[0];\n            data.longest_streak_range[1] = data.current_streak_range[1];\n        }\n    };\n\n    input.split(\"\\n\").slice(2).map(function (c) {\n        return c.trim();\n    }).forEach(function (c) {\n        if (c.startsWith(\"<g transform\")) {\n            return lastWeek.length && data.weeks.push(lastWeek) && (lastWeek = []);\n        }\n\n        var fill = c.match(/fill=\"(#[a-z0-9]+)\"/),\n            date = c.match(/data-date=\"([0-9\\-]+)\"/),\n            count = c.match(/data-count=\"([0-9]+)\"/),\n            level = null;\n\n        fill = fill && fill[1];\n        date = date && date[1];\n        count = count && +count[1];\n\n        if (!fill) {\n            return;\n        }\n\n        var obj = {\n            fill: fill,\n            date: new Date(date),\n            count: count,\n            level: githubCalendarLegend.indexOf(fill)\n        };\n\n        if (data.current_streak === 0) {\n            data.current_streak_range[0] = obj.date;\n        }\n\n        if (obj.count) {\n            ++data.current_streak;\n            data.last_year += obj.count;\n            data.last_contributed = obj.date;\n            data.current_streak_range[1] = obj.date;\n        } else {\n            updateLongestStreak();\n            data.current_streak = 0;\n        }\n\n        lastWeek.push(obj);\n        data.days.push(obj);\n    });\n\n    updateLongestStreak();\n\n    return data;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/github-calendar-parser/lib/index.js\n// module id = 721\n// module chunks = 2","/**\n * iterateObject\n * Iterates an object. Note the object field order may differ.\n *\n * @name iterateObject\n * @function\n * @param {Object} obj The input object.\n * @param {Function} fn A function that will be called with the current value, field name and provided object.\n * @return {Function} The `iterateObject` function.\n */\nfunction iterateObject(obj, fn) {\n    var i = 0\n      , keys = []\n      ;\n\n    if (Array.isArray(obj)) {\n        for (; i < obj.length; ++i) {\n            if (fn(obj[i], i, obj) === false) {\n                break;\n            }\n        }\n    } else if (typeof obj === \"object\" && obj !== null) {\n        keys = Object.keys(obj);\n        for (; i < keys.length; ++i) {\n            if (fn(obj[keys[i]], keys[i], obj) === false) {\n                break;\n            }\n        }\n    }\n}\n\nmodule.exports = iterateObject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/iterate-object/lib/index.js\n// module id = 728\n// module chunks = 2","/*!\n * months <https://github.com/jonschlinkert/months>\n *\n * Copyright (c) 2014 Jon Schlinkert, contributors.\n * Licensed under the MIT license.\n */\n\nmodule.exports = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nmodule.exports.abbr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/months/index.js\n// module id = 791\n// module chunks = 2","\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar regexEscape = require(\"regex-escape\");\n\nvar ParseIt = function () {\n    /**\n     * ParseIt\n     * The `ParseIt` class. It can be used to use the same data object but with different formats/arguments.\n     *\n     * @name ParseIt\n     * @function\n     * @param {Object} obj An object containing the fields to replace.\n     */\n    function ParseIt(obj) {\n        _classCallCheck(this, ParseIt);\n\n        this.obj = obj || {};\n        this.re = new RegExp(\"^(\" + Object.keys(obj).map(regexEscape).join(\"|\") + \")\");\n    }\n\n    /**\n     * run\n     * Replaces the fields in the format string with data coming from the data object.\n     *\n     *\n     * @name parseIt\n     * @function\n     * @param {String} format The format input.\n     * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n     * @return {String} The result as string.\n     */\n\n\n    _createClass(ParseIt, [{\n        key: \"run\",\n        value: function run(format, args) {\n            var result = \"\";\n            args = args || [];\n            do {\n                var arr = format.match(this.re),\n                    field = arr && arr[1],\n                    c = field || format.charAt(0);\n\n                if (field) {\n                    var value = this.obj[field];\n                    if (typeof value === \"function\") {\n                        value = value.apply(this, args);\n                    }\n                    result += value;\n                } else {\n                    result += c;\n                }\n                format = format.substring(c.length);\n            } while (format);\n            return result;\n        }\n    }]);\n\n    return ParseIt;\n}();\n\n/**\n * parseIt\n * A wrapper around the `ParseIt` class. The `ParseIt` constructor is accessible using `parseIt.Parser`.\n *\n * @name parseIt\n * @function\n * @param {String} format The format input.\n * @param {Object} obj An object containing the fields to replace.\n * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n * @return {String} The result as string.\n */\n\n\nfunction parseIt(format, obj, args) {\n    return new ParseIt(obj).run(format, args);\n}\n\nparseIt.Parser = ParseIt;\n\nmodule.exports = parseIt;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/parse-it/lib/index.js\n// module id = 792\n// module chunks = 2","\"use strict\";\n\n/**\n * RegexEscape\n * Escapes a string for using it in a regular expression.\n *\n * @name RegexEscape\n * @function\n * @param {String} input The string that must be escaped.\n * @return {String} The escaped string.\n */\nfunction RegexEscape(input) {\n  return input.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\n\n/**\n * proto\n * Adds the `RegexEscape` function to `RegExp` class.\n *\n * @name proto\n * @function\n * @return {Function} The `RegexEscape` function.\n */\nRegexEscape.proto = function () {\n  RegExp.escape = RegexEscape;\n  return RegexEscape;\n};\n\nmodule.exports = RegexEscape;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/regex-escape/lib/index.js\n// module id = 1001\n// module chunks = 2","\n/**\n * An Array.prototype.slice.call(arguments) alternative\n *\n * @param {Object} args something with a length\n * @param {Number} slice\n * @param {Number} sliceEnd\n * @api public\n */\n\nmodule.exports = function (args, slice, sliceEnd) {\n  var ret = [];\n  var len = args.length;\n\n  if (0 === len) return ret;\n\n  var start = slice < 0\n    ? Math.max(0, slice + len)\n    : slice || 0;\n\n  if (sliceEnd !== undefined) {\n    len = sliceEnd < 0\n      ? sliceEnd + len\n      : sliceEnd\n  }\n\n  while (len-- > start) {\n    ret[len - start] = args[len];\n  }\n\n  return ret;\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/sliced/index.js\n// module id = 1006\n// module chunks = 2"],"sourceRoot":""}