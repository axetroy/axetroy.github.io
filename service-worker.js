"use strict";function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}var precacheConfig=[["/index.html","4d81a9dc2376c73bb8e912d029f33f53"],["/static/css/main.43986c2a.css","42578300a3da0c58a9740a56a96447f6"],["/static/js/about.page.5538441f.chunk.js","0ddbc7979a51a471ba3af07130b24b7d"],["/static/js/gist.page.18002ede.chunk.js","2c9eb4132f9ec3efe2eecf5e49223527"],["/static/js/gists.page.8c2e6594.chunk.js","851e2c52d27d77e6c4182b59ecab86fa"],["/static/js/github.page.7ac15253.chunk.js","7835fd12a632f55268afc01f9d2a7a2a"],["/static/js/home.page.16bd5921.chunk.js","d687f879e52c508587c8fbbb4e54f9aa"],["/static/js/main.d9a46f47.js","3595598a9d8e886b22f8a030d3db7215"],["/static/js/post.page.9c13f99a.chunk.js","dff080cf633ee847461ec4346e4a42e6"],["/static/js/posts.page.e2b4159d.chunk.js","afd348bfc26f79bd2521c13bb3332c1b"],["/static/js/react-chart.855f9e2c.chunk.js","4772a5148032513174a81e5a48fa28b2"],["/static/js/react-github-calendar.ef1ffa1c.chunk.js","99eb8a460c5baafaee97515450d406dc"],["/static/js/react-qrcode.002905e9.chunk.js","da2c3d0a464de8f8e4b9c3f8ad27b966"],["/static/js/repo.page.a5418b44.chunk.js","80188d3ab3c16d67ac1743652ee3ed77"],["/static/js/repos.page.a4ca38d7.chunk.js","a3ba271ab331268d9abe499c9793e782"],["/static/js/roll.0df2f2a6.chunk.js","979c7c61ceac93ceaf17e8d81d589f1b"],["/static/js/search.page.804e3860.chunk.js","00bf35585fdcd3b7f991ed833d12a921"],["/static/js/todo.page.5ab42ee9.chunk.js","0cdb18d626aa8932c55dd153967de96c"],["/static/js/todos.page.96cc54a8.chunk.js","c4d1a5e62081783be29654367c51b108"],["/static/media/octicons.260ef443.woff","260ef443edb4dfd026d82e2b21a4c75c"],["/static/media/octicons.7b3fd4b1.eot","7b3fd4b10ef8298c7df5c5acad4b7e42"],["/static/media/octicons.9e5cc6ea.svg","9e5cc6ea569143be7be53e6f6c7bcebf"],["/static/media/octicons.ed294b22.ttf","ed294b221e32c83d9e79195d599313d3"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(e){return e.redirected?("body"in e?Promise.resolve(e.body):e.blob()).then(function(t){return new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})}):Promise.resolve(e)},createCacheKey=function(e,t,a,c){var n=new URL(e);return c&&n.pathname.match(c)||(n.search+=(n.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),n.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,t){var a=new URL(e);return a.hash="",a.search=a.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return t.every(function(t){return!t.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),a.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],c=new URL(t,self.location),n=createCacheKey(c,hashParamName,a,/\.\w{8}\./);return[c.toString(),n]}));self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(a){if(!t.has(a)){var c=new Request(a,{credentials:"same-origin"});return fetch(c).then(function(t){if(!t.ok)throw new Error("Request for "+a+" returned a response with status "+t.status);return cleanResponse(t).then(function(t){return e.put(a,t)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(a){return Promise.all(a.map(function(a){if(!t.has(a.url))return e.delete(a)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var t,a=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching);t=urlsToCacheKeys.has(a);t||(a=addDirectoryIndex(a,"index.html"),t=urlsToCacheKeys.has(a));!t&&"navigate"===e.request.mode&&isPathWhitelisted([],e.request.url)&&(a=new URL("/index.html",self.location).toString(),t=urlsToCacheKeys.has(a)),t&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(t){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)}))}});