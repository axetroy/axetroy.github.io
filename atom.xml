<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>axetroy&#39;s blog</title>
  <subtitle>不折腾会死星人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-18T07:50:58.467Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>axetroy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>程序员，我们都是夜归人</title>
    <link href="http://yoursite.com/2016/05/16/%E7%A8%8B%E5%BA%8F%E5%91%98%EF%BC%8C%E6%88%91%E4%BB%AC%E9%83%BD%E6%98%AF%E5%A4%9C%E5%BD%92%E4%BA%BA/"/>
    <id>http://yoursite.com/2016/05/16/程序员，我们都是夜归人/</id>
    <published>2016-05-15T16:05:35.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<p>转自<strong>瞬息之间</strong>写的<a href="http://mp.weixin.qq.com/s?__biz=MzAxMTEyOTQ5OQ==&amp;mid=2650610540&amp;idx=1&amp;sn=c54063d608648ffd1d53c3cb1e04393f#rd" target="_blank" rel="external">程序员，我们都是夜归人</a></p>
<p>音响随机播放着音乐，偶然跳出一首《都是夜归人》的乐曲，让我不禁想起程序员这个群体，夜归人也是不少的啊。恩，我这里说的「夜归」正是指的加班，进入这个行业，成为程序员谁没加过班呢，所以我们都是夜归人啊。</p>
<p>加班是一个行业竞争激烈的表现，回想下读中学时虽不加班却要加课，因为高考的竞争很激烈啊。加班也是一个行业兴旺的表现，你看产能过剩的行业连工都不开了，哪里还需要加班。这些是加班的行业宏观原因，那么于个人微观来说，为什么需要加班呢？</p>
<h3 id="能力不足"><a href="#能力不足" class="headerlink" title="能力不足"></a>能力不足</h3><p>新入行的程序员加班的最多，很大一个原因是能力是不足以满足工作的需要，这里说的是整体的比例而言，不针对个体。我刚毕业工作时也是天天加班的，原因正是发现为了应对工作，需要学习的东西太多，边学边做，效率也不够高，自然无法闲庭信步，只能加班加点。</p>
<p>大学里专业上的东西学得宽，学得泛，而且离工作实际需要还存在一道从理论到实践之间的鸿沟。所以对于刚入行的程序员就需要短期内快速地跨越这道鸿沟，不得已加班加点的学和做，一旦跨越过后后面还需要经常的加班原因可能就出在其他方面了。</p>
<p>应对能力不足导致的加班，除了自己认了还能埋怨谁呢，同一所学校同一个专业同一届毕业的学生，能力强弱有时也是相差也很悬殊。我承认大学里也是放松了自己，曾经埋下的坑，后来也是慢慢自己来填的，努力要趁早啊。</p>
<a id="more"></a>
<h3 id="环境制约"><a href="#环境制约" class="headerlink" title="环境制约"></a>环境制约</h3><p>这里指工作环境的一些制约因素，比如：早年我在客户现场做项目，客户都是朝九晚五制，他们白天经常要过来和你讨论碰到的一些问题或需求，有时还要接接维护项目的技术支持电话，渐渐就发现在客户上班的朝九晚五期间基本就没法专心的写程序。所以当时我开发一般都放在晚上 6 点到 10 点之间，十点半是末班车再回去。</p>
<p>另外一种情况是，以前做传统企业应用，要全国各地四处出差，而系统上线和数据割接什么的也只能在半夜三更来做。从夜深人静到天空泛白，在卖豆浆包子的早餐车旁和来上班的人群短暂相聚，再交错而过，走回公司的出租屋，倒头便睡。</p>
<p>一次一个省级的大系统做全面割接，这样的日子持续了将近一个月，让我不禁开始思考起了这样工作和生活着的意义。这就是环境的现实，要么去适应当前的环境，要么去改变环境，这二者皆不易，还有第三条路就是换个环境，然后我便换了个。</p>
<h3 id="公司制度"><a href="#公司制度" class="headerlink" title="公司制度"></a>公司制度</h3><p>我理解加班很多时候来自一种需要，而这种需要可能来自很多方面的原因，但如果有公司把加班作为一项制度固化下来，那真是再糟糕不过了。</p>
<p>我以前曾有同事呆过一家把加班作为一种长期制度的公司，从周一到周四每晚都是固定加班到晚 9 点后，周末则临时决定是否加班。这咋一看比起如今的 「996」的强度是不如的，但有些公司的 996 可能是按需的并非一项固定制度。让你有事没事都必须呆到晚上 9 点后，而且公司内部网络控制严格的连外网都访问不了，当时 iPhone 尚未诞生，移动互联网不知为何物，这样的加班真是无聊透顶。</p>
<p>十年过去，似乎这样愚蠢的公司制度还是不少。近期听闻一朋友所在的成都某游戏公司也差不多，虽然没有明确规定加班是公司制度，但考核员工绩效的主要标准就是看考勤表的工作时长。这样的潜规则比明制度更可恶，不过上有政策下有对策，住公司附近的员工 6 点一下班就闪人，晚上十一、二点后再到公司打卡。</p>
<p>有的公司，加班是一种制度；有的公司，不加班是一种福利。确实有在招聘宣传上看到把不加班当作一种福利来宣传的公司。如果你不幸处在把加班当作制度的公司，我的建议是离开也请趁早啊。</p>
<h3 id="进度压力"><a href="#进度压力" class="headerlink" title="进度压力"></a>进度压力</h3><p>因项目进度压力导致的加班看起来似乎合理，但不合理的地方是为何进度总有压力？这取决于项目的上线或交付时间点是如何确定的？有些是 Boss 头脑一热胸脯一拍就定下了，这类 Deadline 相对来说还有可转圜的余地，另外一类则更难转圜。</p>
<p>我曾参与浙江电信的一个项目，当时它刚接手了联通 CDMA 的业务和用户并在建设 3G 网络。它在浙江卫视先打了广告明确在某月某日开始营业接受 3G 业务放号。之后它们才对后台的支撑系统招标建设，这基本就确定了严格的系统上线 Deadline 且几无转圜余地。</p>
<p>知乎上有个问题：程序员如何不加班？最高票的回答是：换个好的项目经理来控制进度，给每个人安排合适的任务。可见很多程序员都认为加班是因为进度控制和任务安排不合理导致的，而进度管理正是软件工程的难点之一，这个问题真的只是换个好的项目经理就能有解了？</p>
<p>进度问题本质是一个时间估算问题，一群程序员组成一个团队一起做一个项目，项目经理拆解了任务，每个程序员就需要对任务做一个工作量估算。这里重要的不是你需要做得有多快，重要的是你对自己的工作能力和工作量有个合理地估计。也就是给你一个任务，你要知道如果你用正常工作时间大概会花多久，而不是拍脑袋捶胸脯打保票下决心说要不吃不喝不眠不休保证完成任务。只有团队中每个人都能正确的估计时间，才能让团队的进度合理。但是能做到正确估计时间的，不论对程序员还是项目经理都是极难的。</p>
<p>在我没开始写作前，看到像本篇这样长度的文章总以为作者可能灵感一闪，一挥而就，快则个把小时，慢则至多两小时。毕竟当年我们高考语文时两小时不仅要做完所有题目，还要写篇作文，所以会觉得两小时已是至多了。等我自己开始真正持续写作后，才发现自己的估算错的离谱。</p>
<p>像这样一篇文章，两三千字，先不说创作，只说打完这些字你能估算准确自己需要多少时间么？（这里默默估算十秒）我们看下国际通用打字速度等级划分：</p>
<ul>
<li>学手 10-30   字/分钟</li>
<li>聊手 30-60   字/分钟</li>
<li>录手 60-90   字/分钟</li>
<li>锐手 90-120  字/分钟</li>
<li>高手 120-150 字/分钟</li>
<li>专业 150-240 字/分钟</li>
</ul>
<p>我 2000 年开始用 QQ 打字聊天，打字经验 16 年，用拼音输入法，实际速度也就是聊手水平，平均 50 字/分钟。而未经刻意训练的大部分人可能都是这个水平而已，所以一篇三千字的文章光把它输入成文字按这个速度就需要一小时，而实际的构思创作时间一般是这个好几倍。如果写的还是技术文章，我通常还爱画技术图示（一图胜千言啊），画图还需要额外的时间。所以这样一篇文章 3、4 小时算快得，5、6 小时很正常，7、8 小时也不坏。</p>
<p>你看自己的估算都如此不靠谱，所以一些项目经理才会把程序员的估算粗暴的乘以二或三，这样估算下来的项目进度你觉得能靠谱嘛，换个好的项目经理就能靠谱了？在埋怨项目进度不合理前，程序员需要先把自己写程序的时间估算准确了，有效的方式是通过「时间记录法」持续记录和跟踪自己的时间消耗，这真得可以有效地提高自己对时间的敏感度和估算准确度。</p>
<h3 id="个人爱好"><a href="#个人爱好" class="headerlink" title="个人爱好"></a>个人爱好</h3><p>真的有人爱好加班么？我想没有，也许爱好的是其他，只是表象体现在了加班上，加的虽然是班，过的却是自己的人生。这点我想你们懂的。</p>
<p>…</p>
<p>加班对某些公司可能是一种制度，对个人可能是一种态度；不加班对某些公司可能是一种福利，对个人可能是一种能力。</p>
<p>最后，写完本文真实耗时 4 小时 40 分钟。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自&lt;strong&gt;瞬息之间&lt;/strong&gt;写的&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMTEyOTQ5OQ==&amp;amp;mid=2650610540&amp;amp;idx=1&amp;amp;sn=c54063d608648ffd1d53c3cb1e04393f#rd&quot;&gt;程序员，我们都是夜归人&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;音响随机播放着音乐，偶然跳出一首《都是夜归人》的乐曲，让我不禁想起程序员这个群体，夜归人也是不少的啊。恩，我这里说的「夜归」正是指的加班，进入这个行业，成为程序员谁没加过班呢，所以我们都是夜归人啊。&lt;/p&gt;
&lt;p&gt;加班是一个行业竞争激烈的表现，回想下读中学时虽不加班却要加课，因为高考的竞争很激烈啊。加班也是一个行业兴旺的表现，你看产能过剩的行业连工都不开了，哪里还需要加班。这些是加班的行业宏观原因，那么于个人微观来说，为什么需要加班呢？&lt;/p&gt;
&lt;h3 id=&quot;能力不足&quot;&gt;&lt;a href=&quot;#能力不足&quot; class=&quot;headerlink&quot; title=&quot;能力不足&quot;&gt;&lt;/a&gt;能力不足&lt;/h3&gt;&lt;p&gt;新入行的程序员加班的最多，很大一个原因是能力是不足以满足工作的需要，这里说的是整体的比例而言，不针对个体。我刚毕业工作时也是天天加班的，原因正是发现为了应对工作，需要学习的东西太多，边学边做，效率也不够高，自然无法闲庭信步，只能加班加点。&lt;/p&gt;
&lt;p&gt;大学里专业上的东西学得宽，学得泛，而且离工作实际需要还存在一道从理论到实践之间的鸿沟。所以对于刚入行的程序员就需要短期内快速地跨越这道鸿沟，不得已加班加点的学和做，一旦跨越过后后面还需要经常的加班原因可能就出在其他方面了。&lt;/p&gt;
&lt;p&gt;应对能力不足导致的加班，除了自己认了还能埋怨谁呢，同一所学校同一个专业同一届毕业的学生，能力强弱有时也是相差也很悬殊。我承认大学里也是放松了自己，曾经埋下的坑，后来也是慢慢自己来填的，努力要趁早啊。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>观察者模式，实现简单的promise</title>
    <link href="http://yoursite.com/2016/05/09/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84promise/"/>
    <id>http://yoursite.com/2016/05/09/观察者模式，实现简单的promise/</id>
    <published>2016-05-08T17:39:50.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<p>前面有片文章，粗略的写了个观察者的demo</p>
<p>现在，我们通过那个demo代码，模拟一个简单的promise</p>
<p>核心思想就是：A通知B，B通知C，C通知A…各种发布订阅</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  subscribe(eventName, func) &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>[eventName]) <span class="keyword">this</span>[eventName] = [];</div><div class="line">    <span class="keyword">this</span>[eventName].push(func);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  publish(eventName, data) &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>[eventName]) <span class="keyword">this</span>[eventName] = [];</div><div class="line">    <span class="keyword">this</span>[eventName].forEach(<span class="function"><span class="params">func</span>=&gt;</span> &#123;</div><div class="line">      func.call(<span class="keyword">this</span>, data);</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  remove(eventName) &#123;</div><div class="line">    <span class="keyword">this</span>[eventName] = [];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> noop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> isPromiseLike = <span class="function"><span class="keyword">function</span> (<span class="params">object</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> object === <span class="string">'object'</span> &amp;&amp; !!object.then &amp;&amp; <span class="keyword">typeof</span> object.then === <span class="string">'function'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> $<span class="built_in">Promise</span> = <span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> $promise = <span class="keyword">this</span>;</div><div class="line">  $promise.ob = <span class="keyword">new</span> Observer();</div><div class="line">  $promise.resolve = noop;</div><div class="line">  $promise.reject = noop;</div><div class="line">  $promise.thenReturnVal = <span class="literal">undefined</span>;</div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> $$<span class="title">promise</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(func) &#123;</div><div class="line">      <span class="keyword">this</span>.status = <span class="number">-1</span>;</div><div class="line">      <span class="keyword">this</span>.value = <span class="literal">undefined</span>;</div><div class="line"></div><div class="line">      func(<span class="function"><span class="params">data</span>=&gt;</span> &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> <span class="keyword">this</span>.resolve(data), <span class="number">0</span>);</div><div class="line">      &#125;, data=&gt; &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">this</span>.reject(data), <span class="number">0</span>);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    resolve(value) &#123;</div><div class="line">      <span class="keyword">this</span>.status = <span class="number">1</span>;</div><div class="line">      <span class="keyword">this</span>.value = value;</div><div class="line">      $promise.ob.subscribe(<span class="string">'resolve'</span>, data=&gt; &#123;</div><div class="line">        $promise.thenReturnVal = $promise.resolve(data);</div><div class="line">      &#125;);</div><div class="line">      $promise.ob.publish(<span class="string">'finally'</span>, <span class="keyword">this</span>.status);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    reject(value) &#123;</div><div class="line">      <span class="keyword">this</span>.status = <span class="number">0</span>;</div><div class="line">      <span class="keyword">this</span>.value = value;</div><div class="line">      $promise.ob.subscribe(<span class="string">'reject'</span>, data=&gt; &#123;</div><div class="line">        $promise.thenReturnVal = $promise.reject(data);</div><div class="line">      &#125;);</div><div class="line">      $promise.ob.publish(<span class="string">'finally'</span>, <span class="keyword">this</span>.status);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    then(resolve = noop, reject = noop) &#123;</div><div class="line">      $promise.resolve = resolve;</div><div class="line">      $promise.reject = reject;</div><div class="line"></div><div class="line">      <span class="keyword">switch</span> (<span class="keyword">this</span>.status) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">          $promise.ob.publish(<span class="string">'reject'</span>, <span class="keyword">this</span>.value);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">          $promise.ob.publish(<span class="string">'resolve'</span>, <span class="keyword">this</span>.value);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">          $promise.ob.subscribe(<span class="string">'finally'</span>, (status)=&gt; &#123;</div><div class="line">            status === <span class="number">1</span> ? $promise.ob.publish(<span class="string">'resolve'</span>, <span class="keyword">this</span>.value) : $promise.ob.publish(<span class="string">'reject'</span>, <span class="keyword">this</span>.value);</div><div class="line">          &#125;);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">let</span> newPromise = <span class="keyword">new</span> $<span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        $promise.ob.subscribe(<span class="string">'finally'</span>, (status)=&gt; &#123;</div><div class="line">          <span class="keyword">if</span> (isPromiseLike($promise.thenReturnVal)) &#123;</div><div class="line">            $promise.thenReturnVal.then(<span class="function"><span class="params">data</span>=&gt;</span> &#123;</div><div class="line">              resolve(data);</div><div class="line">            &#125;, data=&gt; &#123;</div><div class="line">              reject(data);</div><div class="line">            &#125;);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">switch</span> (status) &#123;</div><div class="line">              <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>reject($promise.thenReturnVal));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">              <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>resolve($promise.thenReturnVal));</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      <span class="keyword">return</span> newPromise;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [<span class="string">'catch'</span>](func) &#123;</div><div class="line">      $promise.ob.subscribe(<span class="string">'finally'</span>, ()=&gt; &#123;</div><div class="line">        func.call(<span class="keyword">this</span>, <span class="keyword">this</span>.value);</div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [<span class="string">'finally'</span>](func) &#123;</div><div class="line">      $promise.ob.subscribe(<span class="string">'finally'</span>, ()=&gt; &#123;</div><div class="line">        func.call(<span class="keyword">this</span>, <span class="keyword">this</span>.value);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> $$promise(func);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 使用实例</span></div><div class="line"><span class="keyword">var</span> random1 = <span class="keyword">new</span> $<span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> random = <span class="built_in">Math</span>.random();</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    random &gt; <span class="number">0.5</span> ? resolve(random) : reject(random);</div><div class="line">  &#125;, <span class="number">1000</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> random2 = <span class="keyword">new</span> $<span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> random = <span class="built_in">Math</span>.random();</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    random &gt; <span class="number">0.5</span> ? resolve(random) : reject(random);</div><div class="line">  &#125;, <span class="number">2000</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">random1</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data1</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'data1:'</span> + data1);</div><div class="line">    <span class="keyword">return</span> random2;</div><div class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data1</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">'data1:'</span> + data1);</div><div class="line">    <span class="keyword">return</span> random2;</div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(data);</div><div class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(data);</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span>);</div><div class="line">  &#125;)</div><div class="line">  .finally(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="number">123</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面有片文章，粗略的写了个观察者的demo&lt;/p&gt;
&lt;p&gt;现在，我们通过那个demo代码，模拟一个简单的promise&lt;/p&gt;
&lt;p&gt;核心思想就是：A通知B，B通知C，C通知A…各种发布订阅&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>队列queue</title>
    <link href="http://yoursite.com/2016/05/06/%E9%98%9F%E5%88%97queue/"/>
    <id>http://yoursite.com/2016/05/06/队列queue/</id>
    <published>2016-05-06T14:30:23.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<p>队列与栈类似，但是使用了不同的原则。</p>
<p>队列是遵循<strong>FIFO</strong>(First In First Out,现进先出，也称先来先服务)原则的一组有序的项。</p>
<p>队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。</p>
<p>现实中，最常见的队列例子就是排队，谁先来，就到谁。</p>
<h3 id="基本队列"><a href="#基本队列" class="headerlink" title="基本队列"></a>基本队列</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.items = [];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 入列,向队列尾部添加一个(多个)项</span></div><div class="line">  enqueue(item) &#123;</div><div class="line">    <span class="keyword">this</span>.items.push(item);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 出列,移除队列的第一个,并且返回被删除的元素</span></div><div class="line">  dequeue() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.shift();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 返回队列的第一个</span></div><div class="line">  front() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="number">0</span>];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  isEmpty() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  size() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  print() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.items.toString());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> queue = <span class="keyword">new</span> Queue();</div><div class="line"></div><div class="line">queue.enqueue(<span class="string">'hello'</span>);</div><div class="line">queue.enqueue(<span class="string">'world'</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h3><p>优先级队列就是设置项的优先级</p>
<p>在上面基本队列的基础上进行继承</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 重写enqueue</span></div><div class="line">  enqueue(item, priority = <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">let</span> queueItem = &#123;item, priority&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</div><div class="line">      <span class="keyword">this</span>.items.push(queueItem);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">let</span> added = <span class="literal">false</span>;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.items.length; i++) &#123;</div><div class="line">        <span class="comment">// 如果目标的权重，比当前循环的小</span></div><div class="line">        <span class="keyword">if</span> (queueItem.priority &lt; <span class="keyword">this</span>.items[i].priority) &#123;</div><div class="line">          <span class="comment">// 把目标放到当前index的前面</span></div><div class="line">          <span class="keyword">this</span>.items.splice(i, <span class="number">0</span>, queueItem);</div><div class="line">          added = <span class="literal">true</span>;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 如果遍历之后，所以的元素权重，都比目标小，则直接放在尾部</span></div><div class="line">      <span class="keyword">if</span> (!added) &#123;</div><div class="line">        items.push(queueItem);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> q = <span class="keyword">new</span> PriorityQueue();</div><div class="line"></div><div class="line">q.enqueue(<span class="string">'priority 2'</span>, <span class="number">2</span>);</div><div class="line">q.enqueue(<span class="string">'priority 1'</span>, <span class="number">1</span>);</div><div class="line">q.enqueue(<span class="string">'priority 0'</span>, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<h3 id="循环队列-击鼓传花"><a href="#循环队列-击鼓传花" class="headerlink" title="循环队列-击鼓传花"></a>循环队列-击鼓传花</h3><p>循环队列，是队列的一个修改版。</p>
<p>循环队列的一个例子就是击鼓传花游戏。在这个游戏中，孩子们围着一个圆圈，把花尽快的传给旁边的人。</p>
<p>某一时刻传花停止，在这时候花在谁手里，谁就退出圆圈被淘汰。重复这个过程，知道最后剩下一人。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hotPotato</span>(<span class="params">nameList, num</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> queue = <span class="keyword">new</span> Queue();</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nameList.length; i++) &#123;</div><div class="line">    queue.enqueue(nameList[i]);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> eliminated = <span class="string">''</span>;</div><div class="line">  <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">      queue.enqueue(queue.dequeue());</div><div class="line">    &#125;</div><div class="line">    eliminated = queue.dequeue();</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;eliminated&#125;</span>被淘汰`</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> queue.dequeue();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> names = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>];</div><div class="line"><span class="keyword">var</span> winner = hotPotato(names, <span class="number">7</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`winner is <span class="subst">$&#123;winner&#125;</span>`</span>);   <span class="comment">// a</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> winner = hotPotato(names, <span class="number">10</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`winner is <span class="subst">$&#123;winner&#125;</span>`</span>);   <span class="comment">// e</span></div></pre></td></tr></table></figure>
<p>实现一个模拟的击鼓传花游戏。</p>
<p>使用队列生成一个名单，给定一个数字(模拟某时刻)，然后迭代.</p>
<p>从队列开头移除一项，然后添加到队列末尾。</p>
<p>一旦传递的次数达到给定的次数，拿着花的那个人就被淘汰。</p>
<p>最后剩下一人就是胜利者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;队列与栈类似，但是使用了不同的原则。&lt;/p&gt;
&lt;p&gt;队列是遵循&lt;strong&gt;FIFO&lt;/strong&gt;(First In First Out,现进先出，也称先来先服务)原则的一组有序的项。&lt;/p&gt;
&lt;p&gt;队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。&lt;/p&gt;
&lt;p&gt;现实中，最常见的队列例子就是排队，谁先来，就到谁。&lt;/p&gt;
&lt;h3 id=&quot;基本队列&quot;&gt;&lt;a href=&quot;#基本队列&quot; class=&quot;headerlink&quot; title=&quot;基本队列&quot;&gt;&lt;/a&gt;基本队列&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Queue&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.items = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 入列,向队列尾部添加一个(多个)项&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  enqueue(item) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.items.push(item);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 出列,移除队列的第一个,并且返回被删除的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  dequeue() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.items.shift();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 返回队列的第一个&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  front() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.items[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  isEmpty() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.items.length === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  size() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.items.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  print() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.items.toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; queue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Queue();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;queue.enqueue(&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;queue.enqueue(&lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript模拟堆栈</title>
    <link href="http://yoursite.com/2016/05/06/javascript%E6%A8%A1%E6%8B%9F%E5%A0%86%E6%A0%88/"/>
    <id>http://yoursite.com/2016/05/06/javascript模拟堆栈/</id>
    <published>2016-05-06T13:51:13.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<p>栈是一种遵循先进先出(LIFO)原则的有序集合。新添加的或待删除的元素都保存在栈的末尾，未栈顶，另一端为栈底。</p>
<p>在栈里，新元素都会靠近栈顶，旧元素都接近栈底。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.items = [];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  push(item) &#123;</div><div class="line">    <span class="keyword">this</span>.items.push(item);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  pop() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.pop();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  peek() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length - <span class="number">1</span>];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  isEmpty() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  clear() &#123;</div><div class="line">    <span class="keyword">this</span>.items = [];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  size() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  print() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.items.toString());</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 实际应用，转化任意禁止转化</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseConverter</span>(<span class="params">decNumber, base</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> remStack = <span class="keyword">new</span> Stack();</div><div class="line">  <span class="keyword">let</span> rem;</div><div class="line">  <span class="keyword">let</span> binaryString = <span class="string">''</span>;</div><div class="line">  <span class="keyword">let</span> digits = <span class="string">'0123456789ABCDEF'</span>;</div><div class="line">  <span class="keyword">while</span> (decNumber &gt; <span class="number">0</span>) &#123;</div><div class="line">    rem = <span class="built_in">Math</span>.floor(decNumber % base);</div><div class="line">    remStack.push(rem);</div><div class="line">    decNumber = <span class="built_in">Math</span>.floor(decNumber / base);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">while</span> (!remStack.isEmpty()) &#123;</div><div class="line">    binaryString += digits[remStack.pop()];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> binaryString;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.info(baseConverter(<span class="number">100345</span>, <span class="number">2</span>));</div><div class="line"><span class="built_in">console</span>.info(baseConverter(<span class="number">100345</span>, <span class="number">8</span>));</div><div class="line"><span class="built_in">console</span>.info(baseConverter(<span class="number">100345</span>, <span class="number">16</span>));</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;栈是一种遵循先进先出(LIFO)原则的有序集合。新添加的或待删除的元素都保存在栈的末尾，未栈顶，另一端为栈底。&lt;/p&gt;
&lt;p&gt;在栈里，新元素都会靠近栈顶，旧元素都接近栈底。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;t
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript常用的操作与算法</title>
    <link href="http://yoursite.com/2016/05/06/javascript%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2016/05/06/javascript算法/</id>
    <published>2016-05-05T17:42:16.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><h3 id="英文首字母大写"><a href="#英文首字母大写" class="headerlink" title="英文首字母大写"></a>英文首字母大写</h3><h3 id="链式写法与驼峰式写法的转换"><a href="#链式写法与驼峰式写法的转换" class="headerlink" title="链式写法与驼峰式写法的转换"></a>链式写法与驼峰式写法的转换</h3><h3 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字符串反转(比如：ABC -&gt; CBA)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inverse</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = s.split(<span class="string">''</span>);</div><div class="line">  <span class="keyword">var</span> i = <span class="number">0</span>, j = arr.length - <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span> (i &lt; j) &#123;</div><div class="line">    <span class="keyword">var</span> t = arr[i];</div><div class="line">    arr[i] = arr[j];</div><div class="line">    arr[j] = t;</div><div class="line">    i++;</div><div class="line">    j--;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arr.join(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</div><div class="line">inverse(str);   <span class="comment">// 'cba';</span></div></pre></td></tr></table></figure>
<h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><h3 id="min到max的n个不重复的随机数"><a href="#min到max的n个不重复的随机数" class="headerlink" title="min到max的n个不重复的随机数"></a>min到max的n个不重复的随机数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 生成n个不重复的随机数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">random_no_repeat</span>(<span class="params">min, max, n</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = [];</div><div class="line">  <span class="keyword">let</span> temp = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = min; i &lt;= max; i++) &#123;</div><div class="line">    temp.push(i);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> (; n--;) &#123;</div><div class="line">    <span class="keyword">let</span> index = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * temp.length, <span class="number">10</span>);</div><div class="line">    result.push(temp[index]);</div><div class="line">    temp.splice(index, <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">random_no_repeat(<span class="number">15</span>, <span class="number">20</span>, <span class="number">5</span>);		<span class="comment">// [15, 17, 20, 19, 18]</span></div><div class="line">random_no_repeat(<span class="number">1</span>, <span class="number">100</span>, <span class="number">10</span>)		<span class="comment">// [95, 13, 96, 61, 67, 83, 35, 73, 74, 75]</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="数组去重复"><a href="#数组去重复" class="headerlink" title="数组去重复"></a>数组去重复</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> result = [];</div><div class="line">  <span class="keyword">let</span> hash = &#123;&#125;;</div><div class="line">  arr.forEach(<span class="function">(<span class="params">v</span>)=&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (!hash[v]) &#123;</div><div class="line">      result.push(v);</div><div class="line">      hash[v] = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</div><div class="line">unique(arr)		<span class="comment">// [1, 2, 3, 4, 5, 6]</span></div></pre></td></tr></table></figure>
<h3 id="找出字符串中，重复次数最多的字符，以及重复的次数"><a href="#找出字符串中，重复次数最多的字符，以及重复的次数" class="headerlink" title="找出字符串中，重复次数最多的字符，以及重复的次数"></a>找出字符串中，重复次数最多的字符，以及重复的次数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 找出字符串中，重复次数最多的字符</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">match_str</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = &#123;</div><div class="line">    <span class="attr">character</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">times</span>: <span class="number">0</span></div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">var</span> hash = &#123;&#125;;</div><div class="line">  str.split(<span class="string">''</span>).forEach(<span class="function">(<span class="params">character</span>)=&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (!hash[character]) &#123;</div><div class="line">      hash[character] = <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      hash[character]++;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> character <span class="keyword">in</span> hash) &#123;</div><div class="line">    <span class="keyword">let</span> times = hash[character];</div><div class="line">    <span class="keyword">if</span> (times &gt; result.times) &#123;</div><div class="line">      result.character = character;</div><div class="line">      result.times = times;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="string">"asddasdddddd"</span>;</div><div class="line">match_str(s);		<span class="comment">// Object &#123;character: "d", times: 8&#125;</span></div></pre></td></tr></table></figure>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="按照数字大小，排序一维数组"><a href="#按照数字大小，排序一维数组" class="headerlink" title="按照数字大小，排序一维数组"></a>按照数字大小，排序一维数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 从小到达排序</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">55</span>, <span class="number">12</span>, <span class="number">32</span>, <span class="number">55</span>].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a &gt; b;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 结果：[1, 2, 3, 4, 11, 12, 32, 55, 55]</span></div><div class="line"></div><div class="line"><span class="comment">// 从大到小</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">55</span>, <span class="number">12</span>, <span class="number">32</span>, <span class="number">55</span>].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a &lt; b;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 结果：[55, 55, 32, 12, 11, 4, 3, 2, 1]</span></div></pre></td></tr></table></figure>
<h3 id="排序由对象组成的数组"><a href="#排序由对象组成的数组" class="headerlink" title="排序由对象组成的数组"></a>排序由对象组成的数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [</div><div class="line">  &#123;<span class="attr">name</span>: <span class="string">'yr'</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</div><div class="line">  &#123;<span class="attr">name</span>: <span class="string">'ad'</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;,</div><div class="line">  &#123;<span class="attr">name</span>: <span class="string">'hg'</span>, <span class="attr">age</span>: <span class="number">13</span>&#125;,</div><div class="line">  &#123;<span class="attr">name</span>: <span class="string">'cz'</span>, <span class="attr">age</span>: <span class="number">16</span>&#125;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// 按照年龄排序，又小到大</span></div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">item1, item2</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> item1.age &gt; item2.age</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 按照姓名排序</span></div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">item1, item2</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> item1.name &gt; item2.name</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="快速排序法"><a href="#快速排序法" class="headerlink" title="快速排序法"></a>快速排序法</h3><p>关于快速排序法，更多详细原理，可以看阮一峰老师的博客，<a href="http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html" target="_blank" rel="external">快速排序（Quicksort）的Javascript实现</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> quickSort = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</div><div class="line">  <span class="comment">// 快速排序的基准点</span></div><div class="line">  <span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> left = [];</div><div class="line">  <span class="keyword">var</span> right = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</div><div class="line">      left.push(arr[i]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      right.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 最后递归，不断重复这个过程</span></div><div class="line">  <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">31</span>, <span class="number">41</span>, <span class="number">23</span>, <span class="number">53</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">66</span>];</div><div class="line">quickSort(arr);   <span class="comment">// [3, 4, 12, 23, 31, 41, 53, 66]</span></div></pre></td></tr></table></figure>
<h3 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">emitSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = arr.slice();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.length - <span class="number">1</span>; i++) &#123;<span class="comment">//比较的次数是length-1</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; result.length - <span class="number">1</span> - i; j++) &#123;</div><div class="line">      <span class="keyword">if</span> (result[j] &gt; result[j + <span class="number">1</span>]) &#123;</div><div class="line">        <span class="keyword">var</span> tmp = result[j];</div><div class="line">        result[j] = result[j + <span class="number">1</span>];</div><div class="line">        result[j + <span class="number">1</span>] = tmp;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">31</span>, <span class="number">22</span>, <span class="number">51</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">55</span>];</div><div class="line">emitSort(arr);    <span class="comment">// [1, 6, 22, 23, 31, 51, 55]</span></div></pre></td></tr></table></figure>
<h3 id="选择排序法-未完善"><a href="#选择排序法-未完善" class="headerlink" title="选择排序法(未完善)"></a>选择排序法(未完善)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> min, tmp, result = arr.slice();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> out = <span class="number">0</span>; out &lt; result.length - <span class="number">1</span>; out++) &#123;</div><div class="line">    min = out;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> inner = out + <span class="number">1</span>; inner &lt; result.length; inner++) &#123;</div><div class="line">      <span class="keyword">if</span> (result[inner] &lt; result[min]) &#123;</div><div class="line">        min = inner;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//将最小的项移动到左侧</span></div><div class="line">      tmp = result[out];</div><div class="line">      result[out] = result[min];</div><div class="line">      result[min] = tmp;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">31</span>, <span class="number">22</span>, <span class="number">51</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">55</span>];</div><div class="line">selectSort(arr);    <span class="comment">// [1, 6, 22, 23, 31, 51, 55]</span></div></pre></td></tr></table></figure>
<h3 id="插入排序法"><a href="#插入排序法" class="headerlink" title="插入排序法"></a>插入排序法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = arr.slice();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> out = <span class="number">1</span>; out &lt; result.length; out++) &#123;</div><div class="line">    <span class="keyword">var</span> tmp = result[out];</div><div class="line">    <span class="keyword">var</span> inner = out;</div><div class="line">    <span class="keyword">while</span> (result[inner - <span class="number">1</span>] &gt; tmp) &#123;</div><div class="line">      result[inner] = result[inner - <span class="number">1</span>];</div><div class="line">      --inner;</div><div class="line">    &#125;</div><div class="line">    result[inner] = tmp;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">31</span>, <span class="number">22</span>, <span class="number">51</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">55</span>];</div><div class="line">insertSort(arr);    <span class="comment">// [1, 6, 22, 23, 31, 51, 55]</span></div></pre></td></tr></table></figure>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// TODO</span></div></pre></td></tr></table></figure>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="线下查找"><a href="#线下查找" class="headerlink" title="线下查找"></a>线下查找</h3><p>虽然说ECMA5的Array由indexOf方法，但是不妨我们可以学习</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">linearSearch</span>(<span class="params">arr, value</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (arr[i] === value) &#123;</div><div class="line">      <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'axe'</span>, <span class="string">'troy'</span>];</div><div class="line">linearSearch(arr, <span class="string">'troy'</span>);   <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">arr, value</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> low = <span class="number">0</span>, high = arr.length - <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span> (low &lt;= high) &#123;</div><div class="line">    <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor((low + high) / <span class="number">2</span>);</div><div class="line">    <span class="keyword">if</span> (value == arr[mid]) &#123;</div><div class="line">      <span class="keyword">return</span> mid;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (value &lt; arr[mid]) &#123;</div><div class="line">      high = mid - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      low = mid + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'axe'</span>,<span class="string">'troy'</span>,<span class="string">'hello'</span>,<span class="string">'world'</span>];</div><div class="line">binarySearch(arr,<span class="string">'troy'</span>);   <span class="comment">// 1</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符串操作&quot;&gt;&lt;a href=&quot;#字符串操作&quot; class=&quot;headerlink&quot; title=&quot;字符串操作&quot;&gt;&lt;/a&gt;字符串操作&lt;/h2&gt;&lt;h3 id=&quot;英文首字母大写&quot;&gt;&lt;a href=&quot;#英文首字母大写&quot; class=&quot;headerlink&quot; title=&quot;英文首字母大写&quot;&gt;&lt;/a&gt;英文首字母大写&lt;/h3&gt;&lt;h3 id=&quot;链式写法与驼峰式写法的转换&quot;&gt;&lt;a href=&quot;#链式写法与驼峰式写法的转换&quot; class=&quot;headerlink&quot; title=&quot;链式写法与驼峰式写法的转换&quot;&gt;&lt;/a&gt;链式写法与驼峰式写法的转换&lt;/h3&gt;&lt;h3 id=&quot;字符串反转&quot;&gt;&lt;a href=&quot;#字符串反转&quot; class=&quot;headerlink&quot; title=&quot;字符串反转&quot;&gt;&lt;/a&gt;字符串反转&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//字符串反转(比如：ABC -&amp;gt; CBA)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inverse&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;s&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = s.split(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, j = arr.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; j) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; t = arr[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arr[i] = arr[j];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arr[j] = t;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    i++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    j--;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr.join(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;inverse(str);   &lt;span class=&quot;comment&quot;&gt;// &#39;cba&#39;;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;数组操作&quot;&gt;&lt;a href=&quot;#数组操作&quot; class=&quot;headerlink&quot; title=&quot;数组操作&quot;&gt;&lt;/a&gt;数组操作&lt;/h2&gt;&lt;h3 id=&quot;min到max的n个不重复的随机数&quot;&gt;&lt;a href=&quot;#min到max的n个不重复的随机数&quot; class=&quot;headerlink&quot; title=&quot;min到max的n个不重复的随机数&quot;&gt;&lt;/a&gt;min到max的n个不重复的随机数&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 生成n个不重复的随机数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;random_no_repeat&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;min, max, n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; temp = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = min; i &amp;lt;= max; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    temp.push(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (; n--;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; index = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * temp.length, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    result.push(temp[index]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    temp.splice(index, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;random_no_repeat(&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);		&lt;span class=&quot;comment&quot;&gt;// [15, 17, 20, 19, 18]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;random_no_repeat(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)		&lt;span class=&quot;comment&quot;&gt;// [95, 13, 96, 61, 67, 83, 35, 73, 74, 75]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>一些代码片段</title>
    <link href="http://yoursite.com/2016/04/30/%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>http://yoursite.com/2016/04/30/一些代码片段/</id>
    <published>2016-04-29T17:51:05.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="发布订阅者模式"><a href="#发布订阅者模式" class="headerlink" title="发布订阅者模式"></a>发布订阅者模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Observer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">Observer.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span>: Observer,</div><div class="line">  <span class="attr">subscribe</span>: <span class="function"><span class="keyword">function</span> (<span class="params">eventName, func</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>[eventName]) <span class="keyword">this</span>[eventName] = [];</div><div class="line">    <span class="keyword">this</span>[eventName].push(func);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">publish</span>: <span class="function"><span class="keyword">function</span> (<span class="params">eventName, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>[eventName]) <span class="keyword">this</span>[eventName] = [];</div><div class="line">    <span class="keyword">this</span>[eventName].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</div><div class="line">      func.call(_this, data);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> ob = <span class="keyword">new</span> Observer();</div><div class="line"><span class="comment">// 订阅</span></div><div class="line">ob.subscribe(<span class="string">'dialog'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'there are data:'</span> + data);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 发布</span></div><div class="line">ob.publish(<span class="string">'dialog'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</div></pre></td></tr></table></figure>
<h3 id="解析多层属性，类似angularJS的-parse服务"><a href="#解析多层属性，类似angularJS的-parse服务" class="headerlink" title="解析多层属性，类似angularJS的$parse服务"></a>解析多层属性，类似angularJS的$parse服务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> parse = <span class="function"><span class="keyword">function</span> (<span class="params">agm</span>) </span>&#123;</div><div class="line">  agm = agm.split(<span class="string">'.'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, undefined</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="literal">undefined</span>;</div><div class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">parseTarget</span>(<span class="params">target, agm</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (target === <span class="literal">undefined</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">'Uncaught TypeError: Cannot read property '</span> + agm[<span class="number">0</span>] + <span class="string">' of undefined'</span>);</div><div class="line">        result = target;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (agm.length &lt;= <span class="number">1</span>) &#123;</div><div class="line">        result = target[agm[<span class="number">0</span>]];</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">      &#125;</div><div class="line">      target = target[agm[<span class="number">0</span>]];</div><div class="line">      agm.shift();</div><div class="line">      parseTarget(target, agm)</div><div class="line">    &#125;)(target, agm);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">  <span class="attr">a</span>: &#123;</div><div class="line">    <span class="attr">b</span>: &#123;</div><div class="line">      <span class="attr">c</span>: <span class="number">233</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> r = parse(<span class="string">'a.b.c'</span>)(o);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(r);   <span class="comment">// 233</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;发布订阅者模式&quot;&gt;&lt;a href=&quot;#发布订阅者模式&quot; class=&quot;headerlink&quot; title=&quot;发布订阅者模式&quot;&gt;&lt;/a&gt;发布订阅者模式&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>typescript强类型语言的一些猜想</title>
    <link href="http://yoursite.com/2016/04/07/typescript%E5%BC%BA%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E7%8C%9C%E6%83%B3/"/>
    <id>http://yoursite.com/2016/04/07/typescript强类型语言的一些猜想/</id>
    <published>2016-04-07T13:46:42.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<p>Typescript是javascript的超集，并且是可以实现强类型的语言。</p>
<p>而且书写方式类似与后台语言，要写接口interface来限定类型。</p>
<p>然后编译成javascript。</p>
<p>javascript是动态类型语言，是弱类型，意味着变量不需要声明类型，不用限制变量的类型，它可以是数字，可以是字符串，可以是对象等等。</p>
<p>好处就是，书写javascript很轻松，坑的地方就是，变量的类型可以改变，可能会引发一些未知的bug。</p>
<p>而在2015年发布了ECMA5，并且以后每年都会发布新版本，这是好事，说明前端的健康发展。</p>
<p>逐渐的模块话，类，以及ECMA7的装饰，正在实现一些javascript预编译的功能，而coffeeScript还没会，就已经被抛弃了。</p>
<p>我不禁想，每年一个版本，而且nodejs让javascript可以编写后台，那么以后javascript会不会出现强类型？多线程之类的？</p>
<p>就关于强类型，我处于好奇，写了一段小代码。意在实现javascript的强类型。</p>
<p>写起来可能有些繁琐，但这也是思路。故分享出来。</p>
<p>代码如下</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">$ts</span>) </span>&#123;</div><div class="line"><span class="meta">  'use strict'</span>;</div><div class="line">  <span class="keyword">var</span> g = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> ? <span class="built_in">window</span> : <span class="keyword">typeof</span> global !== <span class="string">'undefined'</span> ? global : <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">var</span> <span class="built_in">module</span> = g.module;</div><div class="line">  <span class="keyword">var</span> define = g.define;</div><div class="line">  <span class="keyword">var</span> angular = g.angular;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span>) &#123;</div><div class="line">    <span class="built_in">module</span>.exports = factory(angular);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define !== <span class="string">"undefined"</span> &amp;&amp; <span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> define.amd === <span class="string">'object'</span> &amp;&amp; define.amd) &#123;</div><div class="line">    define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> $ts;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (g) &#123;</div><div class="line">    g.$ts = $ts;</div><div class="line">  &#125;</div><div class="line">&#125;)(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">attr, typeLimit</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> origin = obj[attr];</div><div class="line">    <span class="keyword">var</span> type = <span class="built_in">Object</span>.prototype.toString.call(typeLimit);</div><div class="line">    <span class="built_in">Object</span>.defineProperty(obj, attr, &#123;</div><div class="line">      <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> newValType = <span class="built_in">Object</span>.prototype.toString.call(newVal);</div><div class="line">        <span class="keyword">if</span> (type !== newValType) &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">"TypeError:The attr [%s] is only %s, not a %s"</span>, attr, type, newValType);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          origin = newVal;</div><div class="line">          <span class="keyword">return</span> newVal;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> origin;</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用方式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">123</span>, <span class="attr">b</span>: <span class="string">'hello world'</span>, <span class="attr">c</span>: []&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> t = $ts(obj);</div><div class="line"></div><div class="line"><span class="comment">// 限制为数字</span></div><div class="line">t(<span class="string">'a'</span>, <span class="number">1</span>);</div><div class="line">obj.a = <span class="number">321</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.a);     <span class="comment">// 321</span></div><div class="line"></div><div class="line">obj.a = <span class="string">'hello world'</span>;  <span class="comment">// error</span></div><div class="line"><span class="built_in">console</span>.log(obj.a)      <span class="comment">// 321</span></div><div class="line"></div><div class="line"><span class="comment">// 限制为字符串</span></div><div class="line">t(<span class="string">'b'</span>, <span class="string">'a'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 限制为数组</span></div><div class="line">t(<span class="string">'c'</span>,[]);</div></pre></td></tr></table></figure>
<p>看起来有些繁琐</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Typescript是javascript的超集，并且是可以实现强类型的语言。&lt;/p&gt;
&lt;p&gt;而且书写方式类似与后台语言，要写接口interface来限定类型。&lt;/p&gt;
&lt;p&gt;然后编译成javascript。&lt;/p&gt;
&lt;p&gt;javascript是动态类型语言，是弱类型，意味着变量不需要声明类型，不用限制变量的类型，它可以是数字，可以是字符串，可以是对象等等。&lt;/p&gt;
&lt;p&gt;好处就是，书写javascript很轻松，坑的地方就是，变量的类型可以改变，可能会引发一些未知的bug。&lt;/p&gt;
&lt;p&gt;而在2015年发布了ECMA5，并且以后每年都会发布新版本，这是好事，说明前端的健康发展。&lt;/p&gt;
&lt;p&gt;逐渐的模块话，类，以及ECMA7的装饰，正在实现一些javascript预编译的功能，而coffeeScript还没会，就已经被抛弃了。&lt;/p&gt;
&lt;p&gt;我不禁想，每年一个版本，而且nodejs让javascript可以编写后台，那么以后javascript会不会出现强类型？多线程之类的？&lt;/p&gt;
&lt;p&gt;就关于强类型，我处于好奇，写了一段小代码。意在实现javascript的强类型。&lt;/p&gt;
&lt;p&gt;写起来可能有些繁琐，但这也是思路。故分享出来。&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="typescript" scheme="http://yoursite.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>写了几个AngularJS的小模块</title>
    <link href="http://yoursite.com/2016/04/07/%E5%86%99%E4%BA%86%E5%87%A0%E4%B8%AAAngularJS%E7%9A%84%E5%B0%8F%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2016/04/07/写了几个AngularJS的小模块/</id>
    <published>2016-04-06T17:48:59.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<p>纯粹是练手，学习Angular..</p>
<h3 id="at-promise"><a href="#at-promise" class="headerlink" title="at-promise"></a><a href="https://github.com/axetroy/at-promise" target="_blank" rel="external">at-promise</a></h3><p>Angular的promise指令</p>
<p>根据promise的结果，渲染不同的视图</p>
<a id="more"></a>
<h3 id="at-storage"><a href="#at-storage" class="headerlink" title="at-storage"></a><a href="https://github.com/axetroy/at-storage" target="_blank" rel="external">at-storage</a></h3><p>AngularJS 的storage服务。</p>
<p>用于持久性的网络存储，主要是使用HTML5的localStorage和sessionStorage</p>
<p>如果IE9以下版本，或者不支持，则使用cookie作为fallback</p>
<p>与其他的库相比就是bug多，嘿嘿～～！</p>
<p>能储存js的各种类型的变量，布尔值，数字，字符串，数组，对象等，不能存函数</p>
<p>而且封装好了一个<code>$watch</code>事件监听，监听指定的缓存变化时，所触发的函数，基于onstorage事件</p>
<h3 id="at-compare"><a href="#at-compare" class="headerlink" title="at-compare"></a><a href="https://github.com/axetroy/at-compare" target="_blank" rel="external">at-compare</a></h3><p>Angular的compare指令，用于表单的对比</p>
<p><a href="http://www.burningall.com/at-compare/" target="_blank" rel="external">demo</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">// 通过表单的name值对比</div><div class="line">at-compare = 'a&gt;b';</div><div class="line">at-compare = 'a&gt;=b';</div><div class="line">at-compare = 'a<span class="tag">&lt;<span class="name">b';</span></span></div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a&lt;=b'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a==b'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a===b'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a!=b'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a!==b'</span>;</div><div class="line"></div><div class="line">// 对比数字</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a&gt;10'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a&gt;=20'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a&lt;30'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a&lt;=40'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a==50'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a===60'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a!=70'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a!==80'</span>;</div><div class="line"></div><div class="line">// 对比字符串</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a&gt;"10"'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a&gt;="20"'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a&lt;"30"'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a&lt;="40"'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a=="50"'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a==="60"'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a!="70"'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a!=="80"'</span>;</div><div class="line"></div><div class="line">// 直接对比$<span class="attr">scope</span>下的值,通过 <span class="attr">in</span> $<span class="attr">scope</span> 或 <span class="attr">in</span> <span class="attr">scope</span></div><div class="line">$<span class="attr">scope.test</span> = <span class="string">50;</span></div><div class="line"></div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a &gt; test in $scope'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a &gt;= test in $scope'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a &lt; test in $scope'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a &lt;= test in $scope'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a == test in $scope'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a === test in $scope'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a != test in $scope'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'a !== test in $scope'</span>;</div><div class="line"></div><div class="line">// 对比的位置可以对换</div><div class="line"></div><div class="line"><span class="attr">at-compare</span> = <span class="string">'test in $scope &gt; a'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'test in $scope &gt;= a'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'test in $scope &lt; a'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'test in $scope &lt;= a'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'test in $scope == a'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'test in $scope === a'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'test in $scope != a'</span>;</div><div class="line"><span class="attr">at-compare</span> = <span class="string">'test in $scope !== a'</span>;</div></pre></td></tr></table></figure>
<h4 id="常用的场景"><a href="#常用的场景" class="headerlink" title="常用的场景"></a>常用的场景</h4><ul>
<li>确认密码</li>
<li>以及各种大小的比较等</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;纯粹是练手，学习Angular..&lt;/p&gt;
&lt;h3 id=&quot;at-promise&quot;&gt;&lt;a href=&quot;#at-promise&quot; class=&quot;headerlink&quot; title=&quot;at-promise&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/axetroy/at-promise&quot;&gt;at-promise&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Angular的promise指令&lt;/p&gt;
&lt;p&gt;根据promise的结果，渲染不同的视图&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro Linux使用心得</title>
    <link href="http://yoursite.com/2016/04/06/Manjaro-Linux%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
    <id>http://yoursite.com/2016/04/06/Manjaro-Linux使用心得/</id>
    <published>2016-04-06T13:52:30.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Manjaro"><a href="#什么是Manjaro" class="headerlink" title="什么是Manjaro"></a>什么是Manjaro</h3><p>Manjaro Linux是面向桌面的、用户友好的、基于Arch Linux的发行。它的一些显著特性包括：一份直观的安装程序、自动硬件检测、用于管理图形卡的特别Bash脚本、一组额外的桌面配置选项。 Manjaro Linux带有三份样式，分别采用Xfce、GNOME 3（使用Cinnamon Shell）、KDE桌面。</p>
<p>官方地址:<a href="https://manjaro.github.io/" target="_blank" rel="external">https://manjaro.github.io/</a></p>
<a id="more"></a>
<h3 id="开箱即用的linux"><a href="#开箱即用的linux" class="headerlink" title="开箱即用的linux"></a>开箱即用的linux</h3><p>不必再操劳各种环境，各种必备的软件，各种编译。</p>
<p>内置了一些常用的软件，省却的各种繁琐，真正的开箱即用。</p>
<p>只需要再软件库中搜索，然后安装即可。</p>
<p>还有一个优势就是：居然有QQ，debian系的安装deb包，老是会有各种bug。</p>
<p>但是这个至少能正常使用，免去了很多繁琐，虽然我不知道这个软件用的是谁的源码，这都不重要…</p>
<p>总之就是</p>
<p>想要chrome?搜索安装即可</p>
<p>想要webstorm？搜索安装即可</p>
<p>想要搜狗输入法？搜索安装即可</p>
<p>软件库还是很丰富的</p>
<h3 id="桌面环境"><a href="#桌面环境" class="headerlink" title="桌面环境"></a>桌面环境</h3><p>基于arch linux的衍生版，就是自由定制。</p>
<p>官方也提供了几个版本</p>
<ul>
<li>XFCE</li>
<li>KDE</li>
<li>Net-Edition(网络版，无桌面)</li>
</ul>
<p>以及其他，不是arch系的衍生版，比如天朝的深度</p>
<h3 id="与Linux-mint相比如何？"><a href="#与Linux-mint相比如何？" class="headerlink" title="与Linux mint相比如何？"></a>与Linux mint相比如何？</h3><p>Linux mint是基于ubuntu的，ubuntu基于debian。</p>
<p>debian还好，但是ubuntu实在不能忍，BUG奇多，连公司用的LTS版在更新之后，都会出现一些奇奇怪怪的bug</p>
<p>比如：更新之后网卡挂了，更新之后setting挂了，这两个我都遇到过，公司同事也遇到过。</p>
<p>基于ubuntu，就是治标不治本，也就相当与给你内置了几个软件罢了。</p>
<p>我已经受够了ubuntu开机就报错…已经各种bug</p>
<h3 id="安装之后，我必须要做的"><a href="#安装之后，我必须要做的" class="headerlink" title="安装之后，我必须要做的"></a>安装之后，我必须要做的</h3><h4 id="更换更新源"><a href="#更换更新源" class="headerlink" title="更换更新源"></a>更换更新源</h4><p>相信这个无论是在哪个linux发行版，都是必须要做的。</p>
<p>立刻百度了一下</p>
<ul>
<li>打开/etc/pacman.d/mirrors文件夹里默认了一些源 扫一眼有没有“China” 没有就照着其他源的格式自己添进去</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#nano /etc/pacman.d/mirrors/China</span></div><div class="line">[China]</div><div class="line">Server = http://mirrors.ustc.edu.cn/manjaro/<span class="variable">$branch</span>/<span class="variable">$repo</span>/<span class="variable">$arch</span></div><div class="line">Server = http://mirror.bjtu.edu.cn/manjaro/<span class="variable">$branch</span>/<span class="variable">$repo</span>/<span class="variable">$arch</span></div></pre></td></tr></table></figure>
<p>官方中国源本来还支持一个港大的 亲测不好使 唉</p>
<ul>
<li>打开 /etc/pacman.conf 文件 把yaourt的源添上：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#nano /etc/pacman.conf</span></div><div class="line">[archlinuxcn]</div><div class="line">SigLevel = Optional TrustAll</div><div class="line">Server   = http://repo.archlinuxcn.org/<span class="variable">$arch</span></div></pre></td></tr></table></figure>
<ul>
<li>打开 /etc/pacman-mirrors.conf 文件 找到## Specify to use only mirrors from a specific country （指定一个国家的镜像） 修改# OnlyCountry=Germany 为：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#nano /etc/pacman-mirrors.conf</span></div><div class="line">OnlyCountry=China</div></pre></td></tr></table></figure>
<ul>
<li>最后更新 /etc/pacman.d/mirrorlist :</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pacman-mirrors -g</div></pre></td></tr></table></figure>
<h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><p>我不是很喜欢通过编译安装nodejs，各种麻烦，直接通过<a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>安装。</p>
<p>简单方便，想删就删，随时可以更新版本。</p>
<p>安装nvm</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</div><div class="line"><span class="comment"># or</span></div><div class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</div></pre></td></tr></table></figure>
<p>安装nodejs<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm install 5.10.1</div></pre></td></tr></table></figure></p>
<p>将node设置为默认，这样可以在系统任意地方使用<code>node</code>命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm <span class="built_in">alias</span> default 5.10.1</div></pre></td></tr></table></figure>
<p>如果需要删除nvm，一般值需要删除home目录下的<code>~/.nvm</code>文件夹</p>
<p>to remove, delete, or uninstall nvm - just remove the <code>$NVM_DIR</code> folder (usually <code>~/.nvm</code>)</p>
<h4 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h4><p>安装ruby是属于开发需要，项目需要编译sass，所以需要通过gem安装<code>compass</code></p>
<p>安装gem</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gem -g</div></pre></td></tr></table></figure>
<p>安装compass</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install compass</div></pre></td></tr></table></figure>
<p>OK！</p>
<h3 id="只是为了重装"><a href="#只是为了重装" class="headerlink" title="只是为了重装"></a>只是为了重装</h3><p>记录下来，只是为了方便重装23333</p>
<p>不过manjaro真的是好用，除了chrome中，有一点小bug之外</p>
<p>目前已经作为我的日常使用的系统了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Manjaro&quot;&gt;&lt;a href=&quot;#什么是Manjaro&quot; class=&quot;headerlink&quot; title=&quot;什么是Manjaro&quot;&gt;&lt;/a&gt;什么是Manjaro&lt;/h3&gt;&lt;p&gt;Manjaro Linux是面向桌面的、用户友好的、基于Arch Linux的发行。它的一些显著特性包括：一份直观的安装程序、自动硬件检测、用于管理图形卡的特别Bash脚本、一组额外的桌面配置选项。 Manjaro Linux带有三份样式，分别采用Xfce、GNOME 3（使用Cinnamon Shell）、KDE桌面。&lt;/p&gt;
&lt;p&gt;官方地址:&lt;a href=&quot;https://manjaro.github.io/&quot;&gt;https://manjaro.github.io/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="manjaro" scheme="http://yoursite.com/tags/manjaro/"/>
    
  </entry>
  
  <entry>
    <title>Angular规范</title>
    <link href="http://yoursite.com/2016/01/17/Angular%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2016/01/17/Angular规范/</id>
    <published>2016-01-16T20:10:22.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular规范"><a href="#Angular规范" class="headerlink" title="Angular规范"></a>Angular规范</h1><h2 id="Angular-Team-Endorsed"><a href="#Angular-Team-Endorsed" class="headerlink" title="Angular Team Endorsed"></a>Angular Team Endorsed</h2><p>非常感谢领导Angular团队的Igor Minar对本指南做出的审查和贡献，并且委托我继续打理本指南。</p>
<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p><em>Angular规范<a href="//twitter.com/john_papa">@john_papa</a></em></p>
<p>如果你正在寻找一些关于语法、约定和结构化的Angular应用的一个有建设性的规范，那么你来对地方了。这里所包含的内容是基于我在团队中使用<a href="//angularjs.org">Angular</a>的一些经验、一些演讲和<a href="http://pluralsight.com/training/Authors/Details/john-papa" target="_blank" rel="external">Pluralsight培训课程</a>。</p>
<p>这个规范的目的是为构建Angular应用提供指导，当然更加重要的是让大家知道我为什么要选择它们。</p>
<blockquote>
<p>如果你喜欢这个规范，请在Pluralsight看看<a href="http://jpapa.me/ngclean" target="_blank" rel="external">Angular Patterns: Clean Code</a>。</p>
</blockquote>
<p>  <a href="http://jpapa.me/ngclean" target="_blank" rel="external"><img src="https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/assets/ng-clean-code-banner.png" alt="Angular Patterns: Clean Code"></a></p>
<a id="more"></a>
<h2 id="Community-Awesomeness-and-Credit"><a href="#Community-Awesomeness-and-Credit" class="headerlink" title="Community Awesomeness and Credit"></a>Community Awesomeness and Credit</h2><p>Angular社区是一个热衷于分享经验的令人难以置信的社区，尽管Todd Motto（他是我的一个朋友，也是Angular专家）和我合作了多种规范和惯例，但是我们也存在着一些分歧。我鼓励你去看看<a href="https://github.com/toddmotto/angularjs-styleguide" target="_blank" rel="external">Todd的指南</a>，在那里你能看到我们之间的区别。</p>
<p>我的许多规范都是从大量的程序会话<a href="http://twitter.com/wardbell" target="_blank" rel="external">Ward Bell</a>和我所拥有的而来的，我的好友Ward也影响了本规范的最终演变。</p>
<h2 id="在示例App中了解这些规范"><a href="#在示例App中了解这些规范" class="headerlink" title="在示例App中了解这些规范"></a>在示例App中了解这些规范</h2><p>看示例代码有助于你更好地理解，你可以在<code>modular</code>文件夹下找到<a href="https://github.com/johnpapa/ng-demos" target="_blank" rel="external">命名为modular的示例应用程序</a>，随便克隆。</p>
<p>##翻译<br><a href="https://github.com/johnpapa/angular-styleguide/tree/master/i18n" target="_blank" rel="external">Angular规范翻译版本</a>。</p>
<p>##目录</p>
<ol>
<li><a href="#单一职责">单一职责</a></li>
<li><a href="#iife">IIFE</a></li>
<li><a href="#modules">Modules</a></li>
<li><a href="#controllers">Controllers</a></li>
<li><a href="#services">Services</a></li>
<li><a href="#factories">Factories</a></li>
<li><a href="#data-services">Data Services</a></li>
<li><a href="#directives">Directives</a></li>
<li><a href="#解决controller的promises">解决Controller的Promises</a></li>
<li><a href="#手动依赖注入">手动依赖注入</a></li>
<li><a href="#压缩和注释">压缩和注释</a></li>
<li><a href="#异常处理">异常处理</a></li>
<li><a href="#命名">命名</a></li>
<li><a href="#应用程序结构lift原则">应用程序结构LIFT原则</a></li>
<li><a href="#应用程序结构">应用程序结构</a></li>
<li><a href="#模块化">模块化</a></li>
<li><a href="#启动逻辑">启动逻辑</a></li>
<li><a href="#angular-包装服务">Angular $包装服务</a></li>
<li><a href="#测试">测试</a></li>
<li><a href="#动画">动画</a></li>
<li><a href="#注释">注释</a></li>
<li><a href="#js-hint">JSHint</a></li>
<li><a href="#jscs">JSCS</a></li>
<li><a href="#常量">常量</a></li>
<li><a href="#文件模板和片段">文件模板和片段</a></li>
<li><a href="#yeoman-generator">Yeoman Generator</a></li>
<li><a href="#路由">路由</a></li>
<li><a href="#任务自动化">任务自动化</a></li>
<li><a href="#filters">Filters</a></li>
<li><a href="#angularjs文档">Angular文档</a></li>
<li><a href="#贡献">贡献</a></li>
<li><a href="#许可">许可</a></li>
</ol>
<h2 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h2><p>###规则一</p>
<h6 id="Style-Y001"><a href="#Style-Y001" class="headerlink" title="[Style Y001]"></a>[Style <a href="#style-y001">Y001</a>]</h6><ul>
<li><p>一个文件只定义一个组件。</p>
<p> 下面的例子在同一个文件中定义了一个<code>app</code>的module和它的一些依赖、一个controller和一个factory。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line">angular</div><div class="line">	.module(<span class="string">'app'</span>, [<span class="string">'ngRoute'</span>])</div><div class="line">	.controller(<span class="string">'SomeController'</span>, SomeController)</div><div class="line">	.factory(<span class="string">'someFactory'</span>, someFactory);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SomeController</span>(<span class="params"></span>) </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFactory</span>(<span class="params"></span>) </span>&#123; &#125;</div></pre></td></tr></table></figure>
<p>推荐以下面的方式来做，把上面相同的组件分割成单独的文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"></div><div class="line"><span class="comment">// app.module.js</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>, [<span class="string">'ngRoute'</span>]);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"></div><div class="line"><span class="comment">// someController.js</span></div><div class="line">angular</div><div class="line">  	.module(<span class="string">'app'</span>)</div><div class="line">  	.controller(<span class="string">'SomeController'</span>, SomeController);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SomeController</span>(<span class="params"></span>) </span>&#123; &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"><span class="comment">// someFactory.js</span></div><div class="line">angular</div><div class="line">  	.module(<span class="string">'app'</span>)</div><div class="line">  	.factory(<span class="string">'someFactory'</span>, someFactory);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFactory</span>(<span class="params"></span>) </span>&#123; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h2><h3 id="JavaScript闭包"><a href="#JavaScript闭包" class="headerlink" title="JavaScript闭包"></a>JavaScript闭包</h3><h6 id="Style-Y010"><a href="#Style-Y010" class="headerlink" title="[Style Y010]"></a>[Style <a href="#style-y010">Y010</a>]</h6><ul>
<li><p>把Angular组件包装到一个立即调用函数表达式中（IIFE）。</p>
<p><em>为什么？</em>：把变量从全局作用域中删除了，这有助于防止变量和函数声明比预期在全局作用域中有更长的生命周期，也有助于避免变量冲突。</p>
<p><em>为什么？</em>：当你的代码为了发布而压缩了并且被合并到同一个文件中时，可能会有很多变量发生冲突，使用了IIFE（给每个文件提供了一个独立的作用域），你就不用担心这个了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line"><span class="comment">// logger.js</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .factory(<span class="string">'logger'</span>, logger);</div><div class="line"></div><div class="line"><span class="comment">// logger function会被当作一个全局变量</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params"></span>) </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="comment">// storage.js</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .factory(<span class="string">'storage'</span>, storage);</div><div class="line"></div><div class="line"><span class="comment">// storage function会被当作一个全局变量</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">storage</span>(<span class="params"></span>) </span>&#123; &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * recommended</div><div class="line"> *</div><div class="line"> * 再也不存在全局变量了</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// logger.js</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line"></div><div class="line">    angular</div><div class="line">        .module(<span class="string">'app'</span>)</div><div class="line">        .factory(<span class="string">'logger'</span>, logger);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params"></span>) </span>&#123; &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// storage.js</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line"></div><div class="line">    angular</div><div class="line">        .module(<span class="string">'app'</span>)</div><div class="line">        .factory(<span class="string">'storage'</span>, storage);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">storage</span>(<span class="params"></span>) </span>&#123; &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
</li>
<li><p>注：为了简洁起见，本规范余下的示例中将会省略IIFE语法。</p>
</li>
<li><p>注：IIFE阻止了测试代码访问私有成员（正则表达式、helper函数等），这对于自身测试是非常友好的。然而你可以把这些私有成员暴露到可访问成员中进行测试，例如把私有成员（正则表达式、helper函数等）放到factory或是constant中。</p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>###避免命名冲突</p>
<h6 id="Style-Y020"><a href="#Style-Y020" class="headerlink" title="[Style Y020]"></a>[Style <a href="#style-y020">Y020</a>]</h6><ul>
<li><p>每一个独立子模块使用唯一的命名约定。</p>
<p><em>为什么</em>：避免冲突，每个模块也可以方便定义子模块。</p>
</li>
</ul>
<p>###定义(aka Setters)</p>
<h6 id="Style-Y021"><a href="#Style-Y021" class="headerlink" title="[Style Y021]"></a>[Style <a href="#style-y021">Y021</a>]</h6><ul>
<li><p>不使用任何一个使用了setter语法的变量来定义modules。</p>
<p><em>为什么?</em>：在一个文件只有一个组件的条件下，完全不需要为一个模块引入一个变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, [</div><div class="line">    <span class="string">'ngAnimate'</span>,</div><div class="line">    <span class="string">'ngRoute'</span>,</div><div class="line">    <span class="string">'app.shared'</span>,</div><div class="line">    <span class="string">'app.dashboard'</span></div><div class="line">]);</div></pre></td></tr></table></figure>
<p>你只需要用简单的setter语法来代替。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line">angular</div><div class="line">  	.module(<span class="string">'app'</span>, [</div><div class="line">      <span class="string">'ngAnimate'</span>,</div><div class="line">      <span class="string">'ngRoute'</span>,</div><div class="line">      <span class="string">'app.shared'</span>,</div><div class="line">      <span class="string">'app.dashboard'</span></div><div class="line">  ]);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###Getters</p>
<h6 id="Style-Y022"><a href="#Style-Y022" class="headerlink" title="[Style Y022]"></a>[Style <a href="#style-y022">Y022</a>]</h6><ul>
<li><p>使用module的时候，避免直接用一个变量，而是使用getter的链式语法。</p>
<p><em>为什么？</em>：这将产生更加易读的代码，并且可以避免变量冲突和泄漏。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>);</div><div class="line">app.controller(<span class="string">'SomeController'</span>, SomeController);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SomeController</span>(<span class="params"></span>) </span>&#123; &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .controller(<span class="string">'SomeController'</span>, SomeController);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SomeController</span>(<span class="params"></span>) </span>&#123; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###Setting vs Getting</p>
<h6 id="Style-Y023"><a href="#Style-Y023" class="headerlink" title="[Style Y023]"></a>[Style <a href="#style-y023">Y023</a>]</h6><ul>
<li><p>只能设置一次。</p>
<p><em>为什么？</em>：一个module只能被创建一次，创建之后才能被检索到。</p>
<ul>
<li>设置module，<code>angular.module(&#39;app&#39;, []);</code>。</li>
<li>获取module，<code>angular.module(&#39;app&#39;);</code>。</li>
</ul>
</li>
</ul>
<p>###命名函数 vs 匿名函数</p>
<h6 id="Style-Y024"><a href="#Style-Y024" class="headerlink" title="[Style Y024]"></a>[Style <a href="#style-y024">Y024</a>]</h6><ul>
<li><p>回调函数使用命名函数，不要用匿名函数。</p>
<p><em>为什么？</em>：易读，方便调试，减少嵌套回调函数的数量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .controller(<span class="string">'Dashboard'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;)</div><div class="line">    .factory(<span class="string">'logger'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"></div><div class="line"><span class="comment">// dashboard.js</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .controller(<span class="string">'Dashboard'</span>, Dashboard);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span> (<span class="params"></span>) </span>&#123; &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// logger.js</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .factory(<span class="string">'logger'</span>, logger);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span> (<span class="params"></span>) </span>&#123; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">回到顶部</a></strong></p>
<h2 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h2><p>###controllerAs在View中的语法</p>
<h6 id="Style-Y030"><a href="#Style-Y030" class="headerlink" title="[Style Y030]"></a>[Style <a href="#style-y030">Y030</a>]</h6><ul>
<li><p>使用<a href="http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/" target="_blank" rel="external"><code>controllerAs</code></a> 语法代替直接用经典的$scope定义的controller的方式。</p>
<p><em>为什么？</em>：controller被构建的时候，就会有一个新的实例，<code>controllerAs</code> 的语法比<code>经典的$scope语法</code>更接近JavaScript构造函数。</p>
<p><em>为什么？</em>：这促进在View中对绑定到“有修饰”的对象的使用（例如用<code>customer.name</code> 代替<code>name</code>），这将更有语境、更容易阅读，也避免了任何没有“修饰”而产生的引用问题。</p>
<p><em>为什么？</em>：有助于避免在有嵌套的controllers的Views中调用 <code>$parent</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- avoid --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Customer"</span>&gt;</span></div><div class="line">  &#123;&#123; name &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- recommended --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Customer as customer"</span>&gt;</span></div><div class="line">  &#123;&#123; customer.name &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###controllerAs在controller中的语法</p>
<h6 id="Style-Y031"><a href="#Style-Y031" class="headerlink" title="[Style Y031]"></a>[Style <a href="#style-y031">Y031</a>]</h6><ul>
<li><p>使用 <code>controllerAs</code> 语法代替 <code>经典的$scope语法</code> 语法。</p>
</li>
<li><p>使用<code>controllerAs</code> 时，controller中的<code>$scope</code>被绑定到了<code>this</code>上。</p>
<p><em>为什么？</em>：<code>controllerAs</code> 是<code>$scope</code>的语法修饰，你仍然可以绑定到View上并且访问 <code>$scope</code>的方法。</p>
<p><em>为什么？</em>：避免在controller中使用 <code>$scope</code>，最好不用它们或是把它们移到一个factory中。factory中可以考虑使用<code>$scope</code>，controller中只在需要时候才使用<code>$scope</code>，例如当使用<a href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$emit" target="_blank" rel="external"><code>$emit</code></a>， <a href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$broadcast" target="_blank" rel="external"><code>$broadcast</code></a>，或者 <a href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on" target="_blank" rel="external"><code>$on</code></a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Customer</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">    $scope.name = &#123;&#125;;</div><div class="line">    $scope.sendMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended - but see next section */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Customer</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = &#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.sendMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###controllerAs with vm</p>
<h6 id="Style-Y032"><a href="#Style-Y032" class="headerlink" title="[Style Y032]"></a>[Style <a href="#style-y032">Y032</a>]</h6><ul>
<li><p>使用<code>controllerAs</code>语法时把<code>this</code> 赋值给一个可捕获的变量，选择一个有代表性的名称，例如<code>vm</code>代表ViewModel。</p>
<p><em>为什么？</em>：<code>this</code>在不同的地方有不同的语义（就是作用域不同），在controller中的一个函数内部使用<code>this</code>时可能会改变它的上下文。用一个变量来捕获<code>this</code>的上下文从而可以避免遇到这样的坑。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Customer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = &#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.sendMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Customer</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.name = &#123;&#125;;</div><div class="line">    vm.sendMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注：你可以参照下面的做法来避免 <a href="http://www.jshint.com/" target="_blank" rel="external">jshint</a>的警告。但是构造函数（函数名首字母大写）是不需要这个的.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* jshint validthis: true */</span></div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">this</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>注：在controller中用<code>controller as</code>创建了一个watch时，可以用下面的语法监测<code>vm.*</code>的成员。（创建watch时要谨慎，因为它会增加更多的负载）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"vm.title"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SomeController</span>(<span class="params">$scope, $log</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.title = <span class="string">'Some Title'</span>;</div><div class="line"></div><div class="line">    $scope.$watch(<span class="string">'vm.title'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">current, original</span>) </span>&#123;</div><div class="line">        $log.info(<span class="string">'vm.title was %s'</span>, original);</div><div class="line">        $log.info(<span class="string">'vm.title is now %s'</span>, current);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###置顶绑定成员</p>
<h6 id="Style-Y033"><a href="#Style-Y033" class="headerlink" title="[Style Y033]"></a>[Style <a href="#style-y033">Y033</a>]</h6><ul>
<li><p>把可绑定的成员放到controller的顶部，按字母排序，并且不要通过controller的代码传播。</p>
<p><em>为什么？</em>：虽然设置单行匿名函数很容易，但是当这些函数的代码超过一行时，这将极大降低代码的可读性。在可绑定成员下面定义函数（这些函数被提出来），把具体的实现细节放到下面，可绑定成员置顶，这会提高代码的可读性。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sessions</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">    vm.gotoSession = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/* ... */</span></div><div class="line">    &#125;;</div><div class="line">    vm.refresh = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/* ... */</span></div><div class="line">    &#125;;</div><div class="line">    vm.search = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/* ... */</span></div><div class="line">    &#125;;</div><div class="line">    vm.sessions = [];</div><div class="line">    vm.title = <span class="string">'Sessions'</span>;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sessions</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">    vm.gotoSession = gotoSession;</div><div class="line">    vm.refresh = refresh;</div><div class="line">    vm.search = search;</div><div class="line">    vm.sessions = [];</div><div class="line">    vm.title = <span class="string">'Sessions'</span>;</div><div class="line"></div><div class="line">    <span class="comment">////////////</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gotoSession</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/* */</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">refresh</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/* */</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/* */</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/assets/above-the-fold-1.png" alt="Controller Using &quot;Above the Fold&quot;"></p>
<p>注：如果一个函数就是一行，那么只要不影响可读性就把它放到顶部。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sessions</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">    vm.gotoSession = gotoSession;</div><div class="line">    vm.refresh = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * lines</div><div class="line">         * of</div><div class="line">         * code</div><div class="line">         * affects</div><div class="line">         * readability</div><div class="line">         */</div><div class="line">    &#125;;</div><div class="line">    vm.search = search;</div><div class="line">    vm.sessions = [];</div><div class="line">    vm.title = <span class="string">'Sessions'</span>;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sessions</span>(<span class="params">dataservice</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">    vm.gotoSession = gotoSession;</div><div class="line">    vm.refresh = dataservice.refresh; <span class="comment">// 1 liner is OK</span></div><div class="line">    vm.search = search;</div><div class="line">    vm.sessions = [];</div><div class="line">    vm.title = <span class="string">'Sessions'</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###函数声明隐藏实现细节</p>
<h6 id="Style-Y034"><a href="#Style-Y034" class="headerlink" title="[Style Y034]"></a>[Style <a href="#style-y034">Y034</a>]</h6><ul>
<li><p>使用函数声明来隐藏实现细节，置顶绑定成员，当你需要在controller中绑定一个函数时，把它指向一个在文件的后面会出现函数声明。更多详情请看<a href="http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code" target="_blank" rel="external">这里</a>。</p>
<p><em>为什么？</em>：易读，易识别哪些成员可以在View中绑定和使用。</p>
<p><em>为什么？</em>：把函数的实现细节放到后面，你可以更清楚地看到重要的东西。</p>
<p><em>为什么？</em>：由于函数声明会被置顶，所以没有必要担心在声明它之前就使用函数的问题。</p>
<p><em>为什么？</em>：你再也不用担心当 <code>a</code>依赖于 <code>b</code>时，把<code>var a</code>放到<code>var b</code>之前会中断你的代码的函数声明问题。</p>
<p><em>为什么？</em>：函数表达式中顺序是至关重要的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * avoid</div><div class="line"> * Using function expressions.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span>(<span class="params">dataservice, logger</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.avengers = [];</div><div class="line">    vm.title = <span class="string">'Avengers'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> activate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            logger.info(<span class="string">'Activated Avengers View'</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> getAvengers = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> dataservice.getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            vm.avengers = data;</div><div class="line">            <span class="keyword">return</span> vm.avengers;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    vm.getAvengers = getAvengers;</div><div class="line"></div><div class="line">    activate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意这里重要的代码分散在前面的例子中。<br>下面的示例中，可以看到重要的代码都放到了顶部。实现的详细细节都在下方，显然这样的代码更易读。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * recommend</div><div class="line"> * Using function declarations</div><div class="line"> * and bindable members up top.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span>(<span class="params">dataservice, logger</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.avengers = [];</div><div class="line">    vm.getAvengers = getAvengers;</div><div class="line">    vm.title = <span class="string">'Avengers'</span>;</div><div class="line"></div><div class="line">    activate();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            logger.info(<span class="string">'Activated Avengers View'</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> dataservice.getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            vm.avengers = data;</div><div class="line">            <span class="keyword">return</span> vm.avengers;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###把Controller中的逻辑延迟到Service中</p>
<h6 id="Style-Y035"><a href="#Style-Y035" class="headerlink" title="[Style Y035]"></a>[Style <a href="#style-y035">Y035</a>]</h6><ul>
<li><p>通过委派到service和factory中来延迟controller中的逻辑。</p>
<p><em>为什么？</em>：把逻辑放到service中，并通过一个function暴露，就可以被多个controller重用。</p>
<p><em>为什么？</em>：把逻辑放到service中将会使单元测试的时候更加容易地把它们分离，相反，如果在controller中调用逻辑就显得很二了。</p>
<p><em>为什么？</em>：保持controller的简洁。</p>
<p><em>为什么？</em>：从controller中删除依赖关系并且隐藏实现细节。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Order</span>(<span class="params">$http, $q, config, userInfo</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.checkCredit = checkCredit;</div><div class="line">    vm.isCreditOk;</div><div class="line">    vm.total = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkCredit</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> settings = &#123;&#125;;</div><div class="line">        <span class="comment">// Get the credit service base URL from config</span></div><div class="line">        <span class="comment">// Set credit service required headers</span></div><div class="line">        <span class="comment">// Prepare URL query string or data object with request data</span></div><div class="line">        <span class="comment">// Add user-identifying info so service gets the right credit limit for this user.</span></div><div class="line">        <span class="comment">// Use JSONP for this browser if it doesn't support CORS</span></div><div class="line">        <span class="keyword">return</span> $http.get(settings)</div><div class="line">            .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">               <span class="comment">// Unpack JSON data in the response object</span></div><div class="line">               <span class="comment">// to find maxRemainingAmount</span></div><div class="line">               vm.isCreditOk = vm.total &lt;= maxRemainingAmount</div><div class="line">            &#125;)</div><div class="line">            .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">               <span class="comment">// Interpret error</span></div><div class="line">               <span class="comment">// Cope w/ timeout? retry? try alternate service?</span></div><div class="line">               <span class="comment">// Re-reject with appropriate error for a user to see</span></div><div class="line">            &#125;);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Order</span> (<span class="params">creditService</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.checkCredit = checkCredit;</div><div class="line">    vm.isCreditOk;</div><div class="line">    vm.total = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkCredit</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> creditService.isOrderTotalOk(vm.total)</div><div class="line">          .then(<span class="function"><span class="keyword">function</span>(<span class="params">isOk</span>) </span>&#123; vm.isCreditOk = isOk; &#125;)</div><div class="line">          .catch(showServiceError);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###保持Controller的专一性</p>
<h6 id="Style-Y037"><a href="#Style-Y037" class="headerlink" title="[Style Y037]"></a>[Style <a href="#style-y037">Y037</a>]</h6><ul>
<li><p>一个view定义一个controller，尽量不要在其它view中使用这个controller。把可重用的逻辑放到factory中，保证controller只服务于当前视图。</p>
<p><em>为什么？</em>：不同的view用同一个controller是非常不科学的，良好的端对端测试覆盖率对于保证大型应用稳定性是必需的。</p>
</li>
</ul>
<p>###分配Controller</p>
<h6 id="Style-Y038"><a href="#Style-Y038" class="headerlink" title="[Style Y038]"></a>[Style <a href="#style-y038">Y038</a>]</h6><ul>
<li><p>当一个controller必须匹配一个view时或者任何一个组件可能被其它controller或是view重用时，连同controller的route一起定义。</p>
<p>注：如果一个view是通过route外的其它形式加载的，那么就用<code>ng-controller=&quot;Avengers as vm&quot;</code>语法。</p>
<p><em>为什么？</em>：在route中匹配controller允许不同的路由调用不同的相匹配的controller和view，当在view中通过<a href="https://docs.angularjs.org/api/ng/directive/ngController" target="_blank" rel="external"><code>ng-controller</code></a>分配controller时，这个view总是和相同的controller相关联。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid - when using with a route and dynamic pairing is desired */</span></div><div class="line"></div><div class="line"><span class="comment">// route-config.js</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .config(config);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span> (<span class="params">$routeProvider</span>) </span>&#123;</div><div class="line">    $routeProvider</div><div class="line">        .when(<span class="string">'/avengers'</span>, &#123;</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'avengers.html'</span></div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- avengers.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"Avengers as vm"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"></div><div class="line"><span class="comment">// route-config.js</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .config(config);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span> (<span class="params">$routeProvider</span>) </span>&#123;</div><div class="line">    $routeProvider</div><div class="line">        .when(<span class="string">'/avengers'</span>, &#123;</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'avengers.html'</span>,</div><div class="line">            <span class="attr">controller</span>: <span class="string">'Avengers'</span>,</div><div class="line">            <span class="attr">controllerAs</span>: <span class="string">'vm'</span></div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- avengers.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><p>###单例</p>
<h6 id="Style-Y040"><a href="#Style-Y040" class="headerlink" title="[Style Y040]"></a>[Style <a href="#style-y040">Y040</a>]</h6><ul>
<li><p>用<code>new</code>实例化service，用<code>this</code>实例化公共方法和变量，由于这和factory是类似的，所以为了保持统一，推荐用facotry来代替。</p>
<p>注意：<a href="https://docs.angularjs.org/guide/services" target="_blank" rel="external">所有的Angular services都是单例</a>，这意味着每个injector都只有一个实例化的service。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// service</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .service(<span class="string">'logger'</span>, logger);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.logError = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">      <span class="comment">/* */</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// factory</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .factory(<span class="string">'logger'</span>, logger);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">logError</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">          <span class="comment">/* */</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="Factories"><a href="#Factories" class="headerlink" title="Factories"></a>Factories</h2><p>###单一职责</p>
<h6 id="Style-Y051"><a href="#Style-Y051" class="headerlink" title="[Style Y051]"></a>[Style <a href="#style-y051">Y051</a>]</h6><ul>
<li>factory应该是<a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="external">单一职责</a>，这是由其上下文进行封装的。一旦一个factory将要处理超过单一的目的时，就应该创建一个新的factory。</li>
</ul>
<p>###单例</p>
<h6 id="Style-Y051-1"><a href="#Style-Y051-1" class="headerlink" title="[Style Y051]"></a>[Style <a href="#style-y051">Y051</a>]</h6><ul>
<li><p>facotry是一个单例，它返回一个包含service成员的对象。</p>
<p>注：<a href="https://docs.angularjs.org/guide/services" target="_blank" rel="external">所有的Angular services都是单例</a>，这意味着每个injector都只有一个实例化的service。</p>
</li>
</ul>
<p>###可访问的成员置顶###</p>
<h6 id="Style-Y052"><a href="#Style-Y052" class="headerlink" title="[Style Y052]"></a>[Style <a href="#style-y052">Y052</a>]</h6><ul>
<li><p>使用从<a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript" target="_blank" rel="external">显露模块模式</a>派生出来的技术把service（它的接口）中可调用的成员暴露到顶部，</p>
<p><em>为什么？</em>：易读，并且让你可以立即识别service中的哪些成员可以被调用，哪些成员必须进行单元测试（或者被别人嘲笑）。</p>
<p><em>为什么？</em>：当文件内容很长时，这可以避免需要滚动才能看到暴露了哪些东西。</p>
<p><em>为什么？</em>：虽然你可以随意写一个函数，但当函数代码超过一行时就会降低可读性并造成滚动。通过把实现细节放下面、把可调用接口置顶的形式返回service的方式来定义可调用的接口，从而使代码更加易读。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataService</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> someValue = <span class="string">''</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">save</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/* */</span></div><div class="line">    &#125;;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validate</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/* */</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">save</span>: save,</div><div class="line">        <span class="attr">someValue</span>: someValue,</div><div class="line">        <span class="attr">validate</span>: validate</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataService</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> someValue = <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> service = &#123;</div><div class="line">        <span class="attr">save</span>: save,</div><div class="line">        <span class="attr">someValue</span>: someValue,</div><div class="line">        <span class="attr">validate</span>: validate</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> service;</div><div class="line"></div><div class="line">    <span class="comment">////////////</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">save</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/* */</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validate</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/* */</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种绑定方式复制了宿主对象，原始值不会随着暴露模块模式的使用而更新。</p>
<p><img src="https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/assets/above-the-fold-2.png" alt="Factories Using &quot;Above the Fold&quot;"></p>
</li>
</ul>
<p>###函数声明隐藏实现细节</p>
<h6 id="Style-Y053"><a href="#Style-Y053" class="headerlink" title="[Style Y053]"></a>[Style <a href="#style-y053">Y053</a>]</h6><ul>
<li><p>函数声明隐藏实现细节，置顶绑定成员，当你需要在controller中绑定一个函数时，把它指向一个函数声明，这个函数声明在文件的后面会出现。</p>
<p><em>为什么？</em>：易读，易识别哪些成员可以在View中绑定和使用。</p>
<p><em>为什么？</em>：把函数的实现细节放到后面，你可以更清楚地看到重要的东西。</p>
<p><em>为什么？</em>：由于函数声明会被置顶，所以没有必要担心在声明它之前就使用函数的问题。</p>
<p><em>为什么？</em>：你再也不用担心当 <code>a</code>依赖于 <code>b</code>时，把<code>var a</code>放到<code>var b</code>之前会中断你的代码的函数声明问题。</p>
<p><em>为什么？</em>：函数表达式中顺序是至关重要的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * avoid</div><div class="line"> * Using function expressions</div><div class="line"> */</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">dataservice</span>(<span class="params">$http, $location, $q, exception, logger</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> isPrimed = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">var</span> primePromise;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> getAvengers = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// implementation details go here</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> getAvengerCount = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// implementation details go here</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> getAvengersCast = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// implementation details go here</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> prime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// implementation details go here</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> ready = <span class="function"><span class="keyword">function</span>(<span class="params">nextPromises</span>) </span>&#123;</div><div class="line">      <span class="comment">// implementation details go here</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> service = &#123;</div><div class="line">        <span class="attr">getAvengersCast</span>: getAvengersCast,</div><div class="line">        <span class="attr">getAvengerCount</span>: getAvengerCount,</div><div class="line">        <span class="attr">getAvengers</span>: getAvengers,</div><div class="line">        <span class="attr">ready</span>: ready</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> service;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * recommended</div><div class="line"> * Using function declarations</div><div class="line"> * and accessible members up top.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataservice</span>(<span class="params">$http, $location, $q, exception, logger</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> isPrimed = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">var</span> primePromise;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> service = &#123;</div><div class="line">        <span class="attr">getAvengersCast</span>: getAvengersCast,</div><div class="line">        <span class="attr">getAvengerCount</span>: getAvengerCount,</div><div class="line">        <span class="attr">getAvengers</span>: getAvengers,</div><div class="line">        <span class="attr">ready</span>: ready</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> service;</div><div class="line"></div><div class="line">    <span class="comment">////////////</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// implementation details go here</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAvengerCount</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// implementation details go here</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAvengersCast</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// implementation details go here</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">prime</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// implementation details go here</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params">nextPromises</span>) </span>&#123;</div><div class="line">      <span class="comment">// implementation details go here</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="Data-Services"><a href="#Data-Services" class="headerlink" title="Data Services"></a>Data Services</h2><p>###独立的数据调用</p>
<h6 id="Style-Y060"><a href="#Style-Y060" class="headerlink" title="[Style Y060]"></a>[Style <a href="#style-y060">Y060</a>]</h6><ul>
<li><p>把进行数据操作和数据交互的逻辑放到factory中，数据服务负责XHR请求、本地存储、内存存储和其它任何数据操作。</p>
<p><em>为什么？</em>：controller的作用是查看视图和收集视图的信息，它不应该关心如何取得数据，只需要知道哪里需要用到数据。把取数据的逻辑放到数据服务中能够让controller更简单、更专注于对view的控制。</p>
<p><em>为什么？</em>：方便测试。</p>
<p><em>为什么？</em>：数据服务的实现可能有非常明确的代码来处理数据仓库，这可能包含headers、如何与数据交互或是其它service，例如<code>$http</code>。把逻辑封装到单独的数据服务中，这隐藏了外部调用者（例如controller）对数据的直接操作，这样更加容易执行变更。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"></div><div class="line"><span class="comment">// dataservice factory</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app.core'</span>)</div><div class="line">    .factory(<span class="string">'dataservice'</span>, dataservice);</div><div class="line"></div><div class="line">dataservice.$inject = [<span class="string">'$http'</span>, <span class="string">'logger'</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataservice</span>(<span class="params">$http, logger</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">getAvengers</span>: getAvengers</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> $http.get(<span class="string">'/api/maa'</span>)</div><div class="line">            .then(getAvengersComplete)</div><div class="line">            .catch(getAvengersFailed);</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getAvengersComplete</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> response.data.results;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getAvengersFailed</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">            logger.error(<span class="string">'XHR Failed for getAvengers.'</span> + error.data);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：数据服务被调用时（例如controller），隐藏调用的直接行为，如下所示。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"></div><div class="line"><span class="comment">// controller calling the dataservice factory</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app.avengers'</span>)</div><div class="line">    .controller(<span class="string">'Avengers'</span>, Avengers);</div><div class="line"></div><div class="line">Avengers.$inject = [<span class="string">'dataservice'</span>, <span class="string">'logger'</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span>(<span class="params">dataservice, logger</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.avengers = [];</div><div class="line"></div><div class="line">    activate();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            logger.info(<span class="string">'Activated Avengers View'</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> dataservice.getAvengers()</div><div class="line">          .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">              vm.avengers = data;</div><div class="line">              <span class="keyword">return</span> vm.avengers;</div><div class="line">          &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###数据调用返回一个Promise</p>
<h6 id="Style-Y061"><a href="#Style-Y061" class="headerlink" title="[Style Y061]"></a>[Style <a href="#style-y061">Y061</a>]</h6><ul>
<li><p>就像<code>$http</code>一样，调用数据时返回一个promise，在你的调用函数中也返回一个promise。</p>
<p><em>为什么？</em>：你可以把promise链接到一起，在数据调用完成并且resolve或是reject这个promise后采取进一步的行为。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"></div><div class="line">activate();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Step 1</div><div class="line">     * Ask the getAvengers function for the</div><div class="line">     * avenger data and wait for the promise</div><div class="line">     */</div><div class="line">    <span class="keyword">return</span> getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Step 4</div><div class="line">       * Perform an action on resolve of final promise</div><div class="line">       */</div><div class="line">      logger.info(<span class="string">'Activated Avengers View'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAvengers</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Step 2</div><div class="line">     * Ask the data service for the data and wait</div><div class="line">     * for the promise</div><div class="line">     */</div><div class="line">    <span class="keyword">return</span> dataservice.getAvengers()</div><div class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">          <span class="comment">/**</span></div><div class="line">           * Step 3</div><div class="line">           * set the data and resolve the promise</div><div class="line">           */</div><div class="line">          vm.avengers = data;</div><div class="line">          <span class="keyword">return</span> vm.avengers;</div><div class="line">      &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h2><p>###一个directive一个文件</p>
<h6 id="Style-Y070"><a href="#Style-Y070" class="headerlink" title="[Style Y070]"></a>[Style <a href="#style-y070">Y070</a>]</h6><ul>
<li><p>一个文件中只创建一个directive，并依照directive来命名文件。</p>
<p><em>为什么？</em>：虽然把所有directive放到一个文件中很简单，但是当一些directive是跨应用的，一些是跨模块的，一些仅仅在一个模块中使用时，想把它们独立出来就非常困难了。</p>
<p><em>为什么？</em>：一个文件一个directive也更加容易维护。</p>
<blockquote>
<p>注： “<strong>最佳实践</strong>：Angular文档中有提过，directive应该自动回收，当directive被移除后，你可以使用<code>element.on(&#39;$destroy&#39;, ...)</code>或者<code>scope.$on(&#39;$destroy&#39;, ...)</code>来执行一个clearn-up函数。”</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line"><span class="comment">/* directives.js */</span></div><div class="line"></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app.widgets'</span>)</div><div class="line"></div><div class="line">    <span class="comment">/* order directive仅仅会被order module用到 */</span></div><div class="line">    .directive(<span class="string">'orderCalendarRange'</span>, orderCalendarRange)</div><div class="line"></div><div class="line">    <span class="comment">/* sales directive可以在sales app的任意地方使用 */</span></div><div class="line">    .directive(<span class="string">'salesCustomerInfo'</span>, salesCustomerInfo)</div><div class="line"></div><div class="line">    <span class="comment">/* spinner directive可以在任意apps中使用 */</span></div><div class="line">    .directive(<span class="string">'sharedSpinner'</span>, sharedSpinner);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">orderCalendarRange</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/* implementation details */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">salesCustomerInfo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/* implementation details */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sharedSpinner</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/* implementation details */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"><span class="comment">/* calendarRange.directive.js */</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @desc order directive that is specific to the order module at a company named Acme</div><div class="line"> * @example &lt;div acme-order-calendar-range&gt;&lt;/div&gt;</div><div class="line"> */</div><div class="line">angular</div><div class="line">    .module(<span class="string">'sales.order'</span>)</div><div class="line">    .directive(<span class="string">'acmeOrderCalendarRange'</span>, orderCalendarRange);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">orderCalendarRange</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/* implementation details */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"><span class="comment">/* customerInfo.directive.js */</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @desc sales directive that can be used anywhere across the sales app at a company named Acme</div><div class="line"> * @example &lt;div acme-sales-customer-info&gt;&lt;/div&gt;</div><div class="line"> */</div><div class="line">angular</div><div class="line">    .module(<span class="string">'sales.widgets'</span>)</div><div class="line">    .directive(<span class="string">'acmeSalesCustomerInfo'</span>, salesCustomerInfo);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">salesCustomerInfo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/* implementation details */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"><span class="comment">/* spinner.directive.js */</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @desc spinner directive that can be used anywhere across apps at a company named Acme</div><div class="line"> * @example &lt;div acme-shared-spinner&gt;&lt;/div&gt;</div><div class="line"> */</div><div class="line">angular</div><div class="line">    .module(<span class="string">'shared.widgets'</span>)</div><div class="line">    .directive(<span class="string">'acmeSharedSpinner'</span>, sharedSpinner);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sharedSpinner</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/* implementation details */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：由于directive使用条件比较广，所以命名就存在很多的选项。选择一个让directive和它的文件名都清楚分明的名字。下面有一些例子，不过更多的建议去看<a href="#命名">命名</a>章节。</p>
</li>
</ul>
<p>###在directive中操作DOM</p>
<h6 id="Style-Y072"><a href="#Style-Y072" class="headerlink" title="[Style Y072]"></a>[Style <a href="#style-y072">Y072</a>]</h6><ul>
<li><p>当需要直接操作DOM的时候，使用directive。如果有替代方法可以使用，例如：使用CSS来设置样式、<a href="https://docs.angularjs.org/api/ngAnimate" target="_blank" rel="external">animation services</a>、Angular模板、<a href="https://docs.angularjs.org/api/ng/directive/ngShow" target="_blank" rel="external"><code>ngShow</code></a>或者<a href="https://docs.angularjs.org/api/ng/directive/ngHide" target="_blank" rel="external"><code>ngHide</code></a>，那么就直接用这些即可。例如，如果一个directive只是想控制显示和隐藏，用ngHide/ngShow即可。</p>
<p><em>为什么？</em>：DOM操作的测试和调试是很困难的，通常会有更好的方法（CSS、animations、templates）。</p>
</li>
</ul>
<p>###提供一个唯一的Directive前缀</p>
<h6 id="Style-Y073"><a href="#Style-Y073" class="headerlink" title="[Style Y073]"></a>[Style <a href="#style-y073">Y073</a>]</h6><ul>
<li><p>提供一个短小、唯一、具有描述性的directive前缀，例如<code>acmeSalesCustomerInfo</code>在HTML中声明为<code>acme-sales-customer-info</code>。</p>
<p><em>为什么？</em>：方便快速识别directive的内容和起源，例如<code>acme-</code>可能预示着这个directive是服务于Acme company。</p>
<p>注：避免使用<code>ng-</code>为前缀，研究一下其它广泛使用的directive避免命名冲突，例如<a href="http://ionicframework.com/" target="_blank" rel="external">Ionic Framework</a>的<code>ion-</code>。</p>
</li>
</ul>
<p>###限制元素和属性</p>
<h6 id="Style-Y074"><a href="#Style-Y074" class="headerlink" title="[Style Y074]"></a>[Style <a href="#style-y074">Y074</a>]</h6><ul>
<li><p>当创建一个directive需要作为一个独立元素时，restrict值设置为<code>E</code>（自定义元素），也可以设置可选值<code>A</code>（自定义属性）。一般来说，如果它就是为了独立存在，用<code>E</code>是合适的做法。一般原则是允许<code>EA</code>，但是当它是独立的时候这更倾向于作为一个元素来实施，当它是为了增强已存在的DOM元素时则更倾向于作为一个属性来实施。</p>
<p><em>为什么？</em>：这很有意义！</p>
<p><em>为什么？</em>：虽然我们允许directive被当作一个class来使用，但如果这个directive的行为确实像一个元素的话，那么把directive当作元素或者属性是更有意义的。</p>
<p>注：Angular 1.3 +默认使用EA。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- avoid --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-calendar-range"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app.widgets'</span>)</div><div class="line">    .directive(<span class="string">'myCalendarRange'</span>, myCalendarRange);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCalendarRange</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> directive = &#123;</div><div class="line">        <span class="attr">link</span>: link,</div><div class="line">        <span class="attr">templateUrl</span>: <span class="string">'/template/is/located/here.html'</span>,</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'C'</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> directive;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">link</span>(<span class="params">scope, element, attrs</span>) </span>&#123;</div><div class="line">      <span class="comment">/* */</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- recommended --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">my-calendar-range</span>&gt;</span><span class="tag">&lt;/<span class="name">my-calendar-range</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">my-calendar-range</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app.widgets'</span>)</div><div class="line">    .directive(<span class="string">'myCalendarRange'</span>, myCalendarRange);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCalendarRange</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> directive = &#123;</div><div class="line">        <span class="attr">link</span>: link,</div><div class="line">        <span class="attr">templateUrl</span>: <span class="string">'/template/is/located/here.html'</span>,</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'EA'</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> directive;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">link</span>(<span class="params">scope, element, attrs</span>) </span>&#123;</div><div class="line">      <span class="comment">/* */</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###Directives和ControllerAs</p>
<h6 id="Style-Y075"><a href="#Style-Y075" class="headerlink" title="[Style Y075]"></a>[Style <a href="#style-y075">Y075</a>]</h6><ul>
<li><p>directive使用<code>controller as</code>语法，和view使用<code>controller as</code>保持一致。</p>
<p><em>为什么？</em>：因为不难且有必要这样做。</p>
<p>注意：下面的directive演示了一些你可以在link和directive控制器中使用scope的方法，用controllerAs。这里把template放在行内是为了在一个地方写出这些代码。</p>
<p>注意：关于依赖注入的内容，请看<a href="#手动依赖注入">手动依赖注入</a>。</p>
<p>注意：directive的控制器是在directive外部的，这种风格避免了由于注入造成的<code>return</code>之后的代码无法访问的情况。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">my-example</span> <span class="attr">max</span>=<span class="string">"77"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .directive(<span class="string">'myExample'</span>, myExample);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myExample</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> directive = &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">        <span class="attr">templateUrl</span>: <span class="string">'app/feature/example.directive.html'</span>,</div><div class="line">        <span class="attr">scope</span>: &#123;</div><div class="line">            <span class="attr">max</span>: <span class="string">'='</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">link</span>: linkFunc,</div><div class="line">        <span class="attr">controller</span> : ExampleController,</div><div class="line">        <span class="attr">controllerAs</span>: <span class="string">'vm'</span>,</div><div class="line">        <span class="attr">bindToController</span>: <span class="literal">true</span> <span class="comment">// because the scope is isolated</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> directive;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">linkFunc</span>(<span class="params">scope, el, attr, ctrl</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'LINK: scope.min = %s *** should be undefined'</span>, scope.min);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'LINK: scope.max = %s *** should be undefined'</span>, scope.max);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'LINK: scope.vm.min = %s'</span>, scope.vm.min);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'LINK: scope.vm.max = %s'</span>, scope.vm.max);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ExampleController.$inject = [<span class="string">'$scope'</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleController</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">    <span class="comment">// Injecting $scope just for comparison</span></div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">    vm.min = <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'CTRL: $scope.vm.min = %s'</span>, $scope.vm.min);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'CTRL: $scope.vm.max = %s'</span>, $scope.vm.max);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'CTRL: vm.min = %s'</span>, vm.min);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'CTRL: vm.max = %s'</span>, vm.max);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- example.directive.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>max=&#123;&#123;vm.max&#125;&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"&#123;&#123;vm.max&#125;&#125;"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>min=&#123;&#123;vm.min&#125;&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"&#123;&#123;vm.min&#125;&#125;"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意：当你把controller注入到link的函数或可访问的directive的attributes时，你可以把它命名为控制器的属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Alternative to above example</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">linkFunc</span>(<span class="params">scope, el, attr, vm</span>) </span>&#123; <span class="comment">// 和上面例子的区别在于把vm直接传递进来</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'LINK: scope.min = %s *** should be undefined'</span>, scope.min);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'LINK: scope.max = %s *** should be undefined'</span>, scope.max);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'LINK: vm.min = %s'</span>, vm.min);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'LINK: vm.max = %s'</span>, vm.max);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="Style-Y076"><a href="#Style-Y076" class="headerlink" title="[Style Y076]"></a>[Style <a href="#style-y076">Y076</a>]</h6><ul>
<li><p>当directive中使用了<code>controller as</code>语法时，如果你想把父级作用域绑定到directive的controller作用域时，使用<code>bindToController = true</code>。</p>
<p><em>为什么？</em>：这使得把外部作用域绑定到directive controller中变得更加简单。</p>
<p>注意：Angular 1.3.0才介绍了<code>bindToController</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">my-example</span> <span class="attr">max</span>=<span class="string">"77"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .directive(<span class="string">'myExample'</span>, myExample);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myExample</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> directive = &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">        <span class="attr">templateUrl</span>: <span class="string">'app/feature/example.directive.html'</span>,</div><div class="line">        <span class="attr">scope</span>: &#123;</div><div class="line">            <span class="attr">max</span>: <span class="string">'='</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">controller</span>: ExampleController,</div><div class="line">        <span class="attr">controllerAs</span>: <span class="string">'vm'</span>,</div><div class="line">        <span class="attr">bindToController</span>: <span class="literal">true</span></div><div class="line">      &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> directive;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleController</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.min = <span class="number">3</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'CTRL: vm.min = %s'</span>, vm.min);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'CTRL: vm.max = %s'</span>, vm.max);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- example.directive.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>max=&#123;&#123;vm.max&#125;&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"vm.max"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>min=&#123;&#123;vm.min&#125;&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"vm.min"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="解决Controller的Promises"><a href="#解决Controller的Promises" class="headerlink" title="解决Controller的Promises"></a>解决Controller的Promises</h2><p>###Controller Activation Promises</p>
<h6 id="Style-Y080"><a href="#Style-Y080" class="headerlink" title="[Style Y080]"></a>[Style <a href="#style-y080">Y080</a>]</h6><ul>
<li><p>在<code>activate</code>函数中解决controller的启动逻辑。</p>
<p><em>为什么？</em>：把启动逻辑放在一个controller中固定的位置可以方便定位、有利于保持测试的一致性，并能够避免controller中到处都是激活逻辑。</p>
<p><em>为什么？</em>：<code>activate</code>这个controller使得重用刷新视图的逻辑变得很方便，把所有的逻辑都放到了一起，可以让用户更快地看到视图，可以很轻松地对<code>ng-view</code> 或 <code>ui-view</code>使用动画，用户体验更好。</p>
<p>注意：如果你需要在开始使用controller之前有条件地取消路由，那么就用<a href="#style-y081">route resolve</a>来代替。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span>(<span class="params">dataservice</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.avengers = [];</div><div class="line">    vm.title = <span class="string">'Avengers'</span>;</div><div class="line"></div><div class="line">    dataservice.getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        vm.avengers = data;</div><div class="line">        <span class="keyword">return</span> vm.avengers;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span>(<span class="params">dataservice</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.avengers = [];</div><div class="line">    vm.title = <span class="string">'Avengers'</span>;</div><div class="line"></div><div class="line">    activate();</div><div class="line"></div><div class="line">    <span class="comment">////////////</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> dataservice.getAvengers().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            vm.avengers = data;</div><div class="line">            <span class="keyword">return</span> vm.avengers;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###Route Resolve Promises</p>
<h6 id="Style-Y081"><a href="#Style-Y081" class="headerlink" title="[Style Y081]"></a>[Style <a href="#style-y081">Y081</a>]</h6><ul>
<li><p>当一个controller在激活之前，需要依赖一个promise的完成时，那么就在controller的逻辑执行之前在<code>$routeProvider</code>中解决这些依赖。如果你需要在controller被激活之前有条件地取消一个路由，那么就用route resolver。</p>
</li>
<li><p>当你决定在过渡到视图之前取消路由时，使用route resolve。</p>
<p><em>为什么？</em>：controller在加载前可能需要一些数据，这些数据可能是从一个通过自定义factory或是<a href="https://docs.angularjs.org/api/ng/service/$http" target="_blank" rel="external">$http</a>的promise而来的。<a href="https://docs.angularjs.org/api/ngRoute/provider/$routeProvider" target="_blank" rel="external">route resolve</a>允许promise在controller的逻辑执行之前解决，因此它可能对从promise中来的数据做一些处理。</p>
<p><em>为什么？</em>：这段代码将在路由后的controller的激活函数中执行，视图立即加载，promise resolve的时候将会开始进行数据绑定，可以（通过<code>ng-view</code>或<code>ui-view</code>）在视图的过渡之间加个loading状态的动画。</p>
<p>注意：这段代码将在路由之前通过一个promise来执行，拒绝了承诺就会取消路由，接受了就会等待路由跳转到新视图。如果你想更快地进入视图，并且无需验证是否可以进入视图，你可以考虑用<a href="#style-y080">控制器 <code>activate</code> 技术</a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .controller(<span class="string">'Avengers'</span>, Avengers);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span> (<span class="params">movieService</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    <span class="comment">// unresolved</span></div><div class="line">    vm.movies;</div><div class="line">    <span class="comment">// resolved asynchronously</span></div><div class="line">    movieService.getMovies().then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">        vm.movies = response.movies;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* better */</span></div><div class="line"></div><div class="line"><span class="comment">// route-config.js</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .config(config);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span> (<span class="params">$routeProvider</span>) </span>&#123;</div><div class="line">    $routeProvider</div><div class="line">        .when(<span class="string">'/avengers'</span>, &#123;</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'avengers.html'</span>,</div><div class="line">            <span class="attr">controller</span>: <span class="string">'Avengers'</span>,</div><div class="line">            <span class="attr">controllerAs</span>: <span class="string">'vm'</span>,</div><div class="line">            <span class="attr">resolve</span>: &#123;</div><div class="line">                <span class="attr">moviesPrepService</span>: <span class="function"><span class="keyword">function</span>(<span class="params">movieService</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> movieService.getMovies();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// avengers.js</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .controller(<span class="string">'Avengers'</span>, Avengers);</div><div class="line"></div><div class="line">Avengers.$inject = [<span class="string">'moviesPrepService'</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span> (<span class="params">moviesPrepService</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.movies = moviesPrepService.movies;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：下面这个例子展示了命名函数的路由解决，这种方式对于调试和处理依赖注入更加方便。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* even better */</span></div><div class="line"></div><div class="line"><span class="comment">// route-config.js</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .config(config);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span>(<span class="params">$routeProvider</span>) </span>&#123;</div><div class="line">    $routeProvider</div><div class="line">        .when(<span class="string">'/avengers'</span>, &#123;</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'avengers.html'</span>,</div><div class="line">            <span class="attr">controller</span>: <span class="string">'Avengers'</span>,</div><div class="line">            <span class="attr">controllerAs</span>: <span class="string">'vm'</span>,</div><div class="line">            <span class="attr">resolve</span>: &#123;</div><div class="line">                <span class="attr">moviesPrepService</span>: moviesPrepService</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">moviesPrepService</span>(<span class="params">movieService</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> movieService.getMovies();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// avengers.js</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .controller(<span class="string">'Avengers'</span>, Avengers);</div><div class="line"></div><div class="line">Avengers.$inject = [<span class="string">'moviesPrepService'</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span>(<span class="params">moviesPrepService</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">      vm.movies = moviesPrepService.movies;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：示例代码中的<code>movieService</code>不符合安全压缩的做法，可以到<a href="#手动依赖注入">手动依赖注入</a>和<a href="#压缩和注释">压缩和注释</a>部分学习如何安全压缩。</p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="手动依赖注入"><a href="#手动依赖注入" class="headerlink" title="手动依赖注入"></a>手动依赖注入</h2><h3 id="压缩的不安全性"><a href="#压缩的不安全性" class="headerlink" title="压缩的不安全性"></a>压缩的不安全性</h3><h6 id="Style-Y090"><a href="#Style-Y090" class="headerlink" title="[Style Y090]"></a>[Style <a href="#style-y090">Y090</a>]</h6><ul>
<li><p>声明依赖时避免使用缩写语法。</p>
<p><em>为什么？</em>：组件的参数（例如controller、factory等等）将会被转换成各种乱七八糟错误的变量。例如，<code>common</code>和<code>dataservice</code>可能会变成<code>a</code>或者<code>b</code>，但是这些转换后的变量在Angular中是找不到的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid - not minification-safe*/</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .controller(<span class="string">'Dashboard'</span>, Dashboard);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span>(<span class="params">common, dataservice</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这一段代码在压缩时会产生错误的变量，因此在运行时就会报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid - not minification-safe*/</span></div><div class="line">angular.module(<span class="string">'app'</span>).controller(<span class="string">'Dashboard'</span>, d);<span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">a, b</span>) </span>&#123; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###手动添加依赖</p>
<h6 id="Style-Y091"><a href="#Style-Y091" class="headerlink" title="[Style Y091]"></a>[Style <a href="#style-y091">Y091</a>]</h6><ul>
<li><p>用<code>$inject</code>手动添加Angular组件所需的依赖。</p>
<p><em>为什么？</em>：这种技术反映了使用<a href="https://github.com/olov/ng-annotate" target="_blank" rel="external"><code>ng-annotate</code></a>的技术，这就是我推荐的对依赖关系进行自动化创建安全压缩的方式，如果<code>ng-annotate</code>检测到已经有了注入，那么它就不会再次重复执行。</p>
<p><em>为什么？</em>：可以避免依赖变成其它Angular找不到的变量，例如，<code>common</code>和<code>dataservice</code>可能会变成<code>a</code>或者<code>b</code>。</p>
<p><em>为什么？</em>：避免创建内嵌的依赖，因为一个数组太长不利于阅读，此外，内嵌的方式也会让人感到困惑，比如数组是一系列的字符串，但是最后一个却是组件的function。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .controller(<span class="string">'Dashboard'</span>,</div><div class="line">        [<span class="string">'$location'</span>, <span class="string">'$routeParams'</span>, <span class="string">'common'</span>, <span class="string">'dataservice'</span>,</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span>(<span class="params">$location, $routeParams, common, dataservice</span>) </span>&#123;&#125;</div><div class="line">        ]);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .controller(<span class="string">'Dashboard'</span>,</div><div class="line">      [<span class="string">'$location'</span>, <span class="string">'$routeParams'</span>, <span class="string">'common'</span>, <span class="string">'dataservice'</span>, Dashboard]);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span>(<span class="params">$location, $routeParams, common, dataservice</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .controller(<span class="string">'Dashboard'</span>, Dashboard);</div><div class="line"></div><div class="line">Dashboard.$inject = [<span class="string">'$location'</span>, <span class="string">'$routeParams'</span>, <span class="string">'common'</span>, <span class="string">'dataservice'</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span>(<span class="params">$location, $routeParams, common, dataservice</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：当你的函数处于return语句后面，那么<code>$inject</code>是无法访问的（这会在directive中发生），你可以通过把Controller移到directive外面来解决这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* avoid */</span></div><div class="line"><span class="comment">// inside a directive definition</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ddo = &#123;</div><div class="line">        <span class="attr">controller</span>: DashboardPanelController,</div><div class="line">        <span class="attr">controllerAs</span>: <span class="string">'vm'</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> ddo;</div><div class="line"></div><div class="line">    DashboardPanelController.$inject = [<span class="string">'logger'</span>]; <span class="comment">// Unreachable</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">DashboardPanelController</span>(<span class="params">logger</span>) </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"><span class="comment">// outside a directive definition</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ddo = &#123;</div><div class="line">        <span class="attr">controller</span>: DashboardPanelController,</div><div class="line">        <span class="attr">controllerAs</span>: <span class="string">'vm'</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> ddo;</div><div class="line">&#125;</div><div class="line"></div><div class="line">DashboardPanelController.$inject = [<span class="string">'logger'</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DashboardPanelController</span>(<span class="params">logger</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###手动确定路由解析器依赖</p>
<h6 id="Style-Y092"><a href="#Style-Y092" class="headerlink" title="[Style Y092]"></a>[Style <a href="#style-y092">Y092</a>]</h6><ul>
<li><p>用<code>$inject</code>手动给Angular组件添加路由解析器依赖。</p>
<p><em>为什么？</em>：这种技术打破了路由解析的匿名函数的形式，易读。</p>
<p><em>为什么？</em>：<code>$inject</code>语句可以让任何依赖都可以安全压缩。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span> (<span class="params">$routeProvider</span>) </span>&#123;</div><div class="line">    $routeProvider</div><div class="line">        .when(<span class="string">'/avengers'</span>, &#123;</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'avengers.html'</span>,</div><div class="line">            <span class="attr">controller</span>: <span class="string">'AvengersController'</span>,</div><div class="line">            <span class="attr">controllerAs</span>: <span class="string">'vm'</span>,</div><div class="line">            <span class="attr">resolve</span>: &#123;</div><div class="line">                <span class="attr">moviesPrepService</span>: moviesPrepService</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">moviesPrepService.$inject =  [<span class="string">'movieService'</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">moviesPrepService</span>(<span class="params">movieService</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> movieService.getMovies();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="压缩和注释"><a href="#压缩和注释" class="headerlink" title="压缩和注释"></a>压缩和注释</h2><p>###ng-annotate</p>
<h6 id="Style-Y100"><a href="#Style-Y100" class="headerlink" title="[Style Y100]"></a>[Style <a href="#style-y100">Y100</a>]</h6><ul>
<li><p>在<a href="http://gulpjs.com" target="_blank" rel="external">Gulp</a>或<a href="http://gruntjs.com" target="_blank" rel="external">Grunt</a>中使用<a href="//github.com/olov/ng-annotate">ng-annotate</a>，用<code>/** @ngInject */</code>对需要自动依赖注入的function进行注释。</p>
<p><em>为什么？</em>：可以避免代码中的依赖使用到任何不安全的写法。</p>
<p><em>为什么？</em>：不推荐用<a href="https://github.com/btford/ngmin" target="_blank" rel="external"><code>ng-min</code></a>。</p>
<blockquote>
<p>我更喜欢Gulp，因为我觉得它是易写易读易调试的。</p>
</blockquote>
<p>下面的代码没有注入依赖，显然压缩是不安全的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .controller(<span class="string">'Avengers'</span>, Avengers);</div><div class="line"></div><div class="line"><span class="comment">/* @ngInject */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span> (<span class="params">storageService, avengerService</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.heroSearch = <span class="string">''</span>;</div><div class="line">    vm.storeHero = storeHero;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">storeHero</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> hero = avengerService.find(vm.heroSearch);</div><div class="line">      storageService.save(hero.name, hero);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当上面的代码通过ng-annotate运行时，就会产生如下的带有<code>$inject</code>注释的输出结果，这样的话压缩就会安全了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .controller(<span class="string">'Avengers'</span>, Avengers);</div><div class="line"></div><div class="line"><span class="comment">/* @ngInject */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avengers</span> (<span class="params">storageService, avengerService</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</div><div class="line">    vm.heroSearch = <span class="string">''</span>;</div><div class="line">    vm.storeHero = storeHero;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">storeHero</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> hero = avengerService.find(vm.heroSearch);</div><div class="line">      storageService.save(hero.name, hero);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Avengers.$inject = [<span class="string">'storageService'</span>, <span class="string">'avengerService'</span>];</div></pre></td></tr></table></figure>
<p>注意：如果<code>ng-annotate</code>检测到已经有注入了（例如发现了<code>@ngInject</code>），就不会重复生成<code>$inject</code>代码了。</p>
<p>注意：路由的函数前面也可以用<code>/* @ngInject */</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Using @ngInject annotations</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span>(<span class="params">$routeProvider</span>) </span>&#123;</div><div class="line">    $routeProvider</div><div class="line">        .when(<span class="string">'/avengers'</span>, &#123;</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'avengers.html'</span>,</div><div class="line">            <span class="attr">controller</span>: <span class="string">'Avengers'</span>,</div><div class="line">            <span class="attr">controllerAs</span>: <span class="string">'vm'</span>,</div><div class="line">            <span class="attr">resolve</span>: &#123; <span class="comment">/* @ngInject */</span></div><div class="line">                moviesPrepService: <span class="function"><span class="keyword">function</span>(<span class="params">movieService</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> movieService.getMovies();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：从Angular 1.3开始，你就可以用<a href="https://docs.angularjs.org/api/ng/directive/ngApp" target="_blank" rel="external"><code>ngApp</code></a>指令的 <code>ngStrictDi</code>参数来检测任何可能失去依赖的地方，当以“strict-di”模式创建injector时，会导致应用程序无法调用不使用显示函数注释的函数（这也许无法安全压缩）。记录在控制台的调试信息可以帮助追踪出问题的代码。我只在需要调试的时候才会用到<code>ng-strict-di</code>。<br><code>&lt;body ng-app=&quot;APP&quot; ng-strict-di&gt;</code></p>
</blockquote>
</li>
</ul>
<p>###使用Gulp或Grunt结合ng-annotate</p>
<h6 id="Style-Y101"><a href="#Style-Y101" class="headerlink" title="[Style Y101]"></a>[Style <a href="#style-y101">Y101</a>]</h6><ul>
<li><p>在自动化任务中使用<a href="https://www.npmjs.org/package/gulp-ng-annotate" target="_blank" rel="external">gulp-ng-annotate</a>或<a href="https://www.npmjs.org/package/grunt-ng-annotate" target="_blank" rel="external">grunt-ng-annotate</a>，把<code>/* @ngInject */</code>注入到任何有依赖关系函数的前面。</p>
<p><em>为什么？</em>：ng-annotate会捕获大部分的依赖关系，但是有时候需要借助于<code>/* @ngInject */</code>语法提示。</p>
<p>下面的代码是gulp任务使用ngAnnotate的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'js'</span>, [<span class="string">'jshint'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> source = pkg.paths.js;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> gulp.src(source)</div><div class="line">        .pipe(sourcemaps.init())</div><div class="line">        .pipe(concat(<span class="string">'all.min.js'</span>, &#123;<span class="attr">newLine</span>: <span class="string">';'</span>&#125;))</div><div class="line">        <span class="comment">// Annotate before uglify so the code get's min'd properly.</span></div><div class="line">        .pipe(ngAnnotate(&#123;</div><div class="line">            <span class="comment">// true helps add where @ngInject is not used. It infers.</span></div><div class="line">            <span class="comment">// Doesn't work with resolve, so we must be explicit there</span></div><div class="line">            add: <span class="literal">true</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(bytediff.start())</div><div class="line">        .pipe(uglify(&#123;<span class="attr">mangle</span>: <span class="literal">true</span>&#125;))</div><div class="line">        .pipe(bytediff.stop())</div><div class="line">        .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">        .pipe(gulp.dest(pkg.paths.dev));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>###修饰符</p>
<h6 id="Style-Y110"><a href="#Style-Y110" class="headerlink" title="[Style Y110]"></a>[Style <a href="#style-y110">Y110</a>]</h6><ul>
<li><p>使用一个<a href="https://docs.angularjs.org/api/auto/service/$provide#decorator" target="_blank" rel="external">decorator</a>，在配置的时候用<a href="https://docs.angularjs.org/api/auto/service/$provide" target="_blank" rel="external"><code>$provide</code></a>服务，当发生异常时，在<a href="https://docs.angularjs.org/api/ng/service/$exceptionHandler" target="_blank" rel="external"><code>$exceptionHandler</code></a>服务中执行自定义的处理方法。</p>
<p><em>为什么？</em>：在开发时和运行时提供了一种统一的方式来处理未被捕获的Angular异常。</p>
<p>注：另一个选项是用来覆盖service的，这个可以代替decorator，这是一个非常nice的选项，但是如果你想保持默认行为，那么推荐你扩展一个decorator。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'blocks.exception'</span>)</div><div class="line">    .config(exceptionConfig);</div><div class="line"></div><div class="line">exceptionConfig.$inject = [<span class="string">'$provide'</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">exceptionConfig</span>(<span class="params">$provide</span>) </span>&#123;</div><div class="line">    $provide.decorator(<span class="string">'$exceptionHandler'</span>, extendExceptionHandler);</div><div class="line">&#125;</div><div class="line"></div><div class="line">extendExceptionHandler.$inject = [<span class="string">'$delegate'</span>, <span class="string">'toastr'</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extendExceptionHandler</span>(<span class="params">$delegate, toastr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">exception, cause</span>) </span>&#123;</div><div class="line">        $delegate(exception, cause);</div><div class="line">        <span class="keyword">var</span> errorData = &#123;</div><div class="line">          <span class="attr">exception</span>: exception,</div><div class="line">          <span class="attr">cause</span>: cause</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Could add the error to a service's collection,</div><div class="line">         * add errors to $rootScope, log errors to remote web server,</div><div class="line">         * or log locally. Or throw hard. It is entirely up to you.</div><div class="line">         * throw exception;</div><div class="line">         */</div><div class="line">        toastr.error(exception.msg, errorData);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###异常捕获器</p>
<h6 id="Style-Y111"><a href="#Style-Y111" class="headerlink" title="[Style Y111]"></a>[Style <a href="#style-y111">Y111</a>]</h6><ul>
<li><p>创建一个暴露了一个接口的factory来捕获异常并以合适方式处理异常。</p>
<p><em>为什么？</em>：提供了一个统一的方法来捕获代码中抛出的异常。</p>
<p>注：异常捕获器对特殊异常的捕获和反应是非常友好的，例如，使用XHR从远程服务获取数据时，你想要捕获所有异常并做出不同的反应。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'blocks.exception'</span>)</div><div class="line">    .factory(<span class="string">'exception'</span>, exception);</div><div class="line"></div><div class="line">exception.$inject = [<span class="string">'logger'</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">exception</span>(<span class="params">logger</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> service = &#123;</div><div class="line">        <span class="attr">catcher</span>: catcher</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> service;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">catcher</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</div><div class="line">            logger.error(message, reason);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###路由错误</p>
<h6 id="Style-Y112"><a href="#Style-Y112" class="headerlink" title="[Style Y112]"></a>[Style <a href="#style-y112">Y112</a>]</h6><ul>
<li><p>用<a href="https://docs.angularjs.org/api/ngRoute/service/$route#$routeChangeError" target="_blank" rel="external"><code>$routeChangeError</code></a>来处理并打印出所有的路由错误信息。</p>
<p><em>为什么？</em>：提供一个统一的方式来处理所有的路由错误。</p>
<p><em>为什么？</em>：当一个路由发生错误的时候，可以给展示一个提示信息，提高用户体验。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* recommended */</span></div><div class="line"><span class="keyword">var</span> handlingRouteChangeError = <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleRoutingErrors</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Route cancellation:</div><div class="line">     * On routing error, go to the dashboard.</div><div class="line">     * Provide an exit clause if it tries to do it twice.</div><div class="line">     */</div><div class="line">    $rootScope.$on(<span class="string">'$routeChangeError'</span>,</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">event, current, previous, rejection</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (handlingRouteChangeError) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">            handlingRouteChangeError = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">var</span> destination = (current &amp;&amp; (current.title ||</div><div class="line">                current.name || current.loadedTemplateUrl)) ||</div><div class="line">                <span class="string">'unknown target'</span>;</div><div class="line">            <span class="keyword">var</span> msg = <span class="string">'Error routing to '</span> + destination + <span class="string">'. '</span> +</div><div class="line">                (rejection.msg || <span class="string">''</span>);</div><div class="line"></div><div class="line">            <span class="comment">/**</span></div><div class="line">             * Optionally log using a custom service or $log.</div><div class="line">             * (Don't forget to inject custom service)</div><div class="line">             */</div><div class="line">            logger.warning(msg, [current]);</div><div class="line"></div><div class="line">            <span class="comment">/**</span></div><div class="line">             * On routing error, go to another route/state.</div><div class="line">             */</div><div class="line">            $location.path(<span class="string">'/'</span>);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>###命名原则</p>
<h6 id="Style-Y120"><a href="#Style-Y120" class="headerlink" title="[Style Y120]"></a>[Style <a href="#style-y120">Y120</a>]</h6><ul>
<li><p>遵循以描述组件功能，然后是类型（可选）的方式来给所有的组件提供统一的命名，我推荐的做法是<code>feature.type.js</code>。大多数文件都有2个名字。</p>
<ul>
<li>文件名 (<code>avengers.controller.js</code>)</li>
<li>带有Angular的注册组件名 (<code>AvengersController</code>)</li>
</ul>
<p><em>为什么？</em>：命名约定有助于为一目了然地找到内容提供一个统一的方式，在项目中和团队中保持统一性是非常重要的，保持统一性对于跨公司来说提供了巨大的效率。</p>
<p><em>为什么？</em>：命名约定应该只为代码的检索和沟通提供方便。</p>
</li>
</ul>
<p>###功能文件命名</p>
<h6 id="Style-Y121"><a href="#Style-Y121" class="headerlink" title="[Style Y121]"></a>[Style <a href="#style-y121">Y121</a>]</h6><ul>
<li><p>遵循以“描述组件功能.类型（可选）”的方式来给所有的组件提供统一的命名，我推荐的做法是<code>feature.type.js</code>。</p>
<p><em>为什么？</em>：为快速识别组件提供了统一的方式。</p>
<p><em>为什么？</em>：为任何自动化的任务提供模式匹配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * common options</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// Controllers</span></div><div class="line">avengers.js</div><div class="line">avengers.controller.js</div><div class="line">avengersController.js</div><div class="line"></div><div class="line"><span class="comment">// Services/Factories</span></div><div class="line">logger.js</div><div class="line">logger.service.js</div><div class="line">loggerService.js</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * recommended</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// controllers</span></div><div class="line">avengers.controller.js</div><div class="line">avengers.controller.spec.js</div><div class="line"></div><div class="line"><span class="comment">// services/factories</span></div><div class="line">logger.service.js</div><div class="line">logger.service.spec.js</div><div class="line"></div><div class="line"><span class="comment">// constants</span></div><div class="line">constants.js</div><div class="line"></div><div class="line"><span class="comment">// module definition</span></div><div class="line">avengers.module.js</div><div class="line"></div><div class="line"><span class="comment">// routes</span></div><div class="line">avengers.routes.js</div><div class="line">avengers.routes.spec.js</div><div class="line"></div><div class="line"><span class="comment">// configuration</span></div><div class="line">avengers.config.js</div><div class="line"></div><div class="line"><span class="comment">// directives</span></div><div class="line">avenger-profile.directive.js</div><div class="line">avenger-profile.directive.spec.js</div></pre></td></tr></table></figure>
<p>注意：另外一种常见的约定就是不要用<code>controller</code>这个词来给controller文件命名，例如不要用<code>avengers.controller.js</code>，而是用<code>avengers.js</code>。所有其它的约定都坚持使用类型作为后缀，但是controller是组件中最为常用的类型，因此这种做法的好处貌似仅仅是节省了打字，但是仍然很容易识别。我建议你为你的团队选择一种约定，并且要保持统一性。我喜欢的命名方式是<code>avengers.controller.js</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * recommended</div><div class="line"> */</div><div class="line"><span class="comment">// Controllers</span></div><div class="line">avengers.js</div><div class="line">avengers.spec.js</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###测试文件命名</p>
<h6 id="Style-Y122"><a href="#Style-Y122" class="headerlink" title="[Style Y122]"></a>[Style <a href="#style-y122">Y122</a>]</h6><ul>
<li><p>和组件命名差不多，带上一个<code>spec</code>后缀。</p>
<p><em>为什么？</em>：为快速识别组件提供统一的方式。</p>
<p><em>为什么？</em>：为<a href="http://karma-runner.github.io/" target="_blank" rel="external">karma</a>或是其它测试运行器提供模式匹配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * recommended</div><div class="line"> */</div><div class="line">avengers.controller.spec.js</div><div class="line">logger.service.spec.js</div><div class="line">avengers.routes.spec.js</div><div class="line">avenger-profile.directive.spec.js</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###Controller命名</p>
<h6 id="Style-Y123"><a href="#Style-Y123" class="headerlink" title="[Style Y123]"></a>[Style <a href="#style-y123">Y123</a>]</h6><ul>
<li><p>为所有controller提供统一的名称，先特征后名字，鉴于controller是构造函数，所以要采用UpperCamelCase（每个单词首字母大写）的方式。</p>
<p><em>为什么？</em>：为快速识别和引用controller提供统一的方式。</p>
<p><em>为什么？</em>：UpperCamelCase是常规的识别一个可以用构造函数来实例化的对象的方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * recommended</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// avengers.controller.js</span></div><div class="line">angular</div><div class="line">    .module</div><div class="line">    .controller(<span class="string">'HeroAvengersController'</span>, HeroAvengersController);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">HeroAvengers</span>(<span class="params"></span>)</span>&#123; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###Controller命名后缀</p>
<h6 id="Style-Y124"><a href="#Style-Y124" class="headerlink" title="[Style Y124]"></a>[Style <a href="#style-y124">Y124</a>]</h6><ul>
<li><p>使用<code>Controller</code>。</p>
<p><em>为什么？</em>：<code>Controller</code>使用更广泛、更明确、更具有描述性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * recommended</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// avengers.controller.js</span></div><div class="line">angular</div><div class="line">    .module</div><div class="line">    .controller(<span class="string">'AvengersController'</span>, AvengersController);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">AvengersController</span>(<span class="params"></span>)</span>&#123; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###Factory命名</p>
<h6 id="Style-Y125"><a href="#Style-Y125" class="headerlink" title="[Style Y125]"></a>[Style <a href="#style-y125">Y125</a>]</h6><ul>
<li><p>一样要统一，对service和factory使用camel-casing（驼峰式，第一个单词首字母小写，后面单词首字母大写）方式。避免使用<code>$</code>前缀。</p>
<p><em>为什么？</em>：可以快速识别和引用factory。</p>
<p><em>为什么？</em>：避免与内部使用<code>$</code>前缀的服务发生冲突。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * recommended</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// logger.service.js</span></div><div class="line">angular</div><div class="line">    .module</div><div class="line">    .factory(<span class="string">'logger'</span>, logger);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params"></span>)</span>&#123; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###Directive组件命名</p>
<h6 id="Style-Y126"><a href="#Style-Y126" class="headerlink" title="[Style Y126]"></a>[Style <a href="#style-y126">Y126</a>]</h6><ul>
<li><p>使用camel-case方式，用一个短的前缀来描述directive在哪个区域使用（一些例子中是使用公司前缀或是项目前缀）。</p>
<p><em>为什么？</em>：可以快速识别和引用controller。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * recommended</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// avenger-profile.directive.js</span></div><div class="line">angular</div><div class="line">    .module</div><div class="line">    .directive(<span class="string">'xxAvengerProfile'</span>, xxAvengerProfile);</div><div class="line"></div><div class="line"><span class="comment">// usage is &lt;xx-avenger-profile&gt; &lt;/xx-avenger-profile&gt;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxAvengerProfile</span>(<span class="params"></span>)</span>&#123; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###模块</p>
<h6 id="Style-Y127"><a href="#Style-Y127" class="headerlink" title="[Style Y127]"></a>[Style <a href="#style-y127">Y127</a>]</h6><ul>
<li><p>当有很多的模块时，主模块文件命名成<code>app.module.js</code>，其它依赖模块以它们代表的内容来命名。例如，一个管理员模块命名成<code>admin.module.js</code>，它们各自的注册模块名字就是<code>app</code>和<code>admin</code>。</p>
<p><em>为什么？</em>：给多模块的应用提供统一的方式，这也是为了扩展大型应用。</p>
<p><em>为什么？</em>：对使用任务来自动化加载所有模块的定义（先）和其它所有的angular文件（后）提供了一种简单的方式。</p>
</li>
</ul>
<p>###配置</p>
<h6 id="Style-Y128"><a href="#Style-Y128" class="headerlink" title="[Style Y128]"></a>[Style <a href="#style-y128">Y128</a>]</h6><ul>
<li><p>把一个模块的配置独立到它自己的文件中，以这个模块为基础命名。<code>app</code>模块的配置文件命名成<code>app.config.js</code>（或是<code>config.js</code>），<code>admin.module.js</code>的配置文件命名成<code>admin.config.js</code>。</p>
<p><em>为什么？</em>：把配置从模块定义、组件和活跃代码中分离出来。</p>
<p><em>为什么？</em>：为设置模块的配置提供了一个可识别的地方。</p>
</li>
</ul>
<p>###路由</p>
<h6 id="Style-Y129"><a href="#Style-Y129" class="headerlink" title="[Style Y129]"></a>[Style <a href="#style-y129">Y129</a>]</h6><ul>
<li>把路由的配置独立到单独的文件。主模块的路由可能是<code>app.route.js</code>，<code>admin</code>模块的路由可能是<code>admin.route.js</code>。即使是在很小的应用中，我也喜欢把路由的配置从其余的配置中分离出来。</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="应用程序结构的LIFT准则"><a href="#应用程序结构的LIFT准则" class="headerlink" title="应用程序结构的LIFT准则"></a>应用程序结构的LIFT准则</h2><p>###LIFT</p>
<h6 id="Style-Y140"><a href="#Style-Y140" class="headerlink" title="[Style Y140]"></a>[Style <a href="#style-y140">Y140</a>]</h6><ul>
<li><p>构建一个可以快速定位（<code>L</code>ocate）代码、一目了然地识别（<code>I</code>dentify）代码、拥有一个平直（<code>F</code>lattest）的结构、尽量（<code>T</code>ry）坚持DRY（Don’t Repeat Yourself）的应用程序，其结构应该遵循这4项基本准则。</p>
<p><em>为什么是LIFT?</em>: 提供一个有良好扩展的结构，并且是模块化的，更快的找到代码能够帮助开发者提高效率。另一种检查你的app结构的方法就是问你自己：你能多块地打开涉及到一个功能的所有相关文件并开始工作？</p>
<p>当我发现我的的代码结构很恶心的时候，我就重新看看LIFT准则。</p>
<ol>
<li>轻松定位代码（L）</li>
<li>一眼识别代码（I）</li>
<li>平直的代码结构（层级不要太多）（F）</li>
<li>尽量保持不要写重复代码（T）</li>
</ol>
</li>
</ul>
<p>###Locate</p>
<h6 id="Style-Y141"><a href="#Style-Y141" class="headerlink" title="[Style Y141]"></a>[Style <a href="#style-y141">Y141</a>]</h6><ul>
<li><p>更直观、更简单、更快捷地定位代码</p>
<p><em>为什么？</em>：我发现这对于一个项目是非常重要的，如果一个团队不能快速找到他们需要工作的文件，这将不能使团队足够高效地工作，那么这个代码结构就得改变。你可能不知道文件名或是相关的文件放在了哪里，那么就把他们放在最直观的地方，放在一起会节省大量的时间。下面是一个参考目录结构。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/bower_components</div><div class="line">/client</div><div class="line">  /app</div><div class="line">    /avengers</div><div class="line">    /blocks</div><div class="line">      /exception</div><div class="line">      /logger</div><div class="line">    /core</div><div class="line">    /dashboard</div><div class="line">    /data</div><div class="line">    /layout</div><div class="line">    /widgets</div><div class="line">  /<span class="attribute">content</span></div><div class="line">  index<span class="selector-class">.html</span></div><div class="line"><span class="selector-class">.bower</span><span class="selector-class">.json</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###Identify</p>
<h6 id="Style-Y142"><a href="#Style-Y142" class="headerlink" title="[Style Y142]"></a>[Style <a href="#style-y142">Y142</a>]</h6><ul>
<li><p>当你看到一个文件时你应该能够立即知道它包含了什么、代表了什么。</p>
<p><em>为什么？</em>：你花费更少的时间来了解代码代表了什么，并且变得更加高效。如果这意味着你需要更长的名字，那么就这么干吧。文件名一定要具有描述性，保持和文件内容互为一体。避免文件中有多个controller，多个service，甚至是混合的。</p>
</li>
</ul>
<p>###Flat</p>
<h6 id="Style-Y143"><a href="#Style-Y143" class="headerlink" title="[Style Y143]"></a>[Style <a href="#style-y143">Y143</a>]</h6><ul>
<li><p>尽可能长时间地保持一个平直的文件夹结构，如果你的文件夹层级超过7+，那么就开始考虑分离。</p>
<p><em>为什么？</em>：没有谁想在一个7级文件夹中寻找一个文件，你可以考虑一下网页导航栏有那么多层。文件夹结构没有硬性规则，但是当一个文件夹下的文件有7-10个，那么就是时候创建子文件夹了，文件夹的层级一定要把握好。一直使用一个平直的结构，直到确实有必要（帮助其它的LIFT）创建一个新的文件夹。</p>
</li>
</ul>
<p>###T-DRY（尽量坚持DRY）</p>
<h6 id="Style-Y144"><a href="#Style-Y144" class="headerlink" title="[Style Y144]"></a>[Style <a href="#style-y144">Y144</a>]</h6><ul>
<li><p>坚持DRY，但是不要疯了一样的做却牺牲了可读性。</p>
<p><em>为什么？</em>：保持DRY很重要，但是如果牺牲了其它LIFT，那么它就没那么重要了，这就是为什么说尽量坚持DRY。</p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="应用程序结构"><a href="#应用程序结构" class="headerlink" title="应用程序结构"></a>应用程序结构</h2><p>###总规范</p>
<h6 id="Style-Y150"><a href="#Style-Y150" class="headerlink" title="[Style Y150]"></a>[Style <a href="#style-y150">Y150</a>]</h6><ul>
<li><p>有实施的短期看法和长远的目标，换句话说，从小处入手，但是要记住app的走向。app的所有代码都在一个叫做<code>app</code>的根目录下，所有的内容都遵循一个功能一个文件，每一个controller、service、module、view都是独立的文件。第三方脚本存放在另外的根文件夹中（<code>bower_components</code>、<code>scripts</code>、<code>lib</code>）。</p>
<p>注：了解实例结构的具体信息看<a href="http://www.johnpapa.net/angular-app-structuring-guidelines/" target="_blank" rel="external">Angular应用结构</a>。</p>
</li>
</ul>
<p>###Layout</p>
<h6 id="Style-Y151"><a href="#Style-Y151" class="headerlink" title="[Style Y151]"></a>[Style <a href="#style-y151">Y151</a>]</h6><ul>
<li><p>把定义应用程序总体布局的组件放到<code>layout</code>文件夹中，如导航、内容区等等。</p>
<p><em>为什么？</em>：复用。</p>
</li>
</ul>
<p>###按功能划分文件夹结构</p>
<h6 id="Style-Y152"><a href="#Style-Y152" class="headerlink" title="[Style Y152]"></a>[Style <a href="#style-y152">Y152</a>]</h6><ul>
<li><p>按照它们代表的功能来给创建的文件夹命名，当文件夹包含的文件超过7个（根据需要自行调整数量限制），就考虑新建文件夹。</p>
<p><em>为什么？</em>：开发者可以快速定位代码、快速识别文件代表的意思，结构尽可能平直，没有重复，没有多余名字。</p>
<p><em>为什么？</em>：LIFT规范都包括在内。</p>
<p><em>为什么？</em>：通过组织内容和让它们保持和LIFT指导准则一致，帮助降低应用程序变得混乱的可能性。</p>
<p><em>为什么？</em>：超过10个文件时，在一个一致性的文件夹中很容易定位，但是在一个平直的文件夹结构中确实很难定位。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * recommended</div><div class="line"> */</div><div class="line"></div><div class="line">app/</div><div class="line">    app.module.js</div><div class="line">    app.config.js</div><div class="line">    directives/</div><div class="line">        calendar.directive.js</div><div class="line">        calendar.directive.html</div><div class="line">        user-profile.directive.js</div><div class="line">        user-profile.directive.html</div><div class="line">    services/</div><div class="line">        dataservice.js</div><div class="line">        localstorage.js</div><div class="line">        logger.js</div><div class="line">        spinner.js</div><div class="line">    layout/</div><div class="line">        shell.html</div><div class="line">        shell.controller.js</div><div class="line">        topnav.html</div><div class="line">        topnav.controller.js</div><div class="line">    people/</div><div class="line">        attendees.html</div><div class="line">        attendees.controller.js</div><div class="line">        people.routes.js</div><div class="line">        speakers.html</div><div class="line">        speakers.controller.js</div><div class="line">        speaker-detail.html</div><div class="line">        speaker-detail.controller.js</div><div class="line">    sessions/</div><div class="line">        sessions.html</div><div class="line">        sessions.controller.js</div><div class="line">        sessions.routes.js</div><div class="line">        session-detail.html</div><div class="line">        session-detail.controller.js</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/assets/modularity-2.png" alt="实例App结构"></p>
<p>注意：不要使用按类型划分文件夹结构，因为如果这样的话，当做一个功能时，需要在多个文件夹中来回切换。当应用程序有5个、10个，甚至是25个以上的view、controller（或其他feature）时，这种方式将迅速变得不实用，这就使得它定位文件比按功能分文件夹的方式要困难的多。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * avoid</div><div class="line"> * Alternative folders-by-type.</div><div class="line"> * I recommend "folders-by-feature", instead.</div><div class="line"> */</div><div class="line"></div><div class="line">app/</div><div class="line">    app.module.js</div><div class="line">    app.config.js</div><div class="line">    app.routes.js</div><div class="line">    directives.js</div><div class="line">    controllers/</div><div class="line">        attendees.js</div><div class="line">        session-detail.js</div><div class="line">        sessions.js</div><div class="line">        shell.js</div><div class="line">        speakers.js</div><div class="line">        speaker-detail.js</div><div class="line">        topnav.js</div><div class="line">    directives/</div><div class="line">        calendar.directive.js</div><div class="line">        calendar.directive.html</div><div class="line">        user-profile.directive.js</div><div class="line">        user-profile.directive.html</div><div class="line">    services/</div><div class="line">        dataservice.js</div><div class="line">        localstorage.js</div><div class="line">        logger.js</div><div class="line">        spinner.js</div><div class="line">    views/</div><div class="line">        attendees.html</div><div class="line">        session-detail.html</div><div class="line">        sessions.html</div><div class="line">        shell.html</div><div class="line">        speakers.html</div><div class="line">        speaker-detail.html</div><div class="line">        topnav.html</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>###许多小的、独立的模块</p>
<h6 id="Style-Y160"><a href="#Style-Y160" class="headerlink" title="[Style Y160]"></a>[Style <a href="#style-y160">Y160</a>]</h6><ul>
<li><p>创建只封装一个职责的小模块。</p>
<p><em>为什么？</em>：模块化的应用程序很容易添加新的功能。</p>
</li>
</ul>
<p>###创建一个App Module</p>
<h6 id="Style-Y161"><a href="#Style-Y161" class="headerlink" title="[Style Y161]"></a>[Style <a href="#style-y161">Y161</a>]</h6><ul>
<li><p>创建一个应用程序的根模块，它的职责是把应用程序中所有的模块和功能都放到一起。</p>
<p><em>为什么？</em>：Angular鼓励模块化和分离模式。创建根模块的作用是把其它模块都绑定到一起，这为增加或是删除一个模块提供了非常简单的方法。</p>
<p><em>为什么？</em>：应用程序模块变成了一个描述哪些模块有助于定义应用程序的清单。</p>
</li>
</ul>
<p>###保持App Module的精简</p>
<h6 id="Style-Y162"><a href="#Style-Y162" class="headerlink" title="[Style Y162]"></a>[Style <a href="#style-y162">Y162</a>]</h6><ul>
<li><p>app module中只放聚合其它模块的逻辑，具体功能在它们自己的模块中实现。</p>
<p><em>为什么？</em>：添加额外的代码（获取数据、展现视图、其它和聚合模块无关的代码）到app module中使app module变得很糟糕，也使得模块难以重用和关闭。</p>
</li>
</ul>
<p>###功能区域就是模块</p>
<h6 id="Style-Y163"><a href="#Style-Y163" class="headerlink" title="[Style Y163]"></a>[Style <a href="#style-y163">Y163</a>]</h6><ul>
<li><p>创建代表功能区的模块，例如布局、可重用、共享服务、仪表盘和app的特殊功能（例如客户、管理、销售）。</p>
<p><em>为什么？</em>：自包含的模块可以无缝地被添加到应用程序中。</p>
<p><em>为什么？</em>：项目进行功能迭代时，可以专注于功能，在开发完成启用它们即可。</p>
<p><em>为什么？</em>：把功能拆分成不同模块方便测试。</p>
</li>
</ul>
<p>###可重用的块就是模块</p>
<h6 id="Style-Y164"><a href="#Style-Y164" class="headerlink" title="[Style Y164]"></a>[Style <a href="#style-y164">Y164</a>]</h6><ul>
<li><p>为通用service创建代表可重用的应用程序块的模块，例如异常处理、日志记录、诊断、安全性和本地数据储藏等模块。</p>
<p><em>为什么？</em>：这些类型的功能在很多应用程序中都需要用到，所以把它们分离到自己的模块中，它们可以变成通用的应用程序，也能被跨应用地进行重用。</p>
</li>
</ul>
<p>###模块依赖</p>
<h6 id="Style-Y165"><a href="#Style-Y165" class="headerlink" title="[Style Y165]"></a>[Style <a href="#style-y165">Y165</a>]</h6><ul>
<li><p>应用程序根模块依赖于应用程序特定的功能模块、共享的和可复用的模块。</p>
<p><img src="https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/assets/modularity-1.png" alt="模块化和依赖"></p>
<p><em>为什么？</em>：主程序模块包含一个能快速识别应用程序功能的清单。</p>
<p><em>为什么？</em>：每个功能区都包含一个它依赖了哪些模块的列表，因此其它应用可以把它当作一个依赖引入进来。</p>
<p><em>为什么？</em>：程序内部的功能，如共享数据的服务变得容易定位，并且从<code>app.core</code>中共享。</p>
<p>注意：这是保持一致性的一种策略，这里有很多不错的选择，选择一种统一的，遵循Angular依赖规则，这将易于维护和扩展。</p>
<blockquote>
<p>我的不同项目间的结构略有不同，但是它们都遵循了这些结构和模块化的准则,具体的实施方案会根据功能和团队发生变化。也就是说，不要在一棵树上吊死，但是心中一定要记得保持一致性、可维护性和效率。</p>
<p>小项目中，你可以直接把所有依赖都放到app module中，这对于小项目来说比较容易维护，但是想在此项目外重用模块就比较难了。</p>
</blockquote>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="启动逻辑"><a href="#启动逻辑" class="headerlink" title="启动逻辑"></a>启动逻辑</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h6 id="Style-Y170"><a href="#Style-Y170" class="headerlink" title="[Style Y170]"></a>[Style <a href="#style-y170">Y170</a>]</h6><ul>
<li><p>必须在angular应用启动前进行配置才能把代码注入到<a href="https://docs.angularjs.org/guide/module#module-loading-dependencies" target="_blank" rel="external">模块配置</a>，理想的一些case应该包括providers和constants。</p>
<p><em>为什么？</em>：这使得在更少的地方进行配置变得容易。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .config(configure);</div><div class="line"></div><div class="line">configure.$inject =</div><div class="line">    [<span class="string">'routerHelperProvider'</span>, <span class="string">'exceptionHandlerProvider'</span>, <span class="string">'toastr'</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">configure</span> (<span class="params">routerHelperProvider, exceptionHandlerProvider, toastr</span>) </span>&#123;</div><div class="line">    exceptionHandlerProvider.configure(config.appErrorPrefix);</div><div class="line">    configureStateHelper();</div><div class="line"></div><div class="line">    toastr.options.timeOut = <span class="number">4000</span>;</div><div class="line">    toastr.options.positionClass = <span class="string">'toast-bottom-right'</span>;</div><div class="line"></div><div class="line">    <span class="comment">////////////////</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">configureStateHelper</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        routerHelperProvider.configure(&#123;</div><div class="line">            <span class="attr">docTitle</span>: <span class="string">'NG-Modular: '</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="运行代码块"><a href="#运行代码块" class="headerlink" title="运行代码块"></a>运行代码块</h3><h6 id="Style-Y171"><a href="#Style-Y171" class="headerlink" title="[Style Y171]"></a>[Style <a href="#style-y171">Y171</a>]</h6><ul>
<li><p>任何在应用程序启动时需要运行的代码都应该在factory中声明，通过一个function暴露出来，然后注入到<a href="https://docs.angularjs.org/guide/module#module-loading-dependencies" target="_blank" rel="external">运行代码块</a>中。</p>
<p><em>为什么？</em>：直接在运行代码块处写代码将会使得测试变得很困难，相反，如果放到facotry则会使的抽象和模拟变得很简单。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">angular</div><div class="line">    .module(<span class="string">'app'</span>)</div><div class="line">    .run(runBlock);</div><div class="line"></div><div class="line">runBlock.$inject = [<span class="string">'authenticator'</span>, <span class="string">'translator'</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">runBlock</span>(<span class="params">authenticator, translator</span>) </span>&#123;</div><div class="line">    authenticator.initialize();</div><div class="line">    translator.initialize();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<p>##Angular $包装服务</p>
<p>###$document和$window</p>
<h6 id="Style-Y180"><a href="#Style-Y180" class="headerlink" title="[Style Y180]"></a>[Style <a href="#style-y180">Y180</a>]</h6><ul>
<li><p>用<a href="https://docs.angularjs.org/api/ng/service/$document" target="_blank" rel="external"><code>$document</code></a>和<a href="https://docs.angularjs.org/api/ng/service/$window" target="_blank" rel="external"><code>$window</code></a>代替<code>document</code>和<code>window</code>。</p>
<p><em>为什么？</em>：使用内部包装服务将更容易测试，也避免了你自己去模拟document和window。</p>
</li>
</ul>
<p>###$timeout和$interval</p>
<h6 id="Style-Y181"><a href="#Style-Y181" class="headerlink" title="[Style Y181]"></a>[Style <a href="#style-y181">Y181</a>]</h6><ul>
<li><p>用<a href="https://docs.angularjs.org/api/ng/service/$timeout" target="_blank" rel="external"><code>$timeout</code></a>和<a href="https://docs.angularjs.org/api/ng/service/$interval" target="_blank" rel="external"><code>$interval</code></a>代替<code>setTimeout</code>和<code>setInterval</code> 。</p>
<p><em>为什么？</em>：易于测试，处理Angular消化周期从而保证数据的同步绑定。</p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>单元测试有助于保持代码的清晰，因此我加入一些关于单元测试的基础和获取更多信息的链接。</p>
<p>###用故事来编写测试</p>
<h6 id="Style-Y190"><a href="#Style-Y190" class="headerlink" title="[Style Y190]"></a>[Style <a href="#style-y190">Y190</a>]</h6><ul>
<li><p>给每一个故事都写一组测试，先创建一个空的测试，然后用你给这个故事写的代码来填充它。</p>
<p><em>为什么？</em>：编写测试有助于明确规定你的故事要做什么、不做什么以及你如何判断是否成功。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'should have Avengers controller'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//TODO</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">it(<span class="string">'should find 1 Avenger when filtered by name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//TODO</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">it(<span class="string">'should have 10 Avengers'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//TODO (mock data?)</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">it(<span class="string">'should return Avengers via XHR'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//TODO ($httpBackend?)</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// and so on</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###测试库</p>
<h6 id="Style-Y191"><a href="#Style-Y191" class="headerlink" title="[Style Y191]"></a>[Style <a href="#style-y191">Y191</a>]</h6><ul>
<li><p>用<a href="http://jasmine.github.io/" target="_blank" rel="external">Jasmine</a>或者<a href="http://mochajs.org" target="_blank" rel="external">Mocha</a>进行单元测试。</p>
<p><em>为什么？</em>：Angular社区中Jasmine和Mocha都用的很广，两者都很稳定，可维护性好，提供强大的测试功能。</p>
<p>注意：使用Mocha时你可以考虑选择一个类似<a href="http://chaijs.com" target="_blank" rel="external">Chai</a>的提示库。</p>
</li>
</ul>
<p>###测试运行器</p>
<h6 id="Style-Y192"><a href="#Style-Y192" class="headerlink" title="[Style Y192]"></a>[Style <a href="#style-y192">Y192</a>]</h6><ul>
<li><p><a href="http://karma-runner.github.io" target="_blank" rel="external">Karma</a>。</p>
<p><em>为什么？</em>：Karma容易配置，代码发生修改时自动运行。</p>
<p><em>为什么？</em>：可以通过自身或是Grunt、Gulp方便地钩入持续集成的进程。</p>
<p><em>为什么？</em>：一些IDE已经开始集成Karma了，如<a href="http://www.jetbrains.com/webstorm/" target="_blank" rel="external">WebStorm</a>和<a href="http://visualstudiogallery.msdn.microsoft.com/02f47876-0e7a-4f6c-93f8-1af5d5189225" target="_blank" rel="external">Visual Studio</a>。</p>
<p><em>为什么？</em>：Karma可以很好的和自动化任务工具如<a href="http://www.gruntjs.com" target="_blank" rel="external">Grunt</a>（带有<a href="https://github.com/karma-runner/grunt-karma" target="_blank" rel="external">grunt-karma</a>）和<a href="http://www.gulpjs.com" target="_blank" rel="external">Gulp</a>（带有<a href="https://github.com/lazd/gulp-karma" target="_blank" rel="external">gulp-karma</a>）合作。</p>
</li>
</ul>
<p>###Stubbing和Spying</p>
<h6 id="Style-Y193"><a href="#Style-Y193" class="headerlink" title="[Style Y193]"></a>[Style <a href="#style-y193">Y193</a>]</h6><ul>
<li><p>用<a href="http://sinonjs.org/" target="_blank" rel="external">Sinon</a>。</p>
<p><em>为什么？</em>：Sinon可以和Jasmine和Mocha合作良好，并且可以扩展它们提供的stubbing和spying。</p>
<p><em>为什么？</em>：如果你想试试Jasmine和Mocha，用Sinon在它们中间来回切换是很方便的。我更喜欢Mocha。</p>
<p><em>为什么？</em>：测试失败Sinon有一个具有描述性的信息。</p>
</li>
</ul>
<p>###Headless Browser</p>
<h6 id="Style-Y194"><a href="#Style-Y194" class="headerlink" title="[Style Y194]"></a>[Style <a href="#style-y194">Y194</a>]</h6><ul>
<li><p>在服务器上使用<a href="http://phantomjs.org/" target="_blank" rel="external">PhantomJS</a>来运行你的测试。</p>
<p><em>为什么？</em>：PhantomJS是一个headless browser，无需一个“可视”的浏览器来帮助你运行测试。因此你的服务器上不需要安装Chrome、Safari、IE或是其它浏览器。</p>
<p>注意：你仍然需要在你的环境下测试所有浏览器，来满足用户的需求。</p>
</li>
</ul>
<p>###代码分析</p>
<h6 id="Style-Y195"><a href="#Style-Y195" class="headerlink" title="[Style Y195]"></a>[Style <a href="#style-y195">Y195</a>]</h6><p>  -在你的测试上运行JSHint。</p>
<pre><code>*为什么？*：测试也是代码，JSHint能够帮你识别代码中可能导致测试无法正常工作的的质量问题。
</code></pre><p>###对测试降低全局JSHint规则</p>
<h6 id="Style-Y196"><a href="#Style-Y196" class="headerlink" title="[Style Y196"></a>[Style <a href="#style-y196">Y196</a></h6><ul>
<li><p>对你的测试代码放宽规则，这样可以允许使用<code>describe</code>和<code>expect</code>等类似通用的全局方法。对表达式放宽规则，就行Mocha一样。</p>
<p><em>为什么？</em>：测试也是代码，因此要和对待其它生产代码一样重视测试代码的质量。然而，测试框架中允许使用全局变量，例如，在你的测试单例中允许使用this。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* jshint -W117, -W030 */</span></div></pre></td></tr></table></figure>
<p>或者你也可以把下面的这几行加入到你的JSHint Options文件中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"jasmine"</span>: <span class="literal">true</span>,</div><div class="line"><span class="string">"mocha"</span>: <span class="literal">true</span>,</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/assets/testing-tools.png" alt="测试工具"></p>
</li>
</ul>
<h3 id="组织测试"><a href="#组织测试" class="headerlink" title="组织测试"></a>组织测试</h3><h6 id="Style-Y197"><a href="#Style-Y197" class="headerlink" title="[Style Y197]"></a>[Style <a href="#style-y197">Y197</a>]</h6><ul>
<li><p>将单元测试文件(specs)同被测试客户端代码并列放在同一个文件夹下，将多个组件共用的测试文件以及服务器集成测试的文件放到一个单独的<code>tests</code>文件夹下。</p>
<p><em>为什么？</em>：单元测试和源代码中的每一个组件和文件都有直接的相关性。</p>
<p><em>为什么？</em>：这样它就会一直在你的视野中，很容易让它们保持在最新状态。编码的时候无论你做TDD还是在开发过程中测试，或者开发完成后测试，这些单测都不会脱离你的视线和脑海，这样就更容易维护，也有助于保持代码的覆盖率。</p>
<p><em>为什么？</em>：更新源代码的时候可以更简单地在同一时间更新测试代码。</p>
<p><em>为什么？</em>：方便源码阅读者了解组件如何使用，也便于发现其中的局限性。</p>
<p><em>为什么？</em>：方便找。</p>
<p><em>为什么？</em>：方便使用grunt或者gulp。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/src/client/app/customers/customer-detail<span class="selector-class">.controller</span><span class="selector-class">.js</span></div><div class="line">                         /customer-detail<span class="selector-class">.controller</span><span class="selector-class">.spec</span><span class="selector-class">.js</span></div><div class="line">                         /customers<span class="selector-class">.controller</span><span class="selector-class">.js</span></div><div class="line">                         /customers<span class="selector-class">.controller</span><span class="selector-class">.spec</span><span class="selector-class">.js</span></div><div class="line">                         /customers<span class="selector-class">.module</span><span class="selector-class">.js</span></div><div class="line">                         /customers<span class="selector-class">.route</span><span class="selector-class">.js</span></div><div class="line">                         /customers<span class="selector-class">.route</span><span class="selector-class">.spec</span><span class="selector-class">.js</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>###用法</p>
<h6 id="Style-Y210"><a href="#Style-Y210" class="headerlink" title="[Style Y210]"></a>[Style <a href="#style-y210">Y210</a>]</h6><ul>
<li><p>在页面过渡时使用<a href="https://docs.angularjs.org/guide/animations" target="_blank" rel="external">Angular动画</a>，包括<a href="https://docs.angularjs.org/api/ngAnimate" target="_blank" rel="external">ngAnimate模块</a>。三个关键点是细微、平滑、无缝。</p>
<p><em>为什么？</em>：使用得当的话能够提高用户体验。</p>
<p><em>为什么？</em>：当视图过渡时，微小的动画可以提高感知性。</p>
</li>
</ul>
<p>###Sub Second</p>
<h6 id="Style-Y211"><a href="#Style-Y211" class="headerlink" title="[Style Y211]"></a>[Style <a href="#style-y211">Y211</a>]</h6><ul>
<li><p>使用短持续性的动画，我一般使用300ms，然后调整到合适的时间。</p>
<p><em>为什么？</em>：长时间的动画容易造成用户认为程序性能太差的影响。</p>
</li>
</ul>
<p>###animate.css</p>
<h6 id="Style-Y212"><a href="#Style-Y212" class="headerlink" title="[Style Y212]"></a>[Style <a href="#style-y212">Y212</a>]</h6><ul>
<li><p>传统动画使用<a href="http://daneden.github.io/animate.css/" target="_blank" rel="external">animate.css</a>。</p>
<p><em>为什么？</em>：css提供的动画是快速的、流畅的、易于添加到应用程序中的。</p>
<p><em>为什么？</em>：为动画提供一致性。</p>
<p><em>为什么？</em>：animate.css被广泛使用和测试。</p>
<p>注意：参阅<a href="http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html" target="_blank" rel="external">Matias Niemelä的关于Angular动画的文章</a></p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="jsDoc"><a href="#jsDoc" class="headerlink" title="jsDoc"></a>jsDoc</h3><h6 id="Style-Y220"><a href="#Style-Y220" class="headerlink" title="[Style Y220]"></a>[Style <a href="#style-y220">Y220</a>]</h6><ul>
<li><p>如果你准备做一个文档，那么就使用<a href="http://usejsdoc.org/" target="_blank" rel="external"><code>jsDoc</code></a>的语法来记录函数名、描述、参数和返回值。使用<code>@namespace</code>和<code>@memberOf</code>来匹配应用程序结构。</p>
<p><em>为什么？</em>：你可以从代码中生成（重新生成）文档，而不必从头开始编写文档。</p>
<p><em>为什么？</em>：使用业内通用工具保持了统一性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Logger Factory</div><div class="line"> * @namespace Factories</div><div class="line"> */</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  angular</div><div class="line">      .module(<span class="string">'app'</span>)</div><div class="line">      .factory(<span class="string">'logger'</span>, logger);</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * @namespace Logger</div><div class="line">   * @desc Application wide logger</div><div class="line">   * @memberOf Factories</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">logger</span> (<span class="params">$log</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> service = &#123;</div><div class="line">          <span class="attr">logError</span>: logError</div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">return</span> service;</div><div class="line"></div><div class="line">      <span class="comment">////////////</span></div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * @name logError</div><div class="line">       * @desc Logs errors</div><div class="line">       * @param &#123;String&#125; msg Message to log</div><div class="line">       * @returns &#123;String&#125;</div><div class="line">       * @memberOf Factories.Logger</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">logError</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> loggedMsg = <span class="string">'Error: '</span> + msg;</div><div class="line">          $log.error(loggedMsg);</div><div class="line">          <span class="keyword">return</span> loggedMsg;</div><div class="line">      &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="JS-Hint"><a href="#JS-Hint" class="headerlink" title="JS Hint"></a>JS Hint</h2><p>###使用一个Options文件</p>
<h6 id="Style-Y230"><a href="#Style-Y230" class="headerlink" title="[Style Y230]"></a>[Style <a href="#style-y230">Y230</a>]</h6><ul>
<li><p>用JS Hint来分析你的JavaScript代码，确保你自定义了JS Hint选项文件并且包含在源控制里。详细信息：<a href="http://www.jshint.com/docs/" target="_blank" rel="external">JS Hint文档</a>。</p>
<p><em>为什么？</em>：提交代码到原版本之前先发出警告。</p>
<p><em>为什么？</em>：统一性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"bitwise"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"camelcase"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"curly"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"eqeqeq"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"es3"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"forin"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"freeze"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"immed"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"indent"</span>: <span class="number">4</span>,</div><div class="line">    <span class="string">"latedef"</span>: <span class="string">"nofunc"</span>,</div><div class="line">    <span class="string">"newcap"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"noarg"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"noempty"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"nonbsp"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"nonew"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"plusplus"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"quotmark"</span>: <span class="string">"single"</span>,</div><div class="line">    <span class="string">"undef"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"unused"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"strict"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"maxparams"</span>: <span class="number">10</span>,</div><div class="line">    <span class="string">"maxdepth"</span>: <span class="number">5</span>,</div><div class="line">    <span class="string">"maxstatements"</span>: <span class="number">40</span>,</div><div class="line">    <span class="string">"maxcomplexity"</span>: <span class="number">8</span>,</div><div class="line">    <span class="string">"maxlen"</span>: <span class="number">120</span>,</div><div class="line"></div><div class="line">    <span class="string">"asi"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"boss"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"debug"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"eqnull"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"esnext"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"evil"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"expr"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"funcscope"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"globalstrict"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"iterator"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"lastsemic"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"laxbreak"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"laxcomma"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"loopfunc"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"maxerr"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"moz"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"multistr"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"notypeof"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"proto"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"scripturl"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"shadow"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"sub"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"supernew"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"validthis"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"noyield"</span>: <span class="literal">false</span>,</div><div class="line"></div><div class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"node"</span>: <span class="literal">true</span>,</div><div class="line"></div><div class="line">    <span class="string">"globals"</span>: &#123;</div><div class="line">        <span class="string">"angular"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"$"</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="JSCS"><a href="#JSCS" class="headerlink" title="JSCS"></a>JSCS</h2><h3 id="用一个Options文件"><a href="#用一个Options文件" class="headerlink" title="用一个Options文件"></a>用一个Options文件</h3><h6 id="Style-Y235"><a href="#Style-Y235" class="headerlink" title="[Style Y235]"></a>[Style <a href="#style-y235">Y235</a>]</h6><ul>
<li><p>使用JSCS检查代码规范，确保你的代码控制中有定制的JSCS options文件，在这里<a href="http://www.jscs.info" target="_blank" rel="external">JSCS docs</a>查看更多信息。</p>
<p><em>为什么？</em>：提交代码前第一时间提供一个预警。</p>
<p><em>为什么？</em>：保持团队的一致性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"excludeFiles"</span>: [<span class="string">"node_modules/**"</span>, <span class="string">"bower_components/**"</span>],</div><div class="line"></div><div class="line">    <span class="string">"requireCurlyBraces"</span>: [</div><div class="line">        <span class="string">"if"</span>,</div><div class="line">        <span class="string">"else"</span>,</div><div class="line">        <span class="string">"for"</span>,</div><div class="line">        <span class="string">"while"</span>,</div><div class="line">        <span class="string">"do"</span>,</div><div class="line">        <span class="string">"try"</span>,</div><div class="line">        <span class="string">"catch"</span></div><div class="line">    ],</div><div class="line">    <span class="string">"requireOperatorBeforeLineBreak"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"requireCamelCaseOrUpperCaseIdentifiers"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"maximumLineLength"</span>: &#123;</div><div class="line">      <span class="string">"value"</span>: <span class="number">100</span>,</div><div class="line">      <span class="string">"allowComments"</span>: <span class="literal">true</span>,</div><div class="line">      <span class="string">"allowRegex"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"validateIndentation"</span>: <span class="number">4</span>,</div><div class="line">    <span class="string">"validateQuoteMarks"</span>: <span class="string">"'"</span>,</div><div class="line"></div><div class="line">    <span class="string">"disallowMultipleLineStrings"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"disallowMixedSpacesAndTabs"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"disallowTrailingWhitespace"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"disallowSpaceAfterPrefixUnaryOperators"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"disallowMultipleVarDecl"</span>: <span class="literal">null</span>,</div><div class="line"></div><div class="line">    <span class="string">"requireSpaceAfterKeywords"</span>: [</div><div class="line">      <span class="string">"if"</span>,</div><div class="line">      <span class="string">"else"</span>,</div><div class="line">      <span class="string">"for"</span>,</div><div class="line">      <span class="string">"while"</span>,</div><div class="line">      <span class="string">"do"</span>,</div><div class="line">      <span class="string">"switch"</span>,</div><div class="line">      <span class="string">"return"</span>,</div><div class="line">      <span class="string">"try"</span>,</div><div class="line">      <span class="string">"catch"</span></div><div class="line">    ],</div><div class="line">    <span class="string">"requireSpaceBeforeBinaryOperators"</span>: [</div><div class="line">        <span class="string">"="</span>, <span class="string">"+="</span>, <span class="string">"-="</span>, <span class="string">"*="</span>, <span class="string">"/="</span>, <span class="string">"%="</span>, <span class="string">"&lt;&lt;="</span>, <span class="string">"&gt;&gt;="</span>, <span class="string">"&gt;&gt;&gt;="</span>,</div><div class="line">        <span class="string">"&amp;="</span>, <span class="string">"|="</span>, <span class="string">"^="</span>, <span class="string">"+="</span>,</div><div class="line"></div><div class="line">        <span class="string">"+"</span>, <span class="string">"-"</span>, <span class="string">"*"</span>, <span class="string">"/"</span>, <span class="string">"%"</span>, <span class="string">"&lt;&lt;"</span>, <span class="string">"&gt;&gt;"</span>, <span class="string">"&gt;&gt;&gt;"</span>, <span class="string">"&amp;"</span>,</div><div class="line">        <span class="string">"|"</span>, <span class="string">"^"</span>, <span class="string">"&amp;&amp;"</span>, <span class="string">"||"</span>, <span class="string">"==="</span>, <span class="string">"=="</span>, <span class="string">"&gt;="</span>,</div><div class="line">        <span class="string">"&lt;="</span>, <span class="string">"&lt;"</span>, <span class="string">"&gt;"</span>, <span class="string">"!="</span>, <span class="string">"!=="</span></div><div class="line">    ],</div><div class="line">    <span class="string">"requireSpaceAfterBinaryOperators"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"requireSpacesInConditionalExpression"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"requireSpaceBeforeBlockStatements"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"requireLineFeedAtFileEnd"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"disallowSpacesInsideObjectBrackets"</span>: <span class="string">"all"</span>,</div><div class="line">    <span class="string">"disallowSpacesInsideArrayBrackets"</span>: <span class="string">"all"</span>,</div><div class="line">    <span class="string">"disallowSpacesInsideParentheses"</span>: <span class="literal">true</span>,</div><div class="line"></div><div class="line">    <span class="string">"validateJSDoc"</span>: &#123;</div><div class="line">        <span class="string">"checkParamNames"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"requireParamTypes"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="string">"disallowMultipleLineBreaks"</span>: <span class="literal">true</span>,</div><div class="line"></div><div class="line">    <span class="string">"disallowCommaBeforeLineBreak"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="string">"disallowDanglingUnderscores"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="string">"disallowEmptyBlocks"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="string">"disallowMultipleLineStrings"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="string">"disallowTrailingComma"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="string">"requireCommaBeforeLineBreak"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="string">"requireDotNotation"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="string">"requireMultipleVarDecl"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="string">"requireParenthesesAroundIIFE"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>###供应全局变量</p>
<h6 id="Style-Y240"><a href="#Style-Y240" class="headerlink" title="[Style Y240]"></a>[Style <a href="#style-y240">Y240</a>]</h6><ul>
<li><p>为供应库中的全局变量创建一个Angular常量。</p>
<p><em>为什么？</em>：提供一种注入到供应库的方法，否则就是全局变量。通过让你更容易地了解你的组件之间的依赖关系来提高代码的可测试性。这还允许你模拟这些依赖关系，这是很有意义的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// constants.js</span></div><div class="line"></div><div class="line"><span class="comment">/* global toastr:false, moment:false */</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line"></div><div class="line">    angular</div><div class="line">        .module(<span class="string">'app.core'</span>)</div><div class="line">        .constant(<span class="string">'toastr'</span>, toastr)</div><div class="line">        .constant(<span class="string">'moment'</span>, moment);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="Style-Y241"><a href="#Style-Y241" class="headerlink" title="[Style Y241]"></a>[Style <a href="#style-y241">Y241</a>]</h6><ul>
<li><p>对于一些不需要变动，也不需要从其它service中获取的值，使用常量定义，当一些常量只是在一个模块中使用但是有可能会在其它应用中使用的话，把它们写到一个以当前的模块命名的文件中。把常量集合到一起是非常有必要的，你可以把它们写到<code>constants.js</code>的文件中。</p>
<p><em>为什么？</em>：一个可能变化的值，即使变动的很少，也会从service中重新被检索，因此你不需要修改源代码。例如，一个数据服务的url可以被放到一个常量中，但是更好的的做法是把它放到一个web service中。</p>
<p><em>为什么？</em>：常量可以被注入到任何angular组件中，包括providers。</p>
<p><em>为什么？</em>：当一个应用程序被分割成很多可以在其它应用程序中复用的小模块时，每个独立的模块都应该可以操作它自己包含的相关常量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Constants used by the entire app</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app.core'</span>)</div><div class="line">    .constant(<span class="string">'moment'</span>, moment);</div><div class="line"></div><div class="line"><span class="comment">// Constants used only by the sales module</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app.sales'</span>)</div><div class="line">    .constant(<span class="string">'events'</span>, &#123;</div><div class="line">        <span class="attr">ORDER_CREATED</span>: <span class="string">'event_order_created'</span>,</div><div class="line">        <span class="attr">INVENTORY_DEPLETED</span>: <span class="string">'event_inventory_depleted'</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="文件模板和片段"><a href="#文件模板和片段" class="headerlink" title="文件模板和片段"></a>文件模板和片段</h2><p>为了遵循一致的规范和模式，使用文件模板和片段，这里有针对一些web开发的编辑器和IDE的模板和（或）片段。</p>
<p>###Sublime Text</p>
<h6 id="Style-Y250"><a href="#Style-Y250" class="headerlink" title="[Style Y250]"></a>[Style <a href="#style-y250">Y250</a>]</h6><ul>
<li><p>Angular片段遵循这些规范。</p>
<ul>
<li>下载<a href="assets/sublime-angular-snippets?raw=true">Sublime Angular snippets</a></li>
<li>把它放到Packages文件夹中</li>
<li>重启Sublime</li>
<li>在JavaScript文件中输入下面的命令然后按下<code>TAB</code>键即可：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ngcontroller <span class="comment">// creates an Angular controller</span></div><div class="line">ngdirective  <span class="comment">// creates an Angular directive</span></div><div class="line">ngfactory    <span class="comment">// creates an Angular factory</span></div><div class="line">ngmodule     <span class="comment">// creates an Angular module</span></div><div class="line">ngservice    <span class="comment">// creates an Angular service</span></div><div class="line">ngfilter     <span class="comment">// creates an Angular filter</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###Visual Studio</p>
<h6 id="Style-Y251"><a href="#Style-Y251" class="headerlink" title="[Style Y251]"></a>[Style <a href="#style-y251">Y251</a>]</h6><ul>
<li><p>Angular文件遵循<a href="http://www.sidewaffle.com" target="_blank" rel="external">SideWaffle</a>所介绍的规范。</p>
<ul>
<li>下载Visual Studio扩展文件<a href="http://www.sidewaffle.com" target="_blank" rel="external">SideWaffle</a></li>
<li>运行下载的vsix文件</li>
<li>重启Visual Studio</li>
</ul>
</li>
</ul>
<p>###WebStorm</p>
<h6 id="Style-Y252"><a href="#Style-Y252" class="headerlink" title="[Style Y252]"></a>[Style <a href="#style-y252">Y252</a>]</h6><ul>
<li><p>你可以把它们导入到WebStorm设置中:</p>
<ul>
<li>下载<a href="https://github.com/johnpapa/angular-styleguide/blob/master/assets/webstorm-angular-file-template.settings.jar?raw=true" target="_blank" rel="external">WebStorm Angular file templates and snippets</a></li>
<li>打开WebStorm点击<code>File</code>菜单</li>
<li>选择<code>Import Settings</code>菜单选项</li>
<li>选择文件点击<code>OK</code></li>
<li>在JavaScript文件中输入下面的命令然后按下<code>TAB</code>键即可：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ng-c <span class="comment">// creates an Angular controller</span></div><div class="line">ng-f <span class="comment">// creates an Angular factory</span></div><div class="line">ng-m <span class="comment">// creates an Angular module</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><h6 id="Style-Y253"><a href="#Style-Y253" class="headerlink" title="[Style Y253]"></a>[Style <a href="#style-y253">Y253</a>]</h6><ul>
<li><p>Angular片段遵循以下规范。</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apm <span class="keyword">install</span> angularjs-styleguide-snippets</div></pre></td></tr></table></figure>
<p>或</p>
<ul>
<li>打开Atom，打开包管理器(Packages -&gt; Settings View -&gt; Install Packages/Themes)</li>
<li>搜索’angularjs-styleguide-snippets’</li>
<li>点击’Install’ 进行安装</li>
</ul>
</li>
<li><p>JavaScript文件中输入以下命令后以<code>TAB</code>结束</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ngcontroller <span class="comment">// creates an Angular controller</span></div><div class="line">ngdirective <span class="comment">// creates an Angular directive</span></div><div class="line">ngfactory <span class="comment">// creates an Angular factory</span></div><div class="line">ngmodule <span class="comment">// creates an Angular module</span></div><div class="line">ngservice <span class="comment">// creates an Angular service</span></div><div class="line">ngfilter <span class="comment">// creates an Angular filter</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Brackets"><a href="#Brackets" class="headerlink" title="Brackets"></a>Brackets</h3><h6 id="Style-Y254"><a href="#Style-Y254" class="headerlink" title="[Style Y254]"></a>[Style <a href="#style-y254">Y254</a>]</h6><ul>
<li><p>Angular代码片段遵循以下规范。</p>
<ul>
<li>下载<a href="assets/brackets-angular-snippets.yaml?raw=true">Brackets Angular snippets</a></li>
<li>拓展管理器( File &gt; Extension manager )</li>
<li>安装<a href="https://github.com/chuyik/brackets-snippets" target="_blank" rel="external">‘Brackets Snippets (by edc)’</a></li>
<li>Click the light bulb in brackets’ right gutter</li>
<li>Click <code>Settings</code> and then <code>Import</code></li>
<li>Choose the file and select to skip or override</li>
<li>Click <code>Start Import</code></li>
</ul>
</li>
<li><p>JavaScript文件中输入以下命令后以<code>TAB</code>结束</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// These are full file snippets containing an IIFE</span></div><div class="line">ngcontroller <span class="comment">// creates an Angular controller</span></div><div class="line">ngdirective  <span class="comment">// creates an Angular directive</span></div><div class="line">ngfactory    <span class="comment">// creates an Angular factory</span></div><div class="line">ngapp        <span class="comment">// creates an Angular module setter</span></div><div class="line">ngservice    <span class="comment">// creates an Angular service</span></div><div class="line">ngfilter     <span class="comment">// creates an Angular filter</span></div><div class="line"></div><div class="line"><span class="comment">// These are partial snippets intended to chained</span></div><div class="line">ngmodule     <span class="comment">// creates an Angular module getter</span></div><div class="line">ngstate      <span class="comment">// creates an Angular UI Router state defintion</span></div><div class="line">ngconfig     <span class="comment">// defines a configuration phase function</span></div><div class="line">ngrun        <span class="comment">// defines a run phase function</span></div><div class="line">ngroute      <span class="comment">// creates an Angular routeProvider</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><h6 id="Style-Y255"><a href="#Style-Y255" class="headerlink" title="[Style Y255]"></a>[Style <a href="#style-y255">Y255</a>]</h6><ul>
<li><p>vim代码片段遵循以下规范。</p>
<ul>
<li>下载<a href="assets/vim-angular-snippets?raw=true">vim Angular代码段</a></li>
<li>设置<a href="https://github.com/Shougo/neosnippet.vim" target="_blank" rel="external">neosnippet.vim</a></li>
<li>粘贴到snippet路径下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ngcontroller <span class="comment">// creates an Angular controller</span></div><div class="line">ngdirective  <span class="comment">// creates an Angular directive</span></div><div class="line">ngfactory    <span class="comment">// creates an Angular factory</span></div><div class="line">ngmodule     <span class="comment">// creates an Angular module</span></div><div class="line">ngservice    <span class="comment">// creates an Angular service</span></div><div class="line">ngfilter     <span class="comment">// creates an Angular filter</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="Yeoman-Generator"><a href="#Yeoman-Generator" class="headerlink" title="Yeoman Generator"></a>Yeoman Generator</h2><h6 id="Style-Y260"><a href="#Style-Y260" class="headerlink" title="[Style Y260]"></a>[Style <a href="#style-y260">Y260</a>]</h6><p>你可以使用<a href="http://jpapa.me/yohottowel" target="_blank" rel="external">HotTowel yeoman generator</a>来创建一个遵循本规范的Angular入门应用。</p>
<ol>
<li><p>安装generator-hottowel</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g generator-hottowel</div></pre></td></tr></table></figure>
</li>
<li><p>创建一个新的文件夹并定位到它</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> myapp</div><div class="line"><span class="built_in">cd</span> myapp</div></pre></td></tr></table></figure>
</li>
<li><p>运行生成器</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">yo hottowel helloWorld</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>客户端路由对于在视图和很多小模板和指令组成的构成视图中创建导航是非常重要的。</p>
<h6 id="Style-Y270"><a href="#Style-Y270" class="headerlink" title="[Style Y270]"></a>[Style <a href="#style-y270">Y270</a>]</h6><ul>
<li><p>用<a href="http://angular-ui.github.io/ui-router/" target="_blank" rel="external">AngularUI Router</a>来做路由控制。</p>
<p><em>为什么？</em>：它包含了Angular路由的所有特性，并且增加了一些额外的特性，如嵌套路由和状态。</p>
<p><em>为什么？</em>：语法和Angular路由很像，很容易迁移到UI Router。</p>
</li>
<li><p>注意：你可以在运行期间使用<code>routerHelperProvider</code>配置跨文件状态</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// customers.routes.js</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'app.customers'</span>)</div><div class="line">    .run(appRun);</div><div class="line"></div><div class="line"><span class="comment">/* @ngInject */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">appRun</span>(<span class="params">routerHelper</span>) </span>&#123;</div><div class="line">    routerHelper.configureStates(getStates());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStates</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">state</span>: <span class="string">'customer'</span>,</div><div class="line">            <span class="attr">config</span>: &#123;</div><div class="line">                <span class="attr">abstract</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">template</span>: <span class="string">'&lt;ui-view class="shuffle-animation"/&gt;'</span>,</div><div class="line">                <span class="attr">url</span>: <span class="string">'/customer'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// routerHelperProvider.js</span></div><div class="line">angular</div><div class="line">    .module(<span class="string">'blocks.router'</span>)</div><div class="line">    .provider(<span class="string">'routerHelper'</span>, routerHelperProvider);</div><div class="line"></div><div class="line">routerHelperProvider.$inject = [<span class="string">'$locationProvider'</span>, <span class="string">'$stateProvider'</span>, <span class="string">'$urlRouterProvider'</span>];</div><div class="line"><span class="comment">/* @ngInject */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">routerHelperProvider</span>(<span class="params">$locationProvider, $stateProvider, $urlRouterProvider</span>) </span>&#123;</div><div class="line">    <span class="comment">/* jshint validthis:true */</span></div><div class="line">    <span class="keyword">this</span>.$get = RouterHelper;</div><div class="line"></div><div class="line">    $locationProvider.html5Mode(<span class="literal">true</span>);</div><div class="line"></div><div class="line">    RouterHelper.$inject = [<span class="string">'$state'</span>];</div><div class="line">    <span class="comment">/* @ngInject */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">RouterHelper</span>(<span class="params">$state</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> hasOtherwise = <span class="literal">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> service = &#123;</div><div class="line">            <span class="attr">configureStates</span>: configureStates,</div><div class="line">            <span class="attr">getStates</span>: getStates</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> service;</div><div class="line"></div><div class="line">        <span class="comment">///////////////</span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">configureStates</span>(<span class="params">states, otherwisePath</span>) </span>&#123;</div><div class="line">            states.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">state</span>) </span>&#123;</div><div class="line">                $stateProvider.state(state.state, state.config);</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">if</span> (otherwisePath &amp;&amp; !hasOtherwise) &#123;</div><div class="line">                hasOtherwise = <span class="literal">true</span>;</div><div class="line">                $urlRouterProvider.otherwise(otherwisePath);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getStates</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> $state.get(); &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="Style-Y271"><a href="#Style-Y271" class="headerlink" title="[Style Y271]"></a>[Style <a href="#style-y271">Y271</a>]</h6><ul>
<li><p>Define routes for views in the module where they exist，Each module should contain the routes for the views in the module.</p>
<p><em>为什么？</em>：每个模块应该是独立的。</p>
<p><em>为什么？</em>：当删除或增加一个模块时，应用程序只包含指向现存视图的路由。（也就是说删除模块和增加模块都需更新路由）</p>
<p><em>为什么？</em>：这使得可以在不关心孤立的路由时很方便地启用或禁用应用程序的某些部分。</p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="任务自动化"><a href="#任务自动化" class="headerlink" title="任务自动化"></a>任务自动化</h2><p>用<a href="http://gulpjs.com" target="_blank" rel="external">Gulp</a>或者<a href="http://gruntjs.com" target="_blank" rel="external">Grunt</a>来创建自动化任务。Gulp偏向于代码优先原则(code over configuration)而Grunt更倾向于配置优先原则(configuration over code)。我更倾向于使用gulp，因为gulp写起来比较简单。</p>
<blockquote>
<p>可以在我的<a href="http://jpapa.me/gulpps" target="_blank" rel="external">Gulp Pluralsight course</a>了解更多gulp和自动化任务的信息</p>
</blockquote>
<h6 id="Style-Y400"><a href="#Style-Y400" class="headerlink" title="[Style Y400]"></a>[Style <a href="#style-y400">Y400</a>]</h6><ul>
<li><p>用任务自动化在其它JavaScript文件之前列出所有模块的定义文件<code>*.module.js</code>。</p>
<p><em>为什么？</em>：Angular中，模块使用之前必须先注册。</p>
<p><em>为什么？</em>：带有特殊规则的模块命名，例如<code>*.module.js</code>，会让你很轻松地识别它们。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clientApp = <span class="string">'./src/client/app/'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Always grab module files first</span></div><div class="line"><span class="keyword">var</span> files = [</div><div class="line">  clientApp + <span class="string">'**/*.module.js'</span>,</div><div class="line">  clientApp + <span class="string">'**/*.js'</span></div><div class="line">];</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h2><h6 id="Style-Y420"><a href="#Style-Y420" class="headerlink" title="[Style Y420]"></a>[Style <a href="#style-y420">Y420</a>]</h6><ul>
<li><p>避免使用filters扫描一个复杂对象的所有属性，应该用filters来筛选选择的属性。</p>
<p><em>为什么？</em>：不恰当的使用会造成滥用并且会带来糟糕的性能问题，例如对一个复杂的对象使用过滤器。</p>
</li>
</ul>
<p><strong><a href="#目录">返回顶部</a></strong></p>
<h2 id="Angular文档"><a href="#Angular文档" class="headerlink" title="Angular文档"></a>Angular文档</h2><p><a href="//docs.angularjs.org/api">Angular文档</a>。</p>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>先打开一个问题讨论潜在的变化和增加。如果你对这篇规范有任何疑惑，随时在仓库中提出问题。如果你发现了一个错字，创建一个pull request。这样做是为了保持内容的更新，使用github的原生功能通过问题和PR来帮助讲述这个故事，具体做法可以google一下。为什么？因为如果你有问题，其他人可能有同样的问题，你在这里可以学到如何贡献。</p>
<p><em>贡献代码到这个仓库就意味着你同意了本仓库的许可证内容</em></p>
<p>###过程</p>
<pre><code>1. 在Github Issue中讨论这个问题。
2. 拉取一个pull request，引用这个问题，解释你做的修改和为什么要这样做。
3. pull request将会被进行评估，结果就是合并或是拒绝。
</code></pre><h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><ul>
<li><strong>tldr;</strong> 如果可以的话，使用本规范的时候还是指明归属吧。</li>
</ul>
<h3 id="Copyright"><a href="#Copyright" class="headerlink" title="Copyright"></a>Copyright</h3><p>Copyright (c) 2014-2015 <a href="http://johnpapa.net" target="_blank" rel="external">John Papa</a></p>
<h3 id="The-MIT-License"><a href="#The-MIT-License" class="headerlink" title="(The MIT License)"></a>(The MIT License)</h3><p>Permission is hereby granted, free of charge, to any person obtaining<br>a copy of this software and associated documentation files (the<br>‘Software’), to deal in the Software without restriction, including<br>without limitation the rights to use, copy, modify, merge, publish,<br>distribute, sublicense, and/or sell copies of the Software, and to<br>permit persons to whom the Software is furnished to do so, subject to<br>the following conditions:</p>
<p>The above copyright notice and this permission notice shall be<br>included in all copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND,<br>EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<br>MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.<br>IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY<br>CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,<br>TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE<br>SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
<p><strong><a href="#目录">返回顶部</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Angular规范&quot;&gt;&lt;a href=&quot;#Angular规范&quot; class=&quot;headerlink&quot; title=&quot;Angular规范&quot;&gt;&lt;/a&gt;Angular规范&lt;/h1&gt;&lt;h2 id=&quot;Angular-Team-Endorsed&quot;&gt;&lt;a href=&quot;#Angular-Team-Endorsed&quot; class=&quot;headerlink&quot; title=&quot;Angular Team Endorsed&quot;&gt;&lt;/a&gt;Angular Team Endorsed&lt;/h2&gt;&lt;p&gt;非常感谢领导Angular团队的Igor Minar对本指南做出的审查和贡献，并且委托我继续打理本指南。&lt;/p&gt;
&lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Angular规范&lt;a href=&quot;//twitter.com/john_papa&quot;&gt;@john_papa&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果你正在寻找一些关于语法、约定和结构化的Angular应用的一个有建设性的规范，那么你来对地方了。这里所包含的内容是基于我在团队中使用&lt;a href=&quot;//angularjs.org&quot;&gt;Angular&lt;/a&gt;的一些经验、一些演讲和&lt;a href=&quot;http://pluralsight.com/training/Authors/Details/john-papa&quot;&gt;Pluralsight培训课程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这个规范的目的是为构建Angular应用提供指导，当然更加重要的是让大家知道我为什么要选择它们。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你喜欢这个规范，请在Pluralsight看看&lt;a href=&quot;http://jpapa.me/ngclean&quot;&gt;Angular Patterns: Clean Code&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  &lt;a href=&quot;http://jpapa.me/ngclean&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/johnpapa/angular-styleguide/master/assets/ng-clean-code-banner.png&quot; alt=&quot;Angular Patterns: Clean Code&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="Angular" scheme="http://yoursite.com/tags/Angular/"/>
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>git的一些操作</title>
    <link href="http://yoursite.com/2016/01/17/git%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2016/01/17/git的一些操作/</id>
    <published>2016-01-16T19:46:21.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<p>如果不小心<code>commit</code>了一个不需要<code>commit</code>的文件，可以对其进行撤销。<br><a id="more"></a><br>先使用<code>git log</code> 查看 <code>commit</code>日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span></div><div class="line"></div><div class="line">commit 422bc088a7d6c5429f1d0760d008d86c505f4abe</div><div class="line">Author: zhyq0826 &lt;zhyq0826@gmail.com&gt;</div><div class="line">Date:   Tue Sep 4 18:19:23 2012 +0800</div><div class="line"></div><div class="line">//删除最近搜索数目限制</div><div class="line"></div><div class="line">commit 8da0fd772c3acabd6e21e85287bdcfcfe8e74c85</div><div class="line">Merge: 461ac36 0283074</div><div class="line">Author: zhyq0826 &lt;zhyq0826@gmail.com&gt;</div><div class="line">Date:   Tue Sep 4 18:16:09 2012 +0800</div></pre></td></tr></table></figure></p>
<p>找到需要回退的那次commit的 哈希值，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard &lt;commit_id&gt;</div></pre></td></tr></table></figure>
<p>使用上面的命令进行回退</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>根据–soft –mixed –hard，会对working tree和index和HEAD进行重置:</p>
<p><code>git reset –mixed</code>：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息<br><code>git reset –soft</code>：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可<br><code>git reset –hard</code>：彻底回退到某个版本，本地的源码也会变为上一个版本的内容<br><code>&lt;commit_id&gt;</code>  每次commit的SHA1值. 可以用git log 看到,也可以在页面上commit标签页里找到</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果不小心&lt;code&gt;commit&lt;/code&gt;了一个不需要&lt;code&gt;commit&lt;/code&gt;的文件，可以对其进行撤销。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ES6的使用,Traceur编译器</title>
    <link href="http://yoursite.com/2016/01/09/ES6%E7%9A%84%E4%BD%BF%E7%94%A8-Traceur%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <id>http://yoursite.com/2016/01/09/ES6的使用-Traceur编译器/</id>
    <published>2016-01-09T07:56:41.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<p>最近也在学习ES6的新语法，感觉就像是一门新的语言。<br>变化太大，会不会重蹈ES4的老路呢？<br>相信刚刚看ES6的人，都会觉得：“卧槽，这还是JS吗？”</p>
<p>不得不说，ES6的扩展行很强，更规范。但同时也同难以学习，ES5和ES6的语法混用，导致代码阅读性很低。</p>
<p>这是阮一峰老师的书，可以带你很好的入门ES6。<br><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a><br><a id="more"></a></p>
<h3 id="使用Traceur"><a href="#使用Traceur" class="headerlink" title="使用Traceur"></a>使用Traceur</h3><p>其实之前我就在想，ES6的语法，在浏览器会报错的。<br>那是不是都是要用nodeJS先把ES6转换成ES5的文件，才能在浏览器上用呢？<br>babel已经不提供了直接运行的环境，只提供node转换。<br>Traceur根据官方<a href="https://github.com/google/traceur-compiler/wiki/Getting-Started" target="_blank" rel="external">github</a>上的demo。依旧是可以直接在浏览器上运行的。<br>类似与facebook的JSX，在浏览器上编译。<br>下面是demo<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../bin/traceur.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../src/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">      class Greeter &#123;</div><div class="line">        constructor(message) &#123;</div><div class="line">          this.message = message;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        greet() &#123;</div><div class="line">          let element = document.querySelector('#message');</div><div class="line">          element.textContent = this.message;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      let greeter = new Greeter('Hello World!');</div><div class="line">      greeter.greet();</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以看到，我们可以直接在js文件里面写ES6，而不用通过nodejs转化，在学习ES6的过程中，要写一些demo还是挺方便的。</p>
<p>需要注意的是，需要转换的ES6代码，script标签需要使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="undefined">...</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Traceur编译器只是模拟了ES6，并不是真正的实现。不然chrome已经支持了。毕竟Traceur就是google的嘛。</p>
<p>比如新语法let，是不会变量前置的(ES6的规范里面，更严格了，let必须先声明，才能调用，否则报错)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6</span></div><div class="line">alert(a);		<span class="comment">// 报错</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">123</span>;</div><div class="line"></div><div class="line"><span class="comment">// Traceur</span></div><div class="line">alert(a);		<span class="comment">// undefinded</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">123</span>;</div><div class="line"></div><div class="line"><span class="comment">// ES5</span></div><div class="line">alert(a);		<span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</div></pre></td></tr></table></figure></p>
<p>这个涉及到JS解析器的预解析功能，会替换读取var function arguments存储起来，然后再逐行解析代码。</p>
<p>好了，通过Traceur编译器，我们就可以自己写一些demo练习ES6了。<br>当然还有更快捷的方式。<br>有个chrome扩展Scratch JS，可以运行ES6。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近也在学习ES6的新语法，感觉就像是一门新的语言。&lt;br&gt;变化太大，会不会重蹈ES4的老路呢？&lt;br&gt;相信刚刚看ES6的人，都会觉得：“卧槽，这还是JS吗？”&lt;/p&gt;
&lt;p&gt;不得不说，ES6的扩展行很强，更规范。但同时也同难以学习，ES5和ES6的语法混用，导致代码阅读性很低。&lt;/p&gt;
&lt;p&gt;这是阮一峰老师的书，可以带你很好的入门ES6。&lt;br&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/&quot;&gt;http://es6.ruanyifeng.com/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>解决wine下中文乱码问题</title>
    <link href="http://yoursite.com/2016/01/04/%E8%A7%A3%E5%86%B3wine%E4%B8%8B%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/01/04/解决wine下中文乱码问题/</id>
    <published>2016-01-04T13:46:29.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1，准备字体"><a href="#1，准备字体" class="headerlink" title="1，准备字体"></a>1，准备字体</h3><p>下载simfang.ttc 字体字体自行百度<br>复制到~/.wine/drive_c/windows/Fonts目录。<br><a id="more"></a></p>
<h3 id="2，修改-wine-system-reg"><a href="#2，修改-wine-system-reg" class="headerlink" title="2，修改 ~/.wine/system.reg"></a>2，修改 ~/.wine/system.reg</h3><p>装好字体后，还要修改一下 Wine 的注册表设置，指定与字体相关的设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gedit ~/.wine/system.reg</div></pre></td></tr></table></figure></p>
<p>（一定要使用 gedit 或其他支持 gb2312/utf8 编码的编辑器修改这些文件，否则文件中的中文可能变乱码）<br>搜索： LogPixels<br>找到的行应该是：[System\CurrentControlSet\Hardware Profiles\Current\Software\Fonts]<br>修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"LogPixels"</span>=dword:00000060</div><div class="line">// 改为</div><div class="line"><span class="string">"LogPixels"</span>=dword:00000070</div></pre></td></tr></table></figure></p>
<p>搜索： FontSubstitutes<br>找到的行应该是：[Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]<br>修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"MS Shell Dlg"</span>=<span class="string">"Tahoma"</span></div><div class="line"><span class="string">"MS Shell Dlg 2″="</span>Tahoma<span class="string">"</span></div><div class="line">// 改为</div><div class="line">"MS Shell Dlg<span class="string">"="</span>SimSun<span class="string">"</span></div><div class="line">"MS Shell Dlg 2″=<span class="string">"SimSun"</span></div></pre></td></tr></table></figure></p>
<h3 id="3，修改-wine-drive-c-windows-win-ini"><a href="#3，修改-wine-drive-c-windows-win-ini" class="headerlink" title="3，修改 ~/.wine/drive_c/windows/win.ini"></a>3，修改 ~/.wine/drive_c/windows/win.ini</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gedit ~/.wine/drive_c/windows/win.ini</div></pre></td></tr></table></figure>
<p>在文件末尾加入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[Desktop]</div><div class="line">menufontsize=13</div><div class="line">messagefontsize=13</div><div class="line">statusfontsize=13</div><div class="line">IconTitleSize=13</div></pre></td></tr></table></figure></p>
<h2 id="4、最关键的一步，把下面的代码保存为zh-reg，然后终端执行regedit-zh-reg"><a href="#4、最关键的一步，把下面的代码保存为zh-reg，然后终端执行regedit-zh-reg" class="headerlink" title="4、最关键的一步，把下面的代码保存为zh.reg，然后终端执行regedit zh.reg"></a>4、最关键的一步，把下面的代码保存为zh.reg，然后终端执行regedit zh.reg</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">REGEDIT4</div><div class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]</div><div class="line"><span class="string">"Arial"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Arial CE,238"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Arial CYR,204"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Arial Greek,161"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Arial TUR,162"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Courier New"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Courier New CE,238"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Courier New CYR,204"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Courier New Greek,161"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Courier New TUR,162"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"FixedSys"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Helv"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Helvetica"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"MS Sans Serif"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"MS Shell Dlg"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"MS Shell Dlg 2"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"System"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Tahoma"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Times"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Times New Roman CE,238"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Times New Roman CYR,204"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Times New Roman Greek,161"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Times New Roman TUR,162"</span>=<span class="string">"simsun"</span></div><div class="line"><span class="string">"Tms Rmn"</span>=<span class="string">"simsun"</span></div></pre></td></tr></table></figure>
<h3 id="OK，到这里你就可以打开wine程序，看看是不是中文了"><a href="#OK，到这里你就可以打开wine程序，看看是不是中文了" class="headerlink" title="OK，到这里你就可以打开wine程序，看看是不是中文了"></a>OK，到这里你就可以打开wine程序，看看是不是中文了</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1，准备字体&quot;&gt;&lt;a href=&quot;#1，准备字体&quot; class=&quot;headerlink&quot; title=&quot;1，准备字体&quot;&gt;&lt;/a&gt;1，准备字体&lt;/h3&gt;&lt;p&gt;下载simfang.ttc 字体字体自行百度&lt;br&gt;复制到~/.wine/drive_c/windows/Fonts目录。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="wine" scheme="http://yoursite.com/tags/wine/"/>
    
  </entry>
  
  <entry>
    <title>在linux下查看拨号错误代码</title>
    <link href="http://yoursite.com/2016/01/04/%E5%9C%A8linux%E4%B8%8B%E6%9F%A5%E7%9C%8B%E6%8B%A8%E5%8F%B7%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2016/01/04/在linux下查看拨号错误代码/</id>
    <published>2016-01-04T13:11:21.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="那是不可能的"><a href="#那是不可能的" class="headerlink" title="那是不可能的"></a>那是不可能的</h3><p>不用想了，linux下没有像window那样，有这样的提示给你。<br><a id="more"></a></p>
<h3 id="说一下一些尴尬的事"><a href="#说一下一些尴尬的事" class="headerlink" title="说一下一些尴尬的事"></a>说一下一些尴尬的事</h3><p>我有个朋友，网络出问题了，不找运营商，找我(醉了…)。<br>他没有电脑，就是连个路由器。<br>我只能去帮他看看，手机链接路由，调了半天，最后发现是外面的网线没接好….汗….<br>尴尬的是后面又出问题了，还强调要我拿电脑过去，好吧…<br>结果大家动的，拨号各种不成功，也没有错误代码，不知道是宽带的账号密码问题还是怎么…<br>来了个装网线的维修人员对吧，连linux都不懂。<br>后面百度一下吧，找到了折中的办法，查看系统日志。<br>系统日志在<br>/var/log/syslog<br>如果你使用了错误的密码，日志里会有这几句：<br>Jan 10 05:39:48 ubuntu pppd[5634]: Remote message: user passwd error<br>Jan 10 05:39:48 ubuntu pppd[5634]: PAP authentication failed<br>勉强能看就行，好吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;那是不可能的&quot;&gt;&lt;a href=&quot;#那是不可能的&quot; class=&quot;headerlink&quot; title=&quot;那是不可能的&quot;&gt;&lt;/a&gt;那是不可能的&lt;/h3&gt;&lt;p&gt;不用想了，linux下没有像window那样，有这样的提示给你。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>加速你的linux的几个技巧</title>
    <link href="http://yoursite.com/2016/01/04/%E5%8A%A0%E9%80%9F%E4%BD%A0%E7%9A%84linux%E7%9A%84%E5%87%A0%E4%B8%AA%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2016/01/04/加速你的linux的几个技巧/</id>
    <published>2016-01-04T12:36:48.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用Preload预加载"><a href="#使用Preload预加载" class="headerlink" title="使用Preload预加载"></a>使用Preload预加载</h3><p>与Prelink类似，Preload是一个运行于后台的监护程序，探测那些常用的软件，并将其放入缓存，以起到加速的作用。在LinuxMint/Ubuntu下安装Preload很简单：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install preload</div></pre></td></tr></table></figure></p>
<p>Preload默认的配置对于普通用户而言已经不错了，一般不需要修改。如果有进一步掌控其的欲望，可以打开其配置文件进行修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gedit /etc/preload.conf</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="清理APT缓存"><a href="#清理APT缓存" class="headerlink" title="清理APT缓存"></a>清理APT缓存</h3><p>apt应该算是LinuxMint/Ubuntu系统中使用率最高的命令了，无论安装、卸载软件，还是更新软件源缓存及相关维护，都离不开它。使用逾久，apt缓存也就变得较为臃肿，有必要清理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get autoclean</div></pre></td></tr></table></figure></p>
<h3 id="禁用不必要的启动项"><a href="#禁用不必要的启动项" class="headerlink" title="禁用不必要的启动项"></a>禁用不必要的启动项</h3><p>在“启动应用程序”中，根据自身实际，取消不必要的启动项，如欢迎程序、检测新硬件、蓝牙（如果本机没有蓝牙）、桌面共享等。</p>
<h3 id="修改grub2等待时间"><a href="#修改grub2等待时间" class="headerlink" title="修改grub2等待时间"></a>修改grub2等待时间</h3><p>无论你的电脑是否有2个或更多的操作系统，只要安装了LinuxMint/Ubuntu，就必然会安装grub2作为引导管理器。grub2启动时，会在默认的启动项上停留数秒（默认10秒），等待用户选择。我们可以把这个时间改的更短。如果是LinuxMint/Ubuntu单系统，可以直接改为0，即直接进入，无需等待。<br>以管理员身份编辑grub配置文件，修改GRUB_TIMEOUT项后的数字。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gedit /etc/default/grub</div></pre></td></tr></table></figure></p>
<h3 id="使用ZRAM提高内存性能"><a href="#使用ZRAM提高内存性能" class="headerlink" title="使用ZRAM提高内存性能"></a>使用ZRAM提高内存性能</h3><p>如果你的电脑内存不太充裕（1G以下），可以使用ZRAM软件来提高内存性能。ZRAM能在系统中创建一个压缩的块设备，用于模拟一个交换分区，减少因内存不足而多硬盘的蹂躏频次。可以使用如下PPA安装ZRAM：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo add-apt-repository ppa:shnatsel/zram</div><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install zramswap-enabler</div></pre></td></tr></table></figure></p>
<!--more-->
<h3 id="多核启动"><a href="#多核启动" class="headerlink" title="多核启动"></a>多核启动</h3><p>默认情况下，即便你的电脑是双核甚至多核的CPU，LinuxMint/Ubuntu启动时仍旧是以单核在执行系统启动任务。可以通过如下修改，使其充分利用多核CPU进行系统启动，从而加快速度。<br>以管理员身份编辑：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gedit /etc/init.d/rc</div></pre></td></tr></table></figure></p>
<p>找到CONCURRENCY=none行，并修改为CONCURRENCY=makefile</p>
<h3 id="禁用视觉特效"><a href="#禁用视觉特效" class="headerlink" title="禁用视觉特效"></a>禁用视觉特效</h3><p>如果你的电脑硬件配置较低，可以通过禁用视觉特效达到优化性能的目的。华丽的特效，必然会消耗更多的性能。对于Ubuntu和LinuxMint MATE用户，安装Compiz后，即可把不要的特效都禁用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install compizconfig-settings-manager</div></pre></td></tr></table></figure></p>
<p>对于LinuxMint Cinnamon用户，还可以在Cinnamon设置：效果 中禁用相关效果。</p>
<h3 id="使用TMPFS减少磁盘读写"><a href="#使用TMPFS减少磁盘读写" class="headerlink" title="使用TMPFS减少磁盘读写"></a>使用TMPFS减少磁盘读写</h3><p>TMPFS，顾名思义，乃是临时文件系统。一般情况下，Linux的/tmp文件夹接收着大量关于磁盘读写的操作。而通过优先使用物理内存，可以提高/tmp处理磁盘读写操作的速度。<br>以管理员身份修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gedit /etc/fstab</div></pre></td></tr></table></figure></p>
<p>在该文件的末尾，加入如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Move /tmp to RAM</span></div><div class="line">tmpfs /tmp tmpfs defaults,noexec,nosuid 0 0</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用Preload预加载&quot;&gt;&lt;a href=&quot;#使用Preload预加载&quot; class=&quot;headerlink&quot; title=&quot;使用Preload预加载&quot;&gt;&lt;/a&gt;使用Preload预加载&lt;/h3&gt;&lt;p&gt;与Prelink类似，Preload是一个运行于后台的监护程序，探测那些常用的软件，并将其放入缓存，以起到加速的作用。在LinuxMint/Ubuntu下安装Preload很简单：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install preload&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Preload默认的配置对于普通用户而言已经不错了，一般不需要修改。如果有进一步掌控其的欲望，可以打开其配置文件进行修改：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo gedit /etc/preload.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux下清除垃圾命令行</title>
    <link href="http://yoursite.com/2016/01/04/linux%E4%B8%8B%E6%B8%85%E9%99%A4%E5%9E%83%E5%9C%BE%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>http://yoursite.com/2016/01/04/linux下清除垃圾命令行/</id>
    <published>2016-01-03T17:40:06.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<p>linux下本来就不是像window会产生很多垃圾，导致越用越慢。<br>但是我等强迫症呢，就是看不了有点残留的东西存在。<br>特别是在卸载了软件之后，还有一些配置文件留在那里，就很讨厌。<br>所以把这些命令记录下来，毕竟linux命令太多，有些时候也记不住。<br><a id="more"></a></p>
<h3 id="删除缓存"><a href="#删除缓存" class="headerlink" title="删除缓存"></a>删除缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get autoclean        // 清除旧版本的软件缓存</div><div class="line">$ sudo apt-get clean                // 清除所有软件缓存</div><div class="line">$ sudo apt-get autoremove    // 删除系统不再使用的孤立软件</div></pre></td></tr></table></figure>
<h3 id="清理opera-firefox的缓存文件"><a href="#清理opera-firefox的缓存文件" class="headerlink" title="清理opera firefox的缓存文件"></a>清理opera firefox的缓存文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls ~/.opera/cache4</div><div class="line">$ ls ~/.mozilla/firefox/*.default/Cache</div></pre></td></tr></table></figure>
<h3 id="清理Linux下孤立的包"><a href="#清理Linux下孤立的包" class="headerlink" title="清理Linux下孤立的包"></a>清理Linux下孤立的包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install deborphan -y</div></pre></td></tr></table></figure>
<h3 id="卸载：tracker"><a href="#卸载：tracker" class="headerlink" title="卸载：tracker"></a>卸载：tracker</h3><p>这个东西一般我只要安装ubuntu就会第一删掉tracker 他不仅会产生大量的cache文件而且还会影响开机速度。所以在新得利里面删掉就行。</p>
<p>附录：<br>包管理的临时文件目录:<br>包在<br>/var/cache/apt/archives<br>没有下载完的在<br>/var/cache/apt/archives/partial</p>
<h3 id="删除软件"><a href="#删除软件" class="headerlink" title="删除软件"></a>删除软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get remove --purge 软件名</div><div class="line">$ sudo apt-get autoremove</div><div class="line">// 清除残余的配置文件</div><div class="line">$ dpkg <span class="_">-l</span> |grep ^rc|awk <span class="string">'&#123;print $2&#125;'</span> |sudo xargs dpkg -P</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux下本来就不是像window会产生很多垃圾，导致越用越慢。&lt;br&gt;但是我等强迫症呢，就是看不了有点残留的东西存在。&lt;br&gt;特别是在卸载了软件之后，还有一些配置文件留在那里，就很讨厌。&lt;br&gt;所以把这些命令记录下来，毕竟linux命令太多，有些时候也记不住。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>搬运：angularJS的编程规范</title>
    <link href="http://yoursite.com/2015/12/28/%E6%90%AC%E8%BF%90%EF%BC%9AangularJS%E7%9A%84%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2015/12/28/搬运：angularJS的编程规范/</id>
    <published>2015-12-28T14:22:00.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本风格指南的目的是展示AngularJS应用的最佳实践和风格指南。<br>这些最佳实践来自于：</p>
<ol>
<li>AngularJS项目源码</li>
<li>本人阅读过的源码和文章</li>
<li>本人的实践经历</li>
</ol>
<p><strong>说明1</strong>: 这只是风格指南的草案，主要目的是通过交流以消除分歧，进而被社区广泛采纳。<br><strong>说明2</strong>: 本版本是翻译自英文原版，在遵循下面的指南之前请确认你看到的是比较新的版本。</p>
<p>在本指南中不会包含基本的JavaScript开发指南。这些基本的指南可以在下面的列表中找到：</p>
<ol>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml" target="_blank" rel="external">Google’s JavaScript style guide</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Developer_Guide/Coding_Style" target="_blank" rel="external">Mozilla’s JavaScript style guide</a></li>
<li><a href="https://github.com/styleguide/javascript" target="_blank" rel="external">GitHub’s JavaScript style guide</a></li>
<li><a href="http://javascript.crockford.com/code.html" target="_blank" rel="external">Douglas Crockford’s JavaScript style guide</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">Airbnb JavaScript style guide</a></li>
</ol>
<p>对于AngularJS开发，推荐 <a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml" target="_blank" rel="external">Google’s JavaScript style guide</a>.</p>
<p>在AngularJS的Github wiki中有一个相似的章节 <a href="https://github.com/ProLoser" target="_blank" rel="external">ProLoser</a>, 你可以点击<a href="https://github.com/angular/angular.js/wiki" target="_blank" rel="external">这里</a>查看。</p>
<h1 id="其它翻译版本"><a href="#其它翻译版本" class="headerlink" title="其它翻译版本"></a>其它翻译版本</h1><ul>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README.md" target="_blank" rel="external">英语</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-de-de.md" target="_blank" rel="external">德语</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-es-es.md" target="_blank" rel="external">西班牙语</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-fr-fr.md" target="_blank" rel="external">法语</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-id-id.md" target="_blank" rel="external">印度尼西亚语</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-it-it.md" target="_blank" rel="external">意大利语</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-ja-jp.md" target="_blank" rel="external">日语</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-ko-kr.md" target="_blank" rel="external">韩语</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-pl-pl.md" target="_blank" rel="external">波兰语</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-pt-br.md" target="_blank" rel="external">葡萄牙语</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-ru-ru.md" target="_blank" rel="external">俄语</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-sr.md" target="_blank" rel="external">塞尔维亚语</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-sr-lat.md" target="_blank" rel="external">塞尔维亚拉丁语</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-tr-tr.md" target="_blank" rel="external">土耳其语</a><a id="more"></a>
<h1 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h1></li>
</ul>
<ul>
<li><a href="#概览">概览</a><ul>
<li><a href="#目录结构">目录结构</a></li>
<li><a href="#标记">标记</a></li>
<li><a href="#命名约定">命名约定</a></li>
<li><a href="#其他">其他</a></li>
</ul>
</li>
<li><a href="#模块">模块</a></li>
<li><a href="#控制器">控制器</a></li>
<li><a href="#指令">指令</a></li>
<li><a href="#过滤器">过滤器</a></li>
<li><a href="#服务">服务</a></li>
<li><a href="#模板">模板</a></li>
<li><a href="#路由">路由</a></li>
<li><a href="#国际化">国际化</a></li>
<li><a href="#性能">性能</a></li>
<li><a href="#加入我们">加入我们</a></li>
<li><a href="#贡献者">贡献者</a></li>
</ul>
<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>由于一个大型的AngularJS应用有较多组成部分，所以最好通过分层的目录结构来组织。<br>有两个主流的组织方式：</p>
<ul>
<li>按照类型优先，业务功能其次的组织方式</li>
</ul>
<p>这种方式的目录结构看起来如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── app</div><div class="line">│   ├── app<span class="selector-class">.js</span></div><div class="line">│   ├── controllers</div><div class="line">│   │   ├── home</div><div class="line">│   │   │   ├── FirstCtrl<span class="selector-class">.js</span></div><div class="line">│   │   │   └── SecondCtrl<span class="selector-class">.js</span></div><div class="line">│   │   └── about</div><div class="line">│   │       └── ThirdCtrl<span class="selector-class">.js</span></div><div class="line">│   ├── directives</div><div class="line">│   │   ├── home</div><div class="line">│   │   │   └── directive1<span class="selector-class">.js</span></div><div class="line">│   │   └── about</div><div class="line">│   │       ├── directive2<span class="selector-class">.js</span></div><div class="line">│   │       └── directive3<span class="selector-class">.js</span></div><div class="line">│   ├── filters</div><div class="line">│   │   ├── home</div><div class="line">│   │   └── about</div><div class="line">│   └── services</div><div class="line">│       ├── CommonService<span class="selector-class">.js</span></div><div class="line">│       ├── cache</div><div class="line">│       │   ├── Cache1<span class="selector-class">.js</span></div><div class="line">│       │   └── Cache2<span class="selector-class">.js</span></div><div class="line">│       └── models</div><div class="line">│           ├── Model1<span class="selector-class">.js</span></div><div class="line">│           └── Model2<span class="selector-class">.js</span></div><div class="line">├── partials</div><div class="line">├── lib</div><div class="line">└── test</div></pre></td></tr></table></figure>
<ul>
<li>按照业务功能优先，类型其次的组织方式</li>
</ul>
<p>如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── app</div><div class="line">│   ├── app<span class="selector-class">.js</span></div><div class="line">│   ├── common</div><div class="line">│   │   ├── controllers</div><div class="line">│   │   ├── directives</div><div class="line">│   │   ├── filters</div><div class="line">│   │   └── services</div><div class="line">│   ├── home</div><div class="line">│   │   ├── controllers</div><div class="line">│   │   │   ├── FirstCtrl<span class="selector-class">.js</span></div><div class="line">│   │   │   └── SecondCtrl<span class="selector-class">.js</span></div><div class="line">│   │   ├── directives</div><div class="line">│   │   │   └── directive1<span class="selector-class">.js</span></div><div class="line">│   │   ├── filters</div><div class="line">│   │   │   ├── filter1<span class="selector-class">.js</span></div><div class="line">│   │   │   └── filter2<span class="selector-class">.js</span></div><div class="line">│   │   └── services</div><div class="line">│   │       ├── service1<span class="selector-class">.js</span></div><div class="line">│   │       └── service2<span class="selector-class">.js</span></div><div class="line">│   └── about</div><div class="line">│       ├── controllers</div><div class="line">│       │   └── ThirdCtrl<span class="selector-class">.js</span></div><div class="line">│       ├── directives</div><div class="line">│       │   ├── directive2<span class="selector-class">.js</span></div><div class="line">│       │   └── directive3<span class="selector-class">.js</span></div><div class="line">│       ├── filters</div><div class="line">│       │   └── filter3<span class="selector-class">.js</span></div><div class="line">│       └── services</div><div class="line">│           └── service3<span class="selector-class">.js</span></div><div class="line">├── partials</div><div class="line">├── lib</div><div class="line">└── test</div></pre></td></tr></table></figure>
<ul>
<li>当目录里有多个单词时, 使用 lisp-case 语法:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app</div><div class="line"> ├── app.js</div><div class="line"> └── my-<span class="keyword">complex</span>-<span class="keyword">module</span></div><div class="line">     ├── controllers</div><div class="line">     ├── directives</div><div class="line">     ├── filters</div><div class="line">     └── services</div></pre></td></tr></table></figure>
<ul>
<li>在创建指令时，合适的做法是将相关的文件放到同一目录下 (如：模板文件, CSS/SASS 文件, JavaScript文件)。如果你在整个项目周期都选择这种组织方式，</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">app</div><div class="line">└── directives</div><div class="line">    ├── directive1</div><div class="line">    │   ├── directive1<span class="selector-class">.html</span></div><div class="line">    │   ├── directive1<span class="selector-class">.js</span></div><div class="line">    │   └── directive1<span class="selector-class">.sass</span></div><div class="line">    └── directive2</div><div class="line">        ├── directive2<span class="selector-class">.html</span></div><div class="line">        ├── directive2<span class="selector-class">.js</span></div><div class="line">        └── directive2.sass</div></pre></td></tr></table></figure>
<p>那么，上述的两种目录结构均能适用。</p>
<ul>
<li>组件的单元测试应与组件放置在同一目录下下。在这种方式下，当改变组件时，更加容易找到对应的测试。同时，单元测试也充当了文档和示例。</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">services</div><div class="line">├── cache</div><div class="line">│   ├── cache1<span class="selector-class">.js</span></div><div class="line">│   └── cache1<span class="selector-class">.spec</span><span class="selector-class">.js</span></div><div class="line">└── models</div><div class="line">    ├── model1<span class="selector-class">.js</span></div><div class="line">    └── model1<span class="selector-class">.spec</span><span class="selector-class">.js</span></div></pre></td></tr></table></figure>
<ul>
<li><code>app.js</code>文件包含路由定义、配置和启动说明(如果需要的话)。</li>
<li>每一个 JavaScript 文件应该仅包含 <strong>一个组件</strong> 。文件名应该以组件名命名。</li>
<li>使用 Angular 项目模板，如 <a href="http://yeoman.io" target="_blank" rel="external">Yeoman</a>, <a href="http://joshdmiller.github.io/ng-boilerplate/#/home" target="_blank" rel="external">ng-boilerplate</a>.</li>
</ul>
<p>组件命名的约定可以在每个组件中看到。</p>
<h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><p><a href="http://developer.yahoo.com/blogs/ydn/high-performance-sites-rule-6-move-scripts-bottom-7200.html" target="_blank" rel="external">太长慎读</a> 把script标签放在文档底部。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>MyApp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>保持标签的简洁并把AngularJS的标签放在标准HTML属性后面。这样提高了代码可读性。标准HTML属性和AngularJS的属性没有混到一起，提高了代码的可维护性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"frm"</span> <span class="attr">ng-submit</span>=<span class="string">"login.authenticate()"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"ipt"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"name"</span> <span class="attr">require</span> <span class="attr">ng-model</span>=<span class="string">"user.name"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其它的HTML标签应该遵循下面的指南的 <a href="http://mdo.github.io/code-guide/#html-attribute-order" target="_blank" rel="external">建议</a></p>
<h2 id="标记-1"><a href="#标记-1" class="headerlink" title="标记"></a>标记</h2><p>下表展示了各个Angular元素的命名约定</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>命名风格</th>
<th>实例</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>Modules</td>
<td>lowerCamelCase</td>
<td>angularApp</td>
<td></td>
</tr>
<tr>
<td>Controllers</td>
<td>Functionality + ‘Ctrl’</td>
<td>AdminCtrl</td>
<td></td>
</tr>
<tr>
<td>Directives</td>
<td>lowerCamelCase</td>
<td>userInfo</td>
<td></td>
</tr>
<tr>
<td>Filters</td>
<td>lowerCamelCase</td>
<td>userFilter</td>
<td></td>
</tr>
<tr>
<td>Services</td>
<td>UpperCamelCase</td>
<td>User</td>
<td>constructor</td>
</tr>
<tr>
<td>Services</td>
<td>lowerCamelCase</td>
<td>dataFactory</td>
<td>others</td>
</tr>
</tbody>
</table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>使用：<ul>
<li><code>$timeout</code>  替代 <code>setTimeout</code></li>
<li><code>$interval</code> instead of <code>setInterval</code></li>
<li><code>$window</code>   替代 <code>window</code></li>
<li><code>$document</code> 替代 <code>document</code></li>
<li><code>$http</code>     替代 <code>$.ajax</code></li>
</ul>
</li>
</ul>
<p>这将使你更易于在测试时处理代码异常 (例如：你在 <code>setTimeout</code> 中忘记 <code>$scope.$apply</code>)</p>
<p>使用如下工具自动化你的工作流</p>
<pre><code>* [Yeoman](http://yeoman.io)
* [Gulp](http://gulpjs.com)
* [Grunt](http://gruntjs.com)
* [Bower](http://bower.io)
</code></pre><ul>
<li>使用 promise (<code>$q</code>) 而非回调。这将使你的代码更加优雅、直观，并且免于回调地狱。</li>
<li>尽可能使用 <code>$resource</code> 而非 <code>$http</code>。更高的抽象可以避免冗余。</li>
<li>使用AngularJS的预压缩版 (像 <a href="https://github.com/btford/ngmin" target="_blank" rel="external">ngmin</a> 或 <a href="https://github.com/olov/ng-annotate" target="_blank" rel="external">ng-annotate</a>) 避免在压缩之后出现问题。</li>
<li>不要使用全局变量或函数。通过依赖注入解决所有依赖，这可以减少 bug ，规避很多测试时的麻烦。</li>
<li>为避免使用全局变量或函数，可以借助 Grunt 或 Gulp 把你的代码放到一个立即执行的函数表达式（IIFE）中。可用的插件有 <a href="https://www.npmjs.com/package/grunt-wrap" target="_blank" rel="external">grunt-wrap</a> 或 <a href="https://www.npmjs.com/package/gulp-wrap/" target="_blank" rel="external">gulp-wrap</a>。下面是 Gulp 的示例：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">"./src/*.js"</span>)</div><div class="line">    .pipe(wrap(<span class="string">'(function()&#123;\n"use strict";\n&lt;%= contents %&gt;\n&#125;)();'</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">"./dist"</span>));</div></pre></td></tr></table></figure>
<ul>
<li>不要污染 <code>$scope</code>。仅添加与视图相关的函数和变量。</li>
<li><a href="https://github.com/angular/angular.js/pull/4366/files" target="_blank" rel="external">使用 controllers 而非 <code>ngInit</code></a>。<code>ngInit</code> 只有在一种情况下的使用是合适的：用来给 <code>ngRepeat</code>的特殊属性赋予一个别名。除此之外, 你应该使用 controllers 而不是 <code>ngInit</code> 来初始化scope变量。<code>ngInit</code> 中的表达式会传递给 Angular 的 <code>$parse</code> 服务，通过词法分析，语法分析，求值等过程。这会导致:<ul>
<li>对性能的巨大影响，因为解释器由 Javascript 写成</li>
<li>多数情况下，<code>$parse</code> 服务中对表达式的缓存基本不起作用，因为 <code>ngInit</code> 表达式经常只有一次求值</li>
<li>很容易出错，因为是模板中写字符串，没有针对表达式的语法高亮和进一步的编辑器支持</li>
<li>不会抛出运行时错误</li>
</ul>
</li>
<li>不要使用 <code>$</code> 前缀来命名变量, 属性和方法. 这种前缀是预留给 AngularJS 来使用的.</li>
<li>当使用 DI 机制来解决依赖关系, 要根据他们的类型进行排序 -  AngularJS 内建的依赖要优先, 之后才是你自定义的：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.factory(<span class="string">'Service'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$rootScope, $timeout, MyCustomDependency1, MyCustomDependency2</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="comment">//Something</span></div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><ul>
<li><p>模块应该用驼峰式命名。为表明模块 <code>b</code> 是模块 <code>a</code> 的子模块, 可以用点号连接: <code>a.b</code> 。</p>
<p>  有两种常见的组织模块的方式：</p>
<ol>
<li>按照功能组织</li>
<li><p>按照组件类型组织</p>
<p>当前并无太大差别，但前者更加清晰。同时，如果 lazy-loading modules 被实现的话 (当前并未列入 AngularJS 的路线图)，这种方式将改善应用的性能。</p>
</li>
</ol>
</li>
</ul>
<h1 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h1><ul>
<li>不要在控制器里操作 DOM，这会让你的控制器难以测试，而且违背了<a href="https://en.wikipedia.org/wiki/Separation_of_concerns" target="_blank" rel="external">关注点分离原则</a>。应该通过指令操作 DOM。</li>
<li>通过控制器完成的功能命名控制器 (如：购物卡，主页，控制板)，并以字符串<code>Ctrl</code>结尾。</li>
<li>控制器是纯 Javascript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor" target="_blank" rel="external">构造函数</a>，所以应该用首字母大写的驼峰命名法（<code>HomePageCtrl</code>, <code>ShoppingCartCtrl</code>, <code>AdminPanelCtrl</code>, 等等）。</li>
<li>控制器不应该在全局中定义 (尽管 AngularJS 允许，但污染全局命名空间是个糟糕的实践)。</li>
<li><p>使用以下语法定义控制器：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCtrl</span>(<span class="params">dependency1, dependency2, ..., dependencyn</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.controller(<span class="string">'MyCtrl'</span>, MyCtrl);</div></pre></td></tr></table></figure>
<p> 为了避免在压缩代码时产生问题，你可以使用工具自动生成标准的数组定义式语法，如：<a href="https://github.com/olov/ng-annotate" target="_blank" rel="external">ng-annotate</a> （还有 grunt 任务 <a href="https://github.com/mzgol/grunt-ng-annotate" target="_blank" rel="external">grunt-ng-annotate</a>）</p>
</li>
<li><p>使用 <code>controller as</code> 语法:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span> ng-controller=<span class="string">"MainCtrl as main"</span>&gt;</div><div class="line">   &#123;&#123; main<span class="selector-class">.title</span> &#125;&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'MainCtrl'</span>, MainCtrl);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainCtrl</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.title = <span class="string">'Some title'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 使用 <code>controller as</code> 主要的优点是:</p>
<ul>
<li>创建了一个“独立”的组件——绑定的属性不属于 <code>$scope</code> 原型链。这是一个很好的实践，因为 <code>$scope</code> 原型继承有一些重要的缺点（这可能是为什么它在 Angular 2 中被移除了）：<ul>
<li>Scope值的改变会在你不注意的地方有影响。</li>
<li>难以重构。</li>
<li><a href="http://jimhoskins.com/2012/12/14/nested-scopes-in-angularjs.html" target="_blank" rel="external">dot rule</a>‘.</li>
</ul>
</li>
<li>当你不需要做必须由 <code>$scope</code> 完成的操作（比如<code>$scope.$broadcast</code>）时，移除掉了 <code>$scope</code>，就是为 Angular2 做好准备。</li>
<li><p>语法上更接近于普通的 JavaScript 构造函数。</p>
<p>想深入了解 <code>controller as</code> ，请看: <a href="http://toddmotto.com/digging-into-angulars-controller-as-syntax/" target="_blank" rel="external">digging-into-angulars-controller-as-syntax</a></p>
</li>
</ul>
</li>
<li><p>如果使用数组定义语法声明控制器，使用控制器依赖的原名。这将提高代码的可读性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCtrl</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.controller(<span class="string">'MyCtrl'</span>, [<span class="string">'$scope'</span>, MyCtrl]);</div></pre></td></tr></table></figure>
<p> 下面的代码更易理解</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCtrl</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.controller(<span class="string">'MyCtrl'</span>, [<span class="string">'$scope'</span>, MyCtrl]);</div></pre></td></tr></table></figure>
<p> 对于包含大量代码的需要上下滚动的文件尤其适用。这可能使你忘记某一变量是对应哪一个依赖。</p>
</li>
<li><p>尽可能的精简控制器。将通用函数抽象为独立的服务。</p>
</li>
<li><p>不要再控制器中写业务逻辑。把业务逻辑交给模型层的服务。<br>举个例子:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这是把业务逻辑放在控制器的常见做法</span></div><div class="line">angular.module(<span class="string">'Store'</span>, [])</div><div class="line">.controller(<span class="string">'OrderCtrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line"></div><div class="line">  $scope.items = [];</div><div class="line"></div><div class="line">  $scope.addToOrder = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">    $scope.items.push(item);<span class="comment">//--&gt;控制器中的业务逻辑</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  $scope.removeFromOrder = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">    $scope.items.splice($scope.items.indexOf(item), <span class="number">1</span>);<span class="comment">//--&gt;控制器中的业务逻辑</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  $scope.totalPrice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> $scope.items.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">memo, item</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> memo + (item.qty * item.price);<span class="comment">//--&gt;控制器中的业务逻辑</span></div><div class="line">    &#125;, <span class="number">0</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当你把业务逻辑交给模型层的服务，控制器看起来就会想这样：（关于 service-model 的实现，参看 ‘use services as your Model’）:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Order 在此作为一个 'model'</span></div><div class="line">angular.module(<span class="string">'Store'</span>, [])</div><div class="line">.controller(<span class="string">'OrderCtrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Order</span>) </span>&#123;</div><div class="line"></div><div class="line">  $scope.items = Order.items;</div><div class="line"></div><div class="line">  $scope.addToOrder = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">    Order.addToOrder(item);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  $scope.removeFromOrder = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">    Order.removeFromOrder(item);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  $scope.totalPrice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> Order.total();</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>为什么控制器不应该包含业务逻辑和应用状态？</p>
<ul>
<li>控制器会在每个视图中被实例化，在视图被销毁时也要同时销毁</li>
<li>控制器是不可重用的——它与视图有耦合</li>
<li>Controllers are not meant to be injected</li>
</ul>
</li>
<li>需要进行跨控制器通讯时，通过方法引用(通常是子控制器到父控制器的通讯)或者 <code>$emit</code>, <code>$broadcast</code> 及 <code>$on</code> 方法。发送或广播的消息应该限定在最小的作用域。</li>
<li><p>制定一个通过 <code>$emit</code>, <code>$broadcast</code> 发送的消息列表并且仔细的管理以防命名冲突和bug。</p>
<p> Example:</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="comment">/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *</span></div><div class="line">Custom events:</div><div class="line">  - 'authorization-message' - description of the message</div><div class="line">    - &#123; user, role, action &#125; - data format</div><div class="line">      - user - a string, which contains the username</div><div class="line">      - role - an ID of the role the user has</div><div class="line">      - action - specific ation the user tries to perform</div><div class="line">* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */</div></pre></td></tr></table></figure>
</li>
<li><p>在需要格式化数据时将格式化逻辑封装成 <a href="#过滤器">过滤器</a> 并将其声明为依赖：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFormat</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.filter(<span class="string">'myFormat'</span>, myFormat);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCtrl</span>(<span class="params">$scope, myFormatFilter</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.controller(<span class="string">'MyCtrl'</span>, MyCtrl);</div></pre></td></tr></table></figure>
</li>
<li><p>有内嵌的控制器时使用 “内嵌作用域” ( <code>controllerAs</code> 语法)：</p>
<p> <strong>app.js</strong></p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.config(<span class="function"><span class="keyword">function</span> (<span class="params">$routeProvider</span>) </span>&#123;</div><div class="line">  $routeProvider</div><div class="line">    .when(<span class="string">'/route'</span>, &#123;</div><div class="line">      <span class="attr">templateUrl</span>: <span class="string">'partials/template.html'</span>,</div><div class="line">      <span class="attr">controller</span>: <span class="string">'HomeCtrl'</span>,</div><div class="line">      <span class="attr">controllerAs</span>: <span class="string">'home'</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p> <strong>HomeCtrl</strong></p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">HomeCtrl</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.bindingValue = <span class="number">42</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>template.html</strong></p>
 <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> ng-<span class="keyword">bind</span>=<span class="string">"home.bindingValue"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><ul>
<li>使用小写字母开头的驼峰法命名指令。</li>
<li>在 link function 中使用 <code>scope</code> 而非 <code>$scope</code>。在 compile 中, 你已经定义参数的 post/pre link functions 将在函数被执行时传递, 你无法通过依赖注入改变他们。这种方式同样应用在 AngularJS 项目中。</li>
<li>为你的指令添加自定义前缀以免与第三方指令冲突。</li>
<li>不要使用 <code>ng</code> 或 <code>ui</code> 前缀，因为这些备用于 AngularJS 和 AngularJS UI。</li>
<li>DOM 操作只通过指令完成。</li>
<li>为你开发的可复用组件创建独立作用域。</li>
<li>以属性和元素形式使用指令，而不是注释和 class。这会使你的代码可读性更高。</li>
<li>使用 <code>scope.$on(&#39;$destroy&#39;, fn)</code> 来清除。这点在使用第三方指令的时候特别有用。</li>
<li>处理不可信的数据时，不要忘记使用 <code>$sce</code> 。</li>
</ul>
<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><ul>
<li>使用小写字母开头的驼峰法命名过滤器。</li>
<li>尽可能使过滤器精简。过滤器在 <code>$digest</code> loop 中被频繁调用，过于复杂的过滤器将使得整个应用缓慢。</li>
<li>在过滤器中只做一件事。更加复杂的操作可以用 pipe 串联多个过滤器来实现。<h1 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h1></li>
</ul>
<p>这个部分包含了 AngularJS 服务组件的相关信息。下面提到的东西与定义服务的具体方式（<code>.provider</code>, <code>.factory</code>, <code>.service</code> 等）无关，除非有特别提到。</p>
<ul>
<li><p>用驼峰法命名服务。</p>
<ul>
<li><p>用首字母大写的驼峰法命名你自己的服务, 把服务写成构造函数的形式，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainCtrl</span>(<span class="params">$scope, User</span>) </span>&#123;</div><div class="line">  $scope.user = <span class="keyword">new</span> User(<span class="string">'foo'</span>, <span class="number">42</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.controller(<span class="string">'MainCtrl'</span>, MainCtrl);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.factory(<span class="string">'User'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> User;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>用首字母小写的驼峰法命名其它所有的服务。</p>
</li>
</ul>
</li>
<li><p>把业务逻辑封装到服务中，把业务逻辑抽象为服务作为你的 <code>model</code>。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Order is the 'model'</span></div><div class="line">angular.module(<span class="string">'Store'</span>)</div><div class="line">.factory(<span class="string">'Order'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.items.push (item);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> remove = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.items.indexOf(item) &gt; <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.items.splice(<span class="keyword">this</span>.items.indexOf(item), <span class="number">1</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> total = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.items.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">memo, item</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> memo + (item.qty * item.price);</div><div class="line">      &#125;, <span class="number">0</span>);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">items</span>: [],</div><div class="line">      <span class="attr">addToOrder</span>: add,</div><div class="line">      <span class="attr">removeFromOrder</span>: remove,</div><div class="line">      <span class="attr">totalPrice</span>: total</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果需要例子展现如何在控制器中使用服务，请参考 ‘Avoid writing business logic inside controllers’。</p>
</li>
<li><p>将业务逻辑封装成 <code>service</code> 而非 <code>factory</code>，这样我们可以更容易在服务间实现“经典式”继承：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//body</span></div><div class="line">&#125;</div><div class="line">Human.prototype.talk = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"I'm talking"</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Developer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//body</span></div><div class="line">&#125;</div><div class="line">Developer.prototype = <span class="built_in">Object</span>.create(Human.prototype);</div><div class="line">Developer.prototype.code = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"I'm coding"</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">myModule.service(<span class="string">'human'</span>, Human);</div><div class="line">myModule.service(<span class="string">'developer'</span>, Developer);</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>$cacheFactory</code> 进行会话级别的缓存，缓存网络请求或复杂运算的结果。</p>
</li>
<li>如果给定的服务需要配置，把配置相关代码放在 <code>config</code> 回调里，就像这样：  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'demo'</span>, [])</div><div class="line">.config(<span class="function"><span class="keyword">function</span> (<span class="params">$provide</span>) </span>&#123;</div><div class="line">  $provide.provider(<span class="string">'sample'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> foo = <span class="number">42</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">setFoo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</div><div class="line">        foo = f;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">$get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          <span class="attr">foo</span>: foo</div><div class="line">        &#125;;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> demo = angular.module(<span class="string">'demo'</span>);</div><div class="line"></div><div class="line">demo.config(<span class="function"><span class="keyword">function</span> (<span class="params">sampleProvider</span>) </span>&#123;</div><div class="line">  sampleProvider.setFoo(<span class="number">41</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* 使用 `ng-bind` 或者 `ng-cloak` 而非简单的 `&#123;&#123; &#125;&#125;` 以防止页面渲染时的闪烁。</div><div class="line">* 避免在模板中使用复杂的表达式。</div><div class="line">* 当需要动态设置 &lt;img&gt; 的 `src` 时使用 `ng-src` 而非 `src` 中嵌套 `&#123;&#123; &#125;&#125;` 的模板。</div><div class="line">* 当需要动态设置&lt;a&gt;的 `href` 时使用 `ng-href` 而非 `href` 中嵌套 `&#123;&#123; &#125;&#125;` 的模板。</div><div class="line">* 通过 `ng-style` 指令配合对象式参数和 scope 变量来动态设置元素样式，而不是将 scope 变量作为字符串通过 `&#123;&#123; &#125;&#125;` 用于 `style` 属性。</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">...</div><div class="line">$scope.divStyle = &#123;</div><div class="line">  width: <span class="number">200</span>,</div><div class="line">  position: <span class="string">'relative'</span></div><div class="line">&#125;;</div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-style</span>=<span class="string">"divStyle"</span>&gt;</span>my beautifully styled div which will work in IE<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</div></pre></td></tr></table></figure>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><ul>
<li>在视图展示之前通过 <code>resolve</code> 解决依赖。</li>
<li>不要在 <code>resolve</code> 回调函数中显式使用RESTful调用。将所有请求放在合适的服务中。这样你就可以使用缓存和遵循关注点分离原则。</li>
</ul>
<h1 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h1><ul>
<li>在较新版本的 Angular（&gt;=1.4.0）下，使用内置的 i18n 工具，在较老版本下（&lt;1.4.0），使用 <a href="https://github.com/angular-translate/angular-translate" target="_blank" rel="external"><code>angular-translate</code></a>。</li>
</ul>
<h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><ul>
<li><p>优化 digest cycle</p>
<ul>
<li>只监听必要的变量。仅在必要时显式调用 <code>$digest</code> 循环(例如：在进行实时通讯时，不要在每次接收到消息时触发 <code>$digest</code> 循环)。</li>
<li>对于那些只初始化一次并不再改变的内容, 使用一次性 watcher <a href="https://github.com/Pasvaz/bindonce" target="_blank" rel="external"><code>bindonce</code></a> （对于早期的 AngularJS）。如果是 AngularJS &gt;=1.3.0 的版本，应使用Angular内置的一次性数据绑定(One-time bindings).</li>
<li>尽可能使 <code>$watch</code> 中的运算简单。在单个 <code>$watch</code> 中进行繁杂的运算将使得整个应用变慢(由于JavaScript的单线程特性，<code>$digest</code> loop 只能在单一线程进行)</li>
<li>当监听集合时, 如果不是必要的话不要深度监听. 最好使用 <code>$watchCollection</code>, 对监听的表达式和之前表达式的值进行浅层的检测.</li>
<li>当没有变量被  <code>$timeout</code> 回调函数所影响时，在 <code>$timeout</code> 设置第三个参数为 false 来跳过 <code>$digest</code> 循环.</li>
<li>当面对超大不太改变的集合, <a href="http://blog.mgechev.com/2015/03/02/immutability-in-angularjs-immutablejs/" target="_blank" rel="external">使用 immutable data structures</a>.</li>
</ul>
</li>
</ul>
<ul>
<li>用打包、缓存html模板文件到你的主js文件中，减少网络请求, 可以用 <a href="https://github.com/karlgoldstein/grunt-html2js" target="_blank" rel="external">grunt-html2js</a> / <a href="https://github.com/fraserxu/gulp-html2js" target="_blank" rel="external">gulp-html2js</a>. 详见 <a href="http://ng-learn.org/2014/08/Populating_template_cache_with_html2js/" target="_blank" rel="external">这里</a> 和 <a href="http://slides.com/yanivefraim-1/real-world-angularjs#/34" target="_blank" rel="external">这里</a> 。 在项目有很多小html模板并可以放进主js文件中时（通过minify和gzip压缩），这个办法是很有用的。</li>
</ul>
<h1 id="加入我们"><a href="#加入我们" class="headerlink" title="加入我们"></a>加入我们</h1><p>本指南是社区驱动产生的，欢迎贡献你的一份力量。<br>比如，通过扩展测试部分或翻译为你使用的语言都是很好的方式。</p>
<h1 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h1><table>
<thead>
<tr>
<th style="text-align:center"><a href="https://github.com/mgechev" target="_blank" rel="external"><img alt="mgechev" src="https://avatars.githubusercontent.com/u/455023?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/morizotter" target="_blank" rel="external"><img alt="morizotter" src="https://avatars.githubusercontent.com/u/536954?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/pascalockert" target="_blank" rel="external"><img alt="pascalockert" src="https://avatars.githubusercontent.com/u/4253438?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/yanivefraim" target="_blank" rel="external"><img alt="yanivefraim" src="https://avatars.githubusercontent.com/u/1336186?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/ericguirbal" target="_blank" rel="external"><img alt="ericguirbal" src="https://avatars.githubusercontent.com/u/322135?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/agnislav" target="_blank" rel="external"><img alt="agnislav" src="https://avatars.githubusercontent.com/u/364255?v=3&s=117" width="117"></a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/mgechev" target="_blank" rel="external">mgechev</a></td>
<td style="text-align:center"><a href="https://github.com/morizotter" target="_blank" rel="external">morizotter</a></td>
<td style="text-align:center"><a href="https://github.com/pascalockert" target="_blank" rel="external">pascalockert</a></td>
<td style="text-align:center"><a href="https://github.com/yanivefraim" target="_blank" rel="external">yanivefraim</a></td>
<td style="text-align:center"><a href="https://github.com/ericguirbal" target="_blank" rel="external">ericguirbal</a></td>
<td style="text-align:center"><a href="https://github.com/agnislav" target="_blank" rel="external">agnislav</a></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center"><a href="https://github.com/ray7551" target="_blank" rel="external"><img alt="ray7551" src="https://avatars.githubusercontent.com/u/1812388?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/mainyaa" target="_blank" rel="external"><img alt="mainyaa" src="https://avatars.githubusercontent.com/u/800781?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/elfinxx" target="_blank" rel="external"><img alt="elfinxx" src="https://avatars.githubusercontent.com/u/4384908?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/Xuefeng-Zhu" target="_blank" rel="external"><img alt="Xuefeng-Zhu" src="https://avatars.githubusercontent.com/u/5875315?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/rubystream" target="_blank" rel="external"><img alt="rubystream" src="https://avatars.githubusercontent.com/u/3200?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/SullyP" target="_blank" rel="external"><img alt="SullyP" src="https://avatars.githubusercontent.com/u/12484363?v=3&s=117" width="117"></a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/ray7551" target="_blank" rel="external">ray7551</a></td>
<td style="text-align:center"><a href="https://github.com/mainyaa" target="_blank" rel="external">mainyaa</a></td>
<td style="text-align:center"><a href="https://github.com/elfinxx" target="_blank" rel="external">elfinxx</a></td>
<td style="text-align:center"><a href="https://github.com/Xuefeng-Zhu" target="_blank" rel="external">Xuefeng-Zhu</a></td>
<td style="text-align:center"><a href="https://github.com/rubystream" target="_blank" rel="external">rubystream</a></td>
<td style="text-align:center"><a href="https://github.com/SullyP" target="_blank" rel="external">SullyP</a></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center"><a href="https://github.com/giacomocusinato" target="_blank" rel="external"><img alt="giacomocusinato" src="https://avatars.githubusercontent.com/u/7659518?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/susieyy" target="_blank" rel="external"><img alt="susieyy" src="https://avatars.githubusercontent.com/u/62295?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/lukaszklis" target="_blank" rel="external"><img alt="lukaszklis" src="https://avatars.githubusercontent.com/u/11782?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/cironunes" target="_blank" rel="external"><img alt="cironunes" src="https://avatars.githubusercontent.com/u/469908?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/cavarzan" target="_blank" rel="external"><img alt="cavarzan" src="https://avatars.githubusercontent.com/u/3915288?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/guiltry" target="_blank" rel="external"><img alt="guiltry" src="https://avatars.githubusercontent.com/u/1484308?v=3&s=117" width="117"></a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/giacomocusinato" target="_blank" rel="external">giacomocusinato</a></td>
<td style="text-align:center"><a href="https://github.com/susieyy" target="_blank" rel="external">susieyy</a></td>
<td style="text-align:center"><a href="https://github.com/lukaszklis" target="_blank" rel="external">lukaszklis</a></td>
<td style="text-align:center"><a href="https://github.com/cironunes" target="_blank" rel="external">cironunes</a></td>
<td style="text-align:center"><a href="https://github.com/cavarzan" target="_blank" rel="external">cavarzan</a></td>
<td style="text-align:center"><a href="https://github.com/guiltry" target="_blank" rel="external">guiltry</a></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center"><a href="https://github.com/MertSKaan" target="_blank" rel="external"><img alt="MertSKaan" src="https://avatars.githubusercontent.com/u/5517637?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/mingchen" target="_blank" rel="external"><img alt="mingchen" src="https://avatars.githubusercontent.com/u/1002838?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/tornad" target="_blank" rel="external"><img alt="tornad" src="https://avatars.githubusercontent.com/u/2128499?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/jmblog" target="_blank" rel="external"><img alt="jmblog" src="https://avatars.githubusercontent.com/u/86085?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/kuzzmi" target="_blank" rel="external"><img alt="kuzzmi" src="https://avatars.githubusercontent.com/u/1727140?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/nikshulipa" target="_blank" rel="external"><img alt="nikshulipa" src="https://avatars.githubusercontent.com/u/1872256?v=3&s=117" width="117"></a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/MertSKaan" target="_blank" rel="external">MertSKaan</a></td>
<td style="text-align:center"><a href="https://github.com/mingchen" target="_blank" rel="external">mingchen</a></td>
<td style="text-align:center"><a href="https://github.com/tornad" target="_blank" rel="external">tornad</a></td>
<td style="text-align:center"><a href="https://github.com/jmblog" target="_blank" rel="external">jmblog</a></td>
<td style="text-align:center"><a href="https://github.com/kuzzmi" target="_blank" rel="external">kuzzmi</a></td>
<td style="text-align:center"><a href="https://github.com/nikshulipa" target="_blank" rel="external">nikshulipa</a></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center"><a href="https://github.com/astalker" target="_blank" rel="external"><img alt="astalker" src="https://avatars.githubusercontent.com/u/1486567?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/clbn" target="_blank" rel="external"><img alt="clbn" src="https://avatars.githubusercontent.com/u/1071933?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/atodorov" target="_blank" rel="external"><img alt="atodorov" src="https://avatars.githubusercontent.com/u/1002300?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/apetro" target="_blank" rel="external"><img alt="apetro" src="https://avatars.githubusercontent.com/u/952283?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/valgreens" target="_blank" rel="external"><img alt="valgreens" src="https://avatars.githubusercontent.com/u/903263?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/kirstein" target="_blank" rel="external"><img alt="kirstein" src="https://avatars.githubusercontent.com/u/426442?v=3&s=117" width="117"></a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/astalker" target="_blank" rel="external">astalker</a></td>
<td style="text-align:center"><a href="https://github.com/clbn" target="_blank" rel="external">clbn</a></td>
<td style="text-align:center"><a href="https://github.com/atodorov" target="_blank" rel="external">atodorov</a></td>
<td style="text-align:center"><a href="https://github.com/apetro" target="_blank" rel="external">apetro</a></td>
<td style="text-align:center"><a href="https://github.com/valgreens" target="_blank" rel="external">valgreens</a></td>
<td style="text-align:center"><a href="https://github.com/kirstein" target="_blank" rel="external">kirstein</a></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center"><a href="https://github.com/meetbryce" target="_blank" rel="external"><img alt="meetbryce" src="https://avatars.githubusercontent.com/u/1845143?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/dchest" target="_blank" rel="external"><img alt="dchest" src="https://avatars.githubusercontent.com/u/52677?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/gsamokovarov" target="_blank" rel="external"><img alt="gsamokovarov" src="https://avatars.githubusercontent.com/u/604618?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/grvcoelho" target="_blank" rel="external"><img alt="grvcoelho" src="https://avatars.githubusercontent.com/u/7416751?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/bargaorobalo" target="_blank" rel="external"><img alt="bargaorobalo" src="https://avatars.githubusercontent.com/u/993001?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/hermankan" target="_blank" rel="external"><img alt="hermankan" src="https://avatars.githubusercontent.com/u/2899106?v=3&s=117" width="117"></a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/meetbryce" target="_blank" rel="external">meetbryce</a></td>
<td style="text-align:center"><a href="https://github.com/dchest" target="_blank" rel="external">dchest</a></td>
<td style="text-align:center"><a href="https://github.com/gsamokovarov" target="_blank" rel="external">gsamokovarov</a></td>
<td style="text-align:center"><a href="https://github.com/grvcoelho" target="_blank" rel="external">grvcoelho</a></td>
<td style="text-align:center"><a href="https://github.com/bargaorobalo" target="_blank" rel="external">bargaorobalo</a></td>
<td style="text-align:center"><a href="https://github.com/hermankan" target="_blank" rel="external">hermankan</a></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center"><a href="https://github.com/jabhishek" target="_blank" rel="external"><img alt="jabhishek" src="https://avatars.githubusercontent.com/u/1830537?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/jesselpalmer" target="_blank" rel="external"><img alt="jesselpalmer" src="https://avatars.githubusercontent.com/u/682097?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/capaj" target="_blank" rel="external"><img alt="capaj" src="https://avatars.githubusercontent.com/u/1305378?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/johnnyghost" target="_blank" rel="external"><img alt="johnnyghost" src="https://avatars.githubusercontent.com/u/1117330?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/jordanyee" target="_blank" rel="external"><img alt="jordanyee" src="https://avatars.githubusercontent.com/u/3303098?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/nacyot" target="_blank" rel="external"><img alt="nacyot" src="https://avatars.githubusercontent.com/u/148919?v=3&s=117" width="117"></a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/jabhishek" target="_blank" rel="external">jabhishek</a></td>
<td style="text-align:center"><a href="https://github.com/jesselpalmer" target="_blank" rel="external">jesselpalmer</a></td>
<td style="text-align:center"><a href="https://github.com/capaj" target="_blank" rel="external">capaj</a></td>
<td style="text-align:center"><a href="https://github.com/johnnyghost" target="_blank" rel="external">johnnyghost</a></td>
<td style="text-align:center"><a href="https://github.com/jordanyee" target="_blank" rel="external">jordanyee</a></td>
<td style="text-align:center"><a href="https://github.com/nacyot" target="_blank" rel="external">nacyot</a></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center"><a href="https://github.com/mariolamacchia" target="_blank" rel="external"><img alt="mariolamacchia" src="https://avatars.githubusercontent.com/u/6282722?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/mischkl" target="_blank" rel="external"><img alt="mischkl" src="https://avatars.githubusercontent.com/u/8177979?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/dwmkerr" target="_blank" rel="external"><img alt="dwmkerr" src="https://avatars.githubusercontent.com/u/1926984?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/mo-gr" target="_blank" rel="external"><img alt="mo-gr" src="https://avatars.githubusercontent.com/u/95577?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/cryptojuice" target="_blank" rel="external"><img alt="cryptojuice" src="https://avatars.githubusercontent.com/u/458883?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/dreame4" target="_blank" rel="external"><img alt="dreame4" src="https://avatars.githubusercontent.com/u/277870?v=3&s=117" width="117"></a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/mariolamacchia" target="_blank" rel="external">mariolamacchia</a></td>
<td style="text-align:center"><a href="https://github.com/mischkl" target="_blank" rel="external">mischkl</a></td>
<td style="text-align:center"><a href="https://github.com/dwmkerr" target="_blank" rel="external">dwmkerr</a></td>
<td style="text-align:center"><a href="https://github.com/mo-gr" target="_blank" rel="external">mo-gr</a></td>
<td style="text-align:center"><a href="https://github.com/cryptojuice" target="_blank" rel="external">cryptojuice</a></td>
<td style="text-align:center"><a href="https://github.com/dreame4" target="_blank" rel="external">dreame4</a></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center"><a href="https://github.com/olov" target="_blank" rel="external"><img alt="olov" src="https://avatars.githubusercontent.com/u/19247?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/vorktanamobay" target="_blank" rel="external"><img alt="vorktanamobay" src="https://avatars.githubusercontent.com/u/2623355?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/sahat" target="_blank" rel="external"><img alt="sahat" src="https://avatars.githubusercontent.com/u/544954?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/ganchiku" target="_blank" rel="external"><img alt="ganchiku" src="https://avatars.githubusercontent.com/u/149973?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/kaneshin" target="_blank" rel="external"><img alt="kaneshin" src="https://avatars.githubusercontent.com/u/936972?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/imaimiami" target="_blank" rel="external"><img alt="imaimiami" src="https://avatars.githubusercontent.com/u/2256037?v=3&s=117" width="117"></a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/olov" target="_blank" rel="external">olov</a></td>
<td style="text-align:center"><a href="https://github.com/vorktanamobay" target="_blank" rel="external">vorktanamobay</a></td>
<td style="text-align:center"><a href="https://github.com/sahat" target="_blank" rel="external">sahat</a></td>
<td style="text-align:center"><a href="https://github.com/ganchiku" target="_blank" rel="external">ganchiku</a></td>
<td style="text-align:center"><a href="https://github.com/kaneshin" target="_blank" rel="external">kaneshin</a></td>
<td style="text-align:center"><a href="https://github.com/imaimiami" target="_blank" rel="external">imaimiami</a></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center"><a href="https://github.com/dooart" target="_blank" rel="external"><img alt="dooart" src="https://avatars.githubusercontent.com/u/371426?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/thomastuts" target="_blank" rel="external"><img alt="thomastuts" src="https://avatars.githubusercontent.com/u/1914255?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/VladimirKazan" target="_blank" rel="external"><img alt="VladimirKazan" src="https://avatars.githubusercontent.com/u/3514422?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/andela-abankole" target="_blank" rel="external"><img alt="andela-abankole" src="https://avatars.githubusercontent.com/u/11836769?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/grapswiz" target="_blank" rel="external"><img alt="grapswiz" src="https://avatars.githubusercontent.com/u/309459?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/coderhaoxin" target="_blank" rel="external"><img alt="coderhaoxin" src="https://avatars.githubusercontent.com/u/2569835?v=3&s=117" width="117"></a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/dooart" target="_blank" rel="external">dooart</a></td>
<td style="text-align:center"><a href="https://github.com/thomastuts" target="_blank" rel="external">thomastuts</a></td>
<td style="text-align:center"><a href="https://github.com/VladimirKazan" target="_blank" rel="external">VladimirKazan</a></td>
<td style="text-align:center"><a href="https://github.com/andela-abankole" target="_blank" rel="external">andela-abankole</a></td>
<td style="text-align:center"><a href="https://github.com/grapswiz" target="_blank" rel="external">grapswiz</a></td>
<td style="text-align:center"><a href="https://github.com/coderhaoxin" target="_blank" rel="external">coderhaoxin</a></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center"><a href="https://github.com/ntaoo" target="_blank" rel="external"><img alt="ntaoo" src="https://avatars.githubusercontent.com/u/511213?v=3&s=117" width="117"></a></th>
<th style="text-align:center"><a href="https://github.com/kuzmeig1" target="_blank" rel="external"><img alt="kuzmeig1" src="https://avatars.githubusercontent.com/u/8707951?v=3&s=117" width="117"></a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/ntaoo" target="_blank" rel="external">ntaoo</a></td>
<td style="text-align:center"><a href="https://github.com/kuzmeig1" target="_blank" rel="external">kuzmeig1</a></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;本风格指南的目的是展示AngularJS应用的最佳实践和风格指南。&lt;br&gt;这些最佳实践来自于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AngularJS项目源码&lt;/li&gt;
&lt;li&gt;本人阅读过的源码和文章&lt;/li&gt;
&lt;li&gt;本人的实践经历&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;说明1&lt;/strong&gt;: 这只是风格指南的草案，主要目的是通过交流以消除分歧，进而被社区广泛采纳。&lt;br&gt;&lt;strong&gt;说明2&lt;/strong&gt;: 本版本是翻译自英文原版，在遵循下面的指南之前请确认你看到的是比较新的版本。&lt;/p&gt;
&lt;p&gt;在本指南中不会包含基本的JavaScript开发指南。这些基本的指南可以在下面的列表中找到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml&quot;&gt;Google’s JavaScript style guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Developer_Guide/Coding_Style&quot;&gt;Mozilla’s JavaScript style guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/styleguide/javascript&quot;&gt;GitHub’s JavaScript style guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javascript.crockford.com/code.html&quot;&gt;Douglas Crockford’s JavaScript style guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;Airbnb JavaScript style guide&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于AngularJS开发，推荐 &lt;a href=&quot;http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml&quot;&gt;Google’s JavaScript style guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;在AngularJS的Github wiki中有一个相似的章节 &lt;a href=&quot;https://github.com/ProLoser&quot;&gt;ProLoser&lt;/a&gt;, 你可以点击&lt;a href=&quot;https://github.com/angular/angular.js/wiki&quot;&gt;这里&lt;/a&gt;查看。&lt;/p&gt;
&lt;h1 id=&quot;其它翻译版本&quot;&gt;&lt;a href=&quot;#其它翻译版本&quot; class=&quot;headerlink&quot; title=&quot;其它翻译版本&quot;&gt;&lt;/a&gt;其它翻译版本&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README.md&quot;&gt;英语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README-de-de.md&quot;&gt;德语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README-es-es.md&quot;&gt;西班牙语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README-fr-fr.md&quot;&gt;法语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README-id-id.md&quot;&gt;印度尼西亚语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README-it-it.md&quot;&gt;意大利语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README-ja-jp.md&quot;&gt;日语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README-ko-kr.md&quot;&gt;韩语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README-pl-pl.md&quot;&gt;波兰语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README-pt-br.md&quot;&gt;葡萄牙语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README-ru-ru.md&quot;&gt;俄语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README-sr.md&quot;&gt;塞尔维亚语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README-sr-lat.md&quot;&gt;塞尔维亚拉丁语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgechev/angularjs-style-guide/blob/master/README-tr-tr.md&quot;&gt;土耳其语&lt;/a&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>开发过程中遇到的一些坑</title>
    <link href="http://yoursite.com/2015/12/27/%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://yoursite.com/2015/12/27/开发过程中遇到的一些坑/</id>
    <published>2015-12-27T11:23:16.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IE9以下，诡异的空白BUG"><a href="#IE9以下，诡异的空白BUG" class="headerlink" title="IE9以下，诡异的空白BUG"></a>IE9以下，诡异的空白BUG</h3><p>简单的说，就是打开页面空白，不显示任何内容。<br>但是只要打开控制台，就能够正常打开页面，是不是很诡异？<br>这里有个诡异的问题，就是在IE9以及以下，只有打开控制台，IE才会实例化console对象。<br>所以，只要你的js代码里面，带有console对象的方法，比如console.log( data )，那么在IE10以下打开页面就会报错。<br>这个IE确实很蛋疼，但是奈何还是有很多人用IE，还是有很多的小白连打字都不利索，没办法不兼容….<br>下面是我在网上找到的代码<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> lte IE 9]&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  // Avoid `console` errors <span class="keyword">in</span> browsers that lack a console.only fo damn it IE,<span class="built_in">which</span> is bullshit,holy shit!</div><div class="line">  (<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    var method;</div><div class="line">    var noop = <span class="function"><span class="title">function</span></span> () &#123;&#125;;</div><div class="line">    var methods = [</div><div class="line">      <span class="string">'assert'</span>, <span class="string">'clear'</span>, <span class="string">'count'</span>, <span class="string">'debug'</span>, <span class="string">'dir'</span>, <span class="string">'dirxml'</span>, <span class="string">'error'</span>,</div><div class="line">      <span class="string">'exception'</span>, <span class="string">'group'</span>, <span class="string">'groupCollapsed'</span>, <span class="string">'groupEnd'</span>, <span class="string">'info'</span>, <span class="string">'log'</span>,</div><div class="line">      <span class="string">'markTimeline'</span>, <span class="string">'profile'</span>, <span class="string">'profileEnd'</span>, <span class="string">'table'</span>, <span class="string">'time'</span>, <span class="string">'timeEnd'</span>,</div><div class="line">      <span class="string">'timeStamp'</span>, <span class="string">'trace'</span>, <span class="string">'warn'</span></div><div class="line">    ];</div><div class="line">    var length = methods.length;</div><div class="line">    var console = (window.console = window.console || &#123;&#125;);</div><div class="line">    <span class="keyword">while</span> (length--) &#123;</div><div class="line">      method = methods[length];</div><div class="line">      // Only stub undefined methods.</div><div class="line">      <span class="keyword">if</span> (!console[method]) &#123;</div><div class="line">        console[method] = noop;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;());</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure></p>
<p>简单说一下原理。<br>使用IE特有的if语句(GTMD IE)判断是否是ie9<br>如果不存在console对象那么就自己初始化一个console对象，并且挂载了一堆方法，都执行一个叫noop的空函数，不至于报错。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;IE9以下，诡异的空白BUG&quot;&gt;&lt;a href=&quot;#IE9以下，诡异的空白BUG&quot; class=&quot;headerlink&quot; title=&quot;IE9以下，诡异的空白BUG&quot;&gt;&lt;/a&gt;IE9以下，诡异的空白BUG&lt;/h3&gt;&lt;p&gt;简单的说，就是打开页面空白，不显示任何内容。&lt;br&gt;但是只要打开控制台，就能够正常打开页面，是不是很诡异？&lt;br&gt;这里有个诡异的问题，就是在IE9以及以下，只有打开控制台，IE才会实例化console对象。&lt;br&gt;所以，只要你的js代码里面，带有console对象的方法，比如console.log( data )，那么在IE10以下打开页面就会报错。&lt;br&gt;这个IE确实很蛋疼，但是奈何还是有很多人用IE，还是有很多的小白连打字都不利索，没办法不兼容….&lt;br&gt;下面是我在网上找到的代码&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ionic下的配置问题</title>
    <link href="http://yoursite.com/2015/12/27/ionic%E4%B8%8B%E7%9A%84%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2015/12/27/ionic下的配置问题/</id>
    <published>2015-12-27T11:01:08.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 安装ionic</div><div class="line">$ npm install -g cordova ionic</div><div class="line">// 生成一个ionic项目</div><div class="line">$ ionic start myApp tabs</div><div class="line">// 进入到项目目录</div><div class="line">$ <span class="built_in">cd</span> myApp</div><div class="line">// 添加android平台</div><div class="line">$ ionic platform add android</div><div class="line">// 编译apk文件</div><div class="line">$ ionic build android</div></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="环境变量错误或者未设置"><a href="#环境变量错误或者未设置" class="headerlink" title="环境变量错误或者未设置"></a>环境变量错误或者未设置</h5><p>我把android SDK放在了java目录下…<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/lib/jvm/android-sdk-linux</div></pre></td></tr></table></figure></p>
<p>$ sudo gedit ./.bashrc<br>在最后加入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:/usr/lib/jvm/你的安卓SDK文件夹名/tools</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:/usr/lib/jvm/你的安卓SDK文件夹名/platform-tools</div><div class="line"><span class="built_in">export</span> ANDROID_HOME=<span class="variable">$&#123;PATH&#125;</span>:/usr/lib/jvm/你的安卓SDK文件夹名/</div></pre></td></tr></table></figure></p>
<p>然后刷新环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> <span class="built_in">source</span> ./.profile</div></pre></td></tr></table></figure></p>
<p>可以查看环境变量是否生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ env</div></pre></td></tr></table></figure></p>
<p>OK，安卓sdk的环境变量配置好了，这样ionic就可以跑起来了。</p>
<h3 id="api版本号错误"><a href="#api版本号错误" class="headerlink" title="api版本号错误"></a>api版本号错误</h3><p>ionic 会要求要22的api包，但是下载下来的确实23api<br>怎么办呢？<br>修改如下文件<br>/platforms/android/androidMainfest/xml<br>找到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-sdk android:minSdkVersion=<span class="string">"16"</span> android:targetSdkVersion=<span class="string">"22"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>还有<br>/platforms/android/build/project.properties<br>找到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">target=android-22</div></pre></td></tr></table></figure></p>
<p>把22修改成23</p>
<h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># JDK</span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-7-openjdk</div><div class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span> </div><div class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar </div><div class="line"></div><div class="line"><span class="comment"># android SDK</span></div><div class="line"><span class="built_in">export</span> ANDROID_HOME=/home/axetroy/android-sdk-linux</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$ANDROID_HOME</span>/platform-tools:<span class="variable">$PATH</span></div><div class="line"><span class="built_in">export</span> PATH=/home/axetroy/android-sdk-linux/tools:<span class="variable">$PATH</span> </div><div class="line"></div><div class="line"><span class="comment"># NDK</span></div><div class="line"><span class="built_in">export</span> ANDROID_NDK=/home/axetroy/android-ndk-r11 </div><div class="line"><span class="built_in">export</span> PATH=/home/axetroy/android-ndk-r11:<span class="variable">$PATH</span> </div><div class="line"></div><div class="line"><span class="comment"># Ant</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:~/home/axetroy/apache-ant-1.9.6/bin</div><div class="line"><span class="built_in">export</span> CLASSPATH=/home/axetroy/apache-ant-1.9.6/lib</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 安装ionic&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install -g cordova ionic&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 生成一个ionic项目&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ionic start myApp tabs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 进入到项目目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; myApp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 添加android平台&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ionic platform add android&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 编译apk文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ionic build android&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
      <category term="ionic" scheme="http://yoursite.com/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>sublime的使用和配置</title>
    <link href="http://yoursite.com/2015/12/16/sublime%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2015/12/16/sublime的使用和配置/</id>
    <published>2015-12-16T15:59:23.000Z</published>
    <updated>2016-11-18T07:50:58.467Z</updated>
    
    <content type="html"><![CDATA[<p>sublime是一款轻量级的代码编辑器，它不是IDE，却不比IDE差，关键是运行快，什么机子都能够跑起来。<br>而且插件够多，能够媲美类似webstorm这样的神器。支持多语言。<br>这里需要注意一下的是，linux下并不支持中文，在编辑器内不能输入中文，虽然有方法可以，但是有点麻烦。<br>闲话少说。<br><a id="more"></a></p>
<h3 id="1，安装sublime"><a href="#1，安装sublime" class="headerlink" title="1，安装sublime"></a>1，安装sublime</h3><p>下载地址：<a href="http://www.sublimetext.com/3" target="_blank" rel="external">sublime text3</a></p>
<h3 id="2，安装Package-Control"><a href="#2，安装Package-Control" class="headerlink" title="2，安装Package Control"></a>2，安装Package Control</h3><p>插件管理包，必备<br>下载地址：<a href="http://www.php100.com/html/it/focus/2014/1128/7935.html" target="_blank" rel="external">Package Control</a><br>或者使用控制台安装输入命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib.request,os,hashlib; h = <span class="string">'2915d1851351e5ee549c20394736b442'</span> + <span class="string">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); <span class="built_in">print</span>(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> open(os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by)</div></pre></td></tr></table></figure></p>
<h3 id="3，安装必备插件"><a href="#3，安装必备插件" class="headerlink" title="3，安装必备插件"></a>3，安装必备插件</h3><p>在sublime中打开插件包控控制台或ctrl+p输入pci搜索插件</p>
<ol>
<li>All Autocomplete<blockquote>
<p>自动不全</p>
</blockquote>
</li>
<li>AutoFileName<blockquote>
<p>自动搜索目录下的文件名，在引用文件的时候比较方便</p>
</blockquote>
</li>
<li>Emmet<blockquote>
<p>地球人都知道，对吧</p>
</blockquote>
</li>
<li>Tag<blockquote>
<p>高亮当前标签的标签头和尾</p>
</blockquote>
</li>
<li>jsFormat<blockquote>
<p>JS格式化</p>
</blockquote>
</li>
<li>color Highlighter<blockquote>
<p>代码高亮</p>
</blockquote>
</li>
<li>BracketHightlighter<blockquote>
<p>高亮标签/括号/大括号等开始和闭合</p>
</blockquote>
</li>
<li>Colorcoder<blockquote>
<p>高亮颜色代码</p>
</blockquote>
</li>
<li>CTags<blockquote>
<p>左侧栏显示标签样式</p>
</blockquote>
</li>
<li>DocBlockr<blockquote>
<p>更优雅的注释</p>
</blockquote>
</li>
<li>SublimeLinter<blockquote>
<p>用于校验js代码</p>
</blockquote>
</li>
<li>SublimeCodeIntel<blockquote>
<p>JS代码提示功能</p>
</blockquote>
</li>
<li>SublimeLinter-jshint<blockquote>
<p>基于SublimeLinter的JS插件</p>
</blockquote>
</li>
<li>angularjs<blockquote>
<p>支持angular的语法提示</p>
</blockquote>
</li>
</ol>
<h3 id="4，配置文件"><a href="#4，配置文件" class="headerlink" title="4，配置文件"></a>4，配置文件</h3><p>sublime是好用，但是就是配置起来，麻烦的很<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"auto_complete"</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">"auto_complete_delay"</span>: <span class="number">50</span>,</div><div class="line">	<span class="attr">"auto_complete_size_limit"</span>: <span class="number">4194304</span>,</div><div class="line">	<span class="attr">"auto_match_enabled"</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">"caret_style"</span>: <span class="string">"smooth"</span>,</div><div class="line">	<span class="attr">"color_scheme"</span>: <span class="string">"Packages/Colorcoder/Monokai (Colorcoded) (SL) (Colorcoded).tmTheme"</span>,</div><div class="line">	<span class="attr">"default_encoding"</span>: <span class="string">"UTF-8"</span>,</div><div class="line">	<span class="attr">"font_size"</span>: <span class="number">15</span>,</div><div class="line">	<span class="attr">"highlight_line"</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">"hot_exit"</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">"ignored_packages"</span>:</div><div class="line">	[</div><div class="line">		<span class="string">"Vintage"</span></div><div class="line">	],</div><div class="line">	<span class="attr">"match_brackets"</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">"match_selection"</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">"original_color_scheme"</span>: <span class="string">"Packages/User/SublimeLinter/Monokai (Colorcoded) (SL).tmTheme"</span>,</div><div class="line">	<span class="attr">"save_on_focus_lost"</span>: <span class="literal">false</span>,</div><div class="line">	<span class="attr">"scroll_speed"</span>: <span class="number">1.0</span>,</div><div class="line">	<span class="attr">"show_tab_close_buttons"</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">"tab_size"</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">"translate_tabs_to_spaces"</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">"tree_animation_enabled"</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">"trim_automatic_white_space"</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">"word_wrap"</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="5，配置nodejs路径"><a href="#5，配置nodejs路径" class="headerlink" title="5，配置nodejs路径"></a>5，配置nodejs路径</h3><p>window下可以愉快的玩耍，但是linux呢，由于nodejs的路径不对，导致很到依赖于nodejs的插件都不能正常工作。<br>比如js的语法校验，就是通过nodejs，所以需要配置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sublime是一款轻量级的代码编辑器，它不是IDE，却不比IDE差，关键是运行快，什么机子都能够跑起来。&lt;br&gt;而且插件够多，能够媲美类似webstorm这样的神器。支持多语言。&lt;br&gt;这里需要注意一下的是，linux下并不支持中文，在编辑器内不能输入中文，虽然有方法可以，但是有点麻烦。&lt;br&gt;闲话少说。&lt;br&gt;
    
    </summary>
    
      <category term="折腾" scheme="http://yoursite.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="sublime" scheme="http://yoursite.com/tags/sublime/"/>
    
  </entry>
  
</feed>
